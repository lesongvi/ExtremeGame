/*
=============================dRooM=============================|
----------------------------V0.01------------------------------|
Schimbat BONUS                                                 |
Acum cand de inregistrezi iti da 2 sloturi automat.            |
Schimbat LOGO!                                                 |
Adaugate mai multe culori la VIPNAMECOLORSi                    |
=============================dRooM=============================|
-----------------------------V0.02-----------------------------|                                                           |
Adaugata comanda /aclear                                       |
Modificat EstiFondator!                                        |
A fost adaugata comanda /stunt si mapping.                     |
Adaugata comanda /createbiz                                    |
Adaugata factiunea The Rifa!                                   |
Adaugata factiunea San Fierro Police Department                |
=============================dRooM=============================|
-----------------------------V0.03-----------------------------|                                                           |                                   |
Adaugata factiunea The Rifa!                                   |
Adaugata factiunea San Fierro Police Department                |
Adaugata factiunea School Instructors Los Santos               |
=============================dRooM=============================|
*/

// INCLUDE
#include <a_samp>				//1
#include <a_mysql>				//2
#include <streamer>				//3
#include <foreach>				//4
#include <sscanf2>				//5
#include <zcmd>					//6
#include <mSelection>   		//7
#include <a_zones>      		//8
#include <beaZone>      		//9
#include <timerfix>     		//10
#include <a_actor>      		//11
#include <fly>          		//12
#include <crashdetect>  		//13
#include <timestamptodate>  	//14
#include <geolocation>			//15
#include <a_http>				//16
#include <firework>				//17
#include <progress2>            //18

#pragma dynamic 84872



static gTeam[MAX_PLAYERS];

forward DeAMXI(playerid);
public DeAMXI(playerid)
{
 	AntiDeAMX();
	return 1;
}

// SQL Connection - Server
#define SQL_HOST "ForEver RPG"
#define SQL_USER "root"
#define SQL_DATA "v0"
#define SQL_PASS ""
#define SERVER_NAME ""

// SQL Connection - ForEver RPG
/*#define SQL_HOST "ForEver RPG"
#define SQL_USER "root"
#define SQL_DATA "server"
#define SQL_PASS ""
#define SERVER_NAME "ForEver RPG"*/

#define SERVER_VERSION "RPG Romania 7/8/2017 07:30"

// DEFINE
#define SetVehicleParamsCarWindows
#define GetVehicleParamsCarWindows
#define pCashx				1
#define pRP  				2
#define pBank  				3
#define pCarLicTx 			4
#define pFlyLicTx 			5
#define pBoatLicTx 			6
#define pGunLicTx 			8
#define pRobx 				9
#define pFpunishx           10
#define pConnectTimex       12
#define pPayDayx      		15
#define pPayCheckx      	16
#define pPhousekeyx      	17
#define pJailedx      		18
#define pJailTimex     		19
#define pWantedLevelx       21
#define pPhonex             22
#define pMatsx              23
#define pFishesx            24
#define pFishSkillx         25
#define pRobSkillx          26
#define pLevelx             27
#define pPremiumAccountx    28
#define pPbiskeyx           29
#define pPnumberx           30
#define pRegx               31
#define pRentedx            37
#define pCrimesx            38
#define pCrime1x            40
#define pCrime2x            41
#define pCrime3x            42
#define pVictimx            43
#define pAccusedx           44
#define pEmailx             45
#define pWarnsx             52
#define pLanguagex          53
#define pPremiumPointsx     54
#define pTreasurePointsx    55
#define pFWorksx            61
#define pVirtualPDx         62
#define pGlassesx           63
#define pHatsx           	64
#define pTruckSkillx        65
#define pTruckTimesx        66
#define pTruckRemx          67
#define pFarmSkillx         68
#define pFarmTimesx         69
#define pFarmRemx           70
#define pFishTimesx         71
#define pFishRemx           72
#define pSpawnChangex      	73
#define pRobTimesx          74
#define pRobRemx            75
#define pCreditsx           76
#define pFactionJoinx       77
#define pNMutedx            78
#define pHiddenColorx       80
#define pGiftTimex          81
#define pFightStylex        82
#define pHUD1x              83
#define pHUD2x              84
#define pHUD3x              85
#define pGasCanx			86
#define pCarLicSuspendx		87
#define pGunLicSuspendx		88
#define pPizzaSkillx		89
#define pPizzaTimesx		90
#define pPizzaRemx			91
#define pArmsSkillx			92
#define pArmsTimesx			93
#define pArmsRemx			94
#define pBusSkillx			95
#define pBusTimesx			96
#define pBusRemx			97
#define pColorsx			98
#define pSessionx			99
#define pPaydayONx			100
#define pGarbageSkillx		101
#define pGarbageTimesx		102
#define pGarbageRemx		103
#define pQuest1x			104
#define pQuest2x			105
#define pQuestProgress1x	106
#define pQuestProgress2x	107
#define pQuestNeed1x		108
#define pQuestNeed2x		109
#define pQuestCarx			110
#define pOnlineTimeTodayx	111
#define pReportMutedx		112

// CARS
#define cLocationxx 			1
#define cLocationyx 			2
#define cLocationzx 			3
#define cAnglex 				4
#define cModelx                 5
#define cColorOnex              6
#define cColorTwox              7
#define cOwnerx                 8
#define cValuex                 9
#define cLicensex               10
#define cDescriptionx           11
#define cLockx                  12
#define cTimedx                 13
#define cInscarpricex           14
#define cInsurancecarx          15
#define cKMx                    16
#define cOwnedx                 17
#define cSellx                  18
#define cModsx                  19
#define cPaintJx                20
#define cDaysx                  21
#define cHPx					22
#define cDamage1x				23
#define cDamage2x				24
#define cDamage3x				25
#define cDamage4x				26
#define cGasx					27
#define cLocationx2x 			28
#define cLocationy2x 			29
#define cLocationz2x 			30
#define cAngle2x 				31
#define cKMLastx				32
#define cCarVIPx				33
#define cBlockx					34
#define cCarVipColorsx			35

//SBUSSINES
#define EX_SPLITLENGTH 113
#define EX_SPLITLENGTHH 128
#define MAX_GROUPS (15)
#define MAX_CLANS (100)
#define MAX_ATMS (25)
#define MAX_SVARS (15)
#define MAX_PERSONAL_CARS (101)
#define MAX_PERSONAL_VEHICLES (20)
#define AdminOnly "Nu esti autorizat sa folosesti aceasta comanda!"
#define SetPlayerHoldingObject(%1,%2,%3,%4,%5,%6,%7,%8,%9) SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define StopPlayerHoldingObject(%1) RemovePlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define IsPlayerHoldingObject(%1) IsPlayerAttachedObjectSlotUsed(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.8)
#define                 hidePlayerDialog(%0)                    ShowPlayerDialog(%0, -1, 0, " ", " ", "", "")
//#define 				strcpy(%0,%1,%2) 						strcat((%0[0] = '\0', %0), %1, %2) // strcpy(dest, source, length)
#define GetVehicleSeats(%0) (GetVehicleModelSeats(GetVehicleModel(%0)))
forward _Kick ( playerid ); public _Kick ( playerid ) return Kick ( playerid );
#define KickEx(%1) SetTimerEx ( "_Kick", 500, false, "i", %1 )
#define function%0(%1) forward%0(%1); public%0(%1)
#define ATTACK_TYPE_PLAYERID 1
#define ATTACK_TYPE_IP 2
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

// DIALOG ID
#define DIALOG_LOGIN1 				1
#define DIALOG_LOGIN2 				2
#define DIALOG_LOGIN3 				3
#define DIALOG_PLATE 				4
#define DIALOG_LOCATIONS 			5
#define Dialog_24 					7
#define DIALOG_RADIO 				8
#define DIALOG_PREMIUM 				9
#define Dialog_Gym 					10
#define DIALOG_HQS 					17
#define DIALOG_MEMBERS 				32
#define DIALOG_CARDAMAGE 			43
#define DIALOG_WANTEDON 			54
#define DIALOG_TRANSFER 			59
#define DIALOG_JOBS 				71
#define DIALOG_CARBUY 				72
#define DIALOG_CARBUY2 				74
#define DIALOG_CARBUY3 				75
#define DIALOG_CARBUY4 				76
#define DIALOG_PENDEVENT 			86
#define DIALOG_NEWPASS 			    132
#define DIALOG_REGISTER 			454
#define DIALOG_REGISTER2 			456
#define DIALOG_REGISTER3 			474
#define DIALOG_REGISTER4 			477
#define DIALOG_REGISTER5 			479
#define DIALOG_REGISTER6 			480
#define DIALOG_CARSELL 				483
#define DIALOG_SHOP                 489
#define DIALOG_SHOP2                490
#define DIALOG_TRESHOP              999
#define DIALOG_CHANGENAME           491
#define DIALOG_CLAN                 492
#define DIALOG_CLAN_TAG             493
#define DIALOG_CLANMEMBERS          494
#define DIALOG_FACTIONS            	495
#define DIALOG_FACTIONS2           	496
#define DIALOG_CARBUY8              497
#define DIALOG_HELP	                498
#define DIALOG_HELP2                499
#define DIALOG_LOCATIONSLS          500
#define DIALOG_LOCATIONSLV          501
#define DIALOG_LOCATIONSMODS        502
#define DIALOG_GMX                  503
#define DIALOG_TRUCKER1             504
#define DIALOG_TRUCKER2             505
#define DIALOG_TRUCKER3             506
#define DIALOG_TRUCKER4             507
#define DIALOG_CANCELJOB            508
#define DIALOG_TRUCKSELECT          509
#define DIALOG_TRUCKSELECTX         510
#define DIALOG_TRUCKSELECT2         511
#define DIALOG_TRUCKSELECT3         512
#define DIALOG_TRUCKSELECT4         513
#define DIALOG_SELLFISH             514
#define DIALOG_CARBUY5              515
#define DIALOG_NOSTOCK              516
#define DIALOG_LOCATIONS247LS       517
#define DIALOG_LOCATIONSBARLS       518
#define DIALOG_LOCATIONSBANKLS      519
#define DIALOG_LOCATIONSGYMLS       520
#define DIALOG_LOCATIONSBURGERLS    521
#define DIALOG_LOCATIONSPIZZALS     522
#define DIALOG_LOCATIONSGSLS        523
#define DIALOG_LOCATIONSCNNLS       524
#define DIALOG_LOCATIONSGASLS       525
#define DIALOG_LOCATIONSPNSLS       526
#define DIALOG_LOCATIONS247LV       527
#define DIALOG_LOCATIONSBANKLV      528
#define DIALOG_LOCATIONSBURGERLV    529
#define DIALOG_LOCATIONSGSLV        530
#define DIALOG_LOCATIONSCNNLV       531
#define DIALOG_LOCATIONSGASLV       532
#define DIALOG_LOCATIONSPNSLV       533
#define Dialog_gunshop              545
#define DIALOG_IPHONE               546
#define DIALOG_TREIPHONE            547
#define DIALOG_JOBULETES            552
#define DIALOG_REPORT1              553
#define DIALOG_REPORT2              554
#define DIALOG_REPORTDM1            555
#define DIALOG_REPORTDM2            556
#define DIALOG_REPORTDM3            557
#define DIALOG_REPORTCH1            558
#define DIALOG_REPORTCH2            559
#define DIALOG_REPORTCH3            560
#define DIALOG_REPORT_AP1           561
#define DIALOG_COLORID              562
#define DIALOG_REPORT_DEGEABA       563
#define DIALOG_VEHINFO              566
#define DIALOG_INSURANCEBUY         567
#define DIALOG_INSURANCEBUY2        568
#define DIALOG_NOPP                 569
#define DIALOG_GIFTBOX              570
#define DIALOG_HUD                  571
#define DIALOG_HUD1                 572
#define DIALOG_HUD2                 573
#define DIALOG_HUD3                 574
#define DIALOG_HUD4                 999
#define DIALOG_PAINTBALL            575
#define DIALOG_PAINTBALLMAP         576
#define DIALOG_PAINTBALLWEAPON      577
#define DIALOG_LASTS                578
#define DIALOG_UNINVITE             579
#define DIALOG_EMAILS               580
#define DIALOG_EMAILS2              581
#define DIALOG_CLANMEMBERS2			582
#define DIALOG_CLANSETTINGS			583
#define DIALOG_CLANMEMBERS3			584
#define DIALOG_CLAN_RANK			585
#define DIALOG_CLAN_WARNS			586
#define DIALOG_CLAN_CHANGERANK		587
#define DIALOG_CLAN_COLOR			588
#define DIALOG_CLAN_CHANGERANK2		589
#define DIALOG_FRIENDS				590
#define DIALOG_ADDFRIENDS			591
#define DIALOG_FRIENDS2				592
#define DIALOG_QUITGROUP			593
#define DIALOG_QUITCLAN				594
#define DIALOG_SEXSHOP				597
#define DIALOG_BAR					598
#define DIALOG_LOCATIONSCLOTHINGLS	599
#define DIALOG_LOCATIONSRENTLS		600
#define DIALOG_LOCATIONSSEXLS		601
#define DIALOG_LOCATIONSMODLS		602
#define DIALOG_LOCATIONSCLOTHINGLV	603
#define DIALOG_LOCATIONSCLUCKINLV	604
#define DIALOG_LOCATIONSCASINOLV	605
#define DIALOG_LOCATIONSSEXLV		606
#define DIALOG_LOCATIONSMODLV		607
#define DIALOG_FWARN				608
#define DIALOG_FUNWARN				609
#define DIALOG_FPUNINVITE			610
#define DIALOG_NOUNINVITE			611
#define DIALOG_MEMBERS2				612
#define DIALOG_MEMBERS3				613
#define DIALOG_SAVEVEHICLE			614
#define DIALOG_VEHSPAWN				615
#define DIALOG_VEHSPAWNCAR			616
#define DIALOG_CARBUY9				617
#define DIALOG_UNSTUCK				618
#define DIALOG_SELLCARTO			619
#define DIALOG_TRADECAR				620
#define DIALOG_CLEARSALARIES		621
#define DIALOG_UNLOADTRASH			622
#define DIALOG_CHANGENAME2			623
#define DIALOG_RACE1				624
#define DIALOG_RACEVOTECOL			625
#define DIALOG_RACEVOTEMAP			626
#define DIALOG_RACEVOTECAR			627
#define DIALOG_RACEVOTEMAP2			628
#define DIALOG_RACEVOTECAR2			629
#define DIALOG_CLOTHES				630
#define DIALOG_CUSTOMRADIO			632
#define DIALOG_UPDATERR				633
#define DIALOG_VCREATE				634
#define DIALOG_TRADEHOUSEHOUSE		635
#define DIALOG_TRADEHOUSECAR		636
#define DIALOG_GETUNINVITE			637
#define DIALOG_SELLHIDDEN			638
#define DIALOG_HOWNER				639
#define DIALOG_BOWNER				640
#define DIALOG_VOWNER				641
#define DIALOG_SELLCARX				642
#define DIALOG_SELLCARX2			643
#define DIALOG_VREMOVE				644
#define DIALOG_BUYSLOT				645
#define DIALOG_BUYPREMIUM			646
#define DIALOG_BUYCLEARFP			647
#define DIALOG_BUYCLEARWARNS		648
#define DIALOG_BUYCLEARKM			649
#define DIALOG_BUYHIDDEN			650
#define DIALOG_BUYFIREWORKS			651
#define DIALOG_BUYMONEY1			652
#define DIALOG_BUYMONEY2			653
#define DIALOG_BUYMONEY3			654
#define DIALOG_BUYMONEY4			655
#define DIALOG_TREBUYMONEY1         6552
#define DIALOG_BUYCLEARFH			656
#define DIALOG_BUYWALKIE			657
#define DIALOG_TREWALKIE            6422
#define DIALOG_VIPWHEELS			658
#define DIALOG_BUYVIPCAR			659
#define DIALOG_BUYCLEARKM2			660
#define DIALOG_RENTSPAWN            6643
#define DIALOG_INCHIRIERECONT       4223
#define DIALOG_BID 					661
#define DIALOG_RAMHQ				662
#define DIALOG_RAMHOUSE				663
#define DIALOG_RAMBIZ				664
#define DIALOG_ATM_MENU				665
#define DIALOG_ATM_WITHDRAW			666
#define DIALOG_ATM_BALANCE			667
#define DIALOG_NAMECHANGES			668
#define DIALOG_SELLHOUSETOSTATE		669
#define DIALOG_SELLBIZTOSTATE		670
#define DIALOG_HUPGRADE				671
#define DIALOG_HUPGRADE1			672
#define DIALOG_HUPGRADE2			673
#define DIALOG_HMUSIC				674
#define DIALOG_CUSTOMRADIOH			675
#define DIALOG_DELETEVEHICLE		676
#define DIALOG_GO 					677
#define DIALOG_GO1   				678
#define DIALOG_GO2 					679
#define DIALOG_GO3 					680
#define DIALOG_GO4 					681
#define DIALOG_GO5 					682
#define DIALOG_GO6 					683
#define DIALOG_HIDDEN 				684
#define DIALOG_HIDDEN1				685
#define DIALOG_VIPNAMECOLOR			686
#define DIALOG_BJ_ACTION            687
#define DIALOG_BJ_BET               689
#define pReferralx                  690
// name tag
//QUEST OBJECTS
#define MAX_EVOBJECTS 51
#define ACTIVE_QUEST 0
// clan
#define DIALOG_CHOOSECLANNAME		595
#define DIALOG_CHOOSECLANTAG		596


// WALKIE TALKIE
#define MAX_CHANNEL 1000

#define MAX_STRING 2500
#define CHECKPOINT_NONE 0
#define CHECKPOINT_LOCATE 53
#define KEY_AIM (128)
#define KEY_HANDBRAKE (128)
#define SCM SendClientMessage
#define SPECIAL_ACTION_PISSING 68

//native WP_Hash(buffer[], len, const str[]);
native gpci(playerid, serial[], len);

// COLOR
#define COLOR_ADMCHAT 		0xFFC266AA
#define COLOR_CHATBUBBLE    0xFFFFFFCC
#define COLOR_ERROR    		0xFF0000FF
#define COLOR_CHAT1 		0xF9B7FFAA
#define COLOR_CHAT2 		0xE6A9ECAA
#define COLOR_CHAT3 		0xC38EC7AA
#define COLOR_CHAT4 		0xD2B9D3AA
#define COLOR_CHAT5 		0xC6AEC7AA
#define COLOR_AFK 			0x565656FF
#define COLOR_GRAD1 		0xB4B5B7FF
#define COLOR_GRAD2 		0xBFC0C2FF
#define COLOR_GRAD3 		0xCBCCCEFF
#define COLOR_GRAD4 		0xD8D8D8FF
#define COLOR_GRAD5 		0xE3E3E3FF
#define COLOR_DARKNICERED 	0x9D000096
#define COLOR_RED1  		0x80404000
#define COLOR_GRAD6 		0xF0F0F0FF
#define COLOR_GREY 			0xCECECEFF
#define COLOR_GREEN 		0x33AA33AA
#define COLOR_GREEN2		0x4DAD2BAA
#define COLOR_ADV 			0x00FF00AA
#define COLOR_SYSTEM 		0xEFEFF7AA
#define COLOR_RED 			0xAA3333AA
#define COLOR_REDX			0x940000AA
#define COLOR_LIGHTRED 		0xFF6347AA
#define COLOR_LIGHTRED2		0xCC4661FF
#define COLOR_NEWS 			0xFFA500AA
#define COLOR_LIGHTBLUE 	0x33CCFFAA
#define COLOR_LOGIN 		0x00D269FF
#define COLOR_LIGHTGREEN 	0x8BBA2EAA
#define COLOR_ORANGE 		0xFFA500AA
#define COLOR_ADMIN 		0xC56D30FF
#define COLOR_YELLOW 		0xFFFF00AA
#define COLOR_YELLOW2 		0xF5DEB3AA
#define COLOR_ADMCOMMANDS	0xFFC000FF
#define COLOR_DCHAT 		0xFFD7004A
#define COLOR_WHITE 		0xFFFFFFFF
#define COLOR_WHITE1 		0xFFFFFF00
#define COLOR_FADE1 		0xE6E6E6E6
#define COLOR_FADE2 		0xC8C8C8C8
#define COLOR_FADE3 		0xAAAAAAAA
#define COLOR_FADE4 		0x8C8C8C8C
#define COLOR_FADE5 		0x6E6E6E6E
#define COLOR_PURPLE 		0xC2A2DAAA
#define COLOR_DBLUE 		0x2641FEAA
#define TEAM_GREEN_COLOR 	0xFFFFFFAA
#define TEAM_BLUE_COLOR 	0x8D8DFF00
#define TEAM_GROVE_COLOR 	0x00D900C8
#define TEAM_AZTECAS_COLOR 	0x01FCFFC8
#define COLOR_TUTORIAL 		0x4A9500FF
#define COLOR_GROVE 		0x00E800FF
#define COLOR_ALLDEPT 		0xff353535
#define COLOR_RADIOCHAT		0x8D8DFFFF
#define COLOR_BID			0x4B4BE9FF
#define CRISTIAN 			0x0DC013AA
#define COLOR_MAYOR         0xB3F856FF
#define COLOR_TEAL          0x67AAB1FF
#define COLOR_GENANNOUNCE   0xA9C4E4FF
#define COLOR_GENANNOUNCE2  0xFF8080FF
#define COLOR_ROB  			0x0C8176FF
#define COLOR_BLUE      	0x211CDEC8
#define COLOR_DARKPINK      0xE7AAA5A5
#define COLOR_NEWBIE        0x9DFE8080
#define COLOR_LIGHTGREEN2   0x00FF00CC
#define COLOR_RED2          0xFF0000FF
#define COLOR_REPORT		0xA60404FF
#define COLOR_MEMBER		0x00B8E6FF
#define COLOR_LEADER		0x009ACDFF
#define COLOR_CLAN			0xFFCC99FF
#define COLOR_LIGHTGREEN3	0xCEF0ACFF
#define COLOR_WT			0xCAE2F0AA
#define COLOR_GREEN3		0x6DB067AA
#define COLOR_CYAN			0x5EB1B1FF
#define COLOR_BLUE2			0x3E63B8FF
#define COLOR_COOLBLUE		0x0064FFAA
#define COLOR_COOLRED		0xAB0000FF
#define COLOR_SMS 			0xD5EAFFFF

// TEAM
#define TEAM_CYAN 	1
#define TEAM_BLUE 	2
#define TEAM_GREEN 	3
#define TEAM_ORANGE 4
#define TEAM_COR 	5
#define TEAM_BAR 	6
#define TEAM_TAT 	7
#define TEAM_CUN 	8
#define TEAM_STR 	9
#define TEAM_HIT 	10
#define TEAM_ADMIN 	11
// Aplicati
 //STERGEREA APLICATIEI
#define DIALOG_AIAPLICATIE  821
//STRING GLOBAL.
new MGLOBAL[3200];
// rent
//APLICATII DIN JOC.
#define DIALOG_APLICATIE 723
#define DIALOG_APLICATII 722
new raspunsfactiune9[MAX_PLAYERS][1000];
new raspunsfactiune8[MAX_PLAYERS][1000];
new raspunsfactiune7[MAX_PLAYERS][1000];
new raspunsfactiune6[MAX_PLAYERS][1000];
new raspunsfactiune5[MAX_PLAYERS][1000];
new raspunsfactiune4[MAX_PLAYERS][1000];
new raspunsfactiune3[MAX_PLAYERS][1000];
new raspunsfactiune2[MAX_PLAYERS][1000];
new raspunsfactiune[MAX_PLAYERS][1000];
new appfactiune[MAX_PLAYERS];
#define DIALOG_APLICAQ11    721
#define DIALOG_APLICAQ10    720
#define DIALOG_APLICAQ9 719
#define DIALOG_APLICAQ8 718
#define DIALOG_APLICAQ7 717
#define DIALOG_APLICAQ6 716
#define DIALOG_APLICAQ5 715
#define DIALOG_APLICAQ4 714
#define DIALOG_APLICAQ3 713
#define DIALOG_APLICAQ2 712
#define DIALOG_APLICAQ 711
#define DIALOG_APLICA 710

// FORWARD
forward cUpdate(playerid, id, type);
forward SetVipText(playerid, idcar);
forward InsertCar(playerid,stockid,premium);
forward IsAnOwnableCar(vehicleid);
forward Update(playerid, type);
forward OnPropTextdrawUpdate(update, h);
forward MySQLCheckAccount(sqlplayersname[]);
forward MySQLCheckClan(sqlclanname[]);
forward MySQLCheckSpeed(vidd);
forward Vendingg(playerid);
forward Vendingg2(playerid);
forward EstiFondator(playerid);
forward NumberUsed(playerid);
forward Reportul(playerid);
forward VaildFishPlace(playerid);
forward lspdbarclose();
forward lvpdbarclose();
forward nggateclose();
forward lspdgateclose();
forward lvpdgateclose();
forward lvpdgateclose2();
forward jailclosegate();
forward FinishQuest1(playerid, questid);
forward FinishQuest2(playerid, questid);
forward Truckerr1(playerid);
forward Truckerr2(playerid);
forward Truckerr3(playerid);
forward Truckerr4(playerid);
forward AfterSpray(playerid);
forward SetPlayerPosExx(playerid, Float:x, Float:y, Float:z, interior, virtual);
forward DrugEffectGone(playerid);
forward IsAGarbageTruck(carid);
forward EmailDelivered(playerid, response_code, data[]);
forward IsABus(carid);
forward IsAPizza(carid);
forward RACtime(playerid);
forward SendMSG(playerid);
forward PlaceAD(playerid);
forward LoadDynamicFactions();
forward LoadClanInfo();
forward Float:GetDistance(playerid, Float:x, Float:y);
forward UnFreezeStation(playerid);
forward ChatMessage(Float:radi, playerid, string[]);
forward SS(playerid, color, ro[], en[]);
forward BlockedMessage(playerid);
forward Fisher(playerid);
forward Fisher2(playerid);
forward SetFarmer(playerid);
forward BusDriverCheck(playerid);
forward restartTimer();
forward RespawnTruck(playerid);
forward TowAgain(playerid);
forward WeatherChange();
forward RobFunc(playerid);
forward Factionlog(factionid,psql,lsql,action[]);
forward Log(playerid, string[], where[]);
forward LoadBizz();
forward LoadTurfs();
forward LoadProperty();
forward LoadStock();
forward LoadUsers();
forward LoadAtms();
forward LoadSVars();
forward LoadQuest();
forward OnPlayerGoto(playerid, interior, virtual);
forward LoadCar(playerid);
forward LoadCarID(playerid);
forward ModPVehicle(playerid, idcar);
forward DespawnCar(playerid);
forward LoadSystems();
forward GetDaysFromTimestamp(time);
forward IsAtGasStation(playerid);
forward IsAtBank(playerid);
forward SetPlayerSpawn(playerid);
forward SetupPlayerForClassSelection(playerid);
forward SetPlayerTeamFromClass(playerid,classid);
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
forward CrimInRange(Float:radi, playerid,copid);
forward ABroadCast(color,const string[],level);
forward HLChat(color,const string[]);
forward LeaderChat(color,const string[]);
forward IsPlayerInTurf(playerid, turfid);
forward GetPlayerTurf(playerid);
forward IsPlayerInArea(playerid, Float:minx, Float:miny, Float:maxx, Float:maxy);
forward SetPlayerUnjail();
forward DeleteDeathMessage(playerid);
forward PrepareRoundPaintBall1();
forward PrepareRoundPaintBall2();
forward PrepareRoundPaintBall3();
forward PrepareRoundPaintBall4();
forward PaintBallRun1();
forward PaintBallRun2();
forward PaintBallRun3();
forward PaintBallRun4();
forward PrepareRoundRace1();
forward PrepareRoundRace2();
forward RaceRun1();
forward RaceRun2();
forward SavePlayerData();
forward TenSecondsTimer();
forward IsAChiliad(carid);
forward IsATruck(carid);
forward IsAFarmer(carid);
forward IsAnAmbulance(carid);
forward IsANewsCar(carid);
forward IsARentCar(carid);
forward IsAnTaxi(carid);
forward IsABike(carid);
forward IsACopCar(carid);
forward IsAFbiCar(carid);
forward IsALVPDCar(carid);
forward IsANgCar(carid);
forward IsInHQ(playerid);
forward Copcar2(carid);
forward IsAPlane(carid);
forward IsABoat(carid);
forward IsACop(playerid);
forward IsAMember(playerid);
forward TwoSecondsTimer();
forward Float:GetDistanceBetweenPlayers(p1,p2);
forward AttachTrailerrr(playerid);
forward SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num);
forward SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi);
forward SetPlayerCriminal(playerid,declare,reason[]);
forward ShowStats(playerid,targetid);
forward SetPlayerToTeamColor(playerid);
forward GameModeExitFunc();
forward LoadAllDynamicObjects();
forward LoadAllObjects();
forward LoadTextdraws();
forward LoadVehicles();
forward GameModeInitExitFunc();
forward split(const strsrc[], strdest[][], delimiter);
forward OnPlayerLogin(playerid,password[]);
forward OnPlayerRegister(playerid, password[]);
forward OOCNews(color,string[]);
forward OOCNews2(color,const string[]);
forward SendFamilyMessage(family, color, string[]);
forward SendTeamMessage(member, color, string[]);
forward SendRadioMessage(member, color, string[]);
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
forward ProxDetectorS(Float:radi, playerid, targetid);
forward GetWeekDay();
forward ClearCrime(playerid);
forward CarCheck();
forward CarTow(carid);
forward CheckGas();
forward Checkvehinfo();
forward Fillup(playerid);
forward SyncTime();
forward SyncUp();
forward Production();
forward TwoMinutesTimer();
forward PayDay();
forward HouseLevel(playerid);
forward tdhide2(playerid);
forward tdhide(playerid);
forward CHouseLevel(houseid);
forward FixHour(hour);
forward Livrarepizza1(playerid);
forward Livrarepizza2(playerid);
forward CountDownCheck3(playerid);
forward CountDownCheck2(playerid);
forward CountDownCheck1(playerid);
forward CountDownCheckGo(playerid);
forward CountDownFinalize();
forward payala2(playerid);
forward LocateCar(car,playerid);
forward PlayerMapIconPaint(playerid);
forward BlackJackUpdateTable(playerid);
forward BlackJackFunction(playerid, card);
forward OnSecondTimer();


new IsBot[MAX_PLAYERS];
// infotd
new PlayerBar:HudProgress[MAX_PLAYERS][3];
// blackjack -------------------------------------------
new BDeal[MAX_PLAYERS],
	BDealerScore[MAX_PLAYERS],
	BlackJackPlayerScore[MAX_PLAYERS],
	BDealerCards[MAX_PLAYERS],
	BlackJackPlayerCards[MAX_PLAYERS],
	BDealerCard[MAX_PLAYERS][5],
	BlackJackPlayerCard[MAX_PLAYERS][5],
	CloseBMatch[MAX_PLAYERS],
	BJMatch[MAX_PLAYERS],
	BJDeactivated[MAX_PLAYERS];


new PlayerText:BJusebox1[MAX_PLAYERS],
	PlayerText:BJusebox2[MAX_PLAYERS],
	PlayerText:BJusebox3[MAX_PLAYERS],
	PlayerText:BJDealerText[MAX_PLAYERS],
	PlayerText:BJPlayerText[MAX_PLAYERS],
	PlayerText:BJBlackJackText[MAX_PLAYERS],
	PlayerText:BJScoreText[MAX_PLAYERS],
	PlayerText:BJDealText[MAX_PLAYERS],
	PlayerText:BJDealAmountText[MAX_PLAYERS],
	PlayerText:BJBalanceText[MAX_PLAYERS],
	PlayerText:BJBalanceAmountText[MAX_PLAYERS],
	PlayerText:BJDealButtonText[MAX_PLAYERS],
	PlayerText:BJEnterBetText[MAX_PLAYERS],
	PlayerText:BJDealerScoreText[MAX_PLAYERS],
	PlayerText:BJPlayerScoreText[MAX_PLAYERS],
	PlayerText:BJOpenActionText[MAX_PLAYERS],
	PlayerText:BJDealerCard1[MAX_PLAYERS],
	PlayerText:BJDealerCard2[MAX_PLAYERS],
	PlayerText:BJDealerCard3[MAX_PLAYERS],
	PlayerText:BJDealerCard4[MAX_PLAYERS],
	PlayerText:BJDealerCard5[MAX_PLAYERS],
	PlayerText:BJPlayerCard1[MAX_PLAYERS],
	PlayerText:BJPlayerCard2[MAX_PLAYERS],
	PlayerText:BJPlayerCard3[MAX_PLAYERS],
	PlayerText:BJPlayerCard4[MAX_PLAYERS],
	PlayerText:BJPlayerCard5[MAX_PLAYERS],
	PlayerText:BJWinText[MAX_PLAYERS];

// -------------------------------------------------
new housestring[200][256];
new barstring[100][256];

new sarmale[MAX_PLAYERS];
new buscar1;

// VARIABILE
new SQL = -1;
new GiftBoxActiv = 0,
	Float:DMInfo[MAX_PLAYERS][3],
//	giftboxobject,
	TogVIP[MAX_PLAYERS],
	QuestWait[MAX_PLAYERS],
	TogBid[MAX_PLAYERS],
	HealTimer[MAX_PLAYERS],
	Listening[MAX_PLAYERS],
	TaxiCall[MAX_PLAYERS],
	TaxiAccepted[MAX_PLAYERS],
	TaxiFare[MAX_PLAYERS],
	TaxiTimer[MAX_PLAYERS],
	TaxiMoneySpent[MAX_PLAYERS],
	TaxiMoneyEarned[MAX_PLAYERS],
	TaxiDriver[MAX_PLAYERS],
	CanSpectate[MAX_PLAYERS],
	BreachID[MAX_PLAYERS],
	SellHouseID[MAX_PLAYERS],
	ShowDMG[MAX_PLAYERS],
	vObject[MAX_VEHICLES],
	BlockVehUse[MAX_PLAYERS],
	FireworkTimer[MAX_PLAYERS],
	LiveQuestion[MAX_PLAYERS][128],
	TimerQuestion[MAX_PLAYERS],
	ChangeClothes[MAX_PLAYERS],
	SkinSelect[MAX_PLAYERS],
	HaveNewbie[MAX_PLAYERS],
	HelperTimer[MAX_PLAYERS],
	timernewbie[MAX_PLAYERS],
	WantedFarmer[MAX_PLAYERS],
	FactionSpec[MAX_PLAYERS],
	HOwnerID[MAX_PLAYERS],
	HOwnerName[MAX_PLAYERS][30],
	Text3D:giftbox3DText,
	RestartTimer,
	WantName[MAX_PLAYERS][30],
	TypeName[MAX_PLAYERS],
	JobCar[MAX_PLAYERS],
	LastMove[MAX_PLAYERS],
	OnlineTime[MAX_PLAYERS],
	OnlineTimeToday[MAX_PLAYERS],
	DrugTimer[MAX_PLAYERS],
	GarbageInCar[MAX_VEHICLES],
	GarbageCollected[MAX_PLAYERS],
	CarCollisions[MAX_PLAYERS],
	DeathP[MAX_PLAYERS],
	LastText[MAX_PLAYERS][128],
	LastTextTime[MAX_PLAYERS],
	TextCount[MAX_PLAYERS],
	examcar[MAX_PLAYERS],
	pizzacar[MAX_PLAYERS],
	workdeja[MAX_PLAYERS],
	LastBiz[MAX_PLAYERS],
	LastBizTime[MAX_PLAYERS],
	countdown,
	LastPlayer[MAX_PLAYERS],
	Selectat[1000][MAX_PLAYERS],
	XCheckpoints[MAX_PLAYERS],
	LastCheckpoint[MAX_PLAYERS],
	Selected[MAX_PLAYERS][101],
	Selected2[MAX_PLAYERS],
	AdvMSG[MAX_PLAYERS][256],
	AdvPlayer[MAX_PLAYERS],
	AdvTimer[MAX_PLAYERS],
	CarPlate[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][30],
	CarVipName[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][20],
	CarMod[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][17],
	CarOwner[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][50],
	SelectedCar[MAX_PLAYERS],
	SellTradeID[MAX_PLAYERS],
	SellTradePrice[MAX_PLAYERS],
	SellTradeTimer[MAX_PLAYERS],
	SellHiddenID[MAX_PLAYERS],
	SellHiddenPrice[MAX_PLAYERS],
	Float:old_veh_pos[MAX_VEHICLES + 1][3],
	Float:LastPos[MAX_PLAYERS][3],
	restruck[MAX_PLAYERS],
	viddd[MAX_PLAYERS],
	Trucker[MAX_PLAYERS],
	Trucker2[MAX_PLAYERS],
	Trucker3[MAX_PLAYERS],
	Trucker4[MAX_PLAYERS],
	TruckID[MAX_PLAYERS],
	RepairTime[MAX_PLAYERS],
	pnsmoney[MAX_PLAYERS],
	AreFaina[MAX_PLAYERS],
	CarJacker[MAX_PLAYERS],
	BuyCar[MAX_PLAYERS],
	IsPlayerAFK[MAX_PLAYERS],
	actor1,
	actor2,
	actor3,
	object,
	iGMXTick,
	iGMXTimer,
	IsABid = 0,
	TopBidder = -1,
	BidAmount = 1000000,
	BidAmount2 = 1,
	IsAtBid = 0,
	BidTime = 0,
	WantToBid[MAX_PLAYERS],
	WantToBid2[MAX_PLAYERS],
	RentCar[MAX_PLAYERS],
	RentTime[MAX_PLAYERS],
	RentMoneySpent[MAX_PLAYERS],
	waitwar[15],
	SelFac[MAX_PLAYERS],
	EnterInModShop[MAX_PLAYERS],
	PlayerEnterTime[MAX_PLAYERS],
	Undercover[MAX_PLAYERS],
	shotTime[MAX_PLAYERS],
	shot[MAX_PLAYERS],
	WantedName[MAX_PLAYERS][256],
	WantedReason[MAX_PLAYERS],
	WantedTimer[MAX_PLAYERS],
	Float:QuestCarKM[MAX_PLAYERS],
	EmailId[MAX_PLAYERS][11],
	taxim[MAX_PLAYERS],
	Float:evex,
	Float:evey,
	Float:evez,
	eventenabled,
	pickup_event,
	virtuallevent,
	interiorevent,
	fight2[MAX_PLAYERS],
	reporttext[MAX_PLAYERS][128],
	reportcheater[MAX_PLAYERS] = -1,
	reportreason[MAX_PLAYERS] = 0,
	playerreported[MAX_PLAYERS] = -1,
	dmvp,
	dsp,
	gslsenter1,
	gslsenter2,
	gslsenter3,
	gslsenter4,
	eventobjects=0,
	objectevent[11],
	eventprizeobj[11],
	toglc[MAX_PLAYERS],
	togarrests[MAX_PLAYERS],
	toge[MAX_PLAYERS],
	raceoff[MAX_PLAYERS],
	Carspawn[MAX_VEHICLES],
	Destroycar = 0,
	masini = 0,
	stockss = 0,
	svarss = 0,
	clanss = 0,
	factionss = 0,
	questobjectss = 0,
	Diceid[MAX_PLAYERS],
	Dicem[MAX_PLAYERS],
	wantedlost[MAX_PLAYERS],
	CheckBus[MAX_PLAYERS],
	BusCheckk[MAX_PLAYERS],
	JobStep[MAX_PLAYERS],
	CreateVEH[MAX_PLAYERS],
	CreateVEHID[MAX_PLAYERS],
	timerbus[MAX_PLAYERS],
	busc[MAX_PLAYERS],
	Float:Health[MAX_PLAYERS],
	Float:Armour[MAX_PLAYERS],
	SpamCheck[MAX_PLAYERS],
	antirem[MAX_PLAYERS],
	login[MAX_PLAYERS],
	Clanidoff[MAX_PLAYERS],
	kickafk = 0,
	QuestionsOn = 0,
	tazer[MAX_PLAYERS],
	PlayerHandsup[MAX_PLAYERS],
	curatj[MAX_PLAYERS],
	XDeaths[MAX_PLAYERS],
	LastDeath[MAX_PLAYERS],
	playerdeath[MAX_PLAYERS],
	drug[MAX_PLAYERS],
	bizid[MAX_PLAYERS],
	bizprice[MAX_PLAYERS],
	bizoffer[MAX_PLAYERS],
	bool:WeaponData[MAX_PLAYERS][13],
	TimerAtuPlayer[MAX_PLAYERS],
	Cash[MAX_PLAYERS],
	bussines = 0,
	housess = 0,
	turfsss = 0,
	Vehicless = 0,
	togfind[MAX_PLAYERS],
	TowAcc[MAX_PLAYERS],
	JackAcc[MAX_PLAYERS],
	Sunglasses[MAX_PLAYERS],
	Hatss[MAX_PLAYERS],
	HaveHelmet[MAX_PLAYERS],
	vendi[MAX_PLAYERS],
	vendi2[MAX_PLAYERS],
	Vending[MAX_PLAYERS],
	FactionOffer[MAX_PLAYERS],
	hudactivated[MAX_PLAYERS],
	ReportTime[MAX_PLAYERS],
	timerreport[MAX_PLAYERS],
	Fishing[MAX_PLAYERS],
	FishTimer[MAX_PLAYERS],
	FishTimerr[MAX_PLAYERS],
	TipPeste[MAX_PLAYERS],
	farmerc[MAX_PLAYERS],
	farmertime[MAX_PLAYERS],
	timerfarmm[MAX_PLAYERS],
	timersoo[MAX_PLAYERS],
	soexpire[MAX_PLAYERS],
	BusinessRob[MAX_PLAYERS],
	RobTime[MAX_PLAYERS],
	RobTimer[MAX_PLAYERS],
	//timerfree1[MAX_PLAYERS],
	somatee[MAX_PLAYERS],
	somated[MAX_PLAYERS],
	somatename[MAX_PLAYERS][30],
	pizzaj[MAX_PLAYERS],
	pizzatime[MAX_PLAYERS],
	pizzaprize[MAX_PLAYERS],
	failpizza[MAX_PLAYERS],
	PizzaCP[MAX_PLAYERS],
	TrashID[MAX_PLAYERS],
	GarbageTimer[MAX_PLAYERS],
	deathdeletetime[MAX_PLAYERS],
	targetfind[MAX_PLAYERS],
	InHouse[MAX_PLAYERS],
	InBussines[MAX_PLAYERS],
	InHQ[MAX_PLAYERS],
	cased[MAX_PLAYERS],
	caser[MAX_PLAYERS],
	adminacceptedhelp[MAX_PLAYERS] = -1,
	WTChannel[MAX_PLAYERS],
	arrestcop[MAX_PLAYERS] = -1,
	eventorganizer[MAX_PLAYERS],
	requestingevent[MAX_PLAYERS],
	requestingtitle[MAX_PLAYERS][50],
	requestinglocation[MAX_PLAYERS][50],
	requestingdescription[MAX_PLAYERS][100],
	requestingprize[MAX_PLAYERS],
	requestingtime[MAX_PLAYERS][50],
	payala[MAX_PLAYERS],
	activeevent,
	eventtitle[50],
	eventlocation[50],
	eventdescription[100],
	eventprize,
	eventtime[50],
	gatelspd,
	gatelvpd,
	gatelvpd2,
	gateng,
	lspdbar,
	lvpdbar,
	UsingDrugs[MAX_PLAYERS],
	Float:PlayerPos[MAX_PLAYERS][6],
	Float:PlayerPosii[MAX_PLAYERS][6],
	vehEngine[MAX_VEHICLES],
	HelperDuty[MAX_PLAYERS],
	AdminDuty[MAX_PLAYERS],
	vehRadio[MAX_VEHICLES],
	customRadio[MAX_VEHICLES][128],
	gPlayerUsingLoopingAnim[MAX_PLAYERS],
	gPlayerAnimLibsPreloaded[MAX_PLAYERS],
	FreeOffer[MAX_PLAYERS],
	FreePlayer[MAX_PLAYERS],
	FreePrice[MAX_PLAYERS],
	FreeExpire[MAX_PLAYERS],
	MatsOffer[MAX_PLAYERS],
	MatsPrice[MAX_PLAYERS],
	MatsAmmo[MAX_PLAYERS],
	SellgunOffer[MAX_PLAYERS],
	SellgunPrice[MAX_PLAYERS],
	SellgunMats[MAX_PLAYERS],
	SellgunAmmo[MAX_PLAYERS],
	SellgunID[MAX_PLAYERS],
	HouseID[MAX_PLAYERS],
	HouseOffer[MAX_PLAYERS],
	HousePrice[MAX_PLAYERS],
	ofercar[MAX_PLAYERS],
	hiddenoffer[MAX_PLAYERS],
	hiddenprice[MAX_PLAYERS],
	carprice[MAX_PLAYERS],
	primesccar[MAX_PLAYERS],
	cartype[MAX_PLAYERS],
	CarID[MAX_PLAYERS],
	tradeofferer[MAX_PLAYERS],
	tradediff[MAX_PLAYERS],
	tradecars[MAX_PLAYERS],
	tradecars2[MAX_PLAYERS],
	tradetype[MAX_PLAYERS],
	tradetype2[MAX_PLAYERS],
	flymode[MAX_PLAYERS],
	Text3D:areap,
	areape = 0,
	Text3D:DeadScris[MAX_PLAYERS],
	Text3D:dynamicevent3DText,
	Float:posxxx[MAX_PLAYERS],
	Float:posyyy[MAX_PLAYERS],
	Float:poszzz[MAX_PLAYERS],
	RegistrationStep[MAX_PLAYERS],
	TakingLesson[MAX_PLAYERS],
	UsedFind[MAX_PLAYERS],
	NoFuel[MAX_PLAYERS],
	MatsHolding[MAX_PLAYERS],
	GotoMats[MAX_PLAYERS],
	PlayerStoned[MAX_PLAYERS],
	ConsumingMoney[MAX_PLAYERS],
	TutTime[MAX_PLAYERS],
	PlayerDrunk[MAX_PLAYERS],
	PlayerDrunkTime[MAX_PLAYERS],
	LiveOffer[MAX_PLAYERS],
	TalkingLive[MAX_PLAYERS],
	PlacedNews[MAX_PLAYERS],
	SelectChar[MAX_PLAYERS],
	SelectCharID[MAX_PLAYERS],
	SelectCharPlace[MAX_PLAYERS],
	ChosenSkin[MAX_PLAYERS],
	CurrentMoney[MAX_PLAYERS],
	CP[MAX_PLAYERS],
	RaceCP[MAX_PLAYERS],
	RacePos[MAX_PLAYERS],
	ARacePos[MAX_PLAYERS],
	MoneyMessage[MAX_PLAYERS],
	Tax, // TAX
	TaxValue,
	PaintBallWinnerKills[5],
	PaintWinner[5],
	MedicCall[MAX_PLAYERS],
	MedicAccepted[MAX_PLAYERS],
	JobDuty[MAX_PLAYERS],
	MedicTime[MAX_PLAYERS],
	NeedMedicTime[MAX_PLAYERS],
	TicketOffer[MAX_PLAYERS], // TICKET
	TicketMoney[MAX_PLAYERS],
	GotHit[MAX_PLAYERS], // HITMAN
	GoChase[MAX_PLAYERS],
	GetChased[MAX_PLAYERS],
	PlayerTied[MAX_PLAYERS], // CUFF - TIE - TAZER
	PlayerCuffed[MAX_PLAYERS],
	PlayerCuffed2[MAX_PLAYERS],
	PlayerCuffedTime[MAX_PLAYERS],
	PlayerTazeTime[MAX_PLAYERS],
	RepairOffer[MAX_PLAYERS], // REPAIR
	RepairPrice[MAX_PLAYERS],
	RefillOffer[MAX_PLAYERS],
	RefillPrice[MAX_PLAYERS],
	RepairCar[MAX_PLAYERS],
	TransferOffer[MAX_PLAYERS], // TRANSFER MONEY
	TransferMoney[MAX_PLAYERS],
	DrugOffer[MAX_PLAYERS], // DRUGS
	DrugPrice[MAX_PLAYERS],
	DrugGram[MAX_PLAYERS],
	WantedPoints[MAX_PLAYERS], // COPS
	OnDuty[MAX_PLAYERS],
	gPlayerCheckpointStatus[MAX_PLAYERS], //
	gPlayerLogged[MAX_PLAYERS],
	gPlayerLogTries[MAX_PLAYERS],
	gPlayerSpawned[MAX_PLAYERS],
	gLastCar[MAX_PLAYERS],
 	gNews[MAX_PLAYERS],
	gFam[MAX_PLAYERS],
	BigEar[MAX_PLAYERS],
	Spectate[MAX_PLAYERS],
	SpectateState[MAX_PLAYERS],
	CellTime[MAX_PLAYERS],
	HireCar[MAX_PLAYERS],
	SafeTime[MAX_PLAYERS],
	HidePM[MAX_PLAYERS],
	PhoneOnline[MAX_PLAYERS],
	PhoneOnlineCalls[MAX_PLAYERS],
	TurfsDisp[MAX_PLAYERS],
	FirstSpawn[MAX_PLAYERS],
	Mobile[MAX_PLAYERS],
	CallCost[MAX_PLAYERS],
	gPlayerAccount[MAX_PLAYERS],
	gLastDriver[600],
	racep[2], //Playeris --- Race
	racem[2], //Map
	racec[2], //Car
	racecol[2], //Collision
	racet[2], //Timp ramas
	racers[2], //Timp restart
	racevotem[2][5], //Vote map
	racevotec[2][20], //Vote car
	racevotecol[2][2], //Vote collisions
	carvoted[2], //Car voted or not
	rmapvoted[2], //Map voted or not
	rcarid[2][20], //Car IDS
	paintp[5], //Players  --- Paintball
	paintm[5], //Map
	paintg[3], //Arma
	paintt[5], //Timp ramas
	paintrs[5], //Timp restart
	paintvoteg[3][3],//Vote gun
	paintvotem[5][5], //Vote map
	mapvoted[5], //Map voted or not
	gunvoted[3], //GUN voted or not
	gCarLock[600];

// TEXT
new PlayerText:TimeLeftWar1[MAX_PLAYERS],
	PlayerText:TextJos[MAX_PLAYERS],
	PlayerText:logo[MAX_PLAYERS],
	PlayerText:PaintBallText[MAX_PLAYERS],
	PlayerText:FindTXD[MAX_PLAYERS][2],
	Text:Time,
	Text:Date,
	PlayerText:Bus1[MAX_PLAYERS],
	PlayerText:Bus2[MAX_PLAYERS],
	PlayerText:TextDrawSpec[MAX_PLAYERS][6],
	PlayerText:Fuell[MAX_PLAYERS],
	PlayerText:Speedd[MAX_PLAYERS],
	PlayerText:Odom[MAX_PLAYERS],
	PlayerText:carlocked[MAX_PLAYERS],
	PlayerText:farmbox[MAX_PLAYERS],
	PlayerText:farmjob[MAX_PLAYERS],
	PlayerText:farmspeed[MAX_PLAYERS],
	PlayerText:farmwanted[MAX_PLAYERS],
	PlayerText:farmtime[MAX_PLAYERS],
	PlayerText:Jailtime[MAX_PLAYERS],
	PlayerText:Tutorial[MAX_PLAYERS],
	PlayerText:Step[MAX_PLAYERS],
	PlayerText:BusJob[MAX_PLAYERS],
	PlayerText:BusCheck[MAX_PLAYERS],
	PlayerText:DMVexam[MAX_PLAYERS],
	PlayerText:DMVcheck[MAX_PLAYERS],
	PlayerText:WantedText[MAX_PLAYERS],
	PlayerText:UndercoverText[MAX_PLAYERS],
	PlayerText:Reportss[MAX_PLAYERS],
	PlayerText:RaceTD[MAX_PLAYERS][5],
	PlayerText:HUD[5][MAX_PLAYERS],
	PlayerText:RentCarText[MAX_PLAYERS],
	PlayerText:QuestText[MAX_PLAYERS];
// sdas
new Text:ArataKM;
new Asteapta[MAX_PLAYERS];
//new PlayerText:NepTD[MAX_PLAYERS];
new PlayerText:NepTDD[MAX_PLAYERS];
new PlayerText:TextLogo[MAX_PLAYERS];
new Text:AdminHUD;
// sistem treasure
new Timer;
new Obiect;
new	Winner;
new Number;
//new	Number;
new	Minutes;
// VARIABILE GLOBALE
new Float:rx,
	Float:ry,
	Float:rz,
	//Timer[2],
	objstore[128],
	cbjstore[128],
	ghour = 0,
	gminute = 0,
	gsecond = 0,
	dollah = 100000,
	realtime = 1,
	wotime = 15,
	levelcost = 28000,
	realchat = 1,
	timeshift = -1,
	shifthour,
	synctimer,
	unjailtimer,
	preparerace1,
	preparerace2,
	preparepaint1,
	preparepaint2,
	preparepaint3,
	preparepaint4,
	paintrun1,
	paintrun2,
	paintrun3,
	paintrun4,
	racerun1,
	racerun2,
	wantedicatimer,
	twosecondstimer,
	productiontimer,
	twominutestimer,
	savedatatimer,
	weathertimer,
	checkgastimer,
	checkvehinfotimer,
	cartimer,
	levelexp = 4,
	pickups,
	Float:TeleportDest[MAX_PLAYERS][3],
	Float:TelePos[MAX_PLAYERS][6];

// SUNGLASSES
new Float:SkinOffSet[312][7] = {
{0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968 }, // - 0
{0.100766, 0.028630, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 1
{0.083712, 0.033132, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 2
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 3
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 4
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 5
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 6
{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968 }, // - 7
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 8
{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968 },  // - 9
{0.072317, 0.032179, -0.002934, 86.843269, 84.196006, 4.236968 }, // - 10
{0.072317, 0.035465, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 11
{0.072317, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 12
{0.076569, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 13
{0.091310, 0.049169, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 14
{0.073734, 0.006292, -0.002755, 86.843269, 84.196006, 4.236968 }, // - 15
{0.092845, 0.040331, 0.000183, 86.843269, 82.864280, 4.236968 },  // - 16
{0.088241, 0.030184, -0.000157, 86.843269, 82.864280, 4.236968 }, // - 17
{0.061677, 0.029596, -0.007398, 86.843269, 82.864280, 4.236968 }, // - 18
{0.079911, 0.029596, -0.002934, 86.843269, 82.864280, 4.236968 }, // - 19
{0.095079, 0.029596, -0.001718, 85.261871, 86.296562, 4.236968 }, // - 20
{0.093728, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 21
{0.079585, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 22
{0.090786, 0.041737, -0.005263, 85.261871, 81.636192, 4.236968 }, // - 23
{0.085247, 0.026941, -0.000317, 85.261871, 81.636192, 4.236968 }, // - 24
{0.081646, 0.031448, -0.001113, 89.393653, 81.665985, 4.236968 }, // - 25
{0.083700, 0.033814, -0.001960, 86.436462, 81.665985, 4.236968 }, // - 26
{0.092498, 0.037321, -0.001960, 86.436462, 85.568023, 4.236968 }, // - 27
{0.097068, 0.041360, -0.007881, 86.771400, 85.568023, 4.236968 }, // - 28
{0.083456, 0.050595, 0.001011, 86.771400, 77.201461, 4.236968 },  // - 29
{0.076983, 0.047168, -0.006161, 86.771400, 74.329719, 4.236968 }, // - 30
{0.083798, 0.042184, -0.001869, 86.771400, 83.181861, 4.236968 }, // - 31
{0.053021, -0.000587, -0.001869, 86.771400, 66.859710, 4.236968 },// - 32
{0.034386, 0.013324, -0.001869, 86.771400, 80.314460, 4.236968 }, // - 33
{0.104669, 0.037365, -0.001403, 86.771400, 87.178382, 4.236968 }, // - 34
{0.102659, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 35
{0.107638, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 36
{0.107638, 0.035879, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 37
{0.107638, 0.041106, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 38
{0.080326, 0.035634, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 39
{0.080326, 0.027371, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 40
{0.084617, 0.039613, -0.001620, 86.771400, 93.020492, 4.236968 }, // - 41
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 42
{0.040075, 0.025445, -0.000974, 86.771400, 92.964149, 4.236968 }, // - 43
{0.077369, 0.028469, -0.000974, 86.771400, 78.435791, 4.236968 }, // - 44
{0.064145, 0.028684, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 45
{0.091993, 0.056559, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 46
{0.084582, 0.051277, -0.005034, 86.771400, 84.762802, 4.236968 }, // - 47
{0.092182, 0.042095, -0.003533, 86.771400, 84.762802, 4.236968 }, // - 48
{0.086866, 0.032203, -0.001021, 86.771400, 84.762802, 4.236968 }, // - 49
{0.099350, 0.009422, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 50
{0.099350, 0.030598, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 51
{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 52
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 53
{0.079123, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 54
{0.063159, 0.029641, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 55
{0.070293, 0.029641, -0.000570, 86.771400, 84.762802, 4.236968 }, // - 56
{0.111305, 0.045368, -0.000570, 86.771400, 84.458084, 4.236968 }, // - 57
{0.084901, 0.020965, -0.000570, 86.771400, 79.542411, 4.236968 }, // - 58
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 59
{0.090164, 0.044163, -0.004754, 86.771400, 79.542411, 4.236968 }, // - 60
{0.087151, 0.041447, -0.000885, 90.928329, 89.598678, 0.000000 }, // - 61
{0.094350, 0.041447, 0.005717, 90.928329, 89.598678, 0.000000 },  // - 62
{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 63
{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 64
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 65
{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 66
{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 67
{0.087317, 0.039646, -0.004032, 90.928329, 89.598678, 0.000000 }, // - 68
{0.074873, 0.039646, -0.003072, 90.928329, 89.598678, 0.000000 }, // - 69
{0.090391, 0.042364, 0.005494, 90.928329, 89.598678, 0.000000 },  // - 70
{0.090391, 0.022298, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 71
{0.090391, 0.039580, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 72
{0.090391, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 73
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 74
{0.083113, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 75
{0.072957, 0.028956, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 76
{0.069398, 0.039981, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 77
{0.105738, 0.010001, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 78
{0.078264, 0.019668, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 79
{0.087377, 0.022096, -0.001993, 90.928329, 79.030494, 0.000000 }, // - 80
{0.087377, 0.022096, -0.001635, 90.928329, 79.030494, 0.000000 }, // - 81
{0.100623, 0.043063, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 82
{0.092528, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 83
{0.102086, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 84
{0.081954, 0.041672, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 85
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 86
{0.077010, 0.046925, -0.003438, 90.928329, 91.590301, 0.000000 }, // - 87
{0.069952, 0.042635, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 88
{0.093827, 0.019258, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 89
{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 90
{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 91
{0.066464, 0.038135, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 92
{0.066464, 0.038135, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 93
{0.048124, 0.010598, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 94
{0.084997, 0.006773, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 95
{0.100076, 0.026633, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 96
{0.061686, 0.027537, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 97
{0.098318, 0.053993, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 98
{0.098318, 0.033702, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 99
{0.086149, 0.042526, -0.001690, 90.928329, 77.587478, 0.000000 }, // - 100
{0.081864, 0.030555, -0.001690, 90.928329, 78.145759, 0.000000 }, // - 101
{0.081864, 0.047914, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 102
{0.089607, 0.036717, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 103
{0.079655, 0.042021, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 104
{0.091779, 0.037620, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 105
{0.084179, 0.035251, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 106
{0.089387, 0.040297, -0.006006, 90.928329, 78.145759, 0.000000 }, // - 107
{0.081930, 0.030756, 0.001523, 90.928329, 78.145759, 0.000000 },  // - 108
{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 109
{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 110
{0.106601, 0.028021, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 111
{0.096335, 0.015873, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 112
{0.105827, 0.046620, -0.001395, 90.928329, 90.217376, 0.000000 }, // - 113
{0.097520, 0.044296, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 114
{0.097408, 0.043470, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 115
{0.092588, 0.049832, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 116
{0.081444, 0.037602, -0.003125, 90.928329, 90.217376, 0.000000 }, // - 117
{0.078678, 0.037602, -0.001816, 90.928329, 90.217376, 0.000000 }, // - 118
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 119
{0.089214, 0.029291, -0.000784, 90.928329, 84.624763, 0.000000 }, // - 120
{0.086825, 0.033424, -0.000784, 90.928329, 77.233818, 0.000000 }, // - 121
{0.082869, 0.030783, -0.000950, 90.928329, 77.233818, 0.000000 }, // - 122
{0.096117, 0.048957, -0.006245, 90.928329, 87.579650, 0.000000 }, // - 123
{0.103663, 0.040022, 0.000449, 90.928329, 87.579650, 0.000000 },  // - 124
{0.099326, 0.031202, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 125
{0.099326, 0.031132, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 126
{0.099326, 0.039279, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 127
{0.099326, 0.047422, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 128
{0.088817, 0.021210, 0.000730, 90.928329, 87.579650, 0.000000 },  // - 129
{0.025784, 0.028323, 0.000730, 90.928329, 59.394767, 0.000000 },  // - 130
{0.068455, 0.031841, -0.004470, 90.928329, 79.979003, 0.000000 }, // - 131
{0.012930, 0.008392, -0.004470, 90.928329, 72.129173, 0.000000 }, // - 132
{0.102457, 0.032260, -0.003338, 90.928329, 84.534217, 0.000000 }, // - 133
{0.085976, 0.014956, -0.003338, 90.928329, 80.308830, 0.000000 }, // - 134
{0.071574, 0.028186, -0.001588, 90.928329, 80.308830, 0.000000 }, // - 135
{0.085219, 0.016666, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 136
{0.065114, 0.009318, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 137
{0.066890, 0.040024, -0.000738, 90.928329, 87.341934, 0.000000 }, // - 138
{0.072037, 0.036141, -0.000702, 90.928329, 87.341934, 0.000000 }, // - 139
{0.069108, 0.042194, -0.000436, 90.928329, 87.341934, 0.000000 }, // - 140
{0.058717, 0.043547, -0.000436, 90.928329, 87.209770, 0.000000 }, // - 141
{0.104196, 0.039601, -0.005481, 90.928329, 87.209770, 0.000000 }, // - 142
{0.090929, 0.045881, -0.012780, 90.928329, 87.209770, 0.000000 }, // - 143
{0.098291, 0.042464, -0.006952, 90.928329, 83.081665, 0.000000 }, // - 144
{0.080087, 0.030122, 0.000606, 90.928329, 83.081665, 0.000000 },  // - 145
{0.093500, 0.030690, -0.001545, 90.928329, 83.081665, 0.000000 }, // - 146
{0.079566, 0.020138, 0.004838, 90.928329, 73.715591, 0.000000 },  // - 147
{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 148
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 149
{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 150
{0.083426, 0.032359, -0.005717, 90.928329, 88.295433, 0.000000 }, // - 151
{0.072349, 0.019623, -0.000747, 90.928329, 82.624351, 0.000000 }, // - 152
{0.075065, 0.015351, 0.006545, 90.928329, 71.041442, 0.000000 },  // - 153
{0.062227, 0.029731, -0.004938, 90.928329, 84.602760, 0.000000 }, // - 154
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 155
{0.079936, 0.049000, -0.000304, 90.928329, 82.926010, 0.000000 }, // - 156
{0.067550, 0.035686, -0.000017, 90.928329, 82.926010, 0.000000 }, // - 157
{0.090676, 0.039383, -0.001726, 90.928329, 88.667900, 0.000000 }, // - 158
{0.090676, 0.039383, -0.003532, 90.928329, 88.667900, 0.000000 }, // - 159
{0.098662, 0.017441, -0.001589, 90.928329, 88.667900, 0.000000 }, // - 160
{0.105388, 0.038409, 0.003155, 90.928329, 88.667900, 0.000000 },  // - 161
{0.097415, 0.036904, -0.000525, 90.928329, 88.667900, 0.000000 }, // - 162
{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 163
{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 164
{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 165
{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 166
{0.095996, 0.038787, 0.000484, 90.928329, 84.315711, 0.000000 },  // - 167
{0.089094, 0.034001, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 168
{0.075700, 0.028082, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 169
{0.093751, 0.041968, -0.005545, 90.928329, 84.315711, 0.000000 }, // - 170
{0.090124, 0.031055, -0.000505, 90.928329, 84.315711, 0.000000 }, // - 171
{0.066033, 0.032915, -0.002713, 90.928329, 84.315711, 0.000000 }, // - 172
{0.088287, 0.045350, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 173
{0.087750, 0.042129, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 174
{0.092384, 0.039294, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 175
{0.097661, 0.039065, -0.006344, 90.928329, 80.736480, 0.000000 }, // - 176
{0.097114, 0.039641, -0.006692, 90.928329, 80.736480, 0.000000 }, // - 177
{0.069354, 0.039641, -0.000474, 90.928329, 80.736480, 0.000000 }, // - 178
{0.091414, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 179
{0.094914, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 180
{0.117232, 0.033217, -0.001099, 90.928329, 82.396362, 0.000000 }, // - 181
{0.082569, 0.032748, -0.003248, 90.928329, 87.394371, 0.000000 }, // - 182
{0.095527, 0.027237, -0.001960, 90.928329, 86.443649, 0.000000 }, // - 183
{0.095527, 0.040994, -0.006878, 90.928329, 86.443649, 0.000000 }, // - 184
{0.085663, 0.030601, -0.002345, 90.928329, 81.496513, 0.000000 }, // - 185
{0.085663, 0.030601, -0.001015, 90.928329, 81.496513, 0.000000 }, // - 186
{0.076527, 0.027211, 0.008500, 90.928329, 74.401092, 0.000000 },  // - 187
{0.096669, 0.032578, 0.001662, 90.928329, 83.502502, 0.000000 },  // - 188
{0.098753, 0.032129, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 189
{0.092821, 0.035572, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 190
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 191
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 192
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 193
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 194
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 195
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 196
{0.100630, 0.020568, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 197
{0.077905, 0.028523, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 198
{0.099095, 0.022463, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 199
{0.103182, 0.031106, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 200
{0.078426, 0.038546, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 201
{0.101092, 0.035797, -0.002997, 89.675476, 82.081153, 0.000000 }, // - 202
{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 203
{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 204
{0.092969, 0.027782, -0.002959, 89.675476, 84.463294, 0.000000 }, // - 205
{0.105109, 0.036128, -0.000471, 89.675476, 84.463294, 0.000000 }, // - 206
{0.066892, 0.024410, -0.002792, 89.675476, 84.463294, 0.000000 }, // - 207
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 208
{0.084046, 0.013608, -0.002792, 89.675476, 81.667831, 0.000000 }, // - 209
{0.084046, 0.013608, -0.001034, 89.675476, 81.667831, 0.000000 }, // - 210
{0.067610, 0.033777, -0.001034, 89.675476, 85.214485, 0.000000 }, // - 211
{0.094159, 0.020717, 0.000715, 89.675476, 85.214485, 0.000000 },  // - 212
{0.098744, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 213
{0.068755, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 214
{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 215
{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 216
{0.095765, 0.030034, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 217
{0.085486, 0.039427, -0.003311, 89.675476, 85.214485, 0.000000 }, // - 218
{0.068874, 0.027850, -0.001021, 89.675476, 85.214485, 0.000000 }, // - 219
{0.052931, 0.050390, -0.002062, 89.675476, 88.113647, 0.000000 }, // - 220
{0.094479, 0.034432, 0.000875, 89.675476, 83.572830, 0.000000 },  // - 221
{0.094479, 0.034432, -0.000596, 89.675476, 83.572830, 0.000000 }, // - 222
{0.094479, 0.062073, -0.003098, 89.675476, 83.572830, 0.000000 }, // - 223
{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 224
{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 225
{0.072095, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 226
{0.110619, 0.043037, -0.001466, 89.675476, 86.927627, 0.000000 }, // - 227
{0.099446, 0.050772, -0.001466, 89.675476, 85.103805, 0.000000 }, // - 228
{0.078635, 0.023680, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 229
{0.043357, 0.028726, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 230
{0.092488, 0.049972, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 231
{0.092488, 0.016739, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 232
{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 233
{0.082745, 0.004209, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 234
{0.057909, 0.021331, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 235
{0.079016, 0.021331, -0.000419, 89.675476, 77.678733, 0.000000 }, // - 236
{0.074572, 0.021331, -0.000419, 89.675476, 84.527442, 0.000000 }, // - 237
{0.074572, 0.038346, -0.001500, 89.675476, 84.527442, 0.000000 }, // - 238
{0.111645, 0.011549, 0.006237, 89.675476, 84.527442, 0.000000 },  // - 239
{0.090766, 0.044221, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 240
{0.069491, 0.049021, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 241
{0.059706, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 242
{0.065242, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 243
{0.065242, 0.051077, -0.001103, 89.675476, 89.461883, 0.000000 }, // - 244
{0.082393, 0.038233, 0.000410, 89.675476, 89.461883, 0.000000 },  // - 245
{0.079338, 0.044859, -0.002535, 89.675476, 89.461883, 0.000000 }, // - 246
{0.101566, 0.037019, 0.000750, 89.675476, 83.514060, 0.000000 },  // - 247
{0.091887, 0.047776, -0.000040, 89.675476, 83.514060, 0.000000 }, // - 248
{0.089745, 0.044044, 0.004071, 89.675476, 83.514060, 0.000000 },  // - 249
{0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000 }, // - 250
{0.072282, 0.044044, -0.001468, 89.675476, 90.444763, 0.000000 }, // - 251
{0.095764, 0.034224, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 252
{0.087454, 0.026208, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 253
{0.099198, 0.037362, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 254
{0.070845, 0.019943, 0.003505, 89.675476, 73.529716, 0.000000 },  // - 255
{0.065373, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 256
{0.070077, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 257
{0.089536, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 258
{0.084822, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 259
{0.093009, 0.031491, -0.001568, 89.675476, 83.002151, 0.000000 }, // - 260
{0.093009, 0.015023, -0.001477, 89.675476, 83.002151, 0.000000 }, // - 261
{0.076580, 0.039782, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 262
{0.076580, 0.028967, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 263
{0.075424, 0.043059, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 264
{0.089655, 0.021726, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 265
{0.096792, 0.014114, -0.003062, 89.675476, 85.166038, 0.000000 }, // - 266
{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 267
{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 268
{0.102252, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 269
{0.102252, 0.024989, 0.000529, 89.675476, 85.166038, 0.000000 },  // - 270
{0.096134, 0.025462, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 271
{0.099226, 0.032663, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 272
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 273
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 274
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 275
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 276
{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 277
{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 278
{0.087652, 0.059379, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 279
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 280
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 281
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 282
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 283
{0.090877, 0.053674, 0.009879, 89.675476, 88.636062, 0.000000 },  // - 284
{0.104320, 0.041487, 0.008021, 89.675476, 88.636062, 0.000000 },  // - 285
{0.087062, 0.021779, -0.003307, 89.675476, 88.636062, 0.000000 }, // - 286
{0.073173, 0.048856, 0.005337, 89.675476, 92.561180, 0.000000 },  // - 287
{0.090294, 0.027592, -0.003497, 89.675476, 92.561180, 0.000000 }, // - 288
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 289
{0.086562, 0.042698, -0.000612, 89.675476, 92.561180, 0.000000 }, // - 290
{0.096768, 0.039233, -0.000612, 89.675476, 83.550270, 0.000000 }, // - 291
{0.079939, 0.020731, -0.005162, 89.675476, 83.550270, 0.000000 }, // - 292
{0.097107, 0.027826, -0.005162, 89.675476, 88.505996, 0.000000 }, // - 293
{0.097107, 0.037636, 0.000618, 89.675476, 88.505996, 0.000000 },  // - 294
{0.079985, 0.035006, -0.000826, 89.675476, 87.533462, 0.000000 }, // - 295
{0.088445, 0.024209, -0.002076, 89.675476, 73.285072, 0.000000 }, // - 296
{0.094039, 0.035411, 0.000490, 89.675476, 84.277572, 0.000000 },  // - 297
{0.099553, 0.024683, -0.002919, 89.675476, 84.277572, 0.000000 }, // - 298
{0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000 },  // - 299
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 300
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 301
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 302
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 303
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 304
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 305
{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 306
{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 307
{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 308
{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 309
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 310
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 } // - 311

};

// HATS
new Float:SkinCaps[311][6] = {
{0.135928, 0.002891, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 0
{0.136207, 0.006102, -0.013858, 0.612963, 0.000000, 0.000000}, //Skin - 1
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                 //Skin - 2
{0.167425, -0.006185, -0.004779, 0.612963, 0.000000, 0.000000}, //Skin - 3
{0.188546, -0.006185, -0.011507, 0.612963, 0.000000, 0.000000}, //Skin - 4
{0.188546, -0.006185, -0.011507, 0.612963, 0.000000, 0.000000}, //Skin - 5
{0.155785, 0.005998, -0.014326, 0.000000, 0.000000, 347.188201},//Skin - 6
{0.157787, 0.012994, -0.014590, 0.612963, 0.000000, 0.000000},  //Skin - 7
{0.131067, -0.013737, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 8
{0.118922, -0.015322, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 9
{0.125779, -0.001459, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 10
{0.129249, -0.014101, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 11
{0.139572, -0.003642, -0.002145, 0.612963, 0.000000, 10.335063}, //Skin - 12
{0.161076, -0.015624, -0.006768, 0.000000, 0.000000, 347.188201},//Skin - 13
{0.112204, -0.023196, -0.006768, 0.000000, 0.000000, 347.188201},//Skin - 14
{0.104552, -0.015122, -0.005275, 0.612963, 2.307199, 357.920410}, //Skin - 15
{0.150166, -0.008718, -0.006768, 0.000000, 0.000000, 347.188201},//Skin - 16
{0.149627, 0.002943, -0.005275, 0.612963, 2.307199, 357.920410}, //Skin - 17
{0.105319, 0.003517, -0.005275, 0.612963, 2.307199, 357.920410}, //Skin - 18
{0.153609, -0.003207, -0.007717, 0.000000, 0.000000, 357.608825},//Skin - 19
{0.143831, 0.001813, -0.010588, 0.000000, 0.000000, 357.608825}, //Skin - 20
{0.154598, -0.003549, -0.013304, 0.000000, 0.000000, 0.000000},  //Skin - 21
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 22
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   //Skin - 23
{0.127352, 0.009877, -0.006845, 0.726156, 359.666778, 348.825012},//Skin - 24
{0.124666, -0.029373, -0.006845, 0.726156, 359.666778, 329.940704},//Skin - 25
{0.152029, -0.018331, -0.003139, 0.000000, 358.344604, 348.467559}, //Skin - 26
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 27
{0.128768, 0.041474, -0.007667, 0.726156, 359.666778, 355.429199}, //Skin - 28
{0.166457, -0.006228, -0.012669, 0.726156, 359.666778, 354.612152},//Skin - 29
{0.155160, -0.022985, -0.011249, 0.000000, 358.344604, 348.467559}, //Skin - 30
{0.096077, -0.023233, -0.009101, 0.726156, 359.666778, 343.094055},//Skin - 31
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 32
{0.094003, -0.022985, -0.011249, 0.000000, 358.344604, 348.467559}, //Skin - 33
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 34
{0.155565, 0.014400, -0.009101, 0.726156, 359.666778, 6.131487},   //Skin - 35
{0.156485, 0.013641, -0.009101, 0.726156, 359.666778, 6.131487},   //Skin - 36
{0.144815, 0.013641, -0.009374, 0.726156, 359.666778, 350.562103}, //Skin - 37
{0.113347, -0.006682, -0.009374, 0.726156, 359.666778, 350.562103},//Skin - 38
{0.147231, -0.014448, -0.004786, 0.726156, 359.666778, 357.303253},//Skin - 39
{0.133873, -0.019703, -0.000058, 0.000000, 358.344604, 348.467559},//Skin - 40
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 41
{0.082446, 0.004202, -0.004786, 0.726156, 359.666778, 357.303253}, //Skin - 42
{0.104901, 0.004013, -0.004786, 0.726156, 359.666778, 342.983184}, //Skin - 43
{0.116172, -0.001954, -0.004786, 0.726156, 359.666778, 357.100677},//Skin - 44
{0.153321, 0.025744, -0.008666, 0.726156, 359.666778, 10.704365},  //Skin - 45
{0.160556, 0.007781, -0.010438, 0.726156, 359.666778, 0.991972},   //Skin - 46
{0.179010, -0.035613, -0.010438, 0.726156, 359.666778, 347.956573},//Skin - 47
{0.123363, 0.008694, -0.010438, 0.726156, 359.666778, 347.956573}, //Skin - 48
{0.167061, -0.037899, -0.010438, 0.726156, 359.666778, 347.775817},//Skin - 49
{0.164100, -0.040816, -0.011624, 357.030151, 358.344604, 342.811187},//Skin - 50
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 51
{0.129040, 0.016069, -0.010438, 0.726156, 359.666778, 347.775817}, //Skin - 52
{0.129040, 0.016069, -0.006084, 0.726156, 359.666778, 347.775817}, //Skin - 53
{0.137743, -0.016369, -0.011731, 0.726156, 359.666778, 355.812011},//Skin - 54
{0.137743, -0.016369, -0.011731, 0.726156, 359.666778, 355.812011},//Skin - 55
{0.174539, -0.000662, -0.007289, 0.726156, 359.666778, 352.847045},//Skin - 56
{0.109382, -0.002955, -0.007289, 0.726156, 359.666778, 352.847045},//Skin - 57
{0.152276, -0.029331, -0.008357, 0.726156, 359.666778, 332.070648},//Skin - 58
{0.129599, -0.019172, -0.012204, 0.726156, 359.666778, 332.070648},//Skin - 59
{0.138485, -0.012405, -0.011567, 357.030151, 358.344604, 342.811187},//Skin - 60
{0.130350, 0.000897, -0.000747, 0.726156, 359.666778, 332.070648}, //Skin - 61
{0.150659, -0.035485, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 62
{0.119340, -0.006483, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 63
{0.110634, 0.009623, -0.011624, 357.030151, 358.344604, 342.811187},//Skin - 64
{0.133055, -0.000092, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 65
{0.129061, -0.006499, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 66
{0.127292, 0.010318, -0.006299, 0.726156, 359.666778, 341.617431}, //Skin - 67
{0.138791, -0.025311, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 68
{0.148132, 0.003970, -0.002304, 0.726156, 359.666778, 340.120025}, //Skin - 69
{0.129753, 0.006469, -0.006376, 0.726156, 359.666778, 354.029815}, //Skin - 70
{0.125663, 0.015428, -0.006376, 0.726156, 359.666778, 354.029815}, //Skin - 71
{0.125663, 0.015428, -0.009030, 0.726156, 359.666778, 354.029815}, //Skin - 72
{0.117674, 0.014567, -0.011567, 357.030151, 358.344604, 342.811187}, //Skin - 73
{0.135729, -0.018656, -0.013554, 0.000000, 0.000000, 337.893737},  //Skin - 74
{0.141888, -0.042810, -0.006206, 0.000000, 0.000000, 337.893737},  //Skin - 75
{0.134968, -0.020112, -0.003604, 357.030151, 358.344604, 342.811187},//Skin - 76
{0.124348, -0.017813, -0.006206, 0.000000, 0.000000, 346.786865},  //Skin - 77
{0.124348, 0.000583, -0.006206, 0.000000, 0.000000, 346.786865},   //Skin - 78
{0.102654, -0.010906, -0.006206, 0.000000, 0.000000, 346.786865},  //Skin - 79
{0.102654, -0.010906, -0.006206, 0.000000, 0.000000, 346.786865},  //Skin - 81
{0.167928, 0.031601, -0.006206, 0.000000, 0.000000, 17.955888},    //Skin - 82
{0.159998, 0.023540, -0.006206, 0.000000, 0.000000, 17.955888},    //Skin - 83
{0.169630, 0.019315, -0.006206, 0.000000, 0.000000, 17.955888},    //Skin - 84
{0.163052, -0.039735, -0.006206, 0.000000, 0.000000, 341.169891},  //Skin - 85
{0.122285, -0.020112, -0.003604, 357.030151, 358.344604, 342.811187},//Skin - 86
{0.144811, -0.007521, -0.014207, 0.000000, 0.000000, 341.169891},  //Skin - 87
{0.129932, -0.007521, -0.007289, 0.000000, 0.000000, 341.169891},  //Skin - 88
{0.151147, -0.038608, -0.009597, 0.000000, 0.000000, 343.694549},  //Skin - 89
{0.147416, -0.031632, -0.009597, 0.000000, 0.000000, 343.694549},  //Skin - 90
{0.157728, -0.009677, -0.009597, 0.000000, 0.000000, 0.934848},    //Skin - 91
{0.136577, -0.015592, -0.009597, 0.000000, 0.000000, 341.013824},  //Skin - 92
{0.143821, 0.000631, -0.008385, 0.000000, 0.000000, 358.808868},   //Skin - 93
{0.100521, 0.003151, -0.007624, 0.000000, 0.000000, 358.808868},   //Skin - 94
{0.122833, -0.006031, -0.007624, 0.000000, 0.000000, 358.808868},  //Skin - 95
{0.145296, 0.003959, -0.007624, 0.000000, 0.000000, 358.808868},   //Skin - 96
{0.141658, 0.016474, -0.007624, 0.000000, 0.000000, 9.683902},     //Skin - 97
{0.145276, -0.002846, -0.007624, 0.000000, 0.000000, 340.239593},  //Skin - 98
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 99
{0.161745, -0.010244, -0.007624, 0.000000, 0.000000, 351.499267}, //Skin - 100
{0.151006, -0.030994, -0.005366, 0.000000, 0.000000, 340.428894}, //Skin - 101
{0.147111, 0.003794, -0.012433, 0.000000, 0.000000, 358.069244},  //Skin - 102
{0.154213, -0.052348, -0.003511, 356.299316, 0.000000, 336.751647},//Skin - 103
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 104
{0.153814, -0.039614, -0.006756, 356.299316, 0.000000, 336.930084},//Skin - 105
{0.153638, -0.039614, -0.013630, 356.299316, 0.000000, 336.930084},//Skin - 106
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 107
{0.140473, -0.026201, -0.000469, 0.390689, 355.405181, 335.554260},//Skin - 108
{0.140904, -0.007227, -0.008114, 0.390689, 355.405181, 335.554260},//Skin - 109
{0.140904, -0.007227, -0.008114, 0.390689, 355.405181, 335.554260},//Skin - 110
{0.134860, 0.001485, -0.010145, 0.390689, 358.632415, 347.730010},//Skin - 111
{0.124823, 0.001485, -0.009402, 0.390689, 358.632415, 347.730010},//Skin - 112
{0.157999, -0.012039, -0.006082, 0.390689, 358.632415, 347.730010},//Skin - 113
{0.144906, -0.005139, -0.009654, 0.390689, 358.632415, 336.830108},//Skin - 114
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 116
{0.152829, -0.009735, -0.009654, 0.390689, 358.632415, 336.830108},//Skin - 117
{0.113804, 0.009252, -0.009654, 0.390689, 358.632415, 345.244384},//Skin - 118
{0.113804, 0.009252, -0.009654, 0.390689, 358.632415, 345.244384},//Skin - 119
{0.144202, -0.021273, -0.005915, 357.030151, 358.344604, 342.811187},//Skin - 120
{0.154275, -0.037484, -0.009654, 0.390689, 358.632415, 337.676666},//Skin - 121
{0.155674, -0.015613, -0.004339, 0.390689, 358.632415, 350.571228},//Skin - 122
{0.136433, -0.019181, -0.004339, 0.390689, 358.632415, 340.261840},//Skin - 123
{0.163258, -0.032386, -0.013128, 0.390689, 358.632415, 340.261840},//Skin - 124
{0.153242, -0.029651, -0.002434, 0.390689, 358.632415, 333.367614},//Skin - 125
{0.127978, -0.001961, -0.008867, 0.390689, 358.632415, 347.279052},//Skin - 126
{0.160856, -0.025356, -0.004428, 0.390689, 358.632415, 347.279052},//Skin - 127
{0.150266, -0.009032, -0.006781, 0.390689, 358.632415, 347.223754},//Skin - 128
{0.158060, 0.022907, -0.006781, 0.390689, 358.632415, 349.378875},//Skin - 129
{0.111739, 0.012673, -0.006781, 0.390689, 358.632415, 349.378875},//Skin - 130
{0.091638, -0.011600, -0.008686, 0.390689, 358.632415, 336.674468},//Skin - 131
{0.125788, 0.000635, -0.005915, 0.390689, 358.632415, 343.007751},//Skin - 132
{0.031324, -0.014154, -0.005915, 0.390689, 358.632415, 343.007751},//Skin - 133
{0.142321, 0.015417, -0.005915, 0.243191, 358.632415, 350.329559},//Skin - 133
{0.128780, -0.030750, 0.006687, 173.184967, 358.632415, 27.422966},//Skin - 134
{0.115882, -0.004931, -0.003807, 358.837646, 358.632415, 346.206237},//Skin - 135
{0.127531, -0.008916, -0.003807, 358.837646, 358.632415, 346.206237},//Skin - 136
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 137
{0.148992, -0.017748, -0.006509, 358.837646, 358.632415, 350.742156},//Skin - 138
{0.148992, -0.017748, -0.006509, 358.837646, 358.632415, 350.742156},//Skin - 139
{0.147315, 0.001708, -0.006509, 358.837646, 358.632415, 354.390045},//Skin - 140
{0.144315, -0.013571, -0.006509, 358.837646, 358.632415, 354.390045},//Skin - 141
{0.144315, -0.002729, -0.010357, 358.837646, 358.632415, 354.390045},//Skin - 142
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 143
{0.177516, -0.070868, -0.009114, 358.837646, 358.632415, 331.679321},//Skin - 144
{0.139578, -0.008750, -0.004405, 358.837646, 358.632415, 343.319335},//Skin - 145
{0.139578, -0.014406, -0.004405, 358.837646, 358.632415, 343.319335},//Skin - 146
{0.115592, -0.010754, -0.004405, 358.837646, 358.632415, 343.319335},//Skin - 147
{0.150735, -0.000459, -0.004405, 358.837646, 358.632415, 9.362450},//Skin - 148
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 149
{0.149485, -0.008709, -0.006168, 358.837646, 358.632415, 2.276566},//Skin - 150
{0.168162, -0.009708, -0.012160, 359.504821, 4.442328, 355.348114},//Skin - 151
{0.156369, -0.024521, -0.012160, 359.504821, 0.415596, 355.348114},//Skin - 152
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 153
{0.119297, -0.016080, -0.010776, 359.504821, 0.415596, 341.522827},//Skin - 154
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 155
{0.172295, -0.065549, -0.007187, 359.504821, 0.415596, 336.175567},//Skin - 156
{0.126340, -0.030764, -0.007187, 359.504821, 0.415596, 336.175567},//Skin - 157
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 158
{0.154280, 0.002166, -0.010436, 359.504821, 0.415596, 357.792144},//Skin - 159
{0.121469, -0.007383, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 160
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 161
{0.139495, -0.007383, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 162
{0.113212, -0.005302, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 163
{0.120208, 0.003533, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 164
{0.135111, 0.005091, -0.006407, 359.504821, 0.415596, 352.954559},//Skin - 165
{0.122118, 0.005091, -0.006407, 359.504821, 0.415596, 352.954559},//Skin - 166
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 167
{0.125229, 0.005091, -0.013084, 359.504821, 0.415596, 352.954559},//Skin - 168
{0.153451, -0.018119, -0.013276, 359.504821, 0.415596, 358.219451},//Skin - 169
{0.141395, -0.009131, -0.013276, 359.504821, 0.415596, 347.866027},//Skin - 170
{0.157631, -0.028753, -0.006450, 359.504821, 0.415596, 339.935516},//Skin - 171
{0.152687, -0.027057, -0.007731, 359.504821, 0.415596, 344.054809},//Skin - 172
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 173
{0.165146, 0.015393, -0.007731, 359.504821, 0.415596, 344.001678},//Skin - 174
{0.162788, -0.019696, -0.007731, 359.504821, 0.415596, 344.001678},//Skin - 175
{0.157728, -0.027188, -0.012891, 359.504821, 0.415596, 345.804748},//Skin - 176
{0.187507, 0.010472, -0.012891, 359.504821, 0.415596, 12.315887},//Skin - 177
{0.153901, -0.027720, -0.007884, 359.504821, 0.415596, 344.553527},//Skin - 178
{0.137445, -0.009757, -0.012987, 359.504821, 0.415596, 344.553527},//Skin - 179
{0.173041, -0.006323, -0.012987, 359.504821, 0.415596, 3.267552},//Skin - 180
{0.143467, 0.016897, -0.007831, 359.504821, 0.415596, 349.504974},//Skin - 181
{0.114480, 0.006202, -0.007831, 359.504821, 0.415596, 349.504974},//Skin - 182
{0.114480, 0.008813, -0.007831, 359.504821, 0.415596, 349.504974},//Skin - 183
{0.128122, -0.012152, -0.013144, 359.504821, 0.415596, 336.326538},//Skin - 184
{0.156171, 0.007268, -0.013144, 359.504821, 0.415596, 10.805211},//Skin - 185
{0.156409, -0.034861, -0.007927, 359.504821, 0.415596, 336.978668},//Skin - 186
{0.118034, -0.024105, -0.002947, 359.504821, 0.415596, 336.978668},//Skin - 187
{0.128686, -0.029632, -0.002947, 358.201873, 0.415596, 329.325042},//Skin - 188
{0.172639, -0.026749, -0.012705, 358.201873, 0.415596, 349.092590},//Skin - 189
{0.180897, -0.026749, -0.007224, 358.201873, 0.415596, 349.092590},//Skin - 190
{0.180897, -0.026749, -0.007224, 358.201873, 0.415596, 349.092590},//Skin - 191
{0.178725, -0.010278, -0.007224, 358.201873, 0.415596, 354.053405},//Skin - 192
{0.172020, -0.010278, -0.010734, 358.201873, 0.415596, 354.053405},//Skin - 193
{0.172020, -0.010278, -0.010734, 358.201873, 0.415596, 354.053405},//Skin - 194
{0.176089, -0.032526, -0.005110, 358.201873, 0.415596, 341.814422},//Skin - 195
{0.118042, 0.007002, -0.005110, 358.201873, 0.415596, 341.814422},//Skin - 196
{0.143840, -0.042712, -0.007556, 358.201873, 0.415596, 341.814422},//Skin - 197
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 198
{0.148060, -0.032384, -0.009754, 358.201873, 0.415596, 333.484924},//Skin - 199
{0.148060, -0.032384, -0.009754, 358.201873, 0.415596, 333.484924},//Skin - 200
{0.140799, 0.025145, -0.009754, 358.201873, 0.415596, 5.040688},//Skin - 201
{0.140799, 0.015851, -0.009754, 358.201873, 0.415596, 349.796478},//Skin - 202
{0.140799, -0.004372, -0.013685, 358.201873, 0.415596, 349.796478},//Skin - 203
{0.154274, 0.006245, -0.013685, 358.201873, 0.415596, 2.035465},//Skin - 204
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 205
{0.154274, 0.016669, -0.013685, 358.201873, 0.415596, 2.035465},//Skin - 206
{0.106604, 0.004805, -0.011840, 358.201873, 0.415596, 2.035465},//Skin - 207
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 208
{0.148378, -0.003807, -0.011840, 358.201873, 0.415596, 2.035465},//Skin - 209
{0.113854, 0.001969, -0.011840, 358.201873, 0.415596, 343.826263},//Skin - 210
{0.149539, -0.028623, -0.009621, 358.201873, 0.415596, 331.587280},//Skin - 211
{0.104024, -0.014549, -0.009621, 358.201873, 0.415596, 331.587280},//Skin - 212
{0.145820, -0.029160, -0.009621, 358.201873, 0.415596, 331.587280},//Skin - 213
{0.148646, -0.008515, -0.009621, 358.201873, 0.415596, 1.360260},//Skin - 214
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 215
{0.148646, -0.005935, -0.004058, 358.201873, 0.415596, 1.360260},//Skin - 216
{0.148646, -0.015611, -0.004058, 358.201873, 0.415596, 340.374938},//Skin - 217
{0.133952, -0.030138, -0.009880, 358.201873, 0.415596, 340.374938},//Skin - 218
{0.140503, -0.033425, -0.005693, 358.201873, 0.415596, 340.374938},//Skin - 219
{0.114608, 0.009020, -0.009135, 358.201873, 0.415596, 352.932006},//Skin - 220
{0.186516, -0.044762, -0.009135, 358.201873, 0.415596, 344.217132},//Skin - 221
{0.186516, -0.044762, -0.009135, 358.201873, 0.415596, 344.217132},//Skin - 222
{0.179908, -0.010779, -0.009135, 358.201873, 0.415596, 344.217132},//Skin - 223
{0.156689, -0.015437, -0.009135, 358.201873, 0.415596, 352.741638},//Skin - 224
{0.156689, -0.015437, -0.009135, 358.201873, 0.415596, 352.741638},//Skin - 225
{0.134990, -0.034685, -0.009135, 358.201873, 0.415596, 340.812927},//Skin - 226
{0.151760, 0.002680, -0.009135, 358.201873, 0.415596, 340.812927},//Skin - 227
{0.167410, -0.028664, -0.009135, 358.201873, 0.415596, 340.250427},//Skin - 228
{0.127699, -0.015571, -0.006103, 358.201873, 0.415596, 347.232238},//Skin - 229
{0.100555, -0.007753, -0.006103, 358.201873, 0.415596, 347.232238},//Skin - 230
{0.126940, 0.016886, -0.006103, 358.201873, 0.415596, 347.232238},//Skin - 231
{0.132949, -0.017515, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 232
{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 233
{0.125714, -0.021018, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 234
{0.084982, -0.009809, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 235
{0.114669, -0.005190, -0.008594, 358.201873, 0.415596, 351.301177},//Skin - 236
{0.123264, -0.014946, -0.008594, 358.201873, 0.415596, 351.301177},//Skin - 237
{0.146656, -0.023925, -0.006749, 358.201873, 0.415596, 334.356781},//Skin - 238
{0.133769, -0.007373, -0.006749, 358.201873, 0.415596, 343.105895},//Skin - 239
{0.165378, -0.020173, -0.005869, 358.201873, 0.415596, 348.352233},//Skin - 240
{0.143331, -0.133577, -0.011472, 358.201873, 0.415596, 312.328857},//Skin - 241
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 242
{0.098602, 0.002084, -0.011472, 358.201873, 0.415596, 348.195495},//Skin - 243
{0.124240, -0.011682, -0.006423, 358.201873, 0.415596, 341.555999},//Skin - 244
{0.158155, -0.044311, -0.005439, 358.201873, 0.415596, 336.024902},//Skin - 245
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 246
{0.164307, -0.040974, -0.006797, 358.201873, 0.415596, 337.067047},//Skin - 247
{0.191578, -0.040435, -0.010605, 358.201873, 0.415596, 340.908203},//Skin - 248
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 249
{0.135208, -0.015243, -0.011916, 358.201873, 0.415596, 340.908203},//Skin - 250
{0.134272, -0.027377, -0.006035, 358.201873, 0.415596, 333.416168},//Skin - 251
{0.158813, -0.038977, -0.006035, 358.201873, 0.415596, 336.013519},//Skin - 252
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 253
{0.165106, -0.048880, -0.009719, 358.201873, 0.415596, 331.050933},//Skin - 254
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 255
{0.142586, 0.020829, -0.008549, 358.201873, 0.415596, 2.765411},//Skin - 256
{0.134018, -0.024462, -0.008549, 358.201873, 0.415596, 339.642486},//Skin - 257
{0.147750, -0.042854, -0.008114, 0.951334, 0.415596, 330.441131},//Skin - 258
{0.147750, -0.042854, -0.008114, 0.951334, 0.415596, 330.441131},//Skin - 259
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 260
{0.134710, 0.006798, -0.008114, 358.188964, 0.415596, 352.703582},//Skin - 261
{0.111691, 0.006798, -0.008114, 358.188964, 0.415596, 352.703582},//Skin - 262
{0.146077, -0.005195, -0.008114, 358.188964, 0.415596, 3.866970},//Skin - 263
{0.135858, -0.157842, -0.008114, 358.188964, 0.415596, 314.852203},//Skin - 264
{0.127964, 0.000132, -0.008114, 358.188964, 0.415596, 352.699432},//Skin - 265
{0.127964, -0.002646, -0.008114, 358.188964, 0.415596, 352.699432},//Skin - 266
{0.132329, -0.014261, -0.007384, 1.504234, 0.415596, 352.699432},//Skin - 267
{0.145951, -0.043442, -0.010053, 1.504234, 0.415596, 320.469390},//Skin - 268
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 269
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 270
{0.141851, -0.034538, -0.010580, 1.504234, 0.415596, 340.349456},//Skin - 271
{0.136473, -0.057088, -0.008204, 1.504234, 0.415596, 318.134399},//Skin - 272
{0.140332, -0.013011, -0.004432, 354.106964, 357.498840, 352.802062}, //Skin - 273
{0.124270, 0.003252, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 274
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 275
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 276
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 277
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 278
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 279
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 280
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 281
{0.140515, 0.009018, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 282
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 283
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 284
{0.189940, -0.004297, 0.001481, 354.106964, 357.498840, 352.802062},//Skin - 285
{0.140515, 0.001933, -0.008204, 1.504234, 0.415596, 346.744995}, //Skin - 286
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 287
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 288
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 289
{0.128789, -0.014062, -0.007850, 1.504234, 0.415596, 340.341094},//Skin - 290
{0.158929, -0.027358, -0.010655, 1.504234, 0.415596, 337.298858},//Skin - 291
{0.113309, -0.012434, -0.010655, 1.504234, 0.415596, 337.298858},//Skin - 292
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 293
{0.158438, -0.023891, -0.007217, 1.504234, 0.415596, 337.298858},//Skin - 294
{0.145000, -0.032054, -0.007217, 1.504234, 0.415596, 336.385589},//Skin - 295
{0.139293, -0.069554, -0.010619, 1.504234, 0.415596, 320.746429},//Skin - 296
{0.148252, -0.066463, -0.010619, 1.504234, 0.415596, 320.729705},//Skin - 297
{0.126423, -0.066463, -0.010619, 1.504234, 0.415596, 320.729705},//Skin - 298
{0.144949, -0.040691, -0.008599, 1.504234, 0.415596, 320.729705},//Skin - 299
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 300
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 301
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 302
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 303
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 304
{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 305
{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 306
{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 307
{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 308
{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 309
{0.140515, 0.009018, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 310
{0.140515, 0.009018, -0.008204, 1.504234, 0.415596, 346.744995} //Skin - 311

};

// sistem treasure
new Float:gRandomPositions[24][3] =
{
	{1767.807861, -1932.837402, 13.595355},
	{2132.916259, -1740.313598, 17.289062},
	{1803.886352, -1590.603881, 14.095897},
	{1485.622680, -1665.684692, 14.610832},
	{1018.429138, -1922.505737, 12.592831},
	{582.102233, -1490.797119, 15.376304},
	{154.038253, -1960.985351, 3.830727},
	{1394.659790, -1897.151977, 13.557967},
	{2360.556640, 547.272399, 2.666161},
	{2561.215332, 1175.414062, 18.718933},
	{1496.425415, 1011.755920, 10.904741},
	{2263.547119, 1398.863281, 42.841758},
	{2035.151489, 1874.851074, 12.095868},
	{2013.250122, 2206.021972, 11.507675},
	{1717.909667, 1623.251953, 10.052927},
	{1374.580932, 2188.983642, 11.056703},
	{-1538.844360, -440.330566, 6.032049},
	{-1971.358764, 213.149246, 27.124874},
	{-2473.870605, 399.725463, 27.800573},
	{-2756.504882, 245.252899, 7.227559},
	{-2541.580810, -311.954620, 27.070434},
	{-2707.994873, 377.999938, 11.979453},
	{-2762.185302, 613.078186, 26.277561},
	{-1318.863891, 494.018798, 18.260137}
};

// PIZZA JOB
new Float:gRandomPizza[30][3] = {
{1886.8344,-1116.9644,25.2734},
{2435.8706,-1303.3206,24.7403},
{2330.0266,-1681.6777,14.4268},
{2807.9863,-1179.1047,25.3741},
{2192.8167,-1003.7396,62.6182},
{2015.1249,-1703.4521,13.6904},
{256.2383,-1365.6805,53.1094},
{1496.9115,-690.0555,94.7500},
{1181.7395,-1074.4592,31.6719},
{206.7339,-1771.1189,4.2873},
{298.8037,-1155.8375,80.9099},
{1033.7893,-809.8940,101.8516},
{2483.3259,-1997.9877,13.8343},
{1873.7358,-2020.6090,13.5469},
{650.3296,-1619.5085,15.0000},
{2257.5620,733.0655,11.4609},
{1935.6852,739.5255,10.8203},
{2787.9856,2223.3850,14.6615},
{2625.0615,2016.8232,10.8203},
{1599.3604,2147.3357,11.4609},
{1025.9944,1975.8160,11.3449},
{1703.6294,2694.0879,10.8203},
{1972.5380,927.4847,10.8203},
{1938.6154,2184.8523,10.8203},
{1682.1293,1913.6169,10.8203},
{988.3104,1879.0475,11.3594},
{1458.3400,2523.8979,10.8203},
{2484.4036,1528.7244,10.9017},
{2225.0576,2520.0786,10.8203},
{1531.1907,2357.5469,10.8203}
};

//GARBAGE JOB
new Float:CHKGarbage[25][3] = {
{2399.3333,-1721.3162,14.1116},
{2159.6494,-1612.4806,14.8997},
{1102.0321,-1876.0066,13.5469},
{1611.9386,-994.9053,24.0781},
{1425.5986,-1080.5208,17.5583},
{811.0487,-1098.3597,25.9063},
{414.3998,-1511.9857,33.0968},
{433.4746,-1747.7964,9.2082},
{945.7682,-1742.5713,14.3200},
{857.0139,-1381.7810,13.7297},
{1492.3641,-687.2353,94.7500},
{789.0624,-863.2424,60.6406},
{642.9407,-511.0573,17.0787},
{1105.6340,-293.6084,73.9851},
{1571.8179,26.1781,24.1641},
{2849.5703,1293.6212,11.3906},
{2319.4424,1801.6254,11.6260},
{2181.5298,1419.7175,10.8203},
{2656.4788,1081.9113,10.8203},
{2638.0356,1835.3378,11.0234},
{1977.2443,2495.1428,10.8665},
{1532.2018,2725.5518,10.8203},
{959.2382,1805.0083,8.8516},
{1479.1313,967.0140,10.8203},
{1579.1681,667.6521,10.8203}
};

//RACE CARS
new RaceCar[22][1] = {
{402},
{411},
{415},
{429},
{451},
{468},
{471},
{477},
{480},
{494},
{495},
{496},
{506},
{522},
{541},
{556},
{557},
{560},
{568},
{571},
{572},
{589}
};

//AIR RACE CARS
new ARaceCar[11][1] = {
{417},
{469},
{476},
{487},
{511},
{512},
{513},
{519},
{548},
{563},
{593}
};

//RACE POS
new Float:RaceCPos1[20][4] = {
{1664.8215,-1952.9338,23.5388,17.8781},
{1651.0105,-1957.0048,23.5426,12.6880},
{1661.5887,-1943.2240,23.6287,15.3161},
{1650.4756,-1946.2118,23.6329,15.0291},
{1646.9115,-1935.5114,23.8815,14.0427},
{1658.0850,-1932.3418,23.8765,15.8355},
{1655.7063,-1920.8724,24.1644,18.9371},
{1644.0537,-1924.3422,24.1628,15.1860},
{1641.3341,-1913.5647,24.4346,13.6180},
{1652.5720,-1910.4500,24.4346,16.6797},
{1647.5660,-1898.9185,24.6154,17.7002},
{1638.0862,-1901.8688,24.6104,14.5660},
{1634.2096,-1891.8969,24.7167,14.7279},
{1644.1671,-1889.2178,24.7190,16.8311},
{1641.0809,-1878.0859,24.8309,18.4938},
{1630.6755,-1880.6888,24.8313,13.7463},
{1637.4492,-1865.6379,25.1025,14.6930},
{1626.5314,-1867.9270,25.1121,14.2808},
{1623.5702,-1856.3097,25.4080,14.2762},
{1634.2532,-1853.7094,25.4028,15.0607}
};

//RACE CHECKPOINT POS
new Float:RaceCCPos1[24][3] = {
{1606.7430,-1627.0051,28.5859},
{1608.6531,-1416.5537,28.5859},
{1631.7269,-1217.7533,51.6463},
{1653.7821,-1066.3461,60.9307},
{1680.7343,-898.5240,61.3034},
{1700.6436,-763.1754,52.6851},
{1714.1312,-615.1121,39.3733},
{1701.7422,-459.2735,33.3373},
{1676.5778,-242.3406,42.7356},
{1663.2672,-93.2728,35.4748},
{1607.3998,61.6162,37.4506},
{1654.0922,264.7711,30.0483},
{1702.7062,400.2924,30.4659},
{1760.1658,564.4227,25.0367},
{1799.0160,765.1021,12.1282},
{1804.6685,981.3500,6.8006},
{1804.7825,1168.8334,6.7344},
{1804.8198,1350.4043,6.7420},
{1804.8362,1606.7394,6.7344},
{1804.8529,1822.0753,6.7344},
{1804.8529,1975.0753,5.0893},
{1806.3547,2087.9102,3.9063},
{1806.3972,2232.4299,4.7782},
{1806.5177,2352.0327,6.7613}
};

//RACE POS2
new Float:RaceCPos2[20][4] = {
{-2782.2056,-1729.1956,141.3940,348.3545},
{-2786.2693,-1728.6627,141.4626,350.6985},
{-2784.9417,-1720.3645,141.4154,350.6236},
{-2780.5410,-1721.1072,141.4168,347.1776},
{-2783.3452,-1713.3201,141.3922,350.3702},
{-2778.9021,-1714.4030,141.4010,347.5752},
{-2782.2080,-1706.5625,141.3737,350.5704},
{-2777.4211,-1707.5137,141.3996,347.7630},
{-2780.9370,-1699.0852,141.3533,350.0144},
{-2775.7886,-1699.9452,141.4039,347.6471},
{-2779.3596,-1690.7311,141.3320,347.8316},
{-2773.4766,-1692.1511,141.5199,345.2198},
{-2777.7402,-1683.1970,141.3103,347.9884},
{-2771.9341,-1684.6481,141.5195,343.0033},
{-2775.7651,-1673.8101,141.2850,348.4796},
{-2769.9460,-1674.6434,141.5010,350.4145},
{-2774.3894,-1665.9292,141.2635,353.1205},
{-2769.3784,-1666.3802,141.3198,350.2652},
{-2772.9714,-1656.4193,141.2386,350.2765},
{-2768.2588,-1656.9392,141.2353,352.0675}
};

//RACE CHECKPOINT POS2
new Float:RaceCCPos2[22][3] = {
{-2763.6570,-1540.6292,140.3021},
{-2735.1819,-1337.1201,147.6727},
{-2609.8960,-1156.1077,170.7550},
{-2531.7278,-1113.6655,176.6869},
{-2613.8115,-1194.2880,198.7064},
{-2659.8167,-1331.5876,243.6851},
{-2552.7744,-1327.3273,267.5554},
{-2404.8711,-1278.8977,296.9921},
{-2414.6677,-1350.5143,336.2686},
{-2564.4937,-1454.7810,356.9287},
{-2399.8770,-1391.4828,359.1385},
{-2215.8020,-1505.4290,359.2662},
{-2214.0144,-1684.1577,377.5201},
{-2229.4924,-1562.7354,379.0385},
{-2358.2944,-1447.9075,383.4210},
{-2521.5945,-1600.5491,397.8123},
{-2505.6191,-1764.3940,402.1362},
{-2442.2500,-1780.0552,415.3171},
{-2433.2964,-1726.7140,433.6148},
{-2302.4834,-1792.4752,444.3116},
{-2287.0095,-1705.3296,477.3173},
{-2320.7354,-1619.1311,483.4444}
};

//RACE POS3
new Float:RaceCPos3[20][4] = {
{-312.4946,-1912.2476,12.8110,91.2134},
{-312.7263,-1907.5328,12.4271,90.4969},
{-319.4455,-1907.5010,12.0213,89.2331},
{-319.5836,-1912.4535,12.4430,92.3464},
{-326.0461,-1908.1326,11.6520,95.1078},
{-325.8822,-1912.7118,12.1222,92.4220},
{-332.5753,-1908.6427,11.2628,93.3712},
{-332.5471,-1912.9854,11.7927,92.1575},
{-339.7218,-1908.7074,10.6430,88.7288},
{-339.9342,-1912.9471,11.6197,89.7244},
{-346.8582,-1908.6205,10.2382,90.9769},
{-346.8570,-1912.9503,11.4538,90.3600},
{-355.4246,-1909.8541,10.2838,95.7476},
{-355.0123,-1913.7578,11.4055,97.7317},
{-362.3782,-1911.3519,10.4857,103.8645},
{-361.2711,-1915.3796,11.8299,103.9565},
{-369.0455,-1912.9365,10.9361,101.2732},
{-367.8647,-1917.0819,12.3502,104.3768},
{-376.2256,-1913.9048,10.7586,97.4436},
{-374.8159,-1918.6959,12.6140,103.6338}
};

//RACE CHECKPOINT POS3
new Float:RaceCCPos3[24][3] = {
{-446.0038,-1980.6345,27.2827},
{-560.0427,-2028.8717,50.1934},
{-667.8534,-2044.7177,25.0980},
{-773.7825,-2128.8652,25.2220},
{-836.3202,-2185.4963,23.1133},
{-937.3137,-2181.0674,34.6764},
{-956.5271,-2313.4153,58.0039},
{-1022.7851,-2375.8484,58.4726},
{-1210.2120,-2347.3665,17.2871},
{-1268.2340,-2254.2036,22.1183},
{-1364.0348,-2175.1973,21.7806},
{-1487.6610,-2157.6660,2.1014},
{-1628.1329,-2154.7593,26.9979},
{-1706.6035,-2095.3848,38.9558},
{-1948.7546,-2047.5782,70.2670},
{-1889.7488,-1933.2793,82.2486},
{-1744.8981,-1917.8726,98.3029},
{-1545.7839,-1896.4569,79.7016},
{-1493.3903,-1791.4915,53.0705},
{-1444.5317,-1820.0983,44.4001},
{-1415.2518,-2002.1530,7.2238},
{-1318.3213,-2057.0828,16.7988},
{-1307.5045,-2176.3328,21.6446},
{-1219.6254,-2343.9712,17.0815}
};

//AIR RACE POS
new Float:ARaceCPos1[20][4] = {
{1827.1837,-2493.6924,14.9264,88.4439},
{1827.1837,-2593.6924,14.9264,88.4439},
{1806.0676,-2494.5105,14.9299,85.7337},
{1806.0676,-2594.5105,14.9299,85.7337},
{1783.6765,-2493.7007,14.9275,91.3337},
{1783.6765,-2593.7007,14.9275,91.3337},
{1764.4469,-2494.0364,14.9302,90.1715},
{1764.4469,-2594.0364,14.9302,90.1715},
{1744.1401,-2494.0791,14.9257,88.5951},
{1744.1401,-2594.0791,14.9257,88.5951},
{1723.4067,-2494.0903,14.9294,90.8795},
{1723.4067,-2594.0903,14.9294,90.8795},
{1703.4072,-2493.7197,14.9279,88.5055},
{1703.4072,-2593.7197,14.9279,88.5055},
{1680.1749,-2493.9607,14.9271,90.9064},
{1680.1749,-2593.9607,14.9271,90.9064},
{1658.9373,-2494.0298,14.9280,89.2224},
{1658.9373,-2594.0298,14.9280,89.2224},
{1635.7806,-2493.8167,14.9286,89.5446},
{1635.7806,-2593.8167,14.9286,89.5446}
};

//AIR RACE CHECKPOINT POS
new Float:ARaceCCPos1[22][3] = {
{1305.4277,-2473.1196,67.1971},
{1011.6771,-2179.0459,89.0802},
{862.2914,-1832.9908,88.9617},
{977.9012,-1370.1580,90.0105},
{823.9728,-1013.9380,103.3774},
{716.5126,-813.2047,49.1698},
{678.2015,-648.3052,71.2674},
{841.1668,-247.5866,99.0401},
{728.9567,142.3490,111.7407},
{545.2505,452.2545,112.5594},
{280.6416,899.2701,87.0375},
{459.6154,1273.2948,87.7717},
{841.5342,1281.8136,88.4855},
{1005.8422,1824.4200,89.4194},
{1034.1479,2518.9814,89.9672},
{1410.2401,2782.6882,90.5487},
{1988.7560,2800.2092,91.1710},
{2289.1252,2472.3459,91.9637},
{2198.9512,2194.1008,133.6319},
{1410.3503,2203.4951,134.6875},
{1481.6804,1805.3104,71.2777},
{1477.2513,1409.0552,15.1673}
};

//AIR RACE POS2
new Float:ARaceCPos2[20][4] = {
{-1596.8799,-214.3958,15.5243,315.3666},
{-1580.8922,-198.1358,15.6595,314.7180},
{-1566.1210,-183.2071,15.5217,314.0271},
{-1551.8055,-169.1804,15.5209,313.0972},
{-1537.6110,-155.5177,15.5633,315.5449},
{-1524.8792,-142.4088,15.5225,315.2285},
{-1509.7587,-126.7978,15.5190,311.4590},
{-1494.2451,-112.2119,15.5207,316.4511},
{-1480.2511,-97.9208,15.5247,315.0637},
{-1466.8533,-84.5683,15.5215,314.8911},
{-1654.8593,-162.0607,15.5662,314.4941},
{-1641.4441,-148.5103,15.5221,311.9920},
{-1626.6578,-134.3286,15.6088,312.6056},
{-1612.0662,-121.0218,15.5194,314.3330},
{-1597.8212,-106.5794,15.5175,314.6378},
{-1584.2887,-91.6853,15.5208,314.4588},
{-1569.3666,-76.4670,15.5298,315.8667},
{-1554.9415,-62.4563,15.5217,311.9709},
{-1541.7667,-49.0298,15.5217,316.8015},
{-1527.3577,-35.1002,15.5445,314.5296}
};

//AIR RACE CHECKPOINT POS2
new Float:ARaceCCPos2[22][3] = {
{-1146.5867,341.2744,72.4605},
{-966.3602,805.2598,73.9715},
{-1100.4553,1118.7273,58.8121},
{-1406.5962,1485.9733,27.5141},
{-1734.3722,1817.7990,70.1331},
{-1557.8024,2406.6038,104.4601},
{-1263.3556,2615.1567,122.0799},
{-959.3416,2402.7300,122.8110},
{-666.2220,1815.7745,108.1497},
{-510.4060,1223.0483,14.0842},
{-575.8124,731.0688,61.3054},
{-495.2087,346.5926,62.3118},
{-274.2516,-31.7004,75.5506},
{-214.7083,-510.2312,76.7572},
{-126.1431,-1073.2473,77.2576},
{55.4749,-1488.8528,77.9243},
{289.5537,-1542.7502,91.6921},
{919.3343,-1595.8873,92.3345},
{1095.4681,-2018.7502,113.7993},
{1116.6437,-2314.1953,114.7028},
{1435.6971,-2495.9001,88.2652},
{1854.3129,-2492.9631,18.9876}
};

//TRUCKER JOB
new Float:CHKTruck[18][3] = {
{-99.2558,-1168.3788,2.5964}, //GAS LS ---- CHECKS LS
{1315.7880,-867.2107,39.5781}, //24/7 Store LS
{2116.6514,-1771.4202,13.3937}, //Pizza Boy LS
{2816.3660,-1698.8490,9.9504}, //8 Track LS
{2651.2346,-2390.4055,13.6328}, //Chop Shop LS
{2115.3047,-1723.7944,13.5502}, //Crack House LS
{2165.3979,2746.7004,10.8203}, //GAS LV ---- CHECKS LV
{2046.1804,2244.4304,10.8203}, //Clothing Soter LV
{2447.6467,1999.7650,10.8203}, //Burger Shot LV
{2503.0703,1531.9418,10.6749}, //Pool LV
{2032.2845,1516.1019,10.8203}, //Pirate Ship LV
{1483.8053,1046.6919,10.8203}, //Chuckup LV
{-1728.6168,-119.5973,3.5547}, //Ship SF ---- CHECKS SF
{-1694.2990,399.9545,7.1797}, //GAS SF
{-1672.8090,1322.6425,7.1853}, //Pier 69 SF
{-2110.9172,816.9711,69.5625}, //Supa Save SF
{-2533.0513,1227.8401,37.4219}, //Restaurant SF
{-2142.6599,-442.6247,35.3359} //Homies SF
};

//TRUCKER JOB2
new Float:CHKTruck2[18][3] = {
{-119.2522,-1218.2719,2.9902}, //LANGA GAS LS ---- CHECKS LS
{1361.1011,-906.6476,35.3157}, //LANGA 24/7 Store LS
{2078.8257,-1706.9739,13.3906}, //LANGA Pizza Boy LS
{2683.8926,-1683.9061,9.4250}, //LANGA 8 Track LS
{2609.1416,-2393.7742,13.6271}, //LANGA Chop Shop LS
{2158.9236,-1725.8071,13.5389}, //LANGA Crack House LS
{2101.4238,2803.3069,10.8203}, //LANGA GAS LV ---- CHECKS LV
{2116.0403,2189.2769,10.8203}, //LANGA Clothing Soter LV
{2426.0283,2005.2286,10.8203}, //LANGA Burger Shot LV
{2589.9490,1704.1989,10.8203}, //LANGA Pool LV
{2029.4589,1418.5114,10.8203}, //LANGA Pirate Ship LV
{1441.4424,1005.0969,10.8203}, //LANGA Chuckup LV
{-1731.8619,-71.2586,3.5489}, //LANGA Ship SF ---- CHECKS SF
{-1714.7142,352.0824,7.1875}, //LANGA GAS SF
{-1647.4458,1291.6462,7.0391}, //LANGA Pier 69 SF
{-2132.7087,769.0834,69.5625}, //LANGA Supa Save SF
{-2468.7771,1231.8475,35.2001}, //LANGA Restaurant SF
{-2184.9126,-409.3924,35.3359} //LANGA Homies SF
};

// JAIL SPAWN
new Float:gRandomJailSpawns[3][3] = {
{263.7989,85.8850,1001.0391},
{264.0302,81.2118,1001.0391},
{263.8704,77.0021,1001.0391}
};
// AJAIL SPAWN
new Float:gRandomAJailSpawns[4][3] = {
{215.5260,110.5124,1000.0156},
{219.3602,109.9994,1000.0156},
{223.3645,109.9972,1000.0156},
{227.1875,110.2887,1000.0156}
};
// ROB CHECKPOINT
new Float:gRandomRob[11][3] = {
{2308.8533,-1715.0500,14.6496},
{1921.6538,-1115.0759,27.0883},
{351.7325,-1197.2733,76.5156},
{1182.0050,-1068.1383,29.1936},
{2435.2007,-1289.3853,25.3479},
{2248.9714,961.5317,10.8130},
{2787.9294,2222.7788,14.6615},
{1597.7314,2093.5139,11.3125},
{1029.9531,2028.0458,11.4683},
{1609.4539,2789.3052,10.8203},
{2594.5935,748.7582,11.0234}
};
// ROB2 CHECKPOINT
new Float:gRandomRob2[10][3] = {
{1695.5579,-2125.8223,13.8101},
{2522.6125,-2018.8566,14.0744},
{2751.7439,-1962.8811,13.5469},
{2553.0874,-958.2475,82.6460},
{166.8161,-1758.7646,6.7969},
{2042.4943,732.5795,11.4609},
{2581.5403,1060.6929,11.7309},
{1435.2942,2548.9001,10.8203},
{1029.7107,1847.9226,11.4683},
{1706.7246,950.2996,10.8203}
};
//RC MAP PAINTBALL
new Float:gRandomSpawnRC[7][3] = {
{-969.7932,1094.1221,1345.0070},
{-976.3990,1022.5371,1345.0310},
{-973.6447,1041.8181,1352.6875},
{-1014.5994,1027.9786,1342.6187},
{-1133.7423,1021.9453,1345.7335},
{-1115.6410,1095.8212,1341.8438},
{-1133.1267,1079.1073,1353.4480}
};
//TENNIS MAP PAINTBALLL
new Float:gRandomSpawnTennis[7][3] = {
{-2754.8149,-245.1009,7.1875},
{-2779.4072,-248.5145,7.1875},
{-2779.9651,-265.2720,7.1875},
{-2744.6108,-270.1563,7.1875},
{-2718.3101,-252.3627,7.1875},
{-2726.9282,-240.9186,7.1875},
{-2716.3669,-269.9250,7.1875}
};
//FARM MAP PAINTBALL
new Float:gRandomSpawnFarm[7][3] = {
{15.3401,2.1944,3.1172},
{-59.7064,-32.2439,3.1172},
{-102.5952,-29.0223,3.1172},
{-111.9006,27.3635,3.1172},
{-152.7778,49.3966,3.1172},
{-205.3790,8.9561,3.1172},
{-75.0158,9.1256,3.1172}
};
//LSPD MAP PAINTBALL
new Float:gRandomSpawnLSPD[7][3] = {
{1499.7970,-1671.6659,14.0469},
{1459.4235,-1699.1788,14.5469},
{1491.1667,-1724.2849,13.5469},
{1519.1375,-1741.3630,13.5469},
{1501.7247,-1609.9181,14.0469},
{1457.3564,-1623.7700,14.7891},
{1483.3802,-1631.9480,14.1484}
};
//BEACH MAP PAINTBALL
new Float:gRandomSpawnBeach[4][3] = {
{-2324.0566,-1519.2183,1287.8210},
{-2302.4229,-1537.2805,1287.8210},
{-2280.4771,-1554.6760,1287.8210},
{-2303.7014,-1572.7168,1289.4739}
};

// TOW CAR CHECKPOINT
new Float:TowCarCk[14][3] = {
{1209.6587,-1102.2660,25.1793},
{1013.2002,-1022.8221,32.1016},
{928.3862,-1081.9692,24.2891},
{856.1053,-1364.4233,13.5469},
{968.3508,-1710.0663,13.5546},
{1017.6634,-917.3149,42.1797},
{1268.3655,-1613.0262,13.5469},
{1433.0844,-1843.8458,13.5469},
{2051.3674,-2046.2601,13.5469},
{2137.6187,-2173.9358,13.5544},
{2215.5930,-2202.2126,13.5469},
{2468.5393,-2078.4360,13.5469},
{2699.9041,-1951.2253,13.5540},
{2662.4050,-1593.9717,13.3006}
};

// VEHICLE FUEL
#define GasMax 100
#define RunOutTime 60000
#define RefuelWait 5000

new Gas[MAX_VEHICLES];

new Refueling[MAX_PLAYERS];

// VEHICLE SEATS
new MaxSeats[212] = {
4,2,2,2,4,4,1,2,2,4,2,2,2,4,2,2,4,2,4,2,4,4,2,2,2,1,4,4,4,2,1,9,1,2,2,1,2,9,4,2,
4,1,2,2,2,4,1,2,1,6,1,2,1,1,1,2,2,2,4,4,2,2,2,2,2,2,4,4,2,2,4,2,1,1,2,2,1,2,2,4,
2,1,4,3,1,1,1,4,2,2,4,2,4,1,2,2,2,4,4,2,2,2,2,2,2,2,2,4,2,1,1,2,1,1,2,2,4,2,2,1,
1,2,2,2,2,2,2,2,2,4,1,1,1,2,2,2,2,0,0,1,4,2,2,2,2,2,4,4,2,2,4,4,2,1,2,2,2,2,2,2,
4,4,2,2,1,2,4,4,1,0,0,1,1,2,1,2,2,2,2,4,4,2,4,1,1,4,2,2,2,2,6,1,2,2,2,1,4,4,4,2,
2,2,2,2,4,2,1,1,1,4,1,1
};

// VEHICLE NAME
new aVehicleNames[212][] =
{
	{"Landstalker"},
	{"Bravura"},
	{"Buffalo"},
	{"Linerunner"},
	{"Perrenial"},
	{"Sentinel"},
	{"Dumper"},
	{"Firetruck"},
	{"Trashmaster"},
	{"Stretch"},
	{"Manana"},
	{"Infernus"},
	{"Voodoo"},
	{"Pony"},
	{"Mule"},
	{"Cheetah"},
	{"Ambulance"},
	{"Leviathan"},
	{"Moonbeam"},
	{"Esperanto"},
	{"Taxi"},
	{"Washington"},
	{"Bobcat"},
	{"Mr Whoopee"},
	{"BF Injection"},
	{"Hunter"},
	{"Premier"},
	{"Enforcer"},
	{"Securicar"},
	{"Banshee"},
	{"Predator"},
	{"Bus"},
	{"Rhino"},
	{"Barracks"},
	{"Hotknife"},
	{"Trailer"},
	{"Previon"},
	{"Coach"},
	{"Cabbie"},
	{"Stallion"},
	{"Rumpo"},
	{"RC Bandit"},
	{"Romero"},
	{"Packer"},
	{"Monster"},
	{"Admiral"},
	{"Squalo"},
	{"Seasparrow"},
	{"Pizzaboy"},
	{"Tram"},
	{"Trailer"},
	{"Turismo"},
	{"Speeder"},
	{"Reefer"},
	{"Tropic"},
	{"Flatbed"},
	{"Yankee"},
	{"Caddy"},
	{"Solair"},
	{"Berkley's RC Van"},
	{"Skimmer"},
	{"PCJ-600"},
	{"Faggio"},
	{"Freeway"},
	{"RC Baron"},
	{"RC Raider"},
	{"Glendale"},
	{"Oceanic"},
	{"Sanchez"},
	{"Sparrow"},
	{"Patriot"},
	{"Quad"},
	{"Coastguard"},
	{"Dinghy"},
	{"Hermes"},
	{"Sabre"},
	{"Rustler"},
	{"ZR-350"},
	{"Walton"},
	{"Regina"},
	{"Comet"},
	{"BMX"},
	{"Burrito"},
	{"Camper"},
	{"Marquis"},
	{"Baggage"},
	{"Dozer"},
	{"Maverick"},
	{"News Chopper"},
	{"Rancher"},
	{"FBI Rancher"},
	{"Virgo"},
	{"Greenwood"},
	{"Jetmax"},
	{"Hotring"},
	{"Sandking"},
	{"Blista Compact"},
	{"Police Maverick"},
	{"Boxville"},
	{"Benson"},
	{"Mesa"},
	{"RC Goblin"},
	{"Hotring Racer A"},
	{"Hotring Racer B"},
	{"Bloodring Banger"},
	{"Rancher"},
	{"Super GT"},
	{"Elegant"},
	{"Journey"},
	{"Bike"},
	{"Mountain Bike"},
	{"Beagle"},
	{"Cropduster"},
	{"Stuntplane"},
	{"Tanker"},
	{"Road Train"},
	{"Nebula"},
	{"Majestic"},
	{"Buccaneer"},
	{"Shamal"},
	{"Hydra"},
	{"FCR-900"},
	{"NRG-500"},
	{"HPV-1000"},
	{"Cement Truck"},
	{"Tow Truck"},
	{"Fortune"},
	{"Cadrona"},
	{"FBI Truck"},
	{"Willard"},
	{"Forklift"},
	{"Tractor"},
	{"Combine"},
	{"Feltzer"},
	{"Remington"},
	{"Slamvan"},
	{"Blade"},
	{"Freight"},
	{"Streak"},
	{"Vortex"},
	{"Vincent"},
	{"Bullet"},
	{"Clover"},
	{"Sadler"},
	{"Firetruck"},
	{"Hustler"},
	{"Intruder"},
	{"Primo"},
	{"Cargobob"},
	{"Tampa"},
	{"Sunrise"},
	{"Merit"},
	{"Utility"},
	{"Nevada"},
	{"Yosemite"},
	{"Windsor"},
	{"Monster A"},
	{"Monster B"},
	{"Uranus"},
	{"Jester"},
	{"Sultan"},
	{"Stratum"},
	{"Elegy"},
	{"Raindance"},
	{"RC Tiger"},
	{"Flash"},
	{"Tahoma"},
	{"Savanna"},
	{"Bandito"},
	{"Freight"},
	{"Trailer"},
	{"Kart"},
	{"Mower"},
	{"Duneride"},
	{"Sweeper"},
	{"Broadway"},
	{"Tornado"},
	{"AT-400"},
	{"DFT-30"},
	{"Huntley"},
	{"Stafford"},
	{"BF-400"},
	{"Newsvan"},
	{"Tug"},
	{"Trailer"},
	{"Emperor"},
	{"Wayfarer"},
	{"Euros"},
	{"Hotdog"},
	{"Club"},
	{"Trailer"},
	{"Trailer"},
	{"Andromada"},
	{"Dodo"},
	{"RCCam"},
	{"Launch"},
	{"Police Car (LSPD)"},
	{"Police Car (SFPD)"},
	{"Police Car (LVPD)"},
	{"Police Ranger"},
	{"Picador"},
	{"S.W.A.T. Van"},
	{"Alpha"},
	{"Phoenix"},
	{"Glendale"},
	{"Sadler"},
	{"Luggage Trailer A"},
	{"Luggage Trailer B"},
	{"Stair Trailer"},
	{"Boxville"},
	{"Farm Plow"},
	{"Utility Trailer"}
};
// sistem treasure
new LocationsName[24][256] =
{
	"El Corona (LS)",
	"Idlewood (LS)",
	"Little Mexico (LS)",
	"Pershing Square (LS)",
	"Verona Beach (LS)",
	"Rodeo (LS)",
	"Santa Maria Beach (LS)",
	"Verdant Bluffs (LS)",
	"Red County (LV)",
	"Come-A-Lot (LV)",
	"LVA Freight Depot (LV)",
	"Royal Casino (LV)",
    "The Visage (LV)",
	"The Emerald Isle (LV)",
	"Las Venturas Airport (LV)",
	"Redsands West (LV)",
	"Easter Bay Airport (SF)",
	"Cranberry Station (SF)",
    "Queens (SF)",
	"Ocean Flats (SF)",
	"Avispa Country Club (SF)",
	"City Hall (SF)",
	"Palisades (SF)",
	"Easter Basin (SF)"
};


// GETDISTANCEBETWEENPLAYERS
public Float:GetDistanceBetweenPlayers(p1,p2)
{
	new	Float:x1,
		Float:y1,
		Float:z1,
		Float:x2,
		Float:y2,
		Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key))
	return 1;

	return 0;
}

// GETDISTANCEBETWEENPOINTS
stock Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
    return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

stock GetClosestVehicle2(playerid, Float:dis)
{
	new Float:X,
		Float:Y,
		Float:Z;
	if(GetPlayerPos(playerid, X, Y, Z))
	{
		new vehicleid = INVALID_VEHICLE_ID;
		for(new v, Float:temp, Float:VX, Float:VY, Float:VZ; v != MAX_VEHICLES; v++)
		{
			if(GetVehiclePos(v, VX, VY, VZ))
			{
				VX -= X, VY -= Y, VZ -= Z;
				temp = VX * VX + VY * VY + VZ * VZ;
				if(temp < dis) dis = temp, vehicleid = v;
			}
		}
		dis = floatpower(dis, 0.5);
		return vehicleid;
	}
	return INVALID_VEHICLE_ID;
}

stock IsSeatTaken(vehicleid, seatid)
{
    for(new i; i < MAX_PLAYERS; i++)
    {
        if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seatid) return 1;
    }
    return 0;
}

// ISVEHICLEINRANGEOFPOINT
stock IsVehicleInRangeOfPoint(vehicleid, Float: radius, Float:x, Float:y, Float:z) {

	new Float:Floats[6];

	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	Floats[3] = (Floats[0] -x);
	Floats[4] = (Floats[1] -y);
	Floats[5] = (Floats[2] -z);
	if (((Floats[3] < radius) && (Floats[3] > -radius)) && ((Floats[4] < radius) && (Floats[4] > -radius)) && ((Floats[5] < radius) && (Floats[5] > -radius)))
		return 1;
	return 0;
}

// GETXYINFRONTOFPLAYER
stock Float:GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    if (IsPlayerInAnyVehicle(playerid))
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    else
        GetPlayerFacingAngle(playerid, a);
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
    return a;
}

enum beforeSpectateInfo //iFordawin
{
 	Float: pOldPos[3],
 	pWorld,
 	pInt,
 	pState,
 	pInVehicle,
 	bool: pSpectating
};
new BeforeSpectate[MAX_PLAYERS][beforeSpectateInfo];

// ANUNTURI
new 	RandomMSG[][] = {
	"Forumul serverului ForEver RPG este FORUM.ForEver RPG.RO.",
	"Puteti pune intrebari despre server pe /n.",
	"Foloseste /locations pentru a afla locatiile de pe server.",
	"Foloseste /jobs pentru a vedea job-urile disponibile.",
	"Pentru a afla detalii despre contul premium foloseste /premium.",
	"Daca ai probleme sau nelamuriri foloseste /report.",
	"Foloseste /carradio pentru a asculta radio in masina.",
	"Daca ai 10/10 Rob Points poti jefui banca(/rob).",
	"Afacerile cu bani reali sunt interzise. Cei ce-s prinsi ca incearca sa faca afaceri cu bani reali vor primi ban permanent.",
	"Pentru a vedea teritoriile mafiilor foloseste /turfs."
};

new 	RandomMSGENG[][] = {
	"Our forum is FORUM.ForEver RPG.RO.",
	"If you have any questions, use /n.",
	"Use /locations to find locations on the server.",
	"Use /jobs to see available jobs.",
	"To learn more about using premium account use /premium.",
	"If you have any problems, use /report.",
	"Use /carradio to listen to radio in the car.",
	"If you have 10/10 Rob Points you can rob the bank(/rob).",
	"Businesses with real money are prohibited. Those who were caught trying to do business with real money will get permanent ban.",
	"Use /turfs to view the gang zones."
};

// GANG TURFS - WAR
enum zInfo
{
    zID,
    zOwned,
    Float:zMinX,
    Float:zMinY,
    Float:zMaxX,
    Float:zMaxY
};
new TurfInfo[50][zInfo],
	Turfs[50];
enum wInfo
{
    wFaction,
	wAttacker,
	wTime,
};
new WarInfo[sizeof(TurfInfo)][wInfo],
	WarScoreF[16][sizeof(TurfInfo)],
	ucideri[MAX_PLAYERS][sizeof(TurfInfo)],
	decese[MAX_PLAYERS][sizeof(TurfInfo)],
	worstscoreat[sizeof(TurfInfo)],
	worstmemberat[sizeof(TurfInfo)],
	worstscoredf[sizeof(TurfInfo)],
	worstmemberdf[sizeof(TurfInfo)],
	bestscoreat[sizeof(TurfInfo)],
	bestmemberat[sizeof(TurfInfo)],
	bestscoredf[sizeof(TurfInfo)],
	bestmemberdf[sizeof(TurfInfo)],
	DeelayWar[16],
	InWar[16];

// SPECTATOR
enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
	sLocal,
	sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

// CLAN
enum clanE
{
    cClanName[64],
	cClanMOTD[128],
	cClanRankName1[32],
	cClanRankName2[32],
	cClanRankName3[32],
	cClanRankName4[32],
	cClanRankName5[32],
	cClanRankName6[32],
	cClanRankName7[32],
	cClanTag[32],
	cClanTagType,
	cClanID,
	cClanExpire,
	cClanActive,
	cClanSlots,
	cClanColor[10],
};
new ClanInfo[MAX_CLANS][clanE];

// PLAYER ACCOUNT
enum pInfo
{
	pKey[129],
	pColors,
	pNormalName[30],
	pLevel,
	pAdmin,
	pHelper,
	pSupport,
	pPremiumAccount,
	pPremiumPoints,
	pTreasurePoints,
	pPhoneBlocked[MAX_PLAYERS],
	pBlockedAcc,
	pFoundObject[MAX_EVOBJECTS],
	pObject[MAX_EVOBJECTS],
	Float:pConnectTime,
	pReg,
	pSex,
	pAge,
	pOrigin,
	pMuted,
	pMuteTime,
	pGasCan,
	pExp,
	pCash,
	pAccount,
	pCrimes,
	pKills,
	pDeaths,
	pArrested,
	pWantedDeaths,
	pPhoneBook,
	pReportMuted,
	pPhone,
 	pWantedLevel,
 	pSelected[MAX_PLAYER_NAME],
	pFishes,
	pJob,
	pPayCheck,
	pHeadValue,
	pJailed,
	pJailTime,
	pMats,
	pDrugs,
	pLeader,
	pMember,
	pRank,
	pGlasses,
	pHats,
	pFACWarns,
	pFpunish,
	pFishSkill,
	pFlyMode,
	pSpawnChange,
	pFishPrice,
	pInt,
	pLocal,
	pTeam,
	pModel,
	pPnumber,
	pPhousekey,
	pPbiskey,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	pCarLicSuspend,
	pGunLicSuspend,
	pCarLicT,
	pCarLic,
	pFlyLicT,
	pFlyLic,
	pBoatLicT,
	pBoatLic,
	pGunLicT,
	pGunLic,
	pPayDay,
 	pRobSkill,
 	pRobTimes,
 	pRobRem,
 	pTruckSkill,
 	pTruckTimes,
 	pTruckRem,
 	pFarmSkill,
 	pFarmTimes,
 	pFarmRem,
	pPizzaSkill,
	pPizzaTimes,
	pPizzaRem,
	pArmsSkill,
	pArmsTimes,
	pArmsRem,
	pBusSkill,
	pBusTimes,
	pBusRem,
 	pFishTimes,
 	pFishRem,
	pGarbageSkill,
	pGarbageTimes,
	pGarbageRem,
	pRob,
	pTut,
	pWarns,
	pLanguage,
	pFuel,
    pSleeping,
    pRented,
    pSpeaker,
    pWTalkie,
   	pEmail[200],
	pClanTag,
	pClan,
	pHitT,
 	pCRank,
	pCWarns,
	pSQLID,
    pVictim[64],
    pAccused[64],
	pCrime1[184],
	pCrime2[184],
	pCrime3[184],
	pSerial[128],
	pNewbieEnabled,
	pFirstAnswer,
	pNewbieQuestion[256],
	pNMuted,
	pNewbieTimeout,
	pStatus,
	pFWorks,
	pVirtualPD,
	pFactionJoin,
	pCredits,
	pHost[25],
	pOneHost,
	pHiddenColor,
	pGiftTime,
	pFightStyle,
	pAsteapta,
	pHUD1,
	pHUD2,
	pHUD3,
	pFPS,
	pDrunkLevelLast,
	pRaceG,
	pPaintBallG,
	pPaintBallKills,
	pPaintBallVoted,
	pPaintBallVoted2,
	pRaceVoted,
	pNextNotification,
	pPaydayON,
	pSession,
	pCarSlots,
	pCar[MAX_PERSONAL_VEHICLES],
	pCarID[MAX_PERSONAL_VEHICLES],
	pCarModel[MAX_PERSONAL_VEHICLES],
	Float:pCarLocX[MAX_PERSONAL_VEHICLES],
	Float:pCarLocY[MAX_PERSONAL_VEHICLES],
	Float:pCarLocZ[MAX_PERSONAL_VEHICLES],
	Float:pCarAngle[MAX_PERSONAL_VEHICLES],
	Float:pCarLLocX[MAX_PERSONAL_VEHICLES],
	Float:pCarLLocY[MAX_PERSONAL_VEHICLES],
	Float:pCarLLocZ[MAX_PERSONAL_VEHICLES],
	Float:pCarAngle2[MAX_PERSONAL_VEHICLES],
	pCarBuyTime[MAX_PERSONAL_VEHICLES],
	pCarColor1[MAX_PERSONAL_VEHICLES],
	pCarColor2[MAX_PERSONAL_VEHICLES],
	pCarLock[MAX_PERSONAL_VEHICLES],
	pCarInsPrice[MAX_PERSONAL_VEHICLES],
	pCarIns[MAX_PERSONAL_VEHICLES],
	Float:pCarKM[MAX_PERSONAL_VEHICLES],
	pCarKMLast[MAX_PERSONAL_VEHICLES],
	Float:pCarHP[MAX_PERSONAL_VEHICLES],
	pCarVIP[MAX_PERSONAL_VEHICLES],
	pCarVipColors[MAX_PERSONAL_VEHICLES],
	pCarDamage1[MAX_PERSONAL_VEHICLES],
	pCarDamage2[MAX_PERSONAL_VEHICLES],
	pCarDamage3[MAX_PERSONAL_VEHICLES],
	pCarDamage4[MAX_PERSONAL_VEHICLES],
	pCarGas[MAX_PERSONAL_VEHICLES],
	pCarPaintJ[MAX_PERSONAL_VEHICLES],
	pCarBlock[MAX_PERSONAL_VEHICLES],
	pQuest1,
	pQuest2,
	pQuestProgress1,
	pQuestProgress2,
	pQuestNeed1,
	pQuestNeed2,
	pQuestCar
};
new PlayerInfo[MAX_PLAYERS][pInfo];

// HOUSE
enum hInfo
{
	hID,
	Float:hEntrancex,
	Float:hEntrancey,
	Float:hEntrancez,
	Float:hExitx,
	Float:hExity,
	Float:hExitz,
	hOwner[25],
	hDiscription[64],
	hValue,
	hPrice,
	hHel,
	hMusic,
	hInterior,
	hInteriorType,
	hLock,
	hOwned,
	hRent,
	hRentabil,
	hTakings,
	hLevel,
	hVirtual
};
new HouseInfo[120][hInfo],
	Text3D:HouseLabel[sizeof(HouseInfo)],
	HousePickup[200];

// ALL VEHICLES
enum vehInfo
{
	vehModel,
	vehColor1,
	vehColor2,
	vehGroup,
	vehRank,
	vehJob,
	vehCarID,
	vehCarIDD,
	Float:vehPosX,
	Float:vehPosY,
	Float:vehPosZ,
	Float:vehRotation
};
new VehicleInfo[1000][vehInfo];

// ATMS
enum atmInfo
{
	Float: fATMPos[3],
	Float: fATMPosRot[3],
	rObjectId
};
new AtmInfo[MAX_ATMS][atmInfo];

// SVARS
enum svarInfo
{
	svName[32],
	svValue
};
new SvarInfo[MAX_SVARS][svarInfo];

//QUEST OBJECTS
enum objInfo
{
	objID,
	objModel,
	Float:objPosX,
	Float:objPosY,
	Float:objPosZ
};
new ObjectInfo[MAX_EVOBJECTS][objInfo];

// BUSSINES
enum bInfo
{
	bID,
    bOwned,
	bOwner[25],
	bMessage[50],
	Float:bEntranceX,
	Float:bEntranceY,
	Float:bEntranceZ,
	Float:bExitX,
	Float:bExitY,
	Float:bExitZ,
	bLevelNeeded,
	bBuyPrice,
	bPrice,
	bEntranceCost,
	bTill,
	bLocked,
	bInterior,
	bVirtual,
	bSbiz,
	bType
};
new BizzInfo[100][bInfo],
	Text3D:BizzLabel[sizeof(BizzInfo)];

new spoiler[20][0] = {
	{1000},
	{1001},
	{1002},
	{1003},
	{1014},
	{1015},
	{1016},
	{1023},
	{1058},
	{1060},
	{1049},
	{1050},
	{1138},
	{1139},
	{1146},
	{1147},
	{1158},
	{1162},
	{1163},
	{1164}
};

new nitro[3][0] = {
	{1008},
	{1009},
	{1010}
};

new fbumper[23][0] = {
	{1117},
	{1152},
	{1153},
	{1155},
	{1157},
	{1160},
	{1165},
	{1167},
	{1169},
	{1170},
	{1171},
	{1172},
	{1173},
	{1174},
	{1175},
	{1179},
	{1181},
	{1182},
	{1185},
	{1188},
	{1189},
	{1192},
	{1193}
};

new rbumper[22][0] = {
	{1140},
	{1141},
	{1148},
	{1149},
	{1150},
	{1151},
	{1154},
	{1156},
	{1159},
	{1161},
	{1166},
	{1168},
	{1176},
	{1177},
	{1178},
	{1180},
	{1183},
	{1184},
	{1186},
	{1187},
	{1190},
	{1191}
};

new exhaust[28][0] = {
	{1018},
	{1019},
	{1020},
	{1021},
	{1022},
	{1028},
	{1029},
	{1037},
	{1043},
	{1044},
	{1045},
	{1046},
	{1059},
	{1064},
	{1065},
	{1066},
	{1089},
	{1092},
	{1104},
	{1105},
	{1113},
	{1114},
	{1126},
	{1127},
	{1129},
	{1132},
	{1135},
	{1136}
};

new bventr[2][0] = {
	{1142},
	{1144}
};

new bventl[2][0] = {
	{1143},
	{1145}
};

new bscoop[4][0] = {
	{1004},
	{1005},
	{1011},
	{1012}
};

new rscoop[17][0] = {
	{1006},
	{1032},
	{1033},
	{1035},
	{1038},
	{1053},
	{1054},
	{1055},
	{1061},
	{1067},
	{1068},
	{1088},
	{1091},
	{1103},
	{1128},
	{1130},
	{1131}
};

new lskirt[21][0] = {
	{1007},
	{1026},
	{1031},
	{1036},
	{1039},
	{1042},
	{1047},
	{1048},
	{1056},
	{1057},
	{1069},
	{1070},
	{1090},
	{1093},
	{1106},
	{1108},
	{1118},
	{1119},
	{1133},
	{1122},
	{1134}
};

new rskirt[21][0] = {
	{1017},
	{1027},
	{1030},
	{1040},
	{1041},
	{1051},
	{1052},
	{1062},
	{1063},
	{1071},
	{1072},
	{1094},
	{1095},
	{1099},
	{1101},
	{1102},
	{1107},
	{1120},
	{1121},
	{1124},
	{1137}
};

new hydraulics[1][0] = {
	{1087}
};

new vbase[1][0] = {
	{1086}
};

new rbbars[4][0] = {
	{1109},
	{1110},
	{1123},
	{1125}
};

new fbbars[2][0] = {
	{1115},
	{1116}
};

new wheels[17][0] = {
	{1025},
	{1073},
	{1074},
	{1075},
	{1076},
	{1077},
	{1078},
	{1079},
	{1080},
	{1081},
	{1082},
	{1083},
	{1084},
	{1085},
	{1096},
	{1097},
	{1098}
};

new vlights[2][0] = {
	{1013},
	{1024}
};

// DEALERSHIP STOCK
enum vInfo
{
	vID,
	vStock,
	vPrice,
	vModel,
	vSpeed,
	vName[255]
};
new Stock[106][vInfo];

// FACTIONS
enum Factions
{
	fID,
	fName[128],
	Float:fcX,
	Float:fcY,
	Float:fcZ,
	Float:fceX,
	Float:fceY,
	Float:fceZ,
	Float:fSafePos[3],
	fSafePickupID,
	Text3D:fSafeLabelID,
	fMats,
	fDrugs,
	fBank,
	fAnn[128],
	fWin,
	fLost,
	fMembers,
	fMaxMembers,
	fMinLevel,
	fApplication,
	fInterior,
	fVirtual,
	fMapIcon,
	fLocked,
	fPickupID,
	fPickupIDD,
	Text3D:fLabelID,
	fRankName1[64],
	fRankName2[64],
	fRankName3[64],
	fRankName4[64],
	fRankName5[64],
	fRankName6[64],
	fRankName7[64]
};
new DynamicFactions[19][Factions],
	FactionSkin[19][11];

// GUN NAME
new GunNames[55][] =
{
	"Punch",
	"Brass Knuckles",
	"Golf Club",
	"Nitestick",
	"Knife",
	"Baseball Bat",
	"Showel",
	"Pool Cue",
	"Katana",
	"Chainsaw",
	"Purple Dildo",
	"Small White Dildo",
	"Long White Dildo",
	"Vibrator",
	"Flowers",
	"Cane",
	"Grenade",
	"Tear Gas Grenade",
	"Molotov",
	"Vehicle Missile",
	"Hydra Flare",
	"Jetpack",
	"Colt .45",
	"Silenced Colt .45",
	"Desert Eagle",
	"Shotgun",
	"Sawn-off",
	"Combat Shotgun",
	"Micro UZI",
	"MP5",
	"AK-47",
	"M4A1",
	"Tec-9",
	"Rifle",
	"Sniper Rifle",
	"Rocket Launcher",
	"HS Rocket Launcher",
	"Flamethrower",
	"Minigun",
	"Satchel Charge",
	"Detonator",
	"Spraycan",
	"Fire Extinguisher",
	"Camera",
	"Nightvision Goggles",
	"Thermal Goggles",
	"Parachute",
	"Fake Pistol",
	"",
	"Vehicle",
	"Helicopter",
	"Explosion",
	"",
	"Drowned",
	"Splat"
};

new Peds[153][1] = {
{1},{2},{6},{8},{9},{10},{12},{13},{14},{15},{16},{18},{19},{20},{21},{22},{23},{24},{25},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37},{38},{39},{40},{41},{42},{43},{44},{45},{47},{48},{49},{50},{51},{52},{53},{54},{56},{57},{58},{60},
{62},{63},{64},{65},{66},{67},{68},{69},{75},{77},{78},{79},{80},{81},{85},{87},{88},{89},{91},{92},{94},{95},{96},{97},{99},{101},{129},{130},{131},{132},{133},{134},{135},{136},{137},{138},{139},{140},{142},{143},{145},{146},{151},{152},{154},
{156},{157},{158},{159},{160},{161},{162},{168},{170},{178},{179},{180},{182},{183},{192},{193},{196},{197},{198},{199},{200},{201},{202},{205},{207},{209},{210},{212},{213},{214},{215},{216},{229},{230},{231},{232},{233},{234},{235},{236},{237},
{238},{239},{243},{244},{245},{246},{249},{250},{251},{252},{256},{257},{260},{262},{263},{268},{298}
};

// MAIN
main()
{
	print("Script: ForEver RPG Roleplay - Based on Saints Roleplay");
	print("Status: Loaded, running version "SERVER_VERSION);
	print("----------------------------------------------------");
}

public Update(playerid, type)
{
	if(IsPlayerConnected(playerid))
	{
		new var[356];
		{
			switch(type)
			{
				case pCashx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Money`='%d' WHERE `name`='%s'",GetPlayerCash(playerid), PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRP:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Respect`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pExp], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBank:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Bank`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pAccount], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarLicTx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CarLicT`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarLicT], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarLicSuspendx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CarLicSuspend`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarLicSuspend], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGunLicSuspendx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GunLicSuspend`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGunLicSuspend], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFlyLicTx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FlyLicT`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFlyLicT], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBoatLicTx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `BoatLicT`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBoatLicT], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGunLicTx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GunLicT`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGunLicT], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRobx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Rob`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRob], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFpunishx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FPunish`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFpunish], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pConnectTimex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ConnectedTime`='%f' WHERE `name`='%s'",PlayerInfo[playerid][pConnectTime], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPayDayx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PayDay`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPayDay], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPayCheckx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Paycheck`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPayCheck], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPhousekeyx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `House`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPhousekey], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pJailedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Jailed`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pJailed], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pJailTimex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `JailTime`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pWantedLevelx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `WantedLevel`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pWantedLevel], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPhonex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Phone`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPhone], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pMatsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Materials`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pMats], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFishesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Fishes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFishes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFishSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FishSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFishSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGarbageSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GarbageSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGarbageSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGarbageTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GarbageTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGarbageTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGarbageRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GarbageRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGarbageRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pSpawnChangex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `SpawnChange`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pSpawnChange], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRobSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `RobSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRobSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pTruckSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `TruckSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pTruckSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pTruckTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `TruckTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pTruckTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pTruckRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `TruckRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pTruckRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPizzaSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PizzaSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPizzaSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPizzaTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PizzaTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPizzaTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPizzaRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PizzaRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPizzaRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pArmsSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ArmsSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pArmsSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pArmsTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ArmsTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pArmsTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pArmsRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ArmsRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pArmsRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBusSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `BusSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBusSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBusTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `BusTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBusTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBusRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `BusRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBusRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFarmSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FarmSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFarmSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFarmTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FarmTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFarmTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFarmRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FarmRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFarmRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFishTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FishTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFishTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFishRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FishRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFishRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRobRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `RobRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRobRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRobTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `RobTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRobTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pLevelx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Level`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPremiumAccountx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Premium`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumAccount], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pOnlineTimeTodayx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `OnlineTimeToday`='%d'  WHERE `name`='%s'", OnlineTimeToday[playerid], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pQuest1x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Quest1`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pQuest1], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pQuest2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Quest2`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pQuest2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pQuestProgress1x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `QuestProgress1`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pQuestProgress1], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pQuestProgress2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `QuestProgress2`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pQuestProgress2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pQuestNeed1x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `QuestNeed1`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pQuestNeed1], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pQuestNeed2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `QuestNeed2`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pQuestNeed2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pQuestCarx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `QuestCar`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pQuestCar], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPaydayONx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PaydayON`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPaydayON], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGasCanx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GasCan`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGasCan], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPremiumPointsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pTreasurePoints:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pTreasurePoints], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pReportMutedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ReportMuted`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pReportMuted], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPbiskeyx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Bizz`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPbiskey], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPnumberx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PhoneNr`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPnumber], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRegx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Registered`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pReg], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pColorsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Color`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pColors], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRentedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Rented`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRented], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCrimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Crimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCrimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCrime1x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Crime1`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pCrime1], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCrime2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Crime2`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pCrime2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCrime3x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Crime3`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pCrime3], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pVictimx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Victim`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pVictim], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pAccusedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Accused`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pAccused], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFWorksx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FWorks`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFWorks], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pEmailx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Email`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pEmail], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pWarnsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Warnings`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pWarns], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pLanguagex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Language`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pLanguage], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pVirtualPDx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `VirtualPD`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pVirtualPD], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGlassesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Glasses`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGlasses], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHatsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Hats`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHats], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFactionJoinx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FactionJoin`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFactionJoin], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCreditsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CreditsF`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCredits], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pNMutedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `NMuted`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pNMuted], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHiddenColorx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HiddenColor`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHiddenColor], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGiftTimex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GiftTime`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGiftTime], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFightStylex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FightStyle`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHUD1x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HUD1`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHUD1], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHUD2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HUD2`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHUD2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHUD3x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HUD3`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHUD3], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pSessionx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Session`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pSession], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
			}
		}
	}
	return 1;
}

//QUEST
public FinishQuest1(playerid, questid)
{
	new quest1[128],quest[256],money;
	if(PlayerInfo[playerid][pLanguage] == 1)
	{
		if(questid == 1)  format(quest1,sizeof(quest1),"Go to the baseball stadium located in Las Venturas");
		else if(questid == 2)  format(quest1,sizeof(quest1),"Climb mount Chiliad");
		else if(questid == 3)  format(quest1,sizeof(quest1),"Travel %d KM with vehicle %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
		else if(questid == 4)  format(quest1,sizeof(quest1),"Rob a business");
		else if(questid == 5)  format(quest1,sizeof(quest1),"Collect %d materials",PlayerInfo[playerid][pQuestNeed1]);
		else if(questid == 6)  format(quest1,sizeof(quest1),"Catch and sell %d fish",PlayerInfo[playerid][pQuestNeed1]);
		format(quest, sizeof(quest),"Quest [%s] completed!",quest1);
		SendClientMessage(playerid, COLOR_YELLOW, quest);
		money = PlayerInfo[playerid][pLevel] * (3000 + random(2000));
		GivePlayerCash(playerid, money);
		PlayerInfo[playerid][pExp]++;
		Update(playerid, pCashx);
		Update(playerid, pRP);
		format(quest, sizeof(quest),"You received 1 Respect Point and $%s.",FormatNumber(money));
		SendClientMessage(playerid, COLOR_YELLOW, quest);
	}
	else
	{
		if(questid == 1)  format(quest1,sizeof(quest1),"Mergi pe stadionul de baseball din Las Venturas");
		else if(questid == 2)  format(quest1,sizeof(quest1),"Urca pe muntele Chiliad");
		else if(questid == 3)  format(quest1,sizeof(quest1),"Parcurge distanta de %d KM cu un vehicul de tipul %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
		else if(questid == 4)  format(quest1,sizeof(quest1),"Jefuieste o afacere");
		else if(questid == 5)  format(quest1,sizeof(quest1),"Colecteaza %d materiale",PlayerInfo[playerid][pQuestNeed1]);
		else if(questid == 6)  format(quest1,sizeof(quest1),"Vinde %d pesti",PlayerInfo[playerid][pQuestNeed1]);
		format(quest, sizeof(quest),"Misiunea [%s] a fost terminata!",quest1);
		SendClientMessage(playerid, COLOR_YELLOW, quest);
		money = PlayerInfo[playerid][pLevel] * (3000 + random(2000));
		GivePlayerCash(playerid, money);
		PlayerInfo[playerid][pExp]++;
		Update(playerid, pCashx);
		Update(playerid, pRP);
		format(quest, sizeof(quest),"Ai primit un Respect Point (RP) si %s$.",FormatNumber(money));
		SendClientMessage(playerid, COLOR_YELLOW, quest);
	}
	return 1;
}

public FinishQuest2(playerid, questid)
{
	new quest2[128],quest[256],money;
	if(PlayerInfo[playerid][pLanguage] == 1)
	{
		if(questid == 1)  format(quest2,sizeof(quest2),"Deliver %d pizza",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 2)
		{
			if(!IsACop(playerid))
			{
				format(quest2,sizeof(quest2),"Kill %d cops",PlayerInfo[playerid][pQuestNeed2]);
			}
			else
			{
				format(quest2,sizeof(quest2),"Arrest %d suspects",PlayerInfo[playerid][pQuestNeed2]);
			}
		}
		else if(questid == 3)  format(quest2,sizeof(quest2),"Kill %d players at paintball",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 4)  format(quest2,sizeof(quest2),"Collect and unload %d KG of garbage",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 5)  format(quest2,sizeof(quest2),"Sell %d KG of flour",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 6)  format(quest2,sizeof(quest2),"Buy drugs and use them");
		else if(questid == 7)  format(quest2,sizeof(quest2),"Go in a bar and get drunk");
		format(quest, sizeof(quest),"Quest [%s] completed!",quest2);
		SendClientMessage(playerid, COLOR_YELLOW, quest);
		money = PlayerInfo[playerid][pLevel] * (3000 + random(2000));
		GivePlayerCash(playerid, money);
		PlayerInfo[playerid][pExp]++;
		Update(playerid, pCashx);
		Update(playerid, pRP);
		format(quest, sizeof(quest),"You received 1 Respect Point and $%s.",FormatNumber(money));
		SendClientMessage(playerid, COLOR_YELLOW, quest);
	}
	else
	{
		if(questid == 1)  format(quest2,sizeof(quest2),"Livreaza %d pizza",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 2)
		{
			if(!IsACop(playerid))
			{
				format(quest2,sizeof(quest2),"Omoara %d politisti",PlayerInfo[playerid][pQuestNeed2]);
			}
			else
			{
				format(quest2,sizeof(quest2),"Aresteaza %d suspecti",PlayerInfo[playerid][pQuestNeed2]);
			}
		}
		else if(questid == 3)  format(quest2,sizeof(quest2),"Omoara %d playeri la Paintball",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 4)  format(quest2,sizeof(quest2),"Colecteaza si descarca %d KG de gunoi",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 5)  format(quest2,sizeof(quest2),"Vinde %d KG de faina",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 6)  format(quest2,sizeof(quest2),"Cumpara droguri si foloseste-le");
		else if(questid == 7)  format(quest2,sizeof(quest2),"Du-te intr-un bar si imbata-te");
		format(quest, sizeof(quest),"Misiunea [%s] a fost terminata!",quest2);
		SendClientMessage(playerid, COLOR_YELLOW, quest);
		money = PlayerInfo[playerid][pLevel] * (3000 + random(2000));
		GivePlayerCash(playerid, money);
		PlayerInfo[playerid][pExp]++;
		Update(playerid, pCashx);
		Update(playerid, pRP);
		format(quest, sizeof(quest),"Ai primit un Respect Point (RP) si %s$.",FormatNumber(money));
		SendClientMessage(playerid, COLOR_YELLOW, quest);
	}
	return 1;
}

// VEHICLE COMPONENT SAVE
forward SaveComponent(vehicleid,componentid);
public SaveComponent(vehicleid,componentid)
{
	new vid,pid;
	foreach(new i : Player)
	{
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
			if(PlayerInfo[i][pCarID][v] == vehicleid)
			{
				vid = v;
				pid = i;
			}
		}
	}
	for(new s=0; s<20; s++)
	{
		if(componentid == spoiler[s][0])
		{
			CarMod[pid][vid][0] = componentid;
		}
	}
	for(new s=0; s<3; s++)
	{
		if(componentid == nitro[s][0])
		{
			CarMod[pid][vid][1] = componentid;
		}
	}
	for(new s=0; s<23; s++)
	{
		if(componentid == fbumper[s][0])
		{
			CarMod[pid][vid][2] = componentid;
		}
	}
	for(new s=0; s<22; s++)
	{
		if(componentid == rbumper[s][0])
		{
			CarMod[pid][vid][3] = componentid;
		}
	}
	for(new s=0; s<28; s++)
	{
		if(componentid == exhaust[s][0])
		{
			CarMod[pid][vid][4] = componentid;
		}
	}
	for(new s=0; s<2; s++)
	{
		if(componentid == bventr[s][0])
		{
			CarMod[pid][vid][5] = componentid;
		}
	}
	for(new s=0; s<2; s++)
	{
		if(componentid == bventl[s][0]) {
			CarMod[pid][vid][6] = componentid;
		}
	}
	for(new s=0; s<4; s++)
	{
		if(componentid == bscoop[s][0])
		{
			CarMod[pid][vid][7] = componentid;
		}
	}
	for(new s=0; s<17; s++)
	{
		if(componentid == rscoop[s][0])
		{
			CarMod[pid][vid][8] = componentid;
		}
	}
	for(new s=0; s<21; s++)
	{
		if(componentid == lskirt[s][0])
		{
			CarMod[pid][vid][9] = componentid;
		}
	}
	for(new s=0; s<21; s++)
	{
		if(componentid == rskirt[s][0])
		{
			CarMod[pid][vid][10] = componentid;
		}
	}
	for(new s=0; s<1; s++)
	{
		if(componentid == hydraulics[s][0])
		{
			CarMod[pid][vid][11] = componentid;
		}
	}
	for(new s=0; s<1; s++)
	{
		if(componentid == vbase[s][0])
		{
			CarMod[pid][vid][12] = componentid;
		}
	}
	for(new s=0; s<4; s++)
	{
		if(componentid == rbbars[s][0])
		{
			CarMod[pid][vid][13] = componentid;
		}
	}
	for(new s=0; s<2; s++)
	{
		if(componentid == fbbars[s][0])
		{
			CarMod[pid][vid][14] = componentid;
		}
	}
	for(new s=0; s<17; s++)
	{
		if(componentid == wheels[s][0])
		{
			CarMod[pid][vid][15] = componentid;
		}
	}
	for(new s=0; s<2; s++)
	{
		if(componentid == vlights[s][0])
		{
			CarMod[pid][vid][16] = componentid;
		}
	}
	return 1;
}
// blackjack

public BlackJackFunction(playerid, card)
{
	if(BlackJackPlayerCards[playerid] + 1 > 5) return SS(playerid, COLOR_WHITE, "Nu poti pune mai mult de 5 carti la masa!", "You can't have more than 5 cards on table!");
	for(new c; c < card; c++)
	{
		new rand = random(85), numb;
		if(rand >= 0 && rand <= 5) numb = 1;
		else if(rand >= 6 && rand <= 12) numb = 2;
		else if(rand >= 13 && rand <= 20) numb = 3;
		else if(rand >= 21 && rand <= 30) numb = 4;
		else if(rand >= 31 && rand <= 38) numb = 5;
		else if(rand >= 39 && rand <= 45) numb = 6;
		else if(rand >= 46 && rand <= 55) numb = 7;
		else if(rand >= 56 && rand <= 59) numb = 8;
		else if(rand >= 60 && rand <= 66) numb = 9;
		else if(rand >= 67 && rand <= 72) numb = 10;
		else if(rand >= 73 && rand <= 75) numb = 12;
		else if(rand >= 76 && rand <= 79) numb = 13;
		else if(rand >= 80) numb = 14;

		BlackJackPlayerCard[playerid][BlackJackPlayerCards[playerid]] = numb;
		BlackJackPlayerScore[playerid] += numb;

		BlackJackPlayerCards[playerid]++;
	}
	if(card == 2)
	{
		new rand = random(85), numb;
		if(rand >= 0 && rand <= 5) numb = 1;
		else if(rand >= 6 && rand <= 12) numb = 2;
		else if(rand >= 13 && rand <= 20) numb = 3;
		else if(rand >= 21 && rand <= 30) numb = 4;
		else if(rand >= 31 && rand <= 38) numb = 5;
		else if(rand >= 39 && rand <= 45) numb = 6;
		else if(rand >= 46 && rand <= 55) numb = 7;
		else if(rand >= 56 && rand <= 59) numb = 8;
		else if(rand >= 60 && rand <= 66) numb = 9;
		else if(rand >= 67 && rand <= 72) numb = 10;
		else if(rand >= 73 && rand <= 75) numb = 12;
		else if(rand >= 76 && rand <= 79) numb = 13;
		else if(rand >= 80) numb = 14;

		BDealerCard[playerid][0] = numb;
		BDealerScore[playerid] += numb;
		BDealerCards[playerid] += 1;
	}

	if(BlackJackPlayerScore[playerid] > 21)
	{
		new text[128];
		PlayerTextDrawShow(playerid, BJWinText[playerid]);
		PlayerTextDrawSetString(playerid, BJWinText[playerid], "~r~BUSTED!");
		format(text, sizeof(text), "* %s lost $%s at Black Jack.", GetName(playerid), FormatNumber(BDeal[playerid]));
		ProxDetector(40.0, playerid, text, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		CloseBMatch[playerid] = 3;
	}

	BlackJackUpdateTable(playerid);
	return 1;
}

public BlackJackUpdateTable(playerid)
{
	for(new p; p < BlackJackPlayerCards[playerid]; p++)
	{
		new type[30];
		switch(BlackJackPlayerCard[playerid][p])
		{
		    case 1:format(type, sizeof(type), "LD_CARD:cd1s");
		    case 2:format(type, sizeof(type), "LD_CARD:cd2h");
		    case 3:format(type, sizeof(type), "LD_CARD:cd3d");
		    case 4:format(type, sizeof(type), "LD_CARD:cd4c");
		    case 5:format(type, sizeof(type), "LD_CARD:cd5h");
		    case 6:format(type, sizeof(type), "LD_CARD:cd6c");
		    case 7:format(type, sizeof(type), "LD_CARD:cd7d");
		    case 8:format(type, sizeof(type), "LD_CARD:cd8c");
		    case 9:format(type, sizeof(type), "LD_CARD:cd9h");
		    case 10:format(type, sizeof(type), "LD_CARD:cd10s");
		    case 12:format(type, sizeof(type), "LD_CARD:cd11d");
		    case 13:format(type, sizeof(type), "LD_CARD:cd12h");
		    case 14:format(type, sizeof(type), "LD_CARD:cd13h");
		}
		switch(p)
		{
		    case 0:PlayerTextDrawSetString(playerid, BJPlayerCard1[playerid], type);
		    case 1:PlayerTextDrawSetString(playerid, BJPlayerCard2[playerid], type);
		    case 2:PlayerTextDrawSetString(playerid, BJPlayerCard3[playerid], type);
		    case 3:PlayerTextDrawSetString(playerid, BJPlayerCard4[playerid], type);
		    case 4:PlayerTextDrawSetString(playerid, BJPlayerCard5[playerid], type);
		}
	}
	for(new p; p < BDealerCards[playerid]; p++)
	{
		new type[30];
		switch(BlackJackPlayerCard[playerid][p])
		{
		    case 1:format(type, sizeof(type), "LD_CARD:cd1s");
		    case 2:format(type, sizeof(type), "LD_CARD:cd2h");
		    case 3:format(type, sizeof(type), "LD_CARD:cd3d");
		    case 4:format(type, sizeof(type), "LD_CARD:cd4c");
		    case 5:format(type, sizeof(type), "LD_CARD:cd5h");
		    case 6:format(type, sizeof(type), "LD_CARD:cd6c");
		    case 7:format(type, sizeof(type), "LD_CARD:cd7d");
		    case 8:format(type, sizeof(type), "LD_CARD:cd8c");
		    case 9:format(type, sizeof(type), "LD_CARD:cd9h");
		    case 10:format(type, sizeof(type), "LD_CARD:cd10s");
		    case 12:format(type, sizeof(type), "LD_CARD:cd11d");
		    case 13:format(type, sizeof(type), "LD_CARD:cd12h");
		    case 14:format(type, sizeof(type), "LD_CARD:cd13h");
		}
		switch(p)
		{
		    case 0:PlayerTextDrawSetString(playerid, BJPlayerCard1[playerid], type);
		    case 1:PlayerTextDrawSetString(playerid, BJPlayerCard2[playerid], type);
		    case 2:PlayerTextDrawSetString(playerid, BJPlayerCard3[playerid], type);
		    case 3:PlayerTextDrawSetString(playerid, BJPlayerCard4[playerid], type);
		    case 4:PlayerTextDrawSetString(playerid, BJPlayerCard5[playerid], type);
		}
	}
	new str[100];
	format(str, sizeof(str), "DEALER: %s", FormatNumber(BDealerScore[playerid]));
	PlayerTextDrawSetString(playerid, BJDealerScoreText[playerid], str);
	format(str, sizeof(str), "PLAYER: %s", FormatNumber(BlackJackPlayerScore[playerid]));
	PlayerTextDrawSetString(playerid, BJPlayerScoreText[playerid], str);
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(clickedid == Text:INVALID_TEXT_DRAW)
    {
        PlayerTextDrawHide(playerid, BJusebox1[playerid]);
		PlayerTextDrawHide(playerid, BJusebox2[playerid]);
		PlayerTextDrawHide(playerid, BJusebox3[playerid]);
		PlayerTextDrawHide(playerid, BJDealerText[playerid]);
		PlayerTextDrawHide(playerid, BJPlayerText[playerid]);
		PlayerTextDrawHide(playerid, BJBlackJackText[playerid]);
		PlayerTextDrawHide(playerid, BJScoreText[playerid]);
		PlayerTextDrawHide(playerid, BJDealText[playerid]);
		PlayerTextDrawHide(playerid, BJDealAmountText[playerid]);
		PlayerTextDrawHide(playerid, BJBalanceText[playerid]);
		PlayerTextDrawHide(playerid, BJBalanceAmountText[playerid]);
		PlayerTextDrawHide(playerid, BJDealButtonText[playerid]);
		PlayerTextDrawHide(playerid, BJEnterBetText[playerid]);
		PlayerTextDrawHide(playerid, BJDealerScoreText[playerid]);
		PlayerTextDrawHide(playerid, BJPlayerScoreText[playerid]);
		PlayerTextDrawHide(playerid, BJOpenActionText[playerid]);
		PlayerTextDrawHide(playerid, BJDealerCard1[playerid]);
		PlayerTextDrawHide(playerid, BJDealerCard2[playerid]);
		PlayerTextDrawHide(playerid, BJDealerCard3[playerid]);
		PlayerTextDrawHide(playerid, BJDealerCard4[playerid]);
		PlayerTextDrawHide(playerid, BJDealerCard5[playerid]);
		PlayerTextDrawHide(playerid, BJPlayerCard1[playerid]);
		PlayerTextDrawHide(playerid, BJPlayerCard2[playerid]);
		PlayerTextDrawHide(playerid, BJPlayerCard3[playerid]);
		PlayerTextDrawHide(playerid, BJPlayerCard4[playerid]);
		PlayerTextDrawHide(playerid, BJPlayerCard5[playerid]);
		PlayerTextDrawHide(playerid, BJWinText[playerid]);
		TogglePlayerControllable(playerid, true);
		CloseBMatch[playerid] = 0;
		BJMatch[playerid] = 0;
    }
    return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
   	if(playertextid == BJDealButtonText[playerid])
    {
		if(CloseBMatch[playerid] == 0)
		{
			if(BDeal[playerid] > 0)
			{
				if(BJMatch[playerid] == 0)
				{
					BlackJackFunction(playerid, 2);
					GivePlayerCash(playerid, -BDeal[playerid]);
					Update(playerid, pCashx);
					new text[100];
					format(text, sizeof(text), "%s$", FormatNumber(GetPlayerCash(playerid)));
					PlayerTextDrawSetString(playerid, BJBalanceAmountText[playerid], text);
					BJMatch[playerid] = 1;
					PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
				}
				else SS(playerid, COLOR_WHITE, "Jocul a inceput deja!", "The match has already begun!");
			}
			else SS(playerid, COLOR_WHITE, "Seteaza o suma de bani inainte, folosind 'ENTER BET AMOUNT'!", "Set an amount of money before DEAL, using 'ENTER BET AMOUNT'!");
		}
    }
	else if(playertextid == BJOpenActionText[playerid])
    {
		if(CloseBMatch[playerid] == 0) { ShowPlayerDialog(playerid, DIALOG_BJ_ACTION, DIALOG_STYLE_LIST, "Blackjack: Player actions", "Hit\nStand\nClear Bet", "Select", "Close"); PlayerPlaySound(playerid, 5201, 0.0, 0.0, 0.0); }
    }
	else if(playertextid == BJEnterBetText[playerid])
    {
        if(CloseBMatch[playerid] == 0)
		{
			if(BJMatch[playerid] == 0)
			{
				if(PlayerInfo[playerid][pLanguage] == 1) ShowPlayerDialog(playerid, DIALOG_BJ_BET, DIALOG_STYLE_INPUT, "Blackjack: Enter amount", "Type in the box below the amount you wish to bet before the game starts\nMinimum 100.000$ - Maximum 200.000.000$", "Bet", "Close");
				else ShowPlayerDialog(playerid, DIALOG_BJ_BET, DIALOG_STYLE_INPUT, "Blackjack: Introdu suma", "Introdu in casuta de mai jos suma pe care vrei sa o pariezi inainte de a incepe jocul\nMinim 100.000$ - Maxim 200.000.000$", "Bet", "Close");
				PlayerPlaySound(playerid, 5201, 0.0, 0.0, 0.0);
			}
			else SS(playerid, COLOR_WHITE, "Jocul a inceput deja!", "The match has already begun!");
		}
	}
    return 1;
}

// blackjack end //////////////////////////////////////////////////////
public MySQLCheckSpeed(vidd)
{
	new query[128];
	format(query, sizeof(query), "SELECT `speed` FROM stock WHERE `vid` = '%d'", vidd);
	new Cache: ab = mysql_query(SQL,query);
	if (cache_get_row_count()==0)
	{
	    cache_delete(ab);
		return 0;
	}
	else
	{
		new intid;
		intid = cache_get_field_content_int(0, "speed");
	    cache_delete(ab);
		return intid;
	}
}

public MySQLCheckAccount(sqlplayersname[])
{
	new query[128],
		escstr[30];
	mysql_real_escape_string(sqlplayersname, escstr);
	format(query, sizeof(query), "SELECT `ID` FROM users WHERE `name` = '%s'", escstr);
	new Cache: ab = mysql_query(SQL,query);
	if (cache_get_row_count()==0)
	{
	    cache_delete(ab);
		return 0;
	}
	else
	{
		new intid;
		intid = cache_get_field_content_int(0, "ID");
	    cache_delete(ab);
		return intid;
	}
}

public Livrarepizza1(playerid)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && workdeja[playerid] == 1 && PizzaCP[playerid] == 0)
	{
	    SetTimerEx("Livrarepizza2", 10000, 0, "i", playerid);
	    SCM(playerid, -1, "{CC6600}(!)Mai ai 10 de secunde la dispozitie pentru a tasta comanda [/pizza].");
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
        SetTimerEx("Livrarepizza2", 10000, 0, "i", playerid);
	    SCM(playerid, -1, "{CC6600}(!)Mai ai 10 de secunde la dispozitie pentru a te intoarce pe scooter.");
	}
	return 1;
}

public Livrarepizza2(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && workdeja[playerid] == 1 && PizzaCP[playerid] == 0)
	{
	    DestroyVehicle(pizzacar[playerid]);
	    workdeja[playerid] = 0;
	    SCM(playerid, COLOR_RED, "Job esuat. Nu ai tastat comanda [/pizza] la timp.");
	    DisablePlayerRaceCheckpoint(playerid);
	    Destroycar = 0;
		pizzaj[playerid] = 0;
		pizzatime[playerid] = 0;
		failpizza[playerid] = -1;
		PizzaCP[playerid] = 0;
		pizzaprize[playerid] = 0;
		pizzacar[playerid] = -1;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && workdeja[playerid] == 1)
	{
	    workdeja[playerid] = 0;
	    SCM(playerid, COLOR_RED, "Job esuat. Nu te-ai intors la timp pe scooter.");
	    DestroyVehicle(pizzacar[playerid]);
	    DisablePlayerRaceCheckpoint(playerid);
	    Destroycar = 0;
		pizzaj[playerid] = 0;
		pizzatime[playerid] = 0;
		failpizza[playerid] = -1;
		PizzaCP[playerid] = 0;
		pizzaprize[playerid] = 0;
		pizzacar[playerid] = -1;
	}
	return 1;
}

public CountDownCheck3(playerid)
{
	GameTextForPlayer(playerid, "~g~3", 1000, 3);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
    SetTimerEx("CountDownCheck2", 1000, 0, "i", playerid);
    return 1;
}

public CountDownCheck2(playerid)
{
	GameTextForPlayer(playerid, "~g~2", 1000, 3);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
    SetTimerEx("CountDownCheck1", 1000, 0, "i", playerid);
    return 1;
}

public CountDownCheck1(playerid)
{
	GameTextForPlayer(playerid, "~g~1", 1000, 3);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
 	SetTimerEx("CountDownCheckGo", 1000, 0, "i", playerid);
 	return 1;
}

public CountDownCheckGo(playerid)
{
	GameTextForPlayer(playerid, "~r~GO ~y~GO ~b~GO", 3000, 3);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return 1;
}

public CountDownFinalize()
{
	countdown = 0;
	return 1;
}

public SetPlayerPosExx(playerid, Float:x, Float:y, Float:z, interior, virtual)
{
	SetPlayerPosEx(playerid, x, y, z);
	SetPlayerVirtualWorld(playerid, virtual);
	SetPlayerInterior(playerid, interior);
	return 1;
}

public Vendingg(playerid)
{
	KillTimer(vendi[playerid]);
	Vending[playerid] = 0;
	return 1;
}

public Vendingg2(playerid)
{
	new Float:health;
	KillTimer(vendi2[playerid]);
	GetPlayerHealth(playerid,health);
	ClearAnimations(playerid);
	ApplyAnimation(playerid, "VENDING", "VEND_Drink_P", 4.0, 0, 0, 0, 0, 0);
	if(health >= 75)
	{
	    SetPlayerHealthEx(playerid, 100);
	}
	else
	{
	    SetPlayerHealthEx(playerid, health+25);
	}
	return 1;
}

public AttachTrailerrr(playerid)
{
	new Float:pX,
		Float:pY,
		Float:pZ;
	GetPlayerPos(playerid,pX,pY,pZ);
	new Float:vX,
		Float:vY,
		Float:vZ;
	GetVehiclePos(viddd[playerid],vX,vY,vZ);
	if ((floatabs(pX-vX)<100.0)&&(floatabs(pY-vY)<100.0)&&(floatabs(pZ-vZ)<100.0)&&(viddd[playerid]!=GetPlayerVehicleID(playerid)))
	{
		AttachTrailerToVehicle(viddd[playerid],GetPlayerVehicleID(playerid));
	}
	return 1;
}

public Reportul(playerid)
{
	ReportTime[playerid] = 0;
	format(reporttext[playerid], 30, "NULL");
	reportcheater[playerid] = -1;
	reportreason[playerid] = 0;
	if(playerreported[playerid] != -1)
	{
		reportreason[playerreported[playerid]] = 0;
	}
	playerreported[playerid] = -1;
	KillTimer(timerreport[playerid]);
}

function GetPlayers(option[]) {
	new nrr = 0, id = 1002;
	if(IsNumeric(option)) {
		new i = strval(option);
		if(IsPlayerConnected(i))
		id = i;
		else id = INVALID_PLAYER_ID;
	} else {
		foreach(new i : Player) {
			if(strfind(GetName(i), option, true) != -1)
			{
				nrr ++;
			}
		}
		if(nrr > 10) id = 1000;
		if(nrr == 0) id = INVALID_PLAYER_ID;
		if(nrr > 1 && nrr <= 10) id = 1001;

		foreach(new i : Player) {
			if(strfind(GetName(i), option, true) != -1 && id == 1002)
			{
				id = i;
			}
		}
	}
	return id;
}
stock InvalidPlayer(playerid) return SendClientMessage(playerid, COLOR_ERROR, "Invalid Player ID/Name.");
stock ToManyResults(playerid) return SendClientMessage(playerid, COLOR_ERROR, "Too many results for this search.");
stock ShowResults(playerid, option[])
{
	new string[128];
	SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Too many results for this search. Try one of these:");
	foreach(new i : Player)
	{
		if(strfind(GetName(i), option, true) != -1)
		{
			format(string, sizeof(string), "{FFFFCC}(%d) %s", i, GetName(i));
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

public DrugEffectGone(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(UsingDrugs[playerid] == 1)
	    {
			DrugTimer[playerid] = 300;
            UsingDrugs[playerid] = 0;
			ClearAnimations(playerid);
			SetPlayerDrunkLevel (playerid, 0);
            PlayerStoned[playerid] = 0;
            KillTimer(drug[playerid]);
			SetPlayerHealthEx(playerid, 100);
			SendClientMessage(playerid, COLOR_WHITE, "Drogurile au inceput sa-si faca efectul.");
			new sendername[25],string[128];
            GetPlayerName(playerid, sendername, sizeof(sendername));
		    format(string, sizeof(string), "* %s took some drugs.", sendername);
            ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pDrugs] -= 1;
			new str2[128];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `Drugs`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
		}
	}
	return 1;
}

stock GivePlayerCash(playerid, money) return Cash[playerid] += money;
stock GetPlayerCash(playerid) return Cash[playerid];
stock ResetPlayerCash(playerid) return Cash[playerid] = 0;

stock NumeFactiune(id)
{
	new ftexst[35];
	switch(id)
	{
		case 0: ftexst = "None";
		case 1: ftexst = "Los Santos Police Department";
		case 2: ftexst = "Federal Bureau of Investigations";
		case 3: ftexst = "National Guard";
		case 4: ftexst = "Los Aztecas";
		case 5: ftexst = "Grove Street";
		case 6: ftexst = "Los Vagos";
		case 8: ftexst = "Las Venturas Police Department";
		case 9: ftexst = "News Reporter";
		case 10: ftexst = "Ballas";
		case 11: ftexst = "Hitman Agency";
		case 12: ftexst = "School Instructors LV";
		case 13: ftexst = "Taxi";
		case 14: ftexst = "Las venturas Paramedic Department";
		case 15: ftexst = "The Rifa";
		case 16: ftexst = "San Fierro Police Department";
		case 17: ftexst = "School Instructors LS";
		case 18: ftexst = "San Fierro Paramedic Department";
	}
	return ftexst;
}

stock CalculeazaTimp(secunde)
{
	new time = secunde;
	new ora = time/3600;
	time = time%3600;
	new minute = time/60;
	time = time%60;
	new secunde2 = time;
	new string[10];
	format(string,sizeof(string),"%02d:%02d:%02d",ora,minute,secunde2);
	return string;
}

stock CalculeazaTimp2(secunde)
{
	new time = secunde;
	time = time%3600;
	new minute = time/60;
	time = time%60;
	new secunde2 = time;
	new string[10];
	format(string,sizeof(string),"%02d:%02d",minute,secunde2);
	return string;
}

stock IsPlayerInRangeOfPlayer(playerid, playerid2, Float: radius) {

	new
		Float:Floats[3];

	GetPlayerPos(playerid2, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

stock GetClanMembers(clanid)
{
	new string[256],
		members=0;
	format(string, sizeof(string), "SELECT * FROM `users` WHERE `Clan` = '%d'", clanid);
	new Cache: membresult = mysql_query(SQL, string);
	for(new i, j = cache_get_row_count (); i != j; ++i)
	{
		members++;
	}
	cache_delete(membresult);
	return members;
}

stock GetFactionMembers(fid)
{
	new string[128],
		Cache: Result,
		Get[2];
	format(string, sizeof(string), "SELECT `Member` FROM `users` WHERE `Member` = %d", fid);
    Result = mysql_query(SQL, string);
    cache_get_data(Get[0], Get[1], SQL);
    cache_delete(Result);
	return Get[0];
}

stock ShowFactions(playerid)
{
	new stringz2[MAX_STRING];
 	if(DynamicFactions[1][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"{FFFFFF}[%d/%d] %s {FFFF00}Level 7 {00FF00}[aplicatii deschise]\n", GetFactionMembers(1), DynamicFactions[1][fMaxMembers], DynamicFactions[1][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"{FFFFFF}[%d/%d] %s {FFFF00}Level 7\n", GetFactionMembers(1), DynamicFactions[1][fMaxMembers], DynamicFactions[1][fName]);
	}
 	if(DynamicFactions[2][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 7 {00FF00}[aplicatii deschise]\n", stringz2, GetFactionMembers(2), DynamicFactions[2][fMaxMembers], DynamicFactions[2][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 7\n", stringz2, GetFactionMembers(2), DynamicFactions[2][fMaxMembers], DynamicFactions[2][fName]);
	}
	if(DynamicFactions[3][fApplication] > 0)
	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 7 {00FF00}[aplicatii deschise]\n", stringz2, GetFactionMembers(3), DynamicFactions[3][fMaxMembers], DynamicFactions[3][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 7\n", stringz2, GetFactionMembers(3), DynamicFactions[3][fMaxMembers], DynamicFactions[3][fName]);
	}
 	if(DynamicFactions[4][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 5 {00FF00}[aplicatii deschise]\n", stringz2, GetFactionMembers(4), DynamicFactions[4][fMaxMembers], DynamicFactions[4][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 5\n", stringz2, GetFactionMembers(4), DynamicFactions[4][fMaxMembers], DynamicFactions[4][fName]);
	}
 	if(DynamicFactions[5][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 5 {00FF00}[aplicatii deschise]\n", stringz2, GetFactionMembers(5), DynamicFactions[5][fMaxMembers], DynamicFactions[5][fName]);
	}
	else
	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 5\n", stringz2, GetFactionMembers(5), DynamicFactions[5][fMaxMembers], DynamicFactions[5][fName]);
	}
 	if(DynamicFactions[6][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 5 {00FF00}[aplicatii deschise]\n", stringz2, GetFactionMembers(6), DynamicFactions[6][fMaxMembers], DynamicFactions[6][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 5\n", stringz2, GetFactionMembers(6), DynamicFactions[6][fMaxMembers], DynamicFactions[6][fName]);
	}
 	if(DynamicFactions[8][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 7 {00FF00}[aplicatii deschise]\n", stringz2, GetFactionMembers(8), DynamicFactions[8][fMaxMembers], DynamicFactions[8][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 7\n", stringz2, GetFactionMembers(8), DynamicFactions[8][fMaxMembers], DynamicFactions[8][fName]);
	}
 	if(DynamicFactions[9][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 3 {00FF00}[aplicatii deschise]\n", stringz2, GetFactionMembers(9), DynamicFactions[9][fMaxMembers], DynamicFactions[9][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 3\n", stringz2, GetFactionMembers(9), DynamicFactions[9][fMaxMembers], DynamicFactions[9][fName]);
	}
 	if(DynamicFactions[10][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 5 {00FF00}[aplicatii deschise]\n", stringz2, GetFactionMembers(10), DynamicFactions[10][fMaxMembers], DynamicFactions[10][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 5\n", stringz2, GetFactionMembers(10), DynamicFactions[10][fMaxMembers], DynamicFactions[10][fName]);
	}
 	if(DynamicFactions[11][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 3 {00FF00}[aplicatii deschise]\n", stringz2, GetFactionMembers(11), DynamicFactions[11][fMaxMembers], DynamicFactions[11][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 3\n", stringz2, GetFactionMembers(11), DynamicFactions[11][fMaxMembers], DynamicFactions[11][fName]);
	}
 	if(DynamicFactions[12][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 3 {00FF00}[aplicatii deschise]\n", stringz2, GetFactionMembers(12), DynamicFactions[12][fMaxMembers], DynamicFactions[12][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 3\n", stringz2, GetFactionMembers(12), DynamicFactions[12][fMaxMembers], DynamicFactions[12][fName]);
	}
 	if(DynamicFactions[13][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 3 {00FF00}[aplicatii deschise]\n", stringz2, GetFactionMembers(13), DynamicFactions[13][fMaxMembers], DynamicFactions[13][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 3\n", stringz2, GetFactionMembers(13), DynamicFactions[13][fMaxMembers], DynamicFactions[13][fName]);
	}
 	if(DynamicFactions[14][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 3 {00FF00}[aplicatii deschise]\n", stringz2, GetFactionMembers(14), DynamicFactions[14][fMaxMembers], DynamicFactions[14][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 5\n", stringz2, GetFactionMembers(14), DynamicFactions[14][fMaxMembers], DynamicFactions[14][fName]);
	}
	if(DynamicFactions[15][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 5 {00FF00}[aplicatii deschise]\n", stringz2, GetFactionMembers(15), DynamicFactions[15][fMaxMembers], DynamicFactions[15][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 7/n", stringz2, GetFactionMembers(15), DynamicFactions[15][fMaxMembers], DynamicFactions[15][fName]);
	}
	if(DynamicFactions[16][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 7 {00FF00}[aplicatii deschise]\n", stringz2, GetFactionMembers(16), DynamicFactions[16][fMaxMembers], DynamicFactions[16][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 7\n", stringz2, GetFactionMembers(16), DynamicFactions[16][fMaxMembers], DynamicFactions[16][fName]);
	}
	if(DynamicFactions[17][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 3 {00FF00}[aplicatii deschise]\n", stringz2, GetFactionMembers(17), DynamicFactions[17][fMaxMembers], DynamicFactions[17][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 3\n", stringz2, GetFactionMembers(17), DynamicFactions[17][fMaxMembers], DynamicFactions[17][fName]);
	}
	if(DynamicFactions[18][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 3 {00FF00}[aplicatii deschise]", stringz2, GetFactionMembers(18), DynamicFactions[18][fMaxMembers], DynamicFactions[18][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 3", stringz2, GetFactionMembers(18), DynamicFactions[18][fMaxMembers], DynamicFactions[18][fName]);
	}
	ShowPlayerDialog(playerid, DIALOG_FACTIONS, DIALOG_STYLE_LIST,"Factions", stringz2, "Select", "Cancel");
	return 1;
}

stock GetOnLinePlayers()
{
    new OnLine;
    for(new i, g = GetMaxPlayers(); i < g; i++)
        if(IsPlayerConnected(i))
            OnLine++;
    return OnLine;
}

stock Text3D:CreateStreamed3DTextLabel(const string[], color, Float:posx, Float:posy, Float:posz, Float:draw_distance, virtualworld, testlos = 0)
{
	return CreateDynamic3DTextLabel(string, color, posx, posy, posz, draw_distance, INVALID_PLAYER_ID, INVALID_PLAYER_ID, testlos, virtualworld, -1, -1, 100.0);
}

stock GetVehicleSpeed(vehicleid, get3d)
{
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock PlayAudioStreamForPlayersInCar(vehicleid,url[])
{
    foreach(new i : Player)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i) == vehicleid)
            {
                PlayAudioStreamForPlayer(i,url);
            }
        }
    }
    return 1;
}

stock StopAudioStreamForPlayersInCar(vehicleid)
{
    foreach(new i : Player)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i) == vehicleid)
            {
                StopAudioStreamForPlayer(i);
            }
        }
    }
    return 1;
}

FormatNumber(number)
{
	new tStr[16];

    new number2 = number;
    if(number < 0) number = number * -1;

    format(tStr, sizeof(tStr), "%d", number);

    if(strlen(tStr) < 4)
 	return tStr;

    new iPos = strlen(tStr), iCount = 1;

    while(iPos > 0)
    {
		if(iCount == 4)
		{
			iCount = 0;
			strins(tStr, ",", iPos, 1);
			iPos++;
		}
        iCount++;
        iPos--;
    }
    if(number2 < 0) format(tStr, sizeof(tStr), "-%s", tStr);
    return tStr;
}

IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}

stock sscanf(string[], format[], {Float,_}:...)
{
	#if defined isnull
		if (isnull(string))
	#else
		if (string[0] == 0 || (string[0] == 1 && string[1] == 0))
	#endif
		{
			return format[0];
		}
	#pragma tabsize 4
	new
		formatPos = 0,
		stringPos = 0,
		paramPos = 2,
		paramCount = numargs(),
		delim = ' ';
	while (string[stringPos] && string[stringPos] <= ' ')
	{
		stringPos++;
	}
	while (paramPos < paramCount && string[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
					neg = 1,
					num = 0,
					ch = string[stringPos];
				if (ch == '-')
				{
					neg = -1;
					ch = string[++stringPos];
				}
				do
				{
					stringPos++;
					if ('0' <= ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return -1;
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num * neg);
			}
			case 'h', 'x':
			{
				new
					num = 0,
					ch = string[stringPos];
				do
				{
					stringPos++;
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						default:
						{
							return -1;
						}
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num);
			}
			case 'c':
			{
				setarg(paramPos, 0, string[stringPos++]);
			}
			case 'f':
			{

				new changestr[16], changepos = 0, strpos = stringPos;
				while(changepos < 16 && string[strpos] && string[strpos] != delim)
				{
					changestr[changepos++] = string[strpos++];
    				}
				changestr[changepos] = '\0';
				setarg(paramPos,0,_:floatstr(changestr));
			}
			case 'p':
			{
				delim = format[formatPos++];
				continue;
			}
			case '\':
			{
				new
					end = formatPos - 1,
					ch;
				while ((ch = format[++end]) && ch != '\') {}
				if (!ch)
				{
					return -1;
				}
				format[end] = '\0';
				if ((ch = strfind(string, format[formatPos], false, stringPos)) == -1)
				{
					if (format[end + 1])
					{
						return -1;
					}
					return 0;
				}
				format[end] = '\';
				stringPos = ch + (end - formatPos);
				formatPos = end + 1;
			}
			case 'u':
			{
				new
					end = stringPos - 1,
					id = 0,
					bool:num = true,
					ch;
				while ((ch = string[++end]) && ch != delim)
				{
					if (num)
					{
						if ('0' <= ch <= '9')
						{
							id = (id * 10) + (ch - '0');
						}
						else
						{
							num = false;
						}
					}
				}
				if (num && IsPlayerConnected(id))
				{
					setarg(paramPos, 0, id);
				}
				else
				{
					#if !defined foreach
						#define foreach(%1,%2) for (new %2 = 0; %2 < MAX_PLAYERS; %2++) if (IsPlayerConnected(%2))
						#define __SSCANF_FOREACH__
					#endif
					string[end] = '\0';
					num = false;
					new
						name[MAX_PLAYER_NAME];
					id = end - stringPos;
					foreach (Player, playerid)
					{
						GetPlayerName(playerid, name, sizeof (name));
						if (!strcmp(name, string[stringPos], true, id))
						{
							setarg(paramPos, 0, playerid);
							num = true;
							break;
						}
					}
					if (!num)
					{
						setarg(paramPos, 0, INVALID_PLAYER_ID);
					}
					string[end] = ch;
					#if defined __SSCANF_FOREACH__
						#undef foreach
						#undef __SSCANF_FOREACH__
					#endif
				}
				stringPos = end;
			}
			case 's', 'z':
			{
				new
					i = 0,
					ch;
				if (format[formatPos])
				{
					while ((ch = string[stringPos++]) && ch != delim)
					{
						setarg(paramPos, i++, ch);
					}
					if (!i)
					{
						return -1;
					}
				}
				else
				{
					while ((ch = string[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (string[stringPos] && string[stringPos] != delim && string[stringPos] > ' ')
		{
			stringPos++;
		}
		while (string[stringPos] && (string[stringPos] == delim || string[stringPos] <= ' '))
		{
			stringPos++;
		}
		paramPos++;
	}
	do
	{
		if ((delim = format[formatPos++]) > ' ')
		{
			if (delim == '\')
			{
				while ((delim = format[formatPos++]) && delim != '\') {}
			}
			else if (delim != 'z')
			{
				return delim;
			}
		}
	}
	while (delim > ' ');
	return 0;
}

stock right(source[], len)
{
	new retval[MAX_STRING], srclen;
	srclen = strlen(source);
	strmid(retval, source, srclen - len, srclen, MAX_STRING);
	return retval;
}

stock IsMail(email[])
{
  	new len=strlen(email),
  		cstate=0,
  		i;
  	for(i=0;i<len;i++)
	{
	    if ((cstate==0 || cstate==1) && (email[i]>='A' && email[i]<='Z')||(email[i]>='0' && email[i]<='9') || (email[i]>='a' && email[i]<='z')  || (email[i]=='.')  || (email[i]=='-')  || (email[i]=='_'))
	    {
	    }
		else
		{
	       // Ok no A..Z,a..z,_,.,-
	       if ((cstate==0) &&(email[i]=='@'))
		   {
	          // its an @ after the name, ok state=1;
	          cstate=1;
	       }
		   else
		   {
	          // Its stuff which is not allowed
	          return false;
	       }
	 	}
	}
  	if (cstate<1) return false;
  	if (len<6) return false;
  	// A toplevel domain has only 3 to 4 signs :-)
  	if ((email[len-3]=='.') || (email[len-4]=='.') || (email[len-5]=='.')) return true;
  	return false;
}

stock IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
	{
		if( IsPlayerInVehicle( i, vehicleid ) ) return 1;
	}
	return 0;
}

public TwoSecondsTimer()
{
	new string[256];
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAdmin] >= 1 || PlayerInfo[i][pHelper] >= 1)
	    {
			if(IsPlayerConnected(i))
			{
				if(Spectate[i] != -1)
				{
					new targetid = Spectate[i];
					if(IsPlayerConnected(targetid))
					{
				        new Float:health,
					    	name[MAX_PLAYER_NAME];
					    GetPlayerName(targetid, name, sizeof(name));
					    GetPlayerHealth(targetid, health);
					    if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER || GetPlayerState(targetid) == PLAYER_STATE_PASSENGER)
						{
					        new Float:Valoarea,
								carid = GetPlayerVehicleID(targetid),
								speed = Carspeed(targetid);
							GetVehicleHealth(carid,Valoarea);
						    format(string, sizeof(string), "%s (~r~%d~w~) - L ~r~%d", name, targetid, PlayerInfo[targetid][pLevel]);
						    PlayerTextDrawSetString(i, TextDrawSpec[i][1], string);
						    format(string, sizeof(string), "HEALTH:~r~ %.1f", health);
						    PlayerTextDrawSetString(i, TextDrawSpec[i][2], string);
						    format(string, sizeof(string), "W: ~r~%d ~w~- JAIL: ~r~%d", PlayerInfo[targetid][pWantedLevel], PlayerInfo[targetid][pJailTime]);
							PlayerTextDrawSetString(i, TextDrawSpec[i][3], string);
							format(string, sizeof(string), "CAR: ~r~%d ~w~(~r~%.1f~w~ HP)", carid, Valoarea);
							PlayerTextDrawSetString(i, TextDrawSpec[i][4], string);
							format(string, sizeof(string), "SPEED: ~g~%d KM/H", speed);
							PlayerTextDrawSetString(i, TextDrawSpec[i][5], string);
						    PlayerTextDrawShow(i, TextDrawSpec[i][1]);
							PlayerTextDrawShow(i, TextDrawSpec[i][2]);
							PlayerTextDrawShow(i, TextDrawSpec[i][3]);
							PlayerTextDrawShow(i, TextDrawSpec[i][4]);
							PlayerTextDrawShow(i, TextDrawSpec[i][5]);
						}
						else
						{
						    format(string, sizeof(string), "%s (~r~%d~w~) - L ~r~%d", name, targetid, PlayerInfo[targetid][pLevel]);
						    PlayerTextDrawSetString(i, TextDrawSpec[i][1], string);
						    format(string, sizeof(string), "HEALTH:~r~ %.1f", health);
						    PlayerTextDrawSetString(i, TextDrawSpec[i][2], string);
							format(string, sizeof(string), "W: ~r~%d ~w~- JAIL: ~r~%d", PlayerInfo[targetid][pWantedLevel], PlayerInfo[targetid][pJailTime]);
						    PlayerTextDrawSetString(i, TextDrawSpec[i][3], string);
						    PlayerTextDrawShow(i, TextDrawSpec[i][1]);
					        PlayerTextDrawShow(i, TextDrawSpec[i][2]);
					        PlayerTextDrawShow(i, TextDrawSpec[i][3]);
					    	PlayerTextDrawHide(i, TextDrawSpec[i][4]);
					    	PlayerTextDrawHide(i, TextDrawSpec[i][5]);
						}
						if(GetPlayerInterior(targetid) != GetPlayerInterior(i))
						{
							SetPlayerInterior(i,GetPlayerInterior(targetid));
							PlayerSpectatePlayer(i, targetid);
						}
						if(GetPlayerVirtualWorld(targetid) != GetPlayerVirtualWorld(i))
						{
							SetPlayerVirtualWorld(i,GetPlayerVirtualWorld(targetid));
							PlayerSpectatePlayer(i, targetid);
						}
						if(SpectateState[targetid] == 1 && GetPlayerState(targetid) == PLAYER_STATE_DRIVER || SpectateState[targetid] == 1 && GetPlayerState(targetid) == PLAYER_STATE_PASSENGER)
						{
							new carid = GetPlayerVehicleID(targetid);
						    PlayerSpectateVehicle(i, carid);
							SpectateState[targetid] = 2;
						}
						if(SpectateState[targetid] == 2 && GetPlayerState(targetid) == PLAYER_STATE_ONFOOT)
						{
							PlayerSpectatePlayer(i, Spectate[targetid]);
							SpectateState[targetid] = 1;
						}
					}
				}
				else
				{
				    PlayerTextDrawHide(i, TextDrawSpec[i][1]);
			    	PlayerTextDrawHide(i, TextDrawSpec[i][2]);
	    			PlayerTextDrawHide(i, TextDrawSpec[i][3]);
			    	PlayerTextDrawHide(i, TextDrawSpec[i][4]);
			    	PlayerTextDrawHide(i, TextDrawSpec[i][5]);
				}
			}
		}
	}
	foreach(new x : Player)
	{
	    new carid = GetPlayerVehicleID(x),
			Float:health;
    	if(IsPlayerInRangeOfPoint(x,15.0,1025.0671,-1023.7895,32.1016))
		{
	    	GetVehicleHealth(carid, health);
	    	if(health < 999.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
					SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,719.9537,-457.2771,16.3359))
		{
	    	GetVehicleHealth(carid, health);
	    	if(health < 999.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
                	SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,487.4134,-1740.1738,11.1370))
		{
	    	GetVehicleHealth(carid, health);
	   	 	if(health < 999.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
                	SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,2065.5911,-1831.4495,13.5469))
		{
	    	GetVehicleHealth(carid, health);
	    	if(health < 999.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
            		SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,1974.3198,2162.7249,11.0703))
		{
	    	GetVehicleHealth(carid, health);
	    	if(health < 999.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
                	SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,-100.1086,1117.3312,19.7417))
		{
	    	GetVehicleHealth(carid, health);
	    	if(health < 999.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
                	SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,BizzInfo[51][bEntranceX],BizzInfo[51][bEntranceY],BizzInfo[51][bEntranceZ]))
		{
	    	if(EnterInModShop[x] > 0)
	    	{
	        	GivePlayerCash(x, -BizzInfo[51][bEntranceCost]);
				BizzInfo[51][bTill] += BizzInfo[51][bEntranceCost];
				new str[128];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='51'",BizzInfo[51][bTill]);
				mysql_tquery(SQL,str,"","");
				format(string,sizeof(string),"~r~-%d$", BizzInfo[51][bEntranceCost]);
   				GameTextForPlayer(x, string, 5000, 1);
   				EnterInModShop[x] = 0;
				return 1;
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,BizzInfo[38][bEntranceX],BizzInfo[38][bEntranceY],BizzInfo[38][bEntranceZ]))
		{
	    	if(EnterInModShop[x] > 0)
	    	{
	        	GivePlayerCash(x, -BizzInfo[38][bEntranceCost]);
				BizzInfo[38][bTill] += BizzInfo[38][bEntranceCost];
				new str[128];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='38'",BizzInfo[38][bTill]);
				mysql_tquery(SQL,str,"","");
				format(string,sizeof(string),"~r~-%d$", BizzInfo[38][bEntranceCost]);
   				GameTextForPlayer(x, string, 5000, 1);
   				EnterInModShop[x] = 0;
				return 1;
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,BizzInfo[39][bEntranceX],BizzInfo[39][bEntranceY],BizzInfo[39][bEntranceZ]))
		{
	    	if(EnterInModShop[x] > 0)
	    	{
	        	GivePlayerCash(x, -BizzInfo[39][bEntranceCost]);
				BizzInfo[39][bTill] += BizzInfo[39][bEntranceCost];
				new str[128];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='39'",BizzInfo[39][bTill]);
				mysql_tquery(SQL,str,"","");
				format(string,sizeof(string),"~r~-%d$", BizzInfo[39][bEntranceCost]);
   				GameTextForPlayer(x, string, 5000, 1);
   				EnterInModShop[x] = 0;
				return 1;
			}
		}
		if(strcmp(PlayerInfo[x][pNewbieQuestion], "NULL", true))
		{
			new have,helperid=-1,name[30];
			foreach(new i : Player)
			{
				if(HaveNewbie[i] == x) have = 1;
			}
			if(have == 0)
			{
				new totalx,helperids[MAX_PLAYERS];
				foreach(new s : Player)
				{
					if(PlayerInfo[s][pHelper] != 0 && HelperDuty[s] == 1 && HaveNewbie[s] == -1 && gPlayerLogged[s] == 1)
					{
						helperids[totalx] = s;
						totalx++;
					}
				}
				if(totalx > 0) helperid = helperids[random(totalx)];
			}
			if(helperid != -1)
			{
				HaveNewbie[helperid] = x;
				HelperTimer[helperid] = 120;
				GetPlayerName(x, name, sizeof(name));
				format(string, sizeof(string), "{FF6200}** {FFFF00}Question from %s (%d, level %d) {FF6200}**", name, x, PlayerInfo[x][pLevel]);
				SendClientMessage(helperid, COLOR_YELLOW, string);
				SendClientMessage(helperid, COLOR_YELLOW, PlayerInfo[x][pNewbieQuestion]);
			}
		}
	}
	return 1;
}

// FISH PLACE
public VaildFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4,403.8266,-2088.7598,7.8359) || IsPlayerInRangeOfPoint(playerid, 4,398.7553,-2088.7490,7.8359))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4,396.2197,-2088.6692,7.8359) || IsPlayerInRangeOfPoint(playerid, 4,391.1094,-2088.7976,7.8359))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4,383.4157,-2088.7849,7.8359) || IsPlayerInRangeOfPoint(playerid, 4,374.9598,-2088.7979,7.8359))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4,369.8107,-2088.7927,7.8359) || IsPlayerInRangeOfPoint(playerid, 4,367.3637,-2088.7925,7.8359))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4,362.2244,-2088.7981,7.8359) || IsPlayerInRangeOfPoint(playerid, 4,354.5382,-2088.7979,7.8359))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10,2000.5741,1563.2089,15.3672))
		{
		    return 1;
		}
	}
	return 0;
}

// MAFIA MEMBER
public IsAMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader],
	    	member = PlayerInfo[playerid][pMember];
	    if(member == 4 || member == 5 || member == 6 || member == 10 || member == 15)
		{
		    return 1;
		}
		if(leader==4 || leader==5 || leader==6 || leader==10 || leader==15)
		{
		    return 1;
		}
	}
	return 0;
}

// COP
public IsACop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader],
	    	member = PlayerInfo[playerid][pMember];
	    if(member==1 || member==2 || member==3 || member==8)
		{
		    return 1;
		}
		else if(leader==1 || leader==2 || leader==3 || leader==8 || leader==16 || leader==16)
		{
		    return 1;
		}
	}
	return 0;
}

// BANK
public IsAtBank(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 50.0, 2306.5564,-16.3045,26.7496))
	    {//BANK LS
	        return 1;
	    }
	}
	return 0;
}

public GetDaysFromTimestamp(time)
{
	new timex = gettime() - time, days;
	while(timex > 86399)
	{
		timex -= 86400;
		days++;
	}
	return days;
}

// GAS STATION PLACE
public IsAtGasStation(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    //Los Santos Gas Station
		if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[33][bEntranceX],BizzInfo[33][bEntranceY],BizzInfo[33][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[42][bEntranceX],BizzInfo[42][bEntranceY],BizzInfo[42][bEntranceZ]))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ]))
		{
		    return 1;
		}
		//Las Venturas Gas Station
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[45][bEntranceX],BizzInfo[45][bEntranceY],BizzInfo[45][bEntranceZ]))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[46][bEntranceX],BizzInfo[46][bEntranceY],BizzInfo[46][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[47][bEntranceX],BizzInfo[47][bEntranceY],BizzInfo[47][bEntranceZ]))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[48][bEntranceX],BizzInfo[48][bEntranceY],BizzInfo[48][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[49][bEntranceX],BizzInfo[49][bEntranceY],BizzInfo[49][bEntranceZ]))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[50][bEntranceX],BizzInfo[50][bEntranceY],BizzInfo[50][bEntranceZ]))
		{
		    return 1;
		}
		// sf
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[55][bEntranceX],BizzInfo[55][bEntranceY],BizzInfo[55][bEntranceZ]))
		{
		    return 1;
		}
	}
	return 0;
}

// BOAT
public IsABoat(carid)
{
	if(GetVehicleModel(carid) == 430 || GetVehicleModel(carid) == 446 || GetVehicleModel(carid) == 452 || GetVehicleModel(carid) == 453 || GetVehicleModel(carid) == 454 || GetVehicleModel(carid) == 472 || GetVehicleModel(carid) == 473 || GetVehicleModel(carid) == 484 || GetVehicleModel(carid) == 493 || GetVehicleModel(carid) == 595)
	{
		return 1;
	}
	return 0;
}

// PLANE
public IsAPlane(carid)
{
	if(GetVehicleModel(carid) == 417 || GetVehicleModel(carid) == 425 || GetVehicleModel(carid) == 447 || GetVehicleModel(carid) == 460 || GetVehicleModel(carid) == 464 || GetVehicleModel(carid) == 465 || GetVehicleModel(carid) == 469 || GetVehicleModel(carid) == 476 || GetVehicleModel(carid) == 487 || GetVehicleModel(carid) == 488 || GetVehicleModel(carid) == 497 || GetVehicleModel(carid) == 501 || GetVehicleModel(carid) == 511 || GetVehicleModel(carid) == 512 || GetVehicleModel(carid) == 513
	 || GetVehicleModel(carid) == 519 || GetVehicleModel(carid) == 520 || GetVehicleModel(carid) == 548 || GetVehicleModel(carid) == 553 || GetVehicleModel(carid) == 563 || GetVehicleModel(carid) == 577 || GetVehicleModel(carid) == 592 || GetVehicleModel(carid) == 593)
	{
		return 1;
	}
	return 0;
}

// COP CAR PD
public IsACopCar(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 1)
		{
			return 1;
		}
	}
	return 0;
}

// ALL COPS CAR
public Copcar2(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 1 || VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 2 || VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 3 || VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 8)
		{
			return 1;
		}
	}
	return 0;
}

// FBI CAR
public IsAFbiCar(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 2)
		{
			return 1;
		}
	}
	return 0;
}

// LVPD CAR
public IsALVPDCar(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 8)
		{
			return 1;
		}
	}
	return 0;
}

// NG CAR
public IsANgCar(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 3)
		{
			return 1;
		}
	}
	return 0;
}

// AMBULANCE
public IsAnAmbulance(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 14)
		{
			return 1;
		}
	}
	return 0;
}

//RENT CAR
public IsARentCar(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 30)
		{
			return 1;
		}
	}
	return 0;
}

// NEWS
public IsANewsCar(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 9)
		{
			return 1;
		}
	}
	return 0;
}

// TAXI CAR
public IsAnTaxi(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 13)
		{
			return 1;
		}
	}
	return 0;
}

public IsInHQ(playerid)
{
	for(new x; x < sizeof(DynamicFactions); x++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50.0, DynamicFactions[x][fcX], DynamicFactions[x][fcY], DynamicFactions[x][fcZ]) && PlayerInfo[playerid][pMember] == x) return 1;
	}
	return 0;
}

// GARBAGE TRUCK
public IsAGarbageTruck(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehJob] == 10)
		{
			return 1;
		}
	}
	return 0;
}



// BUS
public IsABus(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehJob] == 7)
		{
			return 1;
		}
	}
	return 0;
}

// PIZZA SCOOTER
public IsAPizza(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehJob] == 5)
		{
			return 1;
		}
	}
	return 0;
}

// FARMER CAR
public IsAFarmer(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehJob] == 6)
		{
			return 1;
		}
	}
	return 0;
}

// TRUCK
public IsATruck(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehJob] == 14)
		{
			return 1;
		}
	}
	return 0;
}

// BIKE
public IsABike(carid)
{

	if(GetVehicleModel(carid) == 481 || GetVehicleModel(carid) == 509 || GetVehicleModel(carid) == 510)
	{
		return 1;
	}
	return 0;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
	    if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, fX, fY, fZ+5);
			GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
		}
		else
		{
			SetPlayerPosFindZ(playerid, fX, fY, fZ+5);
		}
	}
    return 1;
}

public EmailDelivered(playerid, response_code, data[])
{
	new buffer[128];
	SendClientMessage(playerid, COLOR_WHITE, "-- -- --");
    if(response_code == 200)
    {
        format(buffer, sizeof(buffer), "An email was sent to %s. Click the link in the email if you want to unblock your account.", PlayerInfo[playerid][pEmail]);
        SendClientMessage(playerid, COLOR_YELLOW, buffer);
    }
    else
    {
        format(buffer, sizeof(buffer), "Email at %s couldn't be delivered, error code: %d. You can open a ticket on panel.ForEver RPG.ro.", PlayerInfo[playerid][pEmail], response_code);
        SendClientMessage(playerid, COLOR_YELLOW, buffer);
    }
	SendClientMessage(playerid, COLOR_WHITE, "-- -- --");
    return 1;
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
    if(extraid == 1)
    {
        if(response)
        {
            new skin,string[256];
            skin = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
			Sunglasses[playerid] = 1;
            PlayerInfo[playerid][pGlasses] = modelid;
            Update(playerid, pGlassesx);
            SetPlayerHoldingObject(playerid, modelid, 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    else if(extraid == 2)
    {
        if(response)
        {
            new skin,string[256];
            skin = GetPlayerSkin(playerid);
            GivePlayerCash(playerid,-5000);
            mysql_format(SQL, string, sizeof(string), "UPDATE users SET Money='%d' WHERE name='%s'", GetPlayerCash(playerid), PlayerInfo[playerid][pNormalName]);
      		mysql_tquery(SQL,string,"","");
			BizzInfo[InBussines[playerid]][bTill] += 5000;
			mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL,string,"","");
			Hatss[playerid] = 1;
            PlayerInfo[playerid][pHats] = modelid;
            Update(playerid, pHatsx);
            SetPlayerAttachedObject(playerid, 0, modelid, 2, SkinCaps[skin][0], SkinCaps[skin][1], SkinCaps[skin][2], SkinCaps[skin][3],SkinCaps[skin][4], SkinCaps[skin][5], 1.000000, 1.000000, 1.000000);
            GameTextForPlayer(playerid, "~r~-$5,000", 5000, 1);
        }
    }
    return 1;
}

// ONPLAYERCONNECT
public OnPlayerConnect(playerid)
{
    new playerip[16];
 	GetPlayerIp(playerid,playerip,sizeof(playerip));
    if(NumIp(playerip, playerid) >= 3 && !IsBotOnIP(playerip))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "There are already 2 players connected with same IP.");
 		KickEx(playerid);
 		return 1;
	}
	new word[30],nameee[30];
	GetPlayerName(playerid, nameee, sizeof(nameee));
	new Cache: adv = mysql_query(SQL, "SELECT * FROM `adv`");
	for(new ix, jx = cache_get_row_count (); ix != jx; ++ix)
	{
		cache_get_field_content(ix, "word", word);
		if(strfind(nameee, word, true) != -1)
		{
			new string[128];
			SendClientMessage(playerid, COLOR_RED2, "You have been kicked because you had a forbidden name.");
			format(string, sizeof(string), "Notice: {FFFFFF}%s has been kicked because he had a forbidden name.", nameee);
            ABroadCast(COLOR_RED2, string, 1);
			KickEx(playerid);
			break;
		}
	}
	cache_delete(adv);
    sarmale[playerid] = 0;
	XDeaths[playerid] = 0;
    LastDeath[playerid] = 0;
    pnsmoney[playerid] = 0;
    cased[playerid] = 0;
    caser[playerid] = 1001;
    RepairTime[playerid] = 0;
    LastPlayer[playerid] = -1;
    payala[playerid] = 0;

	GameTextForPlayer(playerid, "~w~LOADING...~n~~y~CHECKING BAN STATUS", 3500, 3);

 	if(antirem[playerid] == 0)
 	{
 		antirem[playerid] = 1;
 	}

	// * RemoveBuildingForPlayer * //
	if(antirem[playerid] == 1)
	{
		RemoveBuildingForPlayer(playerid, 14449, 2567.6172, -1294.6328, 1061.2500, 0.25); // masa hq mafii
	    RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);
	    RemoveBuildingForPlayer(playerid, 1226, 1624.6875, -2190.3750, 16.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 17350, -54.9922, -1130.7266, 4.5781, 0.25);
		RemoveBuildingForPlayer(playerid, 1447, -89.9297, -1133.7500, 1.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -87.0547, -1132.6797, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1462, -79.2500, -1137.7188, 0.0547, 0.25);
		RemoveBuildingForPlayer(playerid, 17072, -54.9922, -1130.7266, 4.5781, 0.25);
		RemoveBuildingForPlayer(playerid, 17073, -56.1250, -1130.1719, 4.4922, 0.25);
		RemoveBuildingForPlayer(playerid, 1462, -84.3750, -1116.0938, 0.2578, 0.25);
		RemoveBuildingForPlayer(playerid, 1447, -84.0547, -1117.2188, 1.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 1415, -68.3516, -1104.9922, 0.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 1462, -60.3594, -1116.9375, 0.2578, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -63.6719, -1125.6953, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -63.4141, -1115.4141, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1415, -63.8125, -1106.4219, 0.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 3593, 2407.3125, -1418.3594, 23.6875, 0.25);
		RemoveBuildingForPlayer(playerid, 955, 1789.2109, -1369.2656, 15.1641, 0.25);
		RemoveBuildingForPlayer(playerid, 956, 1634.1094, -2237.5313, 12.8906, 0.25);
		RemoveBuildingForPlayer(playerid, 955, 2060.1172, -1897.6406, 12.9297, 0.25);
		RemoveBuildingForPlayer(playerid, 956, 2480.8594, -1959.2734, 12.9609, 0.25);
		RemoveBuildingForPlayer(playerid, 955, 1928.7344, -1772.4453, 12.9453, 0.25);
		RemoveBuildingForPlayer(playerid, 956, 2139.5156, -1161.4844, 23.3594, 0.25);
		RemoveBuildingForPlayer(playerid, 955, 1154.7266, -1460.8906, 15.1563, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, -19.0391, -57.8359, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1776, -36.1484, -57.8750, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, -16.1172, -91.6406, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1776, -17.5469, -91.7109, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1776, -16.5313, -140.2969, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, -15.1016, -140.2266, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1776, -33.8750, -186.7656, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, -32.4453, -186.6953, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, -35.7266, -140.2266, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, 495.9688, -24.3203, 1000.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 1776, 500.5625, -1.3672, 1000.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, 501.8281, -1.4297, 1000.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, 373.8281, -178.1406, 1000.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 1977, 316.8750, -140.3516, 998.5859, 0.25);
		RemoveBuildingForPlayer(playerid, 14843, 266.3516, 81.1953, 1001.2813, 0.25);
		RemoveBuildingForPlayer(playerid, 17350, -54.9922, -1130.7266, 4.5781, 0.25);// trucker
		RemoveBuildingForPlayer(playerid, 1447, -89.9297, -1133.7500, 1.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -87.0547, -1132.6797, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 17072, -54.9922, -1130.7266, 4.5781, 0.25);
		RemoveBuildingForPlayer(playerid, 17073, -56.1250, -1130.1719, 4.4922, 0.25);
		RemoveBuildingForPlayer(playerid, 1462, -84.3750, -1116.0938, 0.2578, 0.25);
		RemoveBuildingForPlayer(playerid, 1447, -84.0547, -1117.2188, 1.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 1415, -68.3516, -1104.9922, 0.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 1462, -60.3594, -1116.9375, 0.2578, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -63.6719, -1125.6953, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -63.4141, -1115.4141, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1415, -63.8125, -1106.4219, 0.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 1257, 1918.7500, 2314.3984, 11.0938, 0.25);// baracile
		RemoveBuildingForPlayer(playerid, 1257, 1918.8672, 2115.7188, 11.0938, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1808.1250, -1859.5391, 16.3516, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1783.6719, -1859.5391, 16.3516, 0.25);
		RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 1977, 316.8750, -140.3516, 998.5859, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 2093.9297, -1762.6406, 16.4063, 0.25); // Pizza
		RemoveBuildingForPlayer(playerid, 712, 2100.8125, -1764.3750, 21.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 2105.0859, -1765.6094, 10.8047, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 2114.7188, -1785.1797, 16.3984, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 2128.3125, -1786.7109, 12.7031, 0.25);
		RemoveBuildingForPlayer(playerid, 733, 778.2109, -1207.2031, 13.5391, 0.25); // Taietor de gazon
		RemoveBuildingForPlayer(playerid, 729, 731.3906, -1223.1641, 12.5078, 0.25);
		RemoveBuildingForPlayer(playerid, 733, 717.1172, -1236.2266, 12.0625, 0.25);
		RemoveBuildingForPlayer(playerid, 726, 680.8594, -1293.3984, 12.3984, 0.25);
		RemoveBuildingForPlayer(playerid, 732, 782.7969, -1304.0781, 12.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 746.4922, -1303.4141, 11.6719, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 760.4531, -1304.1328, 12.2813, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 782.3438, -1277.8359, 12.2031, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 783.0625, -1245.7969, 12.5938, 0.25);
		RemoveBuildingForPlayer(playerid, 1447, -107.0859, -1196.0859, 3.0391, 0.25); // Garbage
		RemoveBuildingForPlayer(playerid, 1412, -112.1719, -1194.7500, 3.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 1413, -102.1328, -1197.1641, 2.9609, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, -98.9219, -1204.9141, 3.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 985, 2497.4063, 2777.0703, 11.5313, 0.25);
		RemoveBuildingForPlayer(playerid, 986, 2497.4063, 2769.1094, 11.5313, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, -98.8750, -1199.9297, 3.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 727, -73.8203, -1569.1719, 1.3516, 0.25);
		RemoveBuildingForPlayer(playerid, 3175, -64.3828, -1572.2109, 1.4063, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1774.7578, -1931.3125, 16.3750, 0.25); //Taxi LS
		RemoveBuildingForPlayer(playerid, 700, 1810.6797, -1944.6406, 11.4453, 0.25);
		RemoveBuildingForPlayer(playerid, 700, 1817.1797, -1944.6406, 11.4453, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1806.4297, -1931.6016, 16.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 5024, 1748.8438, -1883.0313, 14.1875, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1774.7578, -1901.5391, 16.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1806.4297, -1901.8281, 16.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1836.7188, -1898.8984, 13.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1747.1875, -1846.7109, 10.8047, 0.25);
		RemoveBuildingForPlayer(playerid, 1297, 937.5547, -1213.8672, 18.5938, 0.25);
		RemoveBuildingForPlayer(playerid, 5818, 954.6875, -1305.7734, 30.1406, 0.25);
		RemoveBuildingForPlayer(playerid, 1267, 953.4922, -1232.5703, 24.1328, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 824.3438, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 850.9844, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 875.6094, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 895.6953, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 907.7813, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 927.6172, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 14843, 266.3516, 81.1953, 1001.2813, 0.25);//gratii pd
		RemoveBuildingForPlayer(playerid, 656, 1096.6250, -294.4141, 72.9375, 0.25);//hitman
		RemoveBuildingForPlayer(playerid, 1340, 2327.8594, 2421.2500, 10.8594, 0.25);//lvpd
		RemoveBuildingForPlayer(playerid, 714, 1481.6484, -638.4844, 90.2422, 0.25);//palat piMp
		RemoveBuildingForPlayer(playerid, 659, 1503.7578, -720.7031, 91.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 659, 1492.1250, -716.1250, 93.5000, 0.25);
		RemoveBuildingForPlayer(playerid, 1340, 388.8594, -2071.6641, 7.9453, 0.25); //Garduri Fish
		RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2455.8828, 16.7266, 0.25); // Garbage
		RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2493.9844, 16.7266, 0.25);
		RemoveBuildingForPlayer(playerid, 3744, 2771.0703, -2520.5469, 15.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 3744, 2774.7969, -2534.9531, 15.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 3746, 2814.2656, -2521.4922, 25.5156, 0.25);
		RemoveBuildingForPlayer(playerid, 3574, 2774.7969, -2534.9531, 15.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 3574, 2771.0703, -2520.5469, 15.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2501.8359, 14.6953, 0.25);
		RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2493.9844, 16.7266, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2486.9609, 14.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2463.8203, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1278, 2773.3438, -2479.9688, 26.7031, 0.25);
		RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2455.8828, 16.7266, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2448.4766, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1278, 2773.3438, -2443.1719, 26.7031, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2501.8359, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2486.8281, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2486.9609, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2463.8203, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2448.3438, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2448.4766, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 3620, 2814.2656, -2521.4922, 25.5156, 0.25);
		RemoveBuildingForPlayer(playerid, 3474, 2523.9688, 2818.4922, 16.7422, 0.25);
		RemoveBuildingForPlayer(playerid, 1491, 2543.8516, -1306.3828, 1053.6250, 0.25);// USA MAFII
		RemoveBuildingForPlayer(playerid, 1491, 2543.8359, -1303.3594, 1053.6250, 0.25);// USA MAFII
		RemoveBuildingForPlayer(playerid, 3778, 200.4844, -1875.0000, 3.0781, 0.25);
		RemoveBuildingForPlayer(playerid, 3615, 200.4844, -1875.0000, 3.0781, 0.25);
	}

/*	logo[playerid] = CreatePlayerTextDraw(playerid, 636.000000, 429.333374, "BLUE.BUGGED.RO");
	PlayerTextDrawLetterSize(playerid, logo[playerid], 0.240000, 2.100000);
	PlayerTextDrawAlignment(playerid, logo[playerid], 3);
	PlayerTextDrawColor(playerid, logo[playerid], COLOR_WHITE);
	PlayerTextDrawSetOutline(playerid, logo[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, logo[playerid], 255);
	PlayerTextDrawFont(playerid, logo[playerid], 2);
	PlayerTextDrawSetProportional(playerid, logo[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, logo[playerid], 0);
*/
	TextLogo[playerid] = CreatePlayerTextDraw(playerid, 601.500000, 422.625000, "~r~RUBY~w~_/_Leonard");
	PlayerTextDrawLetterSize(playerid, TextLogo[playerid], 0.175000, 1.031250);
	PlayerTextDrawTextSize(playerid, TextLogo[playerid], 475.000000, 321.125000);
	PlayerTextDrawAlignment(playerid, TextLogo[playerid], 2);
	PlayerTextDrawColor(playerid, TextLogo[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TextLogo[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TextLogo[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TextLogo[playerid], 51);
	PlayerTextDrawFont(playerid, TextLogo[playerid], 2);
	PlayerTextDrawSetProportional(playerid, PaintBallText[playerid], 1);
	
	PaintBallText[playerid] = CreatePlayerTextDraw(playerid, 1.599968, 430.080230, " ");
	PlayerTextDrawLetterSize(playerid, PaintBallText[playerid], 0.217200, 1.973333);
	PlayerTextDrawAlignment(playerid, PaintBallText[playerid], 1);
	PlayerTextDrawColor(playerid, PaintBallText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, PaintBallText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, PaintBallText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, PaintBallText[playerid], 51);
	PlayerTextDrawFont(playerid, PaintBallText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, PaintBallText[playerid], 1);

	Fuell[playerid] = CreatePlayerTextDraw(playerid, 530.500000, 363.377807, " ");
	PlayerTextDrawLetterSize(playerid, Fuell[playerid], 00.246500, 1.699555);
	PlayerTextDrawAlignment(playerid, Fuell[playerid], 1);
	PlayerTextDrawColor(playerid, Fuell[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Fuell[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Fuell[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Fuell[playerid], 255);
	PlayerTextDrawFont(playerid, Fuell[playerid], 2);
	PlayerTextDrawSetProportional(playerid, Fuell[playerid], 1);

	Speedd[playerid] = CreatePlayerTextDraw(playerid, 530.500000, 340.355590, " ");
	PlayerTextDrawLetterSize(playerid, Speedd[playerid], 0.662999, 2.844445);
	PlayerTextDrawAlignment(playerid, Speedd[playerid], 1);
	PlayerTextDrawColor(playerid, Speedd[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Speedd[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Speedd[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Speedd[playerid], 255);
	PlayerTextDrawFont(playerid, Speedd[playerid], 3);
	PlayerTextDrawSetProportional(playerid, Speedd[playerid], 1);

	Odom[playerid] = CreatePlayerTextDraw(playerid, 530.500000, 374.577636, " "); // in caz ca nu merge: 532.799987, 411.786651
	PlayerTextDrawLetterSize(playerid, Odom[playerid], 00.246500, 1.699555);
	PlayerTextDrawAlignment(playerid, Odom[playerid], 1);
	PlayerTextDrawColor(playerid, Odom[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Odom[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Odom[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Odom[playerid], 255);
	PlayerTextDrawFont(playerid, Odom[playerid], 2);
	PlayerTextDrawSetProportional(playerid, Odom[playerid], 1);

	carlocked[playerid] = CreatePlayerTextDraw(playerid, 530.500000, 387.644531, " ");
	PlayerTextDrawLetterSize(playerid, carlocked[playerid], 00.246500, 1.699555);
	PlayerTextDrawAlignment(playerid, carlocked[playerid], 1);
	PlayerTextDrawColor(playerid, carlocked[playerid], -1);
	PlayerTextDrawSetShadow(playerid, carlocked[playerid], 0);
	PlayerTextDrawSetOutline(playerid, carlocked[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, carlocked[playerid], 255);
	PlayerTextDrawFont(playerid, carlocked[playerid], 2);
	PlayerTextDrawSetProportional(playerid, carlocked[playerid], 1);

	farmbox[playerid] = CreatePlayerTextDraw(playerid, 199.599990, 185.926666, "usebox");
	PlayerTextDrawLetterSize(playerid, farmbox[playerid], 0.000000, 7.149999);
	PlayerTextDrawTextSize(playerid, farmbox[playerid], -3.599999, 0.000000);
	PlayerTextDrawAlignment(playerid, farmbox[playerid], 1);
	PlayerTextDrawColor(playerid, farmbox[playerid], 0);
	PlayerTextDrawUseBox(playerid, farmbox[playerid], true);
	PlayerTextDrawBoxColor(playerid, farmbox[playerid], 102);
	PlayerTextDrawSetShadow(playerid, farmbox[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmbox[playerid], 0);
	PlayerTextDrawFont(playerid, farmbox[playerid], 0);

	farmjob[playerid] = CreatePlayerTextDraw(playerid, 6.399997, 183.679962, "JOB");
	PlayerTextDrawLetterSize(playerid, farmjob[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, farmjob[playerid], 1);
	PlayerTextDrawColor(playerid, farmjob[playerid], -1);
	PlayerTextDrawSetShadow(playerid, farmjob[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmjob[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmjob[playerid], 51);
	PlayerTextDrawFont(playerid, farmjob[playerid], 0);
	PlayerTextDrawSetProportional(playerid, farmjob[playerid], 1);

	farmspeed[playerid] = CreatePlayerTextDraw(playerid, 3.199995, 219.519958, " ");
	PlayerTextDrawLetterSize(playerid, farmspeed[playerid], 0.193999, 1.555199);
	PlayerTextDrawAlignment(playerid, farmspeed[playerid], 1);
	PlayerTextDrawColor(playerid, farmspeed[playerid], -1);
	PlayerTextDrawSetShadow(playerid, farmspeed[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmspeed[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmspeed[playerid], 255);
	PlayerTextDrawFont(playerid, farmspeed[playerid], 1);
	PlayerTextDrawSetProportional(playerid, farmspeed[playerid], 1);

	farmtime[playerid] = CreatePlayerTextDraw(playerid, 2.399992, 203.093383, " ");
	PlayerTextDrawLetterSize(playerid, farmtime[playerid], 0.204399, 1.592533);
	PlayerTextDrawAlignment(playerid, farmtime[playerid], 1);
	PlayerTextDrawColor(playerid, farmtime[playerid], -1);
	PlayerTextDrawSetShadow(playerid, farmtime[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmtime[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmtime[playerid], 255);
	PlayerTextDrawFont(playerid, farmtime[playerid], 1);
	PlayerTextDrawSetProportional(playerid, farmtime[playerid], 1);

	farmwanted[playerid] = CreatePlayerTextDraw(playerid, 2.400026, 219.520034, " ");
	PlayerTextDrawLetterSize(playerid, farmwanted[playerid], 0.241199, 1.697066);
	PlayerTextDrawAlignment(playerid, farmwanted[playerid], 1);
	PlayerTextDrawColor(playerid, farmwanted[playerid], -1);
	PlayerTextDrawSetShadow(playerid, farmwanted[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmwanted[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmwanted[playerid], 255);
	PlayerTextDrawFont(playerid, farmwanted[playerid], 1);
	PlayerTextDrawSetProportional(playerid, farmwanted[playerid], 1);

	TimeLeftWar1[playerid] = CreatePlayerTextDraw(playerid, 501.600036, 221.759963, " ");
	PlayerTextDrawLetterSize(playerid, TimeLeftWar1[playerid], 0.332400, 2.264533);
	PlayerTextDrawAlignment(playerid, TimeLeftWar1[playerid], 1);
	PlayerTextDrawColor(playerid, TimeLeftWar1[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TimeLeftWar1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TimeLeftWar1[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TimeLeftWar1[playerid], 255);
	PlayerTextDrawFont(playerid, TimeLeftWar1[playerid], 2);
	PlayerTextDrawSetProportional(playerid, TimeLeftWar1[playerid], 1);

	Jailtime[playerid] = CreatePlayerTextDraw(playerid, 499.333587, 97.066673, " ");
	PlayerTextDrawLetterSize(playerid, Jailtime[playerid], 0.191331, 1.960886);
	PlayerTextDrawColor(playerid, Jailtime[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Jailtime[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, Jailtime[playerid], 51);
	PlayerTextDrawSetOutline(playerid, Jailtime[playerid], 1);
	PlayerTextDrawFont(playerid, Jailtime[playerid], 2);
	PlayerTextDrawAlignment(playerid, Jailtime[playerid], 1);

	Bus1[playerid] = CreatePlayerTextDraw(playerid, 256.000030, 351.431243, "Please wait a moment...");
	PlayerTextDrawLetterSize(playerid, Bus1[playerid], 0.292799, 1.614933);
	PlayerTextDrawColor(playerid, Bus1[playerid], -136734721);
	PlayerTextDrawSetShadow(playerid, Bus1[playerid], 1);
	PlayerTextDrawSetOutline(playerid, Bus1[playerid], 1);
	PlayerTextDrawFont(playerid, Bus1[playerid], 1);

	Bus2[playerid] = CreatePlayerTextDraw(playerid, 270.000030, 364.373382, " ");
	PlayerTextDrawLetterSize(playerid, Bus2[playerid], 0.206000, 1.525333);
	PlayerTextDrawColor(playerid, Bus2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Bus2[playerid], 1);
	PlayerTextDrawSetOutline(playerid, Bus2[playerid], 1);
	PlayerTextDrawFont(playerid, Bus2[playerid], 1);

	TextDrawSpec[playerid][1] = CreatePlayerTextDraw(playerid, 224.799926, 317.333343, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][1], 0.392397, 2.219732);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][1], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][1], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][1], 1);

	TextDrawSpec[playerid][2] = CreatePlayerTextDraw(playerid, 224.800003, 336.746551, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][2], 0.434798, 2.092799);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][2], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][2], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][2], 1);

	TextDrawSpec[playerid][3] = CreatePlayerTextDraw(playerid, 225.599975, 356.159973, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][3], 0.437999, 2.182399);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][3], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][3], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][3], 1);

	TextDrawSpec[playerid][4] = CreatePlayerTextDraw(playerid, 226.400039, 375.573486, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][4], 0.408400, 2.040534);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][4], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][4], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][4], 1);

	TextDrawSpec[playerid][5] = CreatePlayerTextDraw(playerid, 226.399963, 394.240020, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][5], 0.430000, 1.958400);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][5], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][5], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][5], 1);

	HUD[1][playerid] = CreatePlayerTextDraw(playerid,575.999633, 66.370399, " ");
	PlayerTextDrawLetterSize(playerid, HUD[1][playerid], 0.279333, 1.052443);
	PlayerTextDrawAlignment(playerid, HUD[1][playerid], 2);
	PlayerTextDrawColor(playerid, HUD[1][playerid], -1);
	PlayerTextDrawSetShadow(playerid, HUD[1][playerid], 0);
	PlayerTextDrawSetOutline(playerid, HUD[1][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, HUD[1][playerid], 51);
	PlayerTextDrawFont(playerid, HUD[1][playerid], 1);
	PlayerTextDrawSetProportional(playerid, HUD[1][playerid], 1);

	HUD[2][playerid] = CreatePlayerTextDraw(playerid,575.666320, 43.970417, " ");
	PlayerTextDrawLetterSize(playerid, HUD[2][playerid], 0.279333, 1.052443);
	PlayerTextDrawAlignment(playerid, HUD[2][playerid], 2);
	PlayerTextDrawColor(playerid, HUD[2][playerid], -1);
	PlayerTextDrawSetShadow(playerid, HUD[2][playerid], 0);
	PlayerTextDrawSetOutline(playerid, HUD[2][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, HUD[2][playerid], 51);
	PlayerTextDrawFont(playerid, HUD[2][playerid], 1);
	PlayerTextDrawSetProportional(playerid, HUD[2][playerid], 1);

	HUD[3][playerid] = CreatePlayerTextDraw(playerid,2.666624, 432.236938, " ");
	PlayerTextDrawLetterSize(playerid, HUD[3][playerid], 0.351333, 1.454814);
	PlayerTextDrawAlignment(playerid, HUD[3][playerid], 1);
	PlayerTextDrawColor(playerid, HUD[3][playerid], 0xFFFF00FF);
	PlayerTextDrawSetShadow(playerid, HUD[3][playerid], 0);
	PlayerTextDrawSetOutline(playerid, HUD[3][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, HUD[3][playerid], 51);
	PlayerTextDrawFont(playerid, HUD[3][playerid], 3);
	PlayerTextDrawSetProportional(playerid, HUD[3][playerid], 1);

	RentCarText[playerid] = CreatePlayerTextDraw(playerid, 45.333335, 320.237182, " ");
	PlayerTextDrawLetterSize(playerid, RentCarText[playerid], 0.244333, 1.716147);
	PlayerTextDrawAlignment(playerid, RentCarText[playerid], 1);
	PlayerTextDrawColor(playerid, RentCarText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, RentCarText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, RentCarText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, RentCarText[playerid], 255);
	PlayerTextDrawFont(playerid, RentCarText[playerid], 3);
	PlayerTextDrawSetProportional(playerid, RentCarText[playerid], 1);

	Tutorial[playerid] = CreatePlayerTextDraw(playerid, 280.000000, 377.000000, "~y~Tutorial");
	PlayerTextDrawLetterSize(playerid, Tutorial[playerid], 0.420000, 1.500000);
	PlayerTextDrawSetShadow(playerid, Tutorial[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Tutorial[playerid], 1);
	PlayerTextDrawFont(playerid, Tutorial[playerid], 2);

	Step[playerid] = CreatePlayerTextDraw(playerid, 282.000000, 390.000000, " ");
	PlayerTextDrawLetterSize(playerid, Step[playerid], 0.470000, 1.500000);
	PlayerTextDrawSetShadow(playerid, Step[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Step[playerid], 1);
	PlayerTextDrawFont(playerid, Step[playerid], 2);

	BusJob[playerid] = CreatePlayerTextDraw(playerid, 260.999847, 367.526092, "~y~BUS DRIVER JOB");
	PlayerTextDrawLetterSize(playerid, BusJob[playerid], 0.350333, 1.815703);
	PlayerTextDrawAlignment(playerid, BusJob[playerid], 1);
	PlayerTextDrawColor(playerid, BusJob[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BusJob[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BusJob[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BusJob[playerid], 255);
	PlayerTextDrawFont(playerid, BusJob[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BusJob[playerid], 1);

	BusCheck[playerid] = CreatePlayerTextDraw(playerid, 260.999969, 382.459259, " ");
	PlayerTextDrawLetterSize(playerid, BusCheck[playerid], 0.281666, 1.989928);
	PlayerTextDrawAlignment(playerid, BusCheck[playerid], 1);
	PlayerTextDrawColor(playerid, BusCheck[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BusCheck[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BusCheck[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BusCheck[playerid], 255);
	PlayerTextDrawFont(playerid, BusCheck[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BusCheck[playerid], 1);

	DMVexam[playerid] = CreatePlayerTextDraw(playerid, 200.799987, 356.906677, "~y~DRIVING SCHOOL EXAM");
	PlayerTextDrawLetterSize(playerid, DMVexam[playerid], 0.497200, 1.950933);
	PlayerTextDrawAlignment(playerid, DMVexam[playerid], 1);
	PlayerTextDrawColor(playerid, DMVexam[playerid], -1);
	PlayerTextDrawSetShadow(playerid, DMVexam[playerid], 0);
	PlayerTextDrawSetOutline(playerid, DMVexam[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, DMVexam[playerid], 255);
	PlayerTextDrawFont(playerid, DMVexam[playerid], 2);
	PlayerTextDrawSetProportional(playerid, DMVexam[playerid], 1);

	DMVcheck[playerid] = CreatePlayerTextDraw(playerid, 201.600006, 373.333343, " ");
	PlayerTextDrawLetterSize(playerid, DMVcheck[playerid], 0.467599, 2.152534);
	PlayerTextDrawAlignment(playerid, DMVcheck[playerid], 1);
	PlayerTextDrawColor(playerid, DMVcheck[playerid], -1);
	PlayerTextDrawSetShadow(playerid, DMVcheck[playerid], 0);
	PlayerTextDrawSetOutline(playerid, DMVcheck[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, DMVcheck[playerid], 255);
	PlayerTextDrawFont(playerid, DMVcheck[playerid], 2);
	PlayerTextDrawSetProportional(playerid, DMVcheck[playerid], 1);

	WantedText[playerid] = CreatePlayerTextDraw(playerid, 499.666900, 122.370384, " ");
	PlayerTextDrawBackgroundColor(playerid, WantedText[playerid], 51);
	PlayerTextDrawFont(playerid, WantedText[playerid], 2);
	PlayerTextDrawLetterSize(playerid, WantedText[playerid], 0.191331, 1.960886);
	PlayerTextDrawColor(playerid, WantedText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, WantedText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, WantedText[playerid], 1);

	UndercoverText[playerid] = CreatePlayerTextDraw(playerid, 250.000000, 374.000000, "~r~you are undercover");
	PlayerTextDrawBackgroundColor(playerid, UndercoverText[playerid], 255);
	PlayerTextDrawFont(playerid, UndercoverText[playerid], 3);
	PlayerTextDrawLetterSize(playerid, UndercoverText[playerid], 0.549999, 1.500000);
	PlayerTextDrawColor(playerid, UndercoverText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, UndercoverText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, UndercoverText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, UndercoverText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, UndercoverText[playerid], 0);

	Reportss[playerid] = CreatePlayerTextDraw(playerid, 500.000274, 96.651863, " ");
	PlayerTextDrawLetterSize(playerid, Reportss[playerid], 0.191333, 1.960887);
	PlayerTextDrawAlignment(playerid, Reportss[playerid], 1);
	PlayerTextDrawColor(playerid, Reportss[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Reportss[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Reportss[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Reportss[playerid], 51);
	PlayerTextDrawFont(playerid, Reportss[playerid], 2);
	PlayerTextDrawSetProportional(playerid, Reportss[playerid], 1);

	RaceTD[playerid][0] = CreatePlayerTextDraw(playerid, 107.333335, 202.270370, "usebox");
	PlayerTextDrawLetterSize(playerid, RaceTD[playerid][0], 0.000000, 5.767283);
	PlayerTextDrawTextSize(playerid, RaceTD[playerid][0], 2.666666, 0.000000);
	PlayerTextDrawAlignment(playerid, RaceTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, RaceTD[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, RaceTD[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, RaceTD[playerid][0], 102);
	PlayerTextDrawSetShadow(playerid, RaceTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, RaceTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, RaceTD[playerid][0], 0);

	RaceTD[playerid][1] = CreatePlayerTextDraw(playerid, -0.666667, 202.429641, "~b~[]  ~y~RACE ~r~[]");
	PlayerTextDrawLetterSize(playerid, RaceTD[playerid][1], 0.383998, 1.446518);
	PlayerTextDrawAlignment(playerid, RaceTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, RaceTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, RaceTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, RaceTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, RaceTD[playerid][1], 51);
	PlayerTextDrawFont(playerid, RaceTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, RaceTD[playerid][1], 1);

	RaceTD[playerid][2] = CreatePlayerTextDraw(playerid, 5.666666, 216.118515, " ");
	PlayerTextDrawLetterSize(playerid, RaceTD[playerid][2], 0.190665, 1.301333);
	PlayerTextDrawAlignment(playerid, RaceTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, RaceTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, RaceTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, RaceTD[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, RaceTD[playerid][2], 51);
	PlayerTextDrawFont(playerid, RaceTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, RaceTD[playerid][2], 1);

	RaceTD[playerid][3] = CreatePlayerTextDraw(playerid, 5.666666, 227.318511, " ");
	PlayerTextDrawLetterSize(playerid, RaceTD[playerid][3], 0.159665, 1.326222);
	PlayerTextDrawAlignment(playerid, RaceTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, RaceTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, RaceTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, RaceTD[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, RaceTD[playerid][3], 51);
	PlayerTextDrawFont(playerid, RaceTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, RaceTD[playerid][3], 1);

	RaceTD[playerid][4] = CreatePlayerTextDraw(playerid, 5.666666, 238.518478, " ");
	PlayerTextDrawLetterSize(playerid, RaceTD[playerid][4], 0.150333, 1.330369);
	PlayerTextDrawAlignment(playerid, RaceTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, RaceTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, RaceTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, RaceTD[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, RaceTD[playerid][4], 51);
	PlayerTextDrawFont(playerid, RaceTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, RaceTD[playerid][4], 1);

	FindTXD[playerid][0] = CreatePlayerTextDraw(playerid, 269.333374, 357.570251, " ");
	PlayerTextDrawLetterSize(playerid, FindTXD[playerid][0], 0.193999, 1.653925);
	PlayerTextDrawAlignment(playerid, FindTXD[playerid][0], 1);
	PlayerTextDrawColor(playerid, FindTXD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, FindTXD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, FindTXD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, FindTXD[playerid][0], 51);
	PlayerTextDrawFont(playerid, FindTXD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, FindTXD[playerid][0], 1);

	FindTXD[playerid][1] = CreatePlayerTextDraw(playerid, 270.333343, 371.259185, " ");
	PlayerTextDrawLetterSize(playerid, FindTXD[playerid][1], 0.203666, 1.454815);
	PlayerTextDrawAlignment(playerid, FindTXD[playerid][1], 1);
	PlayerTextDrawColor(playerid, FindTXD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, FindTXD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, FindTXD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, FindTXD[playerid][1], 51);
	PlayerTextDrawFont(playerid, FindTXD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, FindTXD[playerid][1], 1);

	TextJos[playerid] = CreatePlayerTextDraw(playerid, 307.000061, 398.222290, " ");
	PlayerTextDrawLetterSize(playerid, TextJos[playerid], 0.220666, 1.197629);
	PlayerTextDrawAlignment(playerid, TextJos[playerid], 2);
	PlayerTextDrawColor(playerid, TextJos[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TextJos[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TextJos[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TextJos[playerid], 51);
	PlayerTextDrawFont(playerid, TextJos[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TextJos[playerid], 1);

	QuestText[playerid] = CreatePlayerTextDraw(playerid, 500.333251, 123.614837, " ");
	PlayerTextDrawLetterSize(playerid, QuestText[playerid], 0.229999, 2.172445);
	PlayerTextDrawAlignment(playerid, QuestText[playerid], 1);
	PlayerTextDrawColor(playerid, QuestText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, QuestText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, QuestText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, QuestText[playerid], 51);
	PlayerTextDrawFont(playerid, QuestText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, QuestText[playerid], 1);
	BJusebox1[playerid] = CreatePlayerTextDraw(playerid, 502.999969, 105.203735, "usebox");
	PlayerTextDrawLetterSize(playerid, BJusebox1[playerid], 0.000000, 28.213373);
	PlayerTextDrawTextSize(playerid, BJusebox1[playerid], 138.666625, 0.000000);
	PlayerTextDrawAlignment(playerid, BJusebox1[playerid], 1);
	PlayerTextDrawColor(playerid, BJusebox1[playerid], 0);
	PlayerTextDrawUseBox(playerid, BJusebox1[playerid], true);
	PlayerTextDrawBoxColor(playerid, BJusebox1[playerid], 102);
	PlayerTextDrawSetShadow(playerid, BJusebox1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJusebox1[playerid], 0);
	PlayerTextDrawFont(playerid, BJusebox1[playerid], 0);

	BJusebox2[playerid] = CreatePlayerTextDraw(playerid, 133.000061, 163.692596, "usebox");
	PlayerTextDrawLetterSize(playerid, BJusebox2[playerid], 0.000000, 15.999383);
	PlayerTextDrawTextSize(playerid, BJusebox2[playerid], 45.000015, 0.000000);
	PlayerTextDrawAlignment(playerid, BJusebox2[playerid], 1);
	PlayerTextDrawColor(playerid, BJusebox2[playerid], 0);
	PlayerTextDrawUseBox(playerid, BJusebox2[playerid], true);
	PlayerTextDrawBoxColor(playerid, BJusebox2[playerid], 102);
	PlayerTextDrawSetShadow(playerid, BJusebox2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJusebox2[playerid], 0);
	PlayerTextDrawFont(playerid, BJusebox2[playerid], 0);

	BJusebox3[playerid] = CreatePlayerTextDraw(playerid, 596.333068, 164.107452, "usebox");
	PlayerTextDrawLetterSize(playerid, BJusebox3[playerid], 0.000000, 15.999385);
	PlayerTextDrawTextSize(playerid, BJusebox3[playerid], 508.000152, 0.000000);
	PlayerTextDrawAlignment(playerid, BJusebox3[playerid], 1);
	PlayerTextDrawColor(playerid, BJusebox3[playerid], 0);
	PlayerTextDrawUseBox(playerid, BJusebox3[playerid], true);
	PlayerTextDrawBoxColor(playerid, BJusebox3[playerid], 102);
	PlayerTextDrawSetShadow(playerid, BJusebox3[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJusebox3[playerid], 0);
	PlayerTextDrawFont(playerid, BJusebox3[playerid], 0);

	BJDealerText[playerid] = CreatePlayerTextDraw(playerid, 298.999969, 108.681503, "Dealer");
	PlayerTextDrawLetterSize(playerid, BJDealerText[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, BJDealerText[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealerText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealerText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealerText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJDealerText[playerid], 51);
	PlayerTextDrawFont(playerid, BJDealerText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, BJDealerText[playerid], 1);

	BJPlayerText[playerid] = CreatePlayerTextDraw(playerid, 300.333435, 235.614761, "Player");
	PlayerTextDrawLetterSize(playerid, BJPlayerText[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, BJPlayerText[playerid], 1);
	PlayerTextDrawColor(playerid, BJPlayerText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJPlayerText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJPlayerText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJPlayerText[playerid], 51);
	PlayerTextDrawFont(playerid, BJPlayerText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, BJPlayerText[playerid], 1);

	BJBlackJackText[playerid] = CreatePlayerTextDraw(playerid, 64.000007, 154.311111, "Blackjack");
	PlayerTextDrawLetterSize(playerid, BJBlackJackText[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, BJBlackJackText[playerid], 1);
	PlayerTextDrawColor(playerid, BJBlackJackText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJBlackJackText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJBlackJackText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJBlackJackText[playerid], 51);
	PlayerTextDrawFont(playerid, BJBlackJackText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, BJBlackJackText[playerid], 1);

	BJScoreText[playerid] = CreatePlayerTextDraw(playerid, 535.999572, 153.481521, "Score");
	PlayerTextDrawLetterSize(playerid, BJScoreText[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, BJScoreText[playerid], 1);
	PlayerTextDrawColor(playerid, BJScoreText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJScoreText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJScoreText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJScoreText[playerid], 51);
	PlayerTextDrawFont(playerid, BJScoreText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, BJScoreText[playerid], 1);

	BJDealText[playerid] = CreatePlayerTextDraw(playerid, 48.000000, 177.540740, "DEAL:");
	PlayerTextDrawLetterSize(playerid, BJDealText[playerid], 0.235333, 1.234962);
	PlayerTextDrawAlignment(playerid, BJDealText[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJDealText[playerid], 51);
	PlayerTextDrawFont(playerid, BJDealText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJDealText[playerid], 1);

	BJDealAmountText[playerid] = CreatePlayerTextDraw(playerid, 47.999992, 189.570373, "1,000,000$");
	PlayerTextDrawLetterSize(playerid, BJDealAmountText[playerid], 0.219666, 1.226667);
	PlayerTextDrawAlignment(playerid, BJDealAmountText[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealAmountText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealAmountText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealAmountText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJDealAmountText[playerid], 51);
	PlayerTextDrawFont(playerid, BJDealAmountText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJDealAmountText[playerid], 1);

	BJBalanceText[playerid] = CreatePlayerTextDraw(playerid, 48.333339, 208.651840, "BALANCE:");
	PlayerTextDrawLetterSize(playerid, BJBalanceText[playerid], 0.234666, 1.172740);
	PlayerTextDrawAlignment(playerid, BJBalanceText[playerid], 1);
	PlayerTextDrawColor(playerid, BJBalanceText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJBalanceText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJBalanceText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJBalanceText[playerid], 51);
	PlayerTextDrawFont(playerid, BJBalanceText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJBalanceText[playerid], 1);

	BJBalanceAmountText[playerid] = CreatePlayerTextDraw(playerid, 48.000011, 220.681503, "13,000,000$");
	PlayerTextDrawLetterSize(playerid, BJBalanceAmountText[playerid], 0.218333, 1.259852);
	PlayerTextDrawAlignment(playerid, BJBalanceAmountText[playerid], 1);
	PlayerTextDrawColor(playerid, BJBalanceAmountText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJBalanceAmountText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJBalanceAmountText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJBalanceAmountText[playerid], 51);
	PlayerTextDrawFont(playerid, BJBalanceAmountText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJBalanceAmountText[playerid], 1);

	BJDealButtonText[playerid] = CreatePlayerTextDraw(playerid, 70.999984, 241.836990, "DEAL");
	PlayerTextDrawLetterSize(playerid, BJDealButtonText[playerid], 0.296666, 1.301333);
	PlayerTextDrawAlignment(playerid, BJDealButtonText[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealButtonText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealButtonText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealButtonText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJDealButtonText[playerid], 51);
	PlayerTextDrawFont(playerid, BJDealButtonText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJDealButtonText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, BJDealButtonText[playerid], 1);

	BJEnterBetText[playerid] = CreatePlayerTextDraw(playerid, 48.000000, 293.274047, "ENTER BET AMOUNT");
	PlayerTextDrawLetterSize(playerid, BJEnterBetText[playerid], 0.193333, 1.546074);
	PlayerTextDrawAlignment(playerid, BJEnterBetText[playerid], 1);
	PlayerTextDrawColor(playerid, BJEnterBetText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJEnterBetText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJEnterBetText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJEnterBetText[playerid], 51);
	PlayerTextDrawFont(playerid, BJEnterBetText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJEnterBetText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, BJEnterBetText[playerid], 1);

	BJDealerScoreText[playerid] = CreatePlayerTextDraw(playerid, 527.333068, 177.540725, "DEALER: 21");
	PlayerTextDrawLetterSize(playerid, BJDealerScoreText[playerid], 0.199999, 1.384296);
	PlayerTextDrawAlignment(playerid, BJDealerScoreText[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealerScoreText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealerScoreText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealerScoreText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJDealerScoreText[playerid], 51);
	PlayerTextDrawFont(playerid, BJDealerScoreText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJDealerScoreText[playerid], 1);

	BJPlayerScoreText[playerid] = CreatePlayerTextDraw(playerid, 527.666687, 192.059295, "PLAYER: 21");
	PlayerTextDrawLetterSize(playerid, BJPlayerScoreText[playerid], 0.203999, 1.309629);
	PlayerTextDrawAlignment(playerid, BJPlayerScoreText[playerid], 1);
	PlayerTextDrawColor(playerid, BJPlayerScoreText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJPlayerScoreText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJPlayerScoreText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJPlayerScoreText[playerid], 51);
	PlayerTextDrawFont(playerid, BJPlayerScoreText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJPlayerScoreText[playerid], 1);

	BJOpenActionText[playerid] = CreatePlayerTextDraw(playerid, 509.999908, 296.592620, "OPEN ACTION MENU");
	PlayerTextDrawLetterSize(playerid, BJOpenActionText[playerid], 0.204999, 1.496296);
	PlayerTextDrawAlignment(playerid, BJOpenActionText[playerid], 1);
	PlayerTextDrawColor(playerid, BJOpenActionText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJOpenActionText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJOpenActionText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJOpenActionText[playerid], 51);
	PlayerTextDrawFont(playerid, BJOpenActionText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJOpenActionText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, BJOpenActionText[playerid], 1);

	BJDealerCard1[playerid] = CreatePlayerTextDraw(playerid, 158.000000, 137.718521, "LD_CARD:cd9d");
	PlayerTextDrawLetterSize(playerid, BJDealerCard1[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJDealerCard1[playerid], 59.000000, 87.111114);
	PlayerTextDrawAlignment(playerid, BJDealerCard1[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealerCard1[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealerCard1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealerCard1[playerid], 0);
	PlayerTextDrawFont(playerid, BJDealerCard1[playerid], 4);

	BJDealerCard2[playerid] = CreatePlayerTextDraw(playerid, 226.333328, 138.133331, "LD_CARD:cd11c");
	PlayerTextDrawLetterSize(playerid, BJDealerCard2[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJDealerCard2[playerid], 60.666671, 86.696304);
	PlayerTextDrawAlignment(playerid, BJDealerCard2[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealerCard2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealerCard2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealerCard2[playerid], 0);
	PlayerTextDrawFont(playerid, BJDealerCard2[playerid], 4);

	BJDealerCard3[playerid] = CreatePlayerTextDraw(playerid, 295.000000, 138.548156, "LD_CARD:cdback");
	PlayerTextDrawLetterSize(playerid, BJDealerCard3[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJDealerCard3[playerid], 60.666656, 86.696273);
	PlayerTextDrawAlignment(playerid, BJDealerCard3[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealerCard3[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealerCard3[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealerCard3[playerid], 0);
	PlayerTextDrawFont(playerid, BJDealerCard3[playerid], 4);

	BJDealerCard4[playerid] = CreatePlayerTextDraw(playerid, 363.000000, 138.548156, "LD_CARD:cdback");
	PlayerTextDrawLetterSize(playerid, BJDealerCard4[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJDealerCard4[playerid], 57.333312, 87.111114);
	PlayerTextDrawAlignment(playerid, BJDealerCard4[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealerCard4[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealerCard4[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealerCard4[playerid], 0);
	PlayerTextDrawFont(playerid, BJDealerCard4[playerid], 4);

	BJDealerCard5[playerid] = CreatePlayerTextDraw(playerid, 425.666656, 138.548156, "LD_CARD:cdback");
	PlayerTextDrawLetterSize(playerid, BJDealerCard5[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJDealerCard5[playerid], 57.000000, 87.111114);
	PlayerTextDrawAlignment(playerid, BJDealerCard5[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealerCard5[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealerCard5[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealerCard5[playerid], 0);
	PlayerTextDrawFont(playerid, BJDealerCard5[playerid], 4);

	BJPlayerCard1[playerid] = CreatePlayerTextDraw(playerid, 157.666656, 265.066650, "LD_CARD:cd13s");
	PlayerTextDrawLetterSize(playerid, BJPlayerCard1[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJPlayerCard1[playerid], 59.666687, 84.622222);
	PlayerTextDrawAlignment(playerid, BJPlayerCard1[playerid], 1);
	PlayerTextDrawColor(playerid, BJPlayerCard1[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJPlayerCard1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJPlayerCard1[playerid], 0);
	PlayerTextDrawFont(playerid, BJPlayerCard1[playerid], 4);

	BJPlayerCard2[playerid] = CreatePlayerTextDraw(playerid, 226.000000, 265.066650, "LD_CARD:cd2s");
	PlayerTextDrawLetterSize(playerid, BJPlayerCard2[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJPlayerCard2[playerid], 59.333312, 85.037048);
	PlayerTextDrawAlignment(playerid, BJPlayerCard2[playerid], 1);
	PlayerTextDrawColor(playerid, BJPlayerCard2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJPlayerCard2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJPlayerCard2[playerid], 0);
	PlayerTextDrawFont(playerid, BJPlayerCard2[playerid], 4);

	BJPlayerCard3[playerid] = CreatePlayerTextDraw(playerid, 293.333343, 265.481475, "LD_CARD:cd5c");
	PlayerTextDrawLetterSize(playerid, BJPlayerCard3[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJPlayerCard3[playerid], 61.666656, 84.622222);
	PlayerTextDrawAlignment(playerid, BJPlayerCard3[playerid], 1);
	PlayerTextDrawColor(playerid, BJPlayerCard3[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJPlayerCard3[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJPlayerCard3[playerid], 0);
	PlayerTextDrawFont(playerid, BJPlayerCard3[playerid], 4);

	BJPlayerCard4[playerid] = CreatePlayerTextDraw(playerid, 365.000000, 265.481475, "LD_CARD:cdback");
	PlayerTextDrawLetterSize(playerid, BJPlayerCard4[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJPlayerCard4[playerid], 58.333312, 84.207397);
	PlayerTextDrawAlignment(playerid, BJPlayerCard4[playerid], 1);
	PlayerTextDrawColor(playerid, BJPlayerCard4[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJPlayerCard4[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJPlayerCard4[playerid], 0);
	PlayerTextDrawFont(playerid, BJPlayerCard4[playerid], 4);

	BJPlayerCard5[playerid] = CreatePlayerTextDraw(playerid, 429.666687, 265.066650, "LD_CARD:cdback");
	PlayerTextDrawLetterSize(playerid, BJPlayerCard5[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJPlayerCard5[playerid], 55.333312, 84.622222);
	PlayerTextDrawAlignment(playerid, BJPlayerCard5[playerid], 1);
	PlayerTextDrawColor(playerid, BJPlayerCard5[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJPlayerCard5[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJPlayerCard5[playerid], 0);
	PlayerTextDrawFont(playerid, BJPlayerCard5[playerid], 4);
	
	logo[playerid] = CreatePlayerTextDraw(playerid, 571.500000, 430.937500, "NEPHRITE");
	PlayerTextDrawLetterSize(playerid, logo[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, logo[playerid], 2);
	PlayerTextDrawColor(playerid, logo[playerid], -1);
	PlayerTextDrawSetShadow(playerid, logo[playerid], 1);
	PlayerTextDrawSetOutline(playerid, logo[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, logo[playerid], 51);
	PlayerTextDrawFont(playerid, logo[playerid], 2);

	NepTDD[playerid] = CreatePlayerTextDraw(playerid, 624.000000, 433.125000, "~r~RO");
	PlayerTextDrawLetterSize(playerid, NepTDD[playerid], 0.341000, 1.320000);
	PlayerTextDrawAlignment(playerid, NepTDD[playerid], 2);
	PlayerTextDrawColor(playerid, NepTDD[playerid], -1);
	PlayerTextDrawSetShadow(playerid, NepTDD[playerid], 1);
	PlayerTextDrawSetOutline(playerid, NepTDD[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, NepTDD[playerid], 51);
	PlayerTextDrawFont(playerid, NepTDD[playerid], 2);

 	// VARIABILELE
	gPlayerUsingLoopingAnim[playerid] = 0;  BusCheckk[playerid] = 0;
	TypeName[playerid] = 0;					RaceCP[playerid] = 0;
	SelectChar[playerid] = 0; 				HidePM[playerid] = 0;
	PhoneOnline[playerid] = 0; 				SelectCharID[playerid] = 0;
	SelectCharPlace[playerid] = 0;			ChosenSkin[playerid] = 0;
	UsingDrugs[playerid] = 0; 				CurrentMoney[playerid] = 0;
	UsedFind[playerid] = 0; 				CP[playerid] = 0;
	Vending[playerid] = 0;                  PlayerInfo[playerid][pFirstAnswer] = 0;
	MoneyMessage[playerid] = 0; 			Hatss[playerid] = 0;
	RepairOffer[playerid] = 999; 			RepairPrice[playerid] = 0;
	RepairCar[playerid] = 0; 				TalkingLive[playerid] = 0;
	LiveOffer[playerid] = 999; 				TakingLesson[playerid] = 0;
	RefillOffer[playerid] = 999; 			RefillPrice[playerid] = 0;
	DrugOffer[playerid] = 999; 				PlayerCuffed[playerid] = 0;
	PlayerCuffedTime[playerid] = 0; 		DrugPrice[playerid] = 0;
	RegistrationStep[playerid] = 0; 		PlayerCuffed2[playerid] = 0;
	DrugGram[playerid] = 0; 				HouseOffer[playerid] = 999;
	HouseID[playerid] = 0;				 	HousePrice[playerid] = 0;
	MedicTime[playerid] = 0;				WantedFarmer[playerid] = 0;
	NeedMedicTime[playerid] = 0; 			PlacedNews[playerid] = 0;
	GoChase[playerid] = 999; 				GetChased[playerid] = 999;
	OnDuty[playerid] = 0;                   ofercar[playerid] = -1;
	carprice[playerid] = 0;                 primesccar[playerid] = 0;
	CarID[playerid] = -1;                  	cartype[playerid] = 0;
	Diceid[playerid] = 999;					JobCar[playerid] = -1;
	GotHit[playerid] = 0; 					MedicCall[playerid] = 0;
	SafeTime[playerid] = 60;				TaxiCall[playerid] = 0;
	PlayerTied[playerid] = 0; 				TaxiFare[playerid] = 0;
	TaxiAccepted[playerid] = -1;			MedicAccepted[playerid] = -1;
	JobDuty[playerid] = 0;					Listening[playerid] = -1;
	Mobile[playerid] = -1; 					ShowDMG[playerid] = 1;
	Spectate[playerid] = -1; 				PlayerDrunk[playerid] = 0;
	PlayerDrunkTime[playerid] = 0; 			Unspec[playerid][sLocal] = -1;
 	PlayerInfo[playerid][pNewbieEnabled] = 1;
	GarbageCollected[playerid] = 0;			DrugTimer[playerid] = 0;
 	flymode[playerid] = 0;					IsBot[playerid] = 0;
 	tradecars[playerid] = -1;               tradecars2[playerid] = -1;
	tradetype[playerid] = -1;               tradetype2[playerid] = -1;
	tradeofferer[playerid] = -1;            tradediff[playerid] = 0;
 	ConsumingMoney[playerid] = 0;           hiddenoffer[playerid] = 999;
 	hiddenprice[playerid] = 0;              IsPlayerAFK[playerid] = 0;
    gLastCar[playerid] = 0; 				FirstSpawn[playerid] = 0;
	FactionOffer[playerid] = 999;			SellHouseID[playerid] = -1;
	gNews[playerid] = 0; 					BigEar[playerid] = 0;
	gFam[playerid] = 0;						examcar[playerid] = -1;
    hudactivated[playerid] = 0;				PhoneOnlineCalls[playerid] = 0;
	gPlayerLogged[playerid] = 0;            Sunglasses[playerid] = 0;
	gPlayerLogTries[playerid] = 2; 			gPlayerAccount[playerid] = 0;
 	gPlayerSpawned[playerid] = 0;           ReportTime[playerid] = 0;
	FreeOffer[playerid] = -1;               TowAcc[playerid] = 0;
	FreePrice[playerid] = 0; 				PlayerTazeTime[playerid] = 0;
	PlayerStoned[playerid] = 0; 			TicketOffer[playerid] = 999;
	TicketMoney[playerid] = 0; 				TutTime[playerid] = 0;
 	FreePlayer[playerid] = -1;				TaxiMoneySpent[playerid] = 0;
	TurfsDisp[playerid] = 0; 				PlayerInfo[playerid][pCash] = dollah;
	NoFuel[playerid] = 0; 					LastBiz[playerid] = -1;
	LastBizTime[playerid] = 0;				FactionSpec[playerid] = 0;
	HireCar[playerid] = -1; 				gPlayerAnimLibsPreloaded[playerid] = 0;
	TransferOffer[playerid] = 999;			TaxiTimer[playerid] = 0;
	TransferMoney[playerid] = 0; 			AdvPlayer[playerid] = 0;
	pizzaprize[playerid] = 0;				QuestWait[playerid] = 0;
	InHouse[playerid] = -1; 				InBussines[playerid] = -1;
	targetfind[playerid] = -1; 				HaveNewbie[playerid] = -1;
	adminacceptedhelp[playerid] = -1;       TimerQuestion[playerid] = -1;
	MatsHolding[playerid] = 0;				GarbageTimer[playerid] = 0;
	MatsOffer[playerid] = -1; 				MatsPrice[playerid] = 0;
	MatsAmmo[playerid] = 0; 				SellgunOffer[playerid] = -1;
	SellgunPrice[playerid] = 0; 			SellgunMats[playerid] = 0;
	SellgunAmmo[playerid] = 0; 				SellgunID[playerid] = 0;
	pizzaj[playerid] = 0; 					farmerc[playerid] = 0;
	farmertime[playerid] = 1;               pizzatime[playerid] = 0;
	togfind[playerid] = 0;				 	TrashID[playerid] = -1;
	bizid[playerid] = 0; 					bizprice[playerid] = 0;
	bizoffer[playerid] = 999; 				BusinessRob[playerid] = 0;
	playerdeath[playerid] = 0; 				curatj[playerid] = 0;
	tazer[playerid] = 0; 					HelperTimer[playerid] = 0;
	OnlineTime[playerid] = 0;				SkinSelect[playerid] = 1;
	Clanidoff[playerid] = 999; 				OnlineTimeToday[playerid] = 0;
	PlayerHandsup[playerid] = 0;			failpizza[playerid] = -1;
	Trucker[playerid] = 0;					RobTime[playerid] = -1;
	SellTradeID[playerid] = -1;				CanSpectate[playerid] = 1;
	wantedlost[playerid] = 1799;			SellTradePrice[playerid] = 0;
	PizzaCP[playerid] = 0;					SellTradeTimer[playerid] = 0;
	Dicem[playerid] = 999; 					Undercover[playerid] = 0;
	Refueling[playerid] = 0;				InHQ[playerid] = -1;
	raceoff[playerid] = 999;				reportcheater[playerid] = -1;
	toglc[playerid] = 0;					reportreason[playerid] = 0;
	fight2[playerid] = 999;					playerreported[playerid] = -1;
	taxim[playerid] = 0;					RentTime[playerid] = 0;
	shotTime[playerid] = 0;					RentMoneySpent[playerid] = 0;
    shot[playerid] = 0;						TaxiMoneyEarned[playerid] = 0;
	DeathP[playerid] = 0;                   EnterInModShop[playerid] = 0;
    timersoo[playerid] = 0;					FreeExpire[playerid] = 0;
    somatee[playerid] = 1;					somated[playerid] = -1;
    CheckBus[playerid] = 0;                 JobStep[playerid] = 0;
    busc[playerid] = 0;                     viddd[playerid] = 0;
 	TruckID[playerid] = 0;					GotoMats[playerid] = 0;
 	Trucker3[playerid] = 0;					Trucker4[playerid] = 0;
 	Trucker2[playerid] = 0;                 AreFaina[playerid] = 0;
 	CarJacker[playerid] = 0;                JackAcc[playerid] = 0;
 	Fishing[playerid] = 0;                  FishTimer[playerid] = 0;
 	TipPeste[playerid] = 0;                 SelFac[playerid] = 0;
 	BuyCar[playerid] = -1;                  PlayerInfo[playerid][pNewbieTimeout] = 0;
	HelperTimer[playerid] = 0;				timernewbie[playerid] = 0;
	HaveHelmet[playerid] = 0;				WantedTimer[playerid] = 0;
	CreateVEHID[playerid] = -1;				CreateVEH[playerid] = -1;
	SellHiddenID[playerid] = -1;			SellHiddenPrice[playerid] = 0;
	BlockVehUse[playerid] = 0;				FireworkTimer[playerid] = 0;
	TogVIP[playerid] = 1;					RentCar[playerid] = -1;
	TaxiDriver[playerid] = -1;				AdminDuty[playerid] = 0;
	HealTimer[playerid] = 0;				TogBid[playerid] = 1;
	BreachID[playerid] = 0;					login[playerid] = 0;
	toge[playerid] = 0;						togarrests[playerid] = 0;
	Asteapta[playerid] = -1;
 	PlayerInfo[playerid][pDrunkLevelLast] = 0;
 	PlayerInfo[playerid][pFPS] = 0;
 	PlayerInfo[playerid][pPaintBallG] = 0;
 	PlayerInfo[playerid][pPaintBallKills] = 0;
 	PlayerInfo[playerid][pPaintBallVoted] = 0;
 	PlayerInfo[playerid][pPaintBallVoted2] = 0;
 	PlayerInfo[playerid][pNextNotification] = 0;
	PlayerInfo[playerid][pRaceG] = -1;
	PlayerInfo[playerid][pRaceVoted] = 0;
	PlayerInfo[playerid][pSupport] = 0;
	PlayerInfo[playerid][pBlockedAcc] = 0;
	ChangeClothes[playerid] = 0;
	strdel(LastText[playerid], 0, 128);
	format(LiveQuestion[playerid], 128, "NULL");
	format(PlayerInfo[playerid][pNormalName], 30, "NULL");
	format(somatename[playerid], 30, "NULL");
	format(reporttext[playerid], 30, "NULL");
	format(WantName[playerid], 30, "NULL");
	format(AdvMSG[playerid], 256, "");
	format(PlayerInfo[playerid][pNewbieQuestion], 256, "NULL");
    PlayerTextDrawSetString(playerid, logo[playerid], SERVER_NAME);
	//Delete Personal Car Variables
	for(new idd; idd < MAX_PERSONAL_VEHICLES; idd++)
	{
		PlayerInfo[playerid][pCarID][idd]			= 0;
		PlayerInfo[playerid][pCar][idd]				= -1;
		PlayerInfo[playerid][pCarModel][idd] 		= 0;
		PlayerInfo[playerid][pCarLocX][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLocY][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLocZ][idd] 		= 0.0;
		PlayerInfo[playerid][pCarAngle][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocX][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocY][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocZ][idd] 		= 0.0;
		PlayerInfo[playerid][pCarAngle2][idd] 		= 0.0;
		PlayerInfo[playerid][pCarBuyTime][idd]		= 0;
		PlayerInfo[playerid][pCarColor1][idd] 		= 1;
		PlayerInfo[playerid][pCarColor2][idd] 		= 1;
		PlayerInfo[playerid][pCarLock][idd] 		= 0;
		PlayerInfo[playerid][pCarInsPrice][idd] 	= 0;
		PlayerInfo[playerid][pCarIns][idd] 			= 0;
		PlayerInfo[playerid][pCarKM][idd] 			= 0.0;
		PlayerInfo[playerid][pCarVIP][idd]			= 0;
		PlayerInfo[playerid][pCarVipColors][idd]		= 0;
		PlayerInfo[playerid][pCarKMLast][idd]		= 0;
		PlayerInfo[playerid][pCarHP][idd] 			= 0.0;
		PlayerInfo[playerid][pCarDamage1][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage2][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage3][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage4][idd] 		= 0;
		PlayerInfo[playerid][pCarGas][idd] 			= 100;
		PlayerInfo[playerid][pCarPaintJ][idd] 		= 6;
		PlayerInfo[playerid][pCarBlock][idd]		= 0;
		CarVipName[playerid][idd] = "";
		CarPlate[playerid][idd] = "";
		CarOwner[playerid][idd] = "";
		for(new s; s < 17; s++)
		{
			CarMod[playerid][idd][s] = 0;
		}
	}

	GivePlayerCash(playerid,PlayerInfo[playerid][pCash]);
	PlayerTextDrawShow(playerid, logo[playerid]);

	// ANTI WEAPON CHEAT
	WeaponData[playerid][0] = false; 			WeaponData[playerid][1] = false;
	WeaponData[playerid][2] = false;			WeaponData[playerid][3] = false;
	WeaponData[playerid][4] = false; 			WeaponData[playerid][5] = false;
	WeaponData[playerid][6] = false; 			WeaponData[playerid][7] = false;
	WeaponData[playerid][8] = false; 			WeaponData[playerid][9] = false;
	WeaponData[playerid][10] = false; 			WeaponData[playerid][11] = false;
	WeaponData[playerid][12] = false;

	//Anti connect clan
	new playername[30];
	GetPlayerName(playerid, playername, sizeof(playername));
	foreach(new ids : Player)
	{
		if(!strcmp(playername, PlayerInfo[ids][pNormalName], true))
		{
			SS(playerid, COLOR_LIGHTRED, "Este deja logat cineva cu acest nick.", "Someone is already logged in with this nickname.");
            KickEx(playerid);
			return 1;
		}
	}

	// ANTI MONEY CHEAT
	TimerAtuPlayer[playerid] = SetTimerEx("UpdatePlayer", 2000, true, "d", playerid);

    // COLOR ON LOGIN
	SetPlayerColor(playerid,COLOR_GRAD2);

	// RESET WANTED
	ClearWanted(playerid);

	// TEAM PLAYER
	if(PlayerInfo[playerid][pMember] == 0)
	{
	    gTeam[playerid] = 3;
    	PlayerInfo[playerid][pTeam] = 3;
	}
	else if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pMember] == 8)
	{
	    gTeam[playerid] = 2;
    	PlayerInfo[playerid][pTeam] = 2;
	}
	else if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pMember] == 10)
	{
	    gTeam[playerid] = 5;
    	PlayerInfo[playerid][pTeam] = 5;
	}
	else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pMember] == 14)
	{
	    gTeam[playerid] = 4;
    	PlayerInfo[playerid][pTeam] = 4;
	}
	else if(PlayerInfo[playerid][pMember] == 11)
	{
	    gTeam[playerid] = 11;
    	PlayerInfo[playerid][pTeam] = 11;
	}
	BanCheck(playerid);
	return 1;
}

public ClearCrime(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[50];
		format(string, sizeof(string), "********");
		strmid(PlayerInfo[playerid][pVictim], string, 0, strlen(string), 255);
		strmid(PlayerInfo[playerid][pAccused], string, 0, strlen(string), 255);
		format(string, sizeof(string), "Fara Crima");
		strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
		strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
		strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
		Update(playerid,pCrime1x);
		Update(playerid,pCrime2x);
		Update(playerid,pCrime3x);
		Update(playerid,pAccusedx);
		Update(playerid,pVictimx);
	}
	return 1;
}

public GetWeekDay()
{
	new year,month,day;
    getdate(year, month, day);

	new
		weekday,
		j,
		e;

	if (month <= 2)
	{
		month += 12;
		--year;
	}

	j = year % 100;
	e = year / 100;

	switch ((day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7)
	{
		case 0: weekday = 1;
		case 1: weekday = 2;
		case 2: weekday = 3;
		case 3: weekday = 4;
		case 4: weekday = 5;
		case 5: weekday = 6;
		case 6: weekday = 7;
	}
	return weekday;
}

forward SendLeaderMessage(leader, color, string[]);
public SendLeaderMessage(leader, color, string[])
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLeader] == leader)
	    {
			SendClientMessage(i, color, string);
		}
	}
	return 1;
}

forward SendToClan(groupid, colour, string[]);
public SendToClan(groupid, colour, string[])
{
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pClan] == groupid)
		{
			SendClientMessage(i, colour, string);
		}
	}
	return 1;
}

public RACtime(playerid)
{
	for(new car = 1; car <= MAX_VEHICLES; car++)
	{
		new nu;
		if(!IsVehicleOccupied(car))
		{
			foreach(new i : Player)
			{
				if(viddd[i] == car) nu = 1;
				for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				{
					if(PlayerInfo[i][pCarID][v] == car) nu = 1;
				}
			}
			if(nu == 0) SetVehicleToRespawn(car);
		}

	}
	return 1;
}

stock GetDistancePlayerVeh(playerid, veh) {

	new
	    Float:Floats[7];

	GetPlayerPos(playerid, Floats[0], Floats[1], Floats[2]);
	GetVehiclePos(veh, Floats[3], Floats[4], Floats[5]);
	Floats[6] = floatsqroot((Floats[3]-Floats[0])*(Floats[3]-Floats[0])+(Floats[4]-Floats[1])*(Floats[4]-Floats[1])+(Floats[5]-Floats[2])*(Floats[5]-Floats[2]));

	return floatround(Floats[6]);
}

stock doesVehicleExist(vehicleid) {

    if(GetVehicleModel(vehicleid) >= 400) {
		return 1;
	}
	return 0;
}

stock GetClosestVehicle(playerid, exception = INVALID_VEHICLE_ID) {
    new
		Float:Distance,
		target = -1;

    for(new v; v < MAX_VEHICLES; v++) if(doesVehicleExist(v)) {
        if(v != exception && (target < 0 || Distance > GetDistancePlayerVeh(playerid, v))) {
            target = v;
            Distance = GetDistancePlayerVeh(playerid, v);
        }
    }
    return target;
}

// ONPLAYERDISCONNECT
public OnPlayerDisconnect(playerid, reason)
{
	if(somated[playerid] != -1)
	{
		if(PlayerInfo[playerid][pWantedLevel] > 0 && sarmale[playerid] == 0)
		{
			new string[256];
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i))
				{
					new wakaname2[MAX_PLAYER_NAME], price = PlayerInfo[playerid][pWantedLevel] * 1000, streap[MAX_PLAYER_NAME];
					if(IsACop(i) && CrimInRange(50.0, playerid,i) && OnDuty[i] == 1)
					{
						GetPlayerName(playerid, streap, sizeof(streap));
						GetPlayerName(i, wakaname2, sizeof(wakaname2));
						GameTextForPlayer(i, "Running Suspect bonus!", 5000, 1);
						format(string, sizeof(string), "Ai primit $%d bonus pentru prinderea suspectului %s.", price, streap);
						SendClientMessage(i, COLOR_DBLUE, string);
						new var[356], wtime;
						if(SvarInfo[1][svValue] == 0) wtime = 300*PlayerInfo[playerid][pWantedLevel];
						else wtime = 150*PlayerInfo[playerid][pWantedLevel];
						mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `JailTime`='%d',`Jailed`= '1',`WantedLevel`='0' WHERE `name`='%s'",wtime,PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,var,"","");
						format(string, sizeof(string), "********");
						strmid(PlayerInfo[playerid][pVictim], string, 0, strlen(string), 255);
						strmid(PlayerInfo[playerid][pAccused], string, 0, strlen(string), 255);
						format(string, sizeof(string), "Fara Crima");
						if(SvarInfo[1][svValue] == 0) PlayerInfo[playerid][pJailTime]=300*PlayerInfo[playerid][pWantedLevel];
						else PlayerInfo[playerid][pJailTime]=150*PlayerInfo[playerid][pWantedLevel];
						PlayerInfo[playerid][pJailed] = 1;
						PlayerInfo[playerid][pWantedLevel] = 0;
						PlayerInfo[playerid][pWantedDeaths] += 1;
						WantedPoints[playerid] = 0;
						ClearCrime(playerid);
						strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
						strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
						strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
						Update(playerid,pCrime1x);
						Update(playerid,pCrime2x);
						Update(playerid,pCrime3x);
						Update(playerid,pAccusedx);
						Update(playerid,pVictimx);
						GivePlayerCash(i, price);
						sarmale[playerid] = 1;
						format(string, sizeof(string), "Dispatch: %s has been killed by No One and will be in jail for %d seconds, over.",streap,PlayerInfo[playerid][pJailTime]);
						SendTeamMessage(8, COLOR_LIGHTBLUE, string);
						SendTeamMessage(3, COLOR_LIGHTBLUE, string);
						SendTeamMessage(2, COLOR_LIGHTBLUE, string);
						SendTeamMessage(1, COLOR_LIGHTBLUE, string);
						new varxx[256];
						mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport3 = Raport3+1 WHERE name = '%s'",PlayerInfo[i][pNormalName]);
						mysql_tquery(SQL,varxx,"","");
					}
				}
			}
			SendTeamMessage(1, COLOR_LIGHTBLUE, string);
			SendTeamMessage(2, COLOR_LIGHTBLUE, string);
			SendTeamMessage(3, COLOR_LIGHTBLUE, string);
			SendTeamMessage(8, COLOR_LIGHTBLUE, string);
		}
		else if(PlayerInfo[playerid][pWantedLevel] < 1)
		{
			new string[256],var100[256],sendername[30];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Unknown");
			strmid(PlayerInfo[playerid][pVictim], string, 0, strlen(string), 255);
			Update(playerid,pVictimx);
			if(strcmp(PlayerInfo[playerid][pCrime1], "Fara Crima", true) == 0)
			{
		    	format(string,sizeof(string),"disconnect during a chase");
				strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
				Update(playerid,pCrime1x);
			}
			else if(strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0)
			{
		    	format(string,sizeof(string),"disconnect during a chase");
				strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
				Update(playerid,pCrime2x);
			}
			else if(strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0)
			{
		    	format(string,sizeof(string),"disconnect during a chase");
				strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
				Update(playerid,pCrime3x);
			}
			else if(strcmp(PlayerInfo[playerid][pCrime1],  "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0) { }
			else
			{
				format(string,sizeof(string),"disconnect during a chase");
				strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
				Update(playerid,pCrime1x);
				format(string, sizeof(string), "Fara Crima");
				strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
				strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
				Update(playerid,pCrime2x);
				Update(playerid,pCrime3x);
			}
			format(string, sizeof(string), "Dispatch: %s is now wanted for disconnecting during a chase.",sendername);
			SendTeamMessage(1, COLOR_DBLUE, string);
			SendTeamMessage(2, COLOR_DBLUE, string);
			SendTeamMessage(3, COLOR_DBLUE, string);
			SendTeamMessage(8, COLOR_DBLUE, string);
			PlayerInfo[playerid][pWantedLevel] = (2+PlayerInfo[playerid][pWantedLevel]);
			Update(playerid,pWantedLevelx);
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','Nivelul tau de wanted a fost modificat (+2) pentru ca te-ai deconectat in timp ce erai urmarit de politie.')",PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,var100,"","");
		}
	}
	// PAYDAY SAVE
    if(gPlayerLogged[playerid] != 0)
	{
		OnPlayerDateUpdateX2(playerid);
		Update(playerid, pPayDayx);
		Update(playerid, pPayCheckx);
		Update(playerid, pFpunishx);
		Update(playerid, pConnectTimex);
		Update(playerid, pBank);
		Update(playerid, pCashx);
		Update(playerid, pRP);
		Update(playerid, pJailTimex);
		Update(playerid, pLevelx);
		Update(playerid, pOnlineTimeTodayx);
	}
	pnsmoney[playerid] = 0;
	RepairTime[playerid] = 0;
	foreach(new i : Player)
	{
		if(IsACop(playerid))
		{
			if(caser[playerid] == i)
			{
				cased[i] --;
				caser[playerid] = 1001;
			}
		}
	}
	cased[playerid] = 0;
	caser[playerid] = 1001;

    if(PlayerInfo[playerid][pMember] > 0)
	{
	    new namex[25],disc[84];
	    GetPlayerName(playerid,namex,sizeof(namex));
		switch(reason)
    	{
        	case 0: format(disc,sizeof(disc),"%s from your group has disconnected (crash).",namex);
        	case 1: format(disc,sizeof(disc),"%s from your group has disconnected (quit).",namex);
			case 2: format(disc,sizeof(disc),"%s from your group has disconnected (banned/kicked).",namex);
    	}
    	SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, disc);
	}
	if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
	{
		new string2[128],namee[30];
		GetPlayerName(playerid, namee, sizeof(namee));
		switch(reason)
		{
			case 0: format(string2, sizeof(string2), "Quitbot: %s left the game (crash).",namee);
			case 1: format(string2, sizeof(string2), "Quitbot: %s left the game (quit).",namee);
			case 2: format(string2, sizeof(string2), "Quitbot: %s left the game (banned/kicked).",namee);
		}
		ABroadCast(COLOR_ADMCHAT, string2,1);
		HLChat(COLOR_ADMCHAT,string2);
	}
	if(CarCollisions[playerid] == 1)
	{
		DisableRemoteVehicleCollisions(playerid, 0);
		CarCollisions[playerid] = 0;
	}
	if(PlayerInfo[playerid][pPaintBallG] > 0)
 	{
  		new string [128],sendername[30];
    	GetPlayerName(playerid, sendername, sizeof(sendername));
		foreach(new i : Player)
		{
  			if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
	    	{
      			format(string,sizeof(string),"%s has left the paintball arena.", sendername);
	        	SendClientMessage(i, COLOR_YELLOW, string);
			}
		}
		curatj[playerid] = 0;
		for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
		PlayerTextDrawHide(playerid, PaintBallText[playerid]);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
		paintp[PlayerInfo[playerid][pPaintBallG]]--;
  		PlayerInfo[playerid][pPaintBallG] = 0;
    	PlayerInfo[playerid][pPaintBallKills] = 0;
    	PlayerInfo[playerid][pPaintBallVoted] = 0;
    	PlayerInfo[playerid][pPaintBallVoted2] = 0;
     	ResetPlayerWeaponsEx(playerid);
	    ResetPlayerWeapons(playerid);
	    SetPlayerArmourEx(playerid, 0);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid,0);
	    SetPlayerToTeamColor(playerid);
	    SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	}
	if(PlayerInfo[playerid][pRaceG] == 0)
 	{
  		new string [128],sendername[30];
    	GetPlayerName(playerid, sendername, sizeof(sendername));
		foreach(new i : Player)
		{
  			if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
	    	{
      			format(string,sizeof(string),"%s has left the race arena.", sendername);
	        	SendClientMessage(i, COLOR_YELLOW, string);
			}
		}
		SetPlayerHealthEx(playerid, 100.0);
		curatj[playerid] = 0;
		for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
		PlayerTextDrawHide(playerid, PaintBallText[playerid]);
		racep[PlayerInfo[playerid][pRaceG]]--;
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid,0);
		RaceCP[playerid] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		StopAudioStreamForPlayer(playerid);
		DisableRemoteVehicleCollisions(playerid, 0);
		if(racet[PlayerInfo[playerid][pRaceG]] > -1)
		{
			for(new cs; cs < 20; cs++)
			{
				if(rcarid[PlayerInfo[playerid][pRaceG]][cs] == GetPlayerVehicleID(playerid))
				{
					DestroyVehicle(rcarid[PlayerInfo[playerid][pRaceG]][cs]);
					rcarid[PlayerInfo[playerid][pRaceG]][cs] = 0;
				}
			}
			foreach(new x : Player)
			{
				if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && x != playerid)
				{
					if(RacePos[x] > RacePos[playerid]) RacePos[x]--;
				}
			}
		}
		PlayerInfo[playerid][pRaceG] = -1;
		PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
	}
	if(PlayerInfo[playerid][pRaceG] == 1)
 	{
  		new string [128],sendername[30];
    	GetPlayerName(playerid, sendername, sizeof(sendername));
		foreach(new i : Player)
		{
  			if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
	    	{
      			format(string,sizeof(string),"%s has left the race arena.", sendername);
	        	SendClientMessage(i, COLOR_YELLOW, string);
			}
		}
		SetPlayerHealthEx(playerid, 100.0);
		curatj[playerid] = 0;
		for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
		PlayerTextDrawHide(playerid, PaintBallText[playerid]);
		racep[PlayerInfo[playerid][pRaceG]]--;
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid,0);
		RaceCP[playerid] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		StopAudioStreamForPlayer(playerid);
		DisableRemoteVehicleCollisions(playerid, 0);
		if(racet[PlayerInfo[playerid][pRaceG]] > -1)
		{
			for(new cs; cs < 20; cs++)
			{
				if(rcarid[PlayerInfo[playerid][pRaceG]][cs] == GetPlayerVehicleID(playerid))
				{
					DestroyVehicle(rcarid[PlayerInfo[playerid][pRaceG]][cs]);
					rcarid[PlayerInfo[playerid][pRaceG]][cs] = 0;
				}
			}
			foreach(new x : Player)
			{
				if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && x != playerid)
				{
					if(ARacePos[x] > ARacePos[playerid]) ARacePos[x]--;
				}
			}
		}
		PlayerInfo[playerid][pRaceG] = -1;
		PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
	}
	if(TaxiFare[playerid] > 0 && PlayerInfo[playerid][pMember] == 13)
	{
		TaxiFare[playerid] = 0;
		TaxiMoneyEarned[playerid] = 0;
		PlayerTextDrawHide(playerid, RentCarText[playerid]);
		foreach(new x : Player)
		{
			if(TaxiDriver[x] == playerid)
			{
				TaxiDriver[x] = -1;
				TaxiTimer[x] = 0;
				TaxiMoneySpent[x] = 0;
				PlayerTextDrawHide(x, RentCarText[x]);
			}
		}
	}
	if(PlayerInfo[playerid][pFlyMode] > 0)
	{
	    SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 0);
		//StopFly(playerid);
		PlayerInfo[playerid][pFlyMode] = 0;
	}

	if(TakingLesson[playerid] == 1)
	{
		PlayerTextDrawHide(playerid, DMVexam[playerid]);
		PlayerTextDrawHide(playerid, DMVcheck[playerid]);
		DestroyVehicle(examcar[playerid]);
		DisableRemoteVehicleCollisions(playerid, 0);
		examcar[playerid] = -1;
        TakingLesson[playerid] = 0;
	    DisablePlayerRaceCheckpoint(playerid);
	}

	if(AdvPlayer[playerid] != 0)
	{
		KillTimer(AdvTimer[playerid]);
		AdvPlayer[playerid] = 0;
		format(AdvMSG[playerid], 256, "");
	}

	new qqerry[128];
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `users` SET `Status` = '0' WHERE `id` = '%d'", PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL,qqerry,"","");
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `friends` SET `Status` = '0' WHERE `FriendID` = '%d'", PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL,qqerry,"","");

	if(viddd[playerid] != 0)
	{
	    DestroyVehicle(viddd[playerid]);
	    viddd[playerid] = 0;
	}

	tazer[playerid] = 0;						curatj[playerid] = 0;
	playerdeath[playerid] = 0;
	bizid[playerid] = 0; 						bizprice[playerid] = 0;
	bizoffer[playerid] = 999;					PlayerInfo[playerid][pSleeping] = 0;
	adminacceptedhelp[playerid] = -1;			DeletePVar(playerid, "Help");
	SellgunOffer[playerid] = -1;				SellgunPrice[playerid] = 0;
	SellgunMats[playerid] = 0;					SellgunAmmo[playerid] = 0;
	SellgunID[playerid] = 0;					pizzaj[playerid] = 0;
	requestingevent[playerid] = 0;              pizzatime[playerid] = 0;
	eventorganizer[playerid] = 0;				togfind[playerid] = 0;
    PlayerCuffed2[playerid] = 0;                Listening[playerid] = -1;
	Clanidoff[playerid] = 999;					toge[playerid] = 0;
	antirem[playerid] = 0; 						PlayerInfo[playerid][pJailed] = 0;
  	wantedlost[playerid] = 1799;                Trucker[playerid] = 0;
	Diceid[playerid] = 999;                     PlayerHandsup[playerid] = 0;
	Dicem[playerid] = 999; 					   	TaxiFare[playerid] = 0;
	Refueling[playerid] = 0;					togarrests[playerid] = 0;
 	InHQ[playerid] = -1;						InHouse[playerid] = -1;
	InBussines[playerid] = -1; 					raceoff[playerid] = 999;
	toglc[playerid] = 0;						PlayerInfo[playerid][pHUD1] = 0;
    taxim[playerid] = 0;						PlayerInfo[playerid][pHUD2] = 0;
	somated[playerid] = -1;						TaxiDriver[playerid] = -1;
	somatee[playerid] = 1;						timersoo[playerid] = 0;
	ReportTime[playerid] = 0;                   PlayerInfo[playerid][pHUD3] = 0;
 	hudactivated[playerid] = 0;					PlayerInfo[playerid][pWantedLevel] = 0;
    Vending[playerid] = 0;                      PlayerInfo[playerid][pFishPrice] = 0;
	FactionOffer[playerid] = 999;               Sunglasses[playerid] = 0;
	Hatss[playerid] = 0;                        TowAcc[playerid] = 0;
	CheckBus[playerid] = 0;                     JobStep[playerid] = 0;
	viddd[playerid] = 0;                        Trucker2[playerid] = 0;
	TruckID[playerid] = 0;                      Trucker3[playerid] = 0;
	Trucker4[playerid] = 0;                     AreFaina[playerid] = 0;
	CarJacker[playerid] = 0;                    JackAcc[playerid] = 0;
	Fishing[playerid] = 0;                      FishTimer[playerid] = 0;
	TipPeste[playerid] = 0;                     SelFac[playerid] = 0;
	BuyCar[playerid] = -1;                      EnterInModShop[playerid] = 0;
	PlayerInfo[playerid][pNMuted] = 0;			TaxiCall[playerid] = 0;
	WantedPoints[playerid] = 0;                 PlayerInfo[playerid][pJailTime] = 0;
	CreateVEHID[playerid] = -1;					CreateVEH[playerid] = -1;
	Asteapta[playerid] = -1;
	PlayerInfo[playerid][pJailed] = 0;
	format(LiveQuestion[playerid], 128, "NULL");
	format(reporttext[playerid], 30, "NULL");
	format(WantName[playerid], 30, "NULL");
	format(somatename[playerid], 30, "NULL");

    PlayerTextDrawHide(playerid, TimeLeftWar1[playerid]);
    //KillTimer(timerfree1[playerid]);
	PlayerTextDrawHide(playerid, UndercoverText[playerid]);
	PlayerTextDrawHide(playerid, HUD[1][playerid]);
	PlayerTextDrawHide(playerid, HUD[2][playerid]);
	PlayerTextDrawHide(playerid, HUD[3][playerid]);
	PlayerTextDrawHide(playerid, Reportss[playerid]);
	PlayerTextDrawHide(playerid, RentCarText[playerid]);
	PlayerTextDrawHide(playerid, WantedText[playerid]);
	PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
	PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
	PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
	PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
	PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
	DespawnCar(playerid);

    RemovePlayerAttachedObject(playerid,0);
    RemovePlayerAttachedObject(playerid,1);
    RemovePlayerAttachedObject(playerid,2);
    RemovePlayerAttachedObject(playerid,3);
    RemovePlayerAttachedObject(playerid,4);
    
    DestroyPlayerProgressBar(playerid, HudProgress[playerid][0]);

    if(HireCar[playerid] > 0)
    {
		HireCar[playerid] = -1;
	}
	if(RentCar[playerid] >= 0)
	{
		RentCar[playerid] = -1;
	}
	if(TaxiAccepted[playerid] != -1)
	{
		new string[128];
		format(string, sizeof(string), "Taxi driver %s left the game.", PlayerInfo[playerid][pNormalName]);
		SendClientMessage(TaxiAccepted[playerid], COLOR_YELLOW, string);
		TaxiAccepted[playerid] = -1;
		targetfind[playerid] = -1;
		UsedFind[playerid] = 0;
	}
	if(MedicAccepted[playerid] != -1)
	{
		new string[128];
		format(string, sizeof(string), "Medic %s left the game.", PlayerInfo[playerid][pNormalName]);
		SendClientMessage(MedicAccepted[playerid], COLOR_YELLOW, string);
		MedicAccepted[playerid] = -1;
		targetfind[playerid] = -1;
		UsedFind[playerid] = 0;
	}

	// HITMAN
	if(GotHit[playerid] > 0)
	{
	    if(GetChased[playerid] < 999)
	    {
	        if(IsPlayerConnected(GetChased[playerid]))
	        {
	        	SendClientMessage(GetChased[playerid], COLOR_YELLOW, "Your hit has left the server.");
	            GoChase[GetChased[playerid]] = 999;
		        togfind[GetChased[playerid]] = 0;
		        PlayerInfo[GetChased[playerid]][pHitT] = 0;
				new string[124];
				mysql_format(SQL, string, sizeof(string), "UPDATE users SET `HitT`='%d' WHERE `name`='%s'", PlayerInfo[GetChased[playerid]][pHitT], PlayerInfo[GetChased[playerid]][pNormalName]);
		        mysql_tquery(SQL,string,"","");
			}
	    }
	}
	if(GoChase[playerid] != 999)
	{
		GotHit[GoChase[playerid]] = 0;
		GetChased[GoChase[playerid]] = 999;
		GoChase[playerid] = 999;
	}
	GetChased[playerid] = 999;					 GotHit[playerid] = 0;

	// TIMER MONEY
	KillTimer(TimerAtuPlayer[playerid]);

	// LAST LOGIN
	new y,m,d,h,mi,sec;
	getdate(y,m,d);
	gettime(h,mi,sec);
	new str[184];
	mysql_format(SQL,str,sizeof(str), "UPDATE users SET `lastOn`='%d-%02d-%02d %02d:%02d:%02d' WHERE `name`='%s'",y,m,d,h,mi,sec,PlayerInfo[playerid][pNormalName]);
	mysql_tquery(SQL,str,"","");

	#if ACTIVE_QUEST == 1
		for(new xx = 1; xx <= questobjectss; xx++)
		{
			if(PlayerInfo[playerid][pObject][xx] != 0)
			{
				DestroyDynamicPickup(PlayerInfo[playerid][pObject][xx]);
				PlayerInfo[playerid][pObject][xx] = 0;
			}
		}
	#endif

	// MESAJ DECONECTARE
 	new wakaname2[25],
		string2[64];
	GetPlayerName(playerid, wakaname2, sizeof(wakaname2));
	switch(reason)
	{
		case 0: format(string2,sizeof(string2),"%s has timed out from the server (crash).",wakaname2);
		case 1: format(string2,sizeof(string2),"%s has left the server.",wakaname2);
		case 2: format(string2,sizeof(string2),"%s has been kicked or banned from the server.",wakaname2);
	}
	ProxDetector(20.0, playerid, string2, COLOR_GENANNOUNCE,COLOR_GENANNOUNCE,COLOR_GENANNOUNCE,COLOR_GENANNOUNCE,COLOR_GENANNOUNCE);
	// TAXI
	foreach(new i : Player)
	{
		if(IsPlayerConnected(Mobile[playerid]))
		{
			if(Mobile[playerid] != -1)
			{
				CellTime[Mobile[playerid]] = 0;
				CellTime[playerid] = 0;
				Mobile[Mobile[playerid]] = -1;
				SetPlayerSpecialAction(Mobile[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
				Mobile[playerid] = -1;
				PlayerInfo[playerid][pSpeaker] = 0;
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			}
		}
		if(targetfind[i] == playerid)
		{
		    targetfind[i] = -1;
		    UsedFind[i] = 0;
		    DisablePlayerCheckpoint(i);
	        GameTextForPlayer(i, "~r~Your target left the game.", 5000, 1);
			if(IsACop(i))
			{
				if(caser[i] == playerid)
				{
					caser[i] = 0;
				}
			}
			PlayerTextDrawHide(i, FindTXD[i][0]);
			PlayerTextDrawHide(i, FindTXD[i][1]);
		}
		if(PlayerInfo[i][pPhoneBlocked][playerid] == 1) PlayerInfo[i][pPhoneBlocked][playerid] = 0;
	}
	for(new x; x < MAX_PLAYERS; x++)
	{
		PlayerInfo[playerid][pPhoneBlocked][x] = 0;
	}
    return 1;
}

public SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		InHouse[playerid] = -1;
		InBussines[playerid] = -1;
		InHQ[playerid] = -1;
		StopAudioStreamForPlayer(playerid);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	    if(PlayerInfo[playerid][pTut] == 0)
	    {
			gNews[playerid] = 1;
			TogglePlayerControllable(playerid, 0);
			RegistrationStep[playerid] = 1;
			new sendername[30],stringy[128];
			GetPlayerName(playerid, sendername,  sizeof(sendername));
			SendClientMessage(playerid, COLOR_TEAL, "----------------------------------------------------------------------------");
			format(stringy,sizeof(stringy),"Welcome to ForEver RPG, %s.", sendername);
			SendClientMessage(playerid, COLOR_YELLOW, stringy);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid, 9994);
			SetPlayerPosEx(playerid, 1742.9814,-1863.0938,16.2048);
			InterpolateCameraPos(playerid, 1804.1313,-1732.0179,21.7294, 1037.3715,-1732.7358,25.2859, 30000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid,1441.6654,-1732.0317,18.0373,1037.3715,-1732.7358,25.2859, 30000, CAMERA_MOVE);
			ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX, "Language", "Alege limba in care vrei sa fie afisate mesajele de pe server.\nChoose the language that you speak.", "Romana", "English");
			return 1;
		}
		new rand,
			house = PlayerInfo[playerid][pPhousekey];
		if(PlayerInfo[playerid][pPaintBallG] >= 1)
		{
		    curatj[playerid] = 1;
		    SetPlayerToTeamColor(playerid);
		    if(PlayerInfo[playerid][pPaintBallG] == 2 && paintt[PlayerInfo[playerid][pPaintBallG]] > 0)
		    {
		        SetPlayerArmourEx(playerid, 100.0);
			}
			if(PlayerInfo[playerid][pPaintBallG] == 1 || PlayerInfo[playerid][pPaintBallG] == 2)
			{
		    	if(paintg[PlayerInfo[playerid][pPaintBallG]] == 1 && paintt[PlayerInfo[playerid][pPaintBallG]] > 0)
		    	{
		        	GivePlayerWeaponEx(playerid, 24, 1000);
		        	GivePlayerWeaponEx(playerid, 31, 1000);
		        	GivePlayerWeaponEx(playerid, 16, 1);
		        	GivePlayerWeaponEx(playerid, 41, 1000);
				}
				else if(paintg[PlayerInfo[playerid][pPaintBallG]] == 2 && paintt[PlayerInfo[playerid][pPaintBallG]] > 0)
		    	{
		        	GivePlayerWeaponEx(playerid, 5, 1);
				}
				else if(paintg[PlayerInfo[playerid][pPaintBallG]] == 3 && paintt[PlayerInfo[playerid][pPaintBallG]] > 0)
		    	{
		       	 	GivePlayerWeaponEx(playerid, 9, 1);
				}
			}
			else if(PlayerInfo[playerid][pPaintBallG] == 3 && paintt[PlayerInfo[playerid][pPaintBallG]] > 0)
			{
				if(PlayerInfo[playerid][pPaintBallKills] >= 0 && PlayerInfo[playerid][pPaintBallKills] <= 1) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 24, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 2 && PlayerInfo[playerid][pPaintBallKills] <= 3) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 29, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 4 && PlayerInfo[playerid][pPaintBallKills] <= 5) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 28, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 6 && PlayerInfo[playerid][pPaintBallKills] <= 7) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 33, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 8 && PlayerInfo[playerid][pPaintBallKills] <= 9) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 32, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 10 && PlayerInfo[playerid][pPaintBallKills] <= 11) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 25, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 12 && PlayerInfo[playerid][pPaintBallKills] <= 13) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 26, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 14 && PlayerInfo[playerid][pPaintBallKills] <= 15) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 34, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 16 && PlayerInfo[playerid][pPaintBallKills] <= 17) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 27, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 18 && PlayerInfo[playerid][pPaintBallKills] <= 19) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 31, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 20 && PlayerInfo[playerid][pPaintBallKills] <= 21) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 30, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 22 && PlayerInfo[playerid][pPaintBallKills] <= 23) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 23, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 24 && PlayerInfo[playerid][pPaintBallKills] <= 25) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 22, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 26 && PlayerInfo[playerid][pPaintBallKills] <= 27) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 9, 1); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 28) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 4, 1); }
			}
			else if(PlayerInfo[playerid][pPaintBallG] == 4 && paintt[PlayerInfo[playerid][pPaintBallG]] > 0)
			{
			    GivePlayerWeaponEx(playerid, 24, 1000);
			}
			if(paintm[PlayerInfo[playerid][pPaintBallG]] == 1)
			{
   				rand = random(sizeof(gRandomSpawnRC));
			    SetPlayerPosEx(playerid,gRandomSpawnRC[rand][0],gRandomSpawnRC[rand][1],gRandomSpawnRC[rand][2]);
			    SetPlayerSkin(playerid, 250);
			    SetPlayerInterior(playerid, 10);
			    if(PlayerInfo[playerid][pPaintBallG] == 1)
			    {
			    	SetPlayerVirtualWorld(playerid,125);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 2)
			    {
			    	SetPlayerVirtualWorld(playerid,126);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 3)
			    {
			    	SetPlayerVirtualWorld(playerid,127);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 4)
			    {
			    	SetPlayerVirtualWorld(playerid,128);
				}
			    SetTimerEx("UnFreezeStation", 100, false, "i", playerid);
			}
			else if(paintm[PlayerInfo[playerid][pPaintBallG]] == 2)
			{
   				rand = random(sizeof(gRandomSpawnTennis));
			    SetPlayerPosEx(playerid,gRandomSpawnTennis[rand][0],gRandomSpawnTennis[rand][1],gRandomSpawnTennis[rand][2]);
			    SetPlayerSkin(playerid, 96);
	     		SetPlayerWorldBounds(playerid, -2712.4683, -2792.2351,-229.3094, -274.6794);
	     		SetPlayerInterior(playerid, 0);
			    if(PlayerInfo[playerid][pPaintBallG] == 1)
			    {
			    	SetPlayerVirtualWorld(playerid,125);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 2)
			    {
			    	SetPlayerVirtualWorld(playerid,126);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 3)
			    {
			    	SetPlayerVirtualWorld(playerid,127);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 4)
			    {
			    	SetPlayerVirtualWorld(playerid,128);
				}
			    SetTimerEx("UnFreezeStation", 100, false, "i", playerid);
			}
			else if(paintm[PlayerInfo[playerid][pPaintBallG]] == 3)
			{
   				rand = random(sizeof(gRandomSpawnFarm));
			    SetPlayerPosEx(playerid,gRandomSpawnFarm[rand][0],gRandomSpawnFarm[rand][1],gRandomSpawnFarm[rand][2]);
			    SetPlayerSkin(playerid, 158);
			    SetPlayerWorldBounds(playerid, 135.3258, -287.9915, 57.6137 ,-74.2723);
			    SetPlayerInterior(playerid, 0);
			    if(PlayerInfo[playerid][pPaintBallG] == 1)
			    {
			    	SetPlayerVirtualWorld(playerid,125);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 2)
			    {
			    	SetPlayerVirtualWorld(playerid,126);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 3)
			    {
			    	SetPlayerVirtualWorld(playerid,127);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 4)
			    {
			    	SetPlayerVirtualWorld(playerid,128);
				}
			    SetTimerEx("UnFreezeStation", 100, false, "i", playerid);
			}
			else if(paintm[PlayerInfo[playerid][pPaintBallG]] == 4)
			{
   				rand = random(sizeof(gRandomSpawnBeach));
			    SetPlayerPosEx(playerid,gRandomSpawnBeach[rand][0],gRandomSpawnBeach[rand][1],gRandomSpawnBeach[rand][2]);
			    SetPlayerSkin(playerid, 97);
//			    SetPlayerWorldBounds(playerid, -2301.6472, -1542.6398, 1321.9962 ,240.0185);
			    SetPlayerInterior(playerid, 0);
			    if(PlayerInfo[playerid][pPaintBallG] == 1)
			    {
			    	SetPlayerVirtualWorld(playerid,125);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 2)
			    {
			    	SetPlayerVirtualWorld(playerid,126);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 3)
			    {
			    	SetPlayerVirtualWorld(playerid,127);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 4)
			    {
			    	SetPlayerVirtualWorld(playerid,128);
				}
			    SetTimerEx("UnFreezeStation", 100, false, "i", playerid);
			}
			else if(paintm[PlayerInfo[playerid][pPaintBallG]] == 5)
			{
   				rand = random(sizeof(gRandomSpawnLSPD));
			    SetPlayerPosEx(playerid,gRandomSpawnLSPD[rand][0],gRandomSpawnLSPD[rand][1],gRandomSpawnLSPD[rand][2]);
			    SetPlayerSkin(playerid, 285);
			    SetPlayerWorldBounds(playerid, 1558.4261, 1387.0891, -1578.9333, -1776.6854);
			    SetPlayerInterior(playerid, 0);
			    if(PlayerInfo[playerid][pPaintBallG] == 1)
			    {
			    	SetPlayerVirtualWorld(playerid,125);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 2)
			    {
			    	SetPlayerVirtualWorld(playerid,126);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 3)
			    {
			    	SetPlayerVirtualWorld(playerid,127);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 4)
			    {
			    	SetPlayerVirtualWorld(playerid,128);
				}
			    SetTimerEx("UnFreezeStation", 100, false, "i", playerid);
			}
			return 1;
		}
		if(PlayerInfo[playerid][pRaceG] == 0)
		{
			if(PlayerInfo[playerid][pRaceG] == 0 && racet[PlayerInfo[playerid][pRaceG]] > 0 || PlayerInfo[playerid][pRaceG] == 0 && racers[PlayerInfo[playerid][pRaceG]] <= 10)
			{
				new string[128],sendername[30];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				foreach(new i : Player)
				{
					if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
					{
						format(string,sizeof(string),"%s has left the race arena.", sendername);
						SendClientMessage(i, COLOR_YELLOW, string);
					}
				}
				SetPlayerHealthEx(playerid, 100.0);
				curatj[playerid] = 0;
				for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
				PlayerTextDrawHide(playerid, PaintBallText[playerid]);
				racep[PlayerInfo[playerid][pRaceG]]--;
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid,0);
				RaceCP[playerid] = 0;
				DisablePlayerRaceCheckpoint(playerid);
				StopAudioStreamForPlayer(playerid);
				DisableRemoteVehicleCollisions(playerid, 0);
				if(racet[PlayerInfo[playerid][pRaceG]] > -1)
				{
					for(new cs; cs < 20; cs++)
					{
						if(rcarid[PlayerInfo[playerid][pRaceG]][cs] == GetPlayerVehicleID(playerid))
						{
							DestroyVehicle(rcarid[PlayerInfo[playerid][pRaceG]][cs]);
							rcarid[PlayerInfo[playerid][pRaceG]][cs] = 0;
						}
					}
					foreach(new x : Player)
					{
						if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && x != playerid)
						{
							if(RacePos[x] > RacePos[playerid]) RacePos[x]--;
						}
					}
				}
				PlayerInfo[playerid][pRaceG] = -1;
				PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
				PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
				PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
				PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
				PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
			}
			if(PlayerInfo[playerid][pRaceG] == 0 && racers[PlayerInfo[playerid][pRaceG]] > 10)
			{
				SetPlayerPos(playerid, -40.3110,1508.9723,1000.9155);
				SetPlayerVirtualWorld(playerid, 1);
			}
			if(PlayerInfo[playerid][pRaceG] == 1 && racers[PlayerInfo[playerid][pRaceG]] > 10)
			{
				SetPlayerPos(playerid, -40.3110,1508.9723,1000.9155);
				SetPlayerVirtualWorld(playerid, 2);
			}
			return 1;
		}
		if(PlayerInfo[playerid][pRaceG] == 1)
		{
			if(PlayerInfo[playerid][pRaceG] == 1 && racet[PlayerInfo[playerid][pRaceG]] > 0 || PlayerInfo[playerid][pRaceG] == 1 && racers[PlayerInfo[playerid][pRaceG]] <= 10)
			{
				new string[128],sendername[30];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				foreach(new i : Player)
				{
					if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
					{
						format(string,sizeof(string),"%s has left the race arena.", sendername);
						SendClientMessage(i, COLOR_YELLOW, string);
					}
				}
				SetPlayerHealthEx(playerid, 100.0);
				curatj[playerid] = 0;
				for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
				PlayerTextDrawHide(playerid, PaintBallText[playerid]);
				racep[PlayerInfo[playerid][pRaceG]]--;
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid,0);
				RaceCP[playerid] = 0;
				DisablePlayerRaceCheckpoint(playerid);
				StopAudioStreamForPlayer(playerid);
				DisableRemoteVehicleCollisions(playerid, 0);
				if(racet[PlayerInfo[playerid][pRaceG]] > -1)
				{
					for(new cs; cs < 20; cs++)
					{
						if(rcarid[PlayerInfo[playerid][pRaceG]][cs] == GetPlayerVehicleID(playerid))
						{
							DestroyVehicle(rcarid[PlayerInfo[playerid][pRaceG]][cs]);
							rcarid[PlayerInfo[playerid][pRaceG]][cs] = 0;
						}
					}
					foreach(new x : Player)
					{
						if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && x != playerid)
						{
							if(ARacePos[x] > ARacePos[playerid]) ARacePos[x]--;
						}
					}
				}
				PlayerInfo[playerid][pRaceG] = -1;
				PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
				PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
				PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
				PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
				PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
			}
			if(PlayerInfo[playerid][pRaceG] == 0 && racers[PlayerInfo[playerid][pRaceG]] > 10)
			{
				SetPlayerPos(playerid, -40.3110,1508.9723,1000.9155);
				SetPlayerVirtualWorld(playerid, 1);
			}
			if(PlayerInfo[playerid][pRaceG] == 1 && racers[PlayerInfo[playerid][pRaceG]] > 10)
			{
				SetPlayerPos(playerid, -40.3110,1508.9723,1000.9155);
				SetPlayerVirtualWorld(playerid, 2);
			}
			return 1;
		}
		if(BeforeSpectate[playerid][pSpectating])
  		{
   			SetPlayerVirtualWorld(playerid, BeforeSpectate[playerid][pWorld]);
   			SetPlayerInterior(playerid, BeforeSpectate[playerid][pInt]);

   			if(BeforeSpectate[playerid][pState] == PLAYER_STATE_DRIVER)
    		PutPlayerInVehicle(playerid, BeforeSpectate[playerid][pInVehicle], 0);

   			else if(BeforeSpectate[playerid][pState] == PLAYER_STATE_PASSENGER)
    			PutPlayerInVehicle(playerid, BeforeSpectate[playerid][pInVehicle], 1 + random(3));

   			else
    			SetPlayerPos(playerid, BeforeSpectate[playerid][pOldPos][0], BeforeSpectate[playerid][pOldPos][1], BeforeSpectate[playerid][pOldPos][2]);

   			BeforeSpectate[playerid][pSpectating] = false;
   			return 1;
  		}
		if(PlayerInfo[playerid][pJailed] == 1)
		{
			SetPlayerWantedLevel(playerid, 0);
			PlayerTextDrawHide(playerid, WantedText[playerid]);
			SetPlayerInterior(playerid, 6);
			rand = random(sizeof(gRandomJailSpawns));
			SetPlayerPosEx(playerid,gRandomJailSpawns[rand][0],gRandomJailSpawns[rand][1],gRandomJailSpawns[rand][2]);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnFreezeStation", 1000, false, "i", playerid);
			if(PlayerInfo[playerid][pVirtualPD] == 3)
			{
			    SetPlayerVirtualWorld(playerid, 3);
			}
			else
			{
			    SetPlayerVirtualWorld(playerid, 0);
			}
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 2)
		{
			PlayerTextDrawHide(playerid, WantedText[playerid]);
			SetPlayerInterior(playerid, 10);
			rand = random(sizeof(gRandomAJailSpawns));
			SetPlayerPosEx(playerid,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnFreezeStation", 1000, false, "i", playerid);
			return 1;
		}
		if(house != 999)
		{
		    if(PlayerInfo[playerid][pSpawnChange] == 1)
		    {
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid,HouseInfo[house][hInterior]);
				SetPlayerPosEx(playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity],HouseInfo[house][hExitz]);
                SetPlayerVirtualWorld(playerid, HouseInfo[house][hVirtual]);
				PlayerInfo[playerid][pLocal] = house;
				PlayerInfo[playerid][pInt] = HouseInfo[house][hInterior];
				InHouse[playerid] = house;
				if(strlen(housestring[InHouse[playerid]]) > 0)
				{
    				StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
				}
				return 1;
			}
		}
		if(PlayerInfo[playerid][pMember] != 0)
		{
			new fid = PlayerInfo[playerid][pMember];
			SetPlayerToTeamColor(playerid);
			SetPlayerPosEx(playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]);
			SetPlayerInterior(playerid, DynamicFactions[fid][fInterior]);
			SetPlayerVirtualWorld(playerid, DynamicFactions[fid][fVirtual]);
			PlayerInfo[playerid][pInt] = DynamicFactions[fid][fInterior];
			InHQ[playerid] = fid;
			return 1;
		}
	    if (PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) // Tow Car Company
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPosEx(playerid, 246.8886,64.7381,1003.6406);
			SetPlayerInterior(playerid,6);
			PlayerInfo[playerid][pInt] = 6;
			InHQ[playerid] = 8;
			SetPlayerVirtualWorld(playerid, 3);
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 0 || PlayerInfo[playerid][pLeader] == 0) // Civilian
	    {
			SetPlayerPosEx(playerid, -1973.7002,137.7904,27.6875);
			SetPlayerFacingAngle(playerid, 6.9127);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
	        return 1;
	    }
	    if ((gTeam[playerid]) == 3)
	    {
			SetPlayerPosEx(playerid, -1973.7002,137.7904,27.6875);
			SetPlayerFacingAngle(playerid, 6.9127);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			return 1;
		}
	    else
	    {
			SetPlayerToTeamColor(playerid);
			if(PlayerInfo[playerid][pOrigin] == 1) // Europa
			{
				SetPlayerPosEx(playerid, -1973.7002,137.7904,27.6875);
				SetPlayerFacingAngle(playerid, 6.9127);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if(PlayerInfo[playerid][pOrigin] == 2) // America
			{
				SetPlayerPosEx(playerid, -1973.7002,137.7904,27.6875);
				SetPlayerFacingAngle(playerid, 6.9127);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if(PlayerInfo[playerid][pOrigin] == 3) // Asia
			{
				SetPlayerPosEx(playerid, -1973.7002,137.7904,27.6875);
				SetPlayerFacingAngle(playerid, 6.9127);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if(PlayerInfo[playerid][pOrigin] == 4) // Africa
			{
				SetPlayerPosEx(playerid, -1973.7002,137.7904,27.6875);
				SetPlayerFacingAngle(playerid, 6.9127);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if(PlayerInfo[playerid][pOrigin] == 5) // Australia
			{
				SetPlayerPosEx(playerid, -1973.7002,137.7904,27.6875);
				SetPlayerFacingAngle(playerid, 6.9127);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else
			{
                SetPlayerPosEx(playerid,358.0976,-1841.3488,5.1257);
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid, 90.0);
		        SetPlayerCameraPos(playerid,1460.0, -1324.0, 287.2);
			    SetPlayerCameraLookAt(playerid,1374.5, -1291.1, 239.0);
	            PlayerPlaySound(playerid, 1097,-119.9460,23.1096,12.2238);
			}
		}
		SetTimerEx("UpdateSecondary", 3000, false, "i", playerid);
	}
	return 1;
}

forward UpdateSecondary(playerid);
public UpdateSecondary(playerid)
{
    if(gPlayerLogged[playerid] != 0)
	{
		Update(playerid, pConnectTimex);
		Update(playerid, pBank);
		Update(playerid, pCashx);
		Update(playerid, pRP);
		Update(playerid, pPayDayx);
		Update(playerid, pJailTimex);
		OnPlayerDateUpdateX2(playerid);
	}
	return 1;
}

forward OnPlayerDateUpdateX2(playerid);
public OnPlayerDateUpdateX2(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new var[556];
		{
			mysql_format(SQL,var,sizeof(var),"UPDATE `users` SET `CarLic`='%d',`FlyLic`='%d',`BoatLic`='%d',`GunLic`='%d',`CarLicT`='%d',`FlyLicT`='%d',`BoatLicT`='%d',`GunLicT`='%d',`Rob`='%d',`Jailed`='%d',`HitT`='%d',`Muted`='%d',`MuteTime`='%d' WHERE `name`='%s'",
			PlayerInfo[playerid][pCarLic],
			PlayerInfo[playerid][pFlyLic],
			PlayerInfo[playerid][pBoatLic],
			PlayerInfo[playerid][pGunLic],
			PlayerInfo[playerid][pCarLicT],
	  		PlayerInfo[playerid][pFlyLicT],
			PlayerInfo[playerid][pBoatLicT],
			PlayerInfo[playerid][pGunLicT],
			PlayerInfo[playerid][pRob],
			PlayerInfo[playerid][pJailed],
			PlayerInfo[playerid][pHitT],
			PlayerInfo[playerid][pMuted],
			PlayerInfo[playerid][pMuteTime],
			PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,var,"","");
		}
	}
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(hittype == 2)
	{
		foreach(new i : Player)
		{
			if(Spectate[i] == playerid)
			{
				if(PlayerInfo[i][pAdmin] >= 1)
				{
					if(ShowDMG[i] == 1)
					{
						new name[30],string[128],wName[64];
						GetPlayerName(playerid, name, sizeof(name));
						GetWeaponNameEx(weaponid,wName,sizeof(wName));
						format(string, sizeof(string),"DMG: %s did damage to vehicle %d using weapon %s.",name,hitid,wName);
						SendSplitMessage(i, COLOR_DARKPINK, string);
					}
				}
			}
		}
	}
	if(hittype == 1)
	{
		foreach(new i : Player)
		{
			if(Spectate[i] == playerid)
			{
				DMInfo[playerid][0] = fX;
				DMInfo[playerid][1] = fY;
				DMInfo[playerid][2] = fZ;
			}
		}
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if(damagedid != INVALID_PLAYER_ID)
    {
	 	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
		if(GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID) return 1;
		if(amount < 0)
		{
			new string[256],sendername[25];
		    GetPlayerName(playerid,sendername,sizeof(sendername));
			format(string, sizeof(string), "(N) %s (%d, level %d) can use global kill, damage: %.2f.",sendername, playerid, PlayerInfo[playerid][pLevel], amount);
            ABroadCast(COLOR_RED,string,1);
			return 1;
		}
		if(PlayerInfo[playerid][pPaintBallG] > 0)
		{
		    PlayerPlaySound(playerid,17802,0.0,0.0,0.0);
		}
		new fpm,fkm;
    	fpm = PlayerInfo[playerid][pMember];
    	fkm = PlayerInfo[damagedid][pMember];
    	for(new turf = 1; turf < sizeof(TurfInfo); turf++)
		{
         	if(IsPlayerInTurf(playerid, turf) && IsPlayerInTurf(damagedid, turf))
         	{
                if(IsAMember(playerid) && IsAMember(damagedid))
                {
	             	if(WarInfo[turf][wFaction] == fpm && WarInfo[turf][wAttacker] == fkm || WarInfo[turf][wFaction] == fkm && WarInfo[turf][wAttacker] == fpm)
	             	{
	             	    PlayerPlaySound(playerid,17802,0.0,0.0,0.0);
					}
				}
			}
		}
		if(PlayerInfo[damagedid][pPaintBallG] > 0)
		{
		    if(paintrs[PlayerInfo[damagedid][pPaintBallG]] > 0)
		    {
		    	SetPlayerHealthEx(damagedid, 100.0);
			}
		}
		if(playerdeath[damagedid] == 0)
		{
			if(weaponid == 34 && PlayerInfo[damagedid][pPaintBallG] < 1)
		    {
		        SetPlayerHealthEx(damagedid, 0.0);
		        SetPlayerArmourEx(damagedid, 0.0);
		        OnPlayerDeath(damagedid,playerid,weaponid);
				playerdeath[damagedid] = 1;
				return 1;
		    }
		    new Float: HP, Float: AP ;
			GetPlayerHealthEx(damagedid,HP);
			GetPlayerArmourEx(damagedid,AP);
			if ( AP >= amount )
			{
				SetPlayerArmourEx ( damagedid, AP - amount );
			}
			else if ( AP <= 0 )
			{
				new Float: remainHP = HP - amount;
				SetPlayerHealthEx ( damagedid, remainHP );
				if ( remainHP <= 1 )
				{
					OnPlayerDeath( damagedid, playerid, weaponid );
					SetPlayerHealthEx ( damagedid, 0.0 );
					playerdeath[damagedid] = 1;
				}
			}
			else
			{
				new Float: remainHP = HP + ( AP - amount );
				SetPlayerArmourEx ( damagedid, 0.0 );
				SetPlayerHealthEx ( damagedid, remainHP );
				if ( remainHP <= 1 )
				{
					OnPlayerDeath( damagedid, playerid, weaponid );
					SetPlayerHealthEx ( damagedid, 0.0 );
					playerdeath[damagedid] = 1;
				}
			}
			if(PlayerCuffed[damagedid] == 1)
			{
				SetPlayerHealthEx(damagedid,100);
			}
			if(PlayerInfo[damagedid][pSleeping] == 1)
			{
				SetPlayerHealthEx(damagedid, 100);
			}
			if(tazer[playerid] == 1 && IsACop(playerid) && weaponid == 23)
			{
				if(IsACop(damagedid)) return SendClientMessage(playerid, COLOR_GREY, "You can't taze a cop.");
				if(PlayerCuffed[damagedid] == 1) return SendClientMessage(playerid, COLOR_GREY, "This player is already tazed.");
				if(PlayerInfo[damagedid][pSleeping] == 1) return SendClientMessage(playerid, COLOR_GREY, "This player is sleeping.");
				if(GetDistanceBetweenPlayers(playerid,damagedid) < 15)
				{
					new string[126],sendername[25],giveplayer[25];
					GetPlayerName(playerid,sendername,sizeof(sendername));
					GetPlayerName(damagedid,giveplayer,sizeof(giveplayer));
					format(string, sizeof(string), "* %s tazed %s for 8 seconds.", sendername ,giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					TogglePlayerControllable(damagedid, 0);
					PlayerCuffed[damagedid] = 1;
					PlayerCuffedTime[damagedid] = 8;
				}
			}
		}
		foreach(new i : Player)
		{
			if(Spectate[i] == playerid)
			{
				if(PlayerInfo[i][pAdmin] >= 1)
				{
					if(ShowDMG[i] == 1)
					{
						new string[256],name[30],wName[64],name2[30];
						GetPlayerName(playerid, name, sizeof(name));
						GetPlayerName(damagedid, name2, sizeof(name2));
						GetWeaponNameEx(weaponid,wName,sizeof(wName));
						format(string, sizeof(string),"DMG: %s did %f damage to %s using weapon %s. [hit: %f %f %f] [bodypart: %d]",name,amount,name2,wName,DMInfo[playerid][0],DMInfo[playerid][1],DMInfo[playerid][2],bodypart);
						SendSplitMessage(i, COLOR_DARKPINK, string);
					}
				}
			}
		}
	}
	return 1;
}

stock GetName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,sizeof(name));
	return name;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	printf("[debug] OnPlayerDeath(%d, %d, %d)", playerid, killerid, reason);
	if(killerid != INVALID_PLAYER_ID)
	{
	    new var100[256],playername[30],killername[30];
		GetPlayerName(playerid,playername,sizeof(playername));
		GetPlayerName(killerid,killername,sizeof(killername));
		new Float: distance = GetDistanceBetweenPlayers(playerid, killerid);
	    mysql_format(SQL, var100, sizeof(var100), "INSERT INTO kill_logs (`playerid`,`killerid`,`reason`,`playername`,`killername`,`distance`) VALUES ('%d','%d','%d','%s','%s','%.0f')", PlayerInfo[playerid][pSQLID],PlayerInfo[killerid][pSQLID],reason,playername,killername,distance);
		mysql_tquery(SQL,var100,"","");
		Listening[playerid] = -1;
		if(BusinessRob[playerid] > 0)
		{
			DisablePlayerCheckpoint(playerid);
			BusinessRob[playerid] = 0;
			RobTime[playerid] = -1;
			SendClientMessage(playerid, COLOR_ROB, "Rob failed. You died.");
		}
		if(PlayerInfo[killerid][pQuest2] == 2 && !IsACop(killerid) && IsACop(playerid))
		{
			if(PlayerInfo[killerid][pQuestNeed2] > PlayerInfo[killerid][pQuestProgress2])
			{
				PlayerInfo[killerid][pQuestProgress2]++;
				Update(killerid, pQuestProgress2x);
				if(PlayerInfo[killerid][pQuestProgress2] >= PlayerInfo[killerid][pQuestNeed2])
				{
					FinishQuest2(killerid, 2);
				}
				else
				{
					new str[128];
					if(PlayerInfo[killerid][pLanguage] == 1)
					{
						format(str, sizeof(str),"Quest [Kill %d cops] progress: %d/%d",PlayerInfo[killerid][pQuestNeed2],PlayerInfo[killerid][pQuestProgress2],PlayerInfo[killerid][pQuestNeed2]);
						SendClientMessage(killerid, COLOR_YELLOW, str);
					}
					else
					{
						format(str, sizeof(str),"Progres pentru misiunea [Omoara %d politisti]: %d/%d",PlayerInfo[killerid][pQuestNeed2],PlayerInfo[killerid][pQuestProgress2],PlayerInfo[killerid][pQuestNeed2]);
						SendClientMessage(killerid, COLOR_YELLOW, str);
					}
				}
			}
		}
	    if(PlayerInfo[playerid][pWantedLevel] >= 1)
		{
		    new copkill=0, price = PlayerInfo[playerid][pWantedLevel] * 1000, count, str23[MAX_STRING], string[256], lastname[30], streap[30], timejail;
		    if((PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 3 && PlayerInfo[playerid][pMember] != 8))
			{
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
					{
					    if((IsACop(i) && CrimInRange(50.0, playerid,i) && OnDuty[i] == 1)|| (IsACop(i) && killerid == i))
						{
						    if(OnDuty[i] != 1) return 1;
							GetPlayerName(killerid, lastname, sizeof(lastname));
							GetPlayerName(playerid, streap, sizeof(streap));
							count++;
							GameTextForPlayer(i, "Running Suspect bonus!", 5000, 1);
							format(string, sizeof(string), "Ai primit $%d bonus pentru prinderea suspectului %s.", price, streap);
							SendClientMessage(i, COLOR_DBLUE, string);
							ConsumingMoney[i] = 1;
							GivePlayerCash(i, price);
							Update(i, pCashx);
							new idfac = PlayerInfo[i][pMember];
                        	DynamicFactions[idfac][fBank] += price;
							mysql_format(SQL,str23,sizeof(str23),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[idfac][fBank], idfac);
							mysql_tquery(SQL,str23,"","");
							PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							if(SvarInfo[1][svValue] == 0) timejail = PlayerInfo[playerid][pWantedLevel]*300;
							else timejail = PlayerInfo[playerid][pWantedLevel]*150;
							format(string, sizeof(string),"Dispatch: %s has been killed by %s and will be in jail for %d seconds, over.",streap,lastname,timejail);
							copkill = 1;
							new varxx[256];
							mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport3 = Raport3+1 WHERE name = '%s'",PlayerInfo[i][pNormalName]);
							mysql_tquery(SQL,varxx,"","");
						}
					}
				}
				if(copkill == 1)
				{
					SendTeamMessage(1, COLOR_LIGHTBLUE, string);
					SendTeamMessage(2, COLOR_LIGHTBLUE, string);
					SendTeamMessage(3, COLOR_LIGHTBLUE, string);
					SendTeamMessage(8, COLOR_LIGHTBLUE, string);
					if(SvarInfo[1][svValue] == 0) PlayerInfo[playerid][pJailTime] = (PlayerInfo[playerid][pWantedLevel])*(300);
					else PlayerInfo[playerid][pJailTime] = (PlayerInfo[playerid][pWantedLevel])*(150);
					format(string, sizeof(string), "Because you got killed, you lost $%s and you will be taken to jail. You are no longer a criminal.", FormatNumber(price));
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					PlayerInfo[playerid][pJailed] = 1;
					PlayerInfo[playerid][pWantedLevel] = 0;
					PlayerInfo[playerid][pWantedDeaths] += 1;
					WantedPoints[playerid] = 0;
					GivePlayerCash(playerid, - price);
					Update(playerid,pWantedLevelx);
					Update(playerid,pJailedx);
					Update(playerid,pJailTimex);
					ClearCrime(playerid);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("UnFreezeStation", 1000, false, "i", playerid);
				}
			}
		}
     	DeadScris[playerid] = CreateDynamic3DTextLabel("{f03337}[dead]", COLOR_WHITE, 0, 0, -20, 20, playerid);
		Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, DeadScris[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.31);
		new name[MAX_PLAYER_NAME],
			string[500],
			Float:px,
			Float:py,
			Float:pz;
		gPlayerUsingLoopingAnim[playerid] = 0;
		gPlayerSpawned[playerid] = 0;
		GetPlayerName(playerid, name, sizeof(name));
		PlayerInfo[playerid][pLocal] = 255;
		GetPlayerPos(playerid, px, py, pz);
 	   	new currentveh = GetPlayerVehicleID(playerid);
		printf("DEATH: %s was killed by %s with gun %d",name,GetName(killerid),reason);
		playerdeath[playerid] = 0;
		curatj[playerid] = 0;
		PlayerEnterTime[playerid]+=221;
		if(GetPlayerState(killerid) == PLAYER_STATE_DRIVER && !IsAPlane(currentveh))
		{
		    GetPlayerName(playerid,name,sizeof(name));
		    new kill[25];
		    GetPlayerName(killerid,kill,sizeof(kill));
			format(string, sizeof(string), "Notice: {FFFFFF}%s has been killed by %s by drive-by.",name, kill);
            ABroadCast(COLOR_RED2,string,1);
		}
	    if(XDeaths[playerid] == 0)
	    {
	       LastDeath[playerid] = gettime();
	    }
	    XDeaths[playerid]++;
	    if(XDeaths[playerid] == 2)
	    {
	        if((gettime() - LastDeath[playerid]) <= 2)
	        {
	            KickEx(playerid);
	            return 1;
	        }else
	        if((gettime() - LastDeath[playerid]) > 2)
	        {
	            XDeaths[playerid]=0;
	        }
	    }
		foreach(new ids : Player)
		{
			if(Spectate[ids] == killerid)
			{
				new weaponname[50];
				GetWeaponNameEx(reason, weaponname, sizeof(weaponname));
				format(var100, sizeof(var100),"%s was killed by %s, reason: %s, distance: %.0fm",playername,killername,weaponname,GetDistanceBetweenPlayers(killerid,playerid));
				SendClientMessage(ids, COLOR_RED2, var100);
			}
		}
		foreach(new ds : Player)
		{
			if(PlayerInfo[ds][pAdmin] >= 1)
			{
				if(Spectate[ds] != -1)
				{
					if(GetDistanceBetweenPlayers(playerid,Spectate[ds]) <= 100.0)
					{
						if(Spectate[ds] != killerid)
						{
							new namexs[30],weaponname[50];
							GetWeaponNameEx(reason, weaponname, sizeof(weaponname));
							if(killerid != INVALID_PLAYER_ID)
							{
								format(namexs, sizeof(namexs),"%s",killername);
							}
							else
							{
								format(namexs, sizeof(namexs),"No One",killername);
							}
							format(var100, sizeof(var100),"%s was killed by %s, reason: %s",playername,namexs,weaponname);
							SendClientMessage(ds, COLOR_LIGHTGREEN3, var100);
						}
						KillTimer(deathdeletetime[ds]);
						SendDeathMessageToPlayer(ds, killerid, playerid, reason);
						deathdeletetime[ds] = SetTimerEx("DeleteDeathMessage",30000,0,"d",ds);
					}
				}
			}
		}
 		if(killerid == playerid)
		{
            KickEx(killerid);
            return 1;
		}
		if(PlayerCuffed2[playerid] == 1)
		{
		    PlayerCuffed2[playerid] = 0;
	    	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
	    	RemovePlayerAttachedObject(playerid,1);
		}
		if(reason == 38 && GetPlayerState(killerid) != PLAYER_STATE_DRIVER)
		{
			new kickname[25];
			if(IsPlayerConnected(killerid))
			{
				if(PlayerInfo[killerid][pAdmin] == 0 && PlayerInfo[killerid][pHelper] == 0)
				{
					GetPlayerName(killerid, kickname, sizeof(kickname));
					format(string, sizeof(string), "(N) %s (%d, level %d) killed a player using a minigun.",kickname,killerid,PlayerInfo[killerid][pLevel]);
					ABroadCast(COLOR_RED,string,1);
				}
			}
		}
		if(flymode[playerid] == 1)
		{
		    new string23[128],sendername[30];
		    GetPlayerName(playerid,sendername,sizeof(sendername));
		    flymode[playerid] = 0;
		    format(string23,sizeof(string23),"%s has stopped flymode.", sendername);
		    ABroadCast(COLOR_YELLOW,string23,1);
			StopFly(playerid);
		}
		if(Hatss[playerid] > 0)
		{
		    Hatss[playerid] = 0;
		}
		if(Sunglasses[playerid] > 0)
		{
			Sunglasses[playerid] = 0;
		}
  	  	if(TakingLesson[playerid] == 1)
   		{
        	TakingLesson[playerid] = 0;
			DestroyVehicle(examcar[playerid]);
			DisableRemoteVehicleCollisions(playerid, 0);
			examcar[playerid] = -1;
	    	DisablePlayerRaceCheckpoint(playerid);
        	PlayerTextDrawHide(playerid, DMVexam[playerid]);
        	PlayerTextDrawHide(playerid, DMVcheck[playerid]);
    	}
		if(gPlayerUsingLoopingAnim[playerid])
		{
        	gPlayerUsingLoopingAnim[playerid] = 0;
		}
		if(PlayerInfo[playerid][pCarLicT] == 0 && PlayerInfo[playerid][pCarLic] == 1)
		{
            PlayerInfo[playerid][pCarLic] = 0;
			PlayerInfo[playerid][pCarLicT] = 0;
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `CarLic`='0',`CarLicT`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SCM(playerid,COLOR_GRAD1,"Your driving license has expired.");
		}
		if(PlayerInfo[playerid][pFlyLicT] == 0 && PlayerInfo[playerid][pFlyLic] == 1)
		{
		    PlayerInfo[playerid][pFlyLic] = 0;
		    PlayerInfo[playerid][pFlyLicT] = 0;
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `FlyLic`='0',`FlyLicT`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SCM(playerid,COLOR_GRAD1,"Your flying license has expired.");
		}
		if(PlayerInfo[playerid][pBoatLicT] == 0 && PlayerInfo[playerid][pBoatLic] == 1)
		{
		    PlayerInfo[playerid][pBoatLic] = 0;
		    PlayerInfo[playerid][pBoatLic] = 0;
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `BoatLic`='0',`BoatLicT`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SCM(playerid,COLOR_GRAD1,"Your boat license has expired.");
		}
		if(PlayerInfo[playerid][pGunLicT] == 0 && PlayerInfo[playerid][pGunLic] == 1)
		{
		    PlayerInfo[playerid][pGunLic] = 0;
		    PlayerInfo[playerid][pGunLicT] = 0;
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `GunLic`='0',`GunLicT`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SCM(playerid,COLOR_GRAD1,"Your gun license has expired.");
		}
	    new fpm,fkm;
    	fpm = PlayerInfo[playerid][pMember];
    	fkm = PlayerInfo[killerid][pMember];
    	for(new turf = 1; turf < sizeof(TurfInfo); turf++)
		{
         	if(IsPlayerInTurf(playerid, turf) && IsPlayerInTurf(killerid, turf))
         	{
                if(IsAMember(playerid) && IsAMember(killerid))
                {
	             	if(WarInfo[turf][wFaction] == fpm && WarInfo[turf][wAttacker] == fkm || WarInfo[turf][wFaction] == fkm && WarInfo[turf][wAttacker] == fpm)
	             	{
				     	if(fkm == WarInfo[turf][wAttacker] || fkm == WarInfo[turf][wFaction])
					 	{
					     	WarScoreF[fkm][turf] += 1;
					 	}
	                 	ucideri[killerid][turf] ++;
	                 	decese[playerid][turf] ++;
						new varxx[256];
						mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport1 = Raport1+1 WHERE name = '%s'",PlayerInfo[killerid][pNormalName]);
						mysql_tquery(SQL,varxx,"","");
						mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport2 = Raport2+1 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,varxx,"","");
	                 	foreach(new i : Player)
	                 	{
	                 	    new fpm2;
	                 	    fpm2 = PlayerInfo[i][pMember];
	                 	    if(IsAMember(i))
                			{
                			    if(WarInfo[turf][wFaction] == fpm2 || WarInfo[turf][wAttacker] == fpm2)
  								{
                			    	SendDeathMessageToPlayer(i, killerid, playerid, reason);
								}
							}
						}
	                 	if(PlayerInfo[killerid][pMember] == WarInfo[turf][wAttacker])
	                 	{
		                 	if((ucideri[killerid][turf]-decese[killerid][turf]) > bestscoreat[turf])
		                 	{
		                     	bestscoreat[turf] = (ucideri[killerid][turf]-decese[killerid][turf]);
		                     	bestmemberat[turf] = killerid;
		                 	}
	                 	}
	                 	if(PlayerInfo[killerid][pMember] == WarInfo[turf][wFaction])
	                 	{
		                 	if((ucideri[killerid][turf]-decese[killerid][turf]) > bestscoredf[turf])
		                 	{
		                     	bestscoredf[turf] = (ucideri[killerid][turf]-decese[killerid][turf]);
		                     	bestmemberdf[turf] = killerid;
		                 	}
	                 	}
	                 	if(PlayerInfo[playerid][pMember] == WarInfo[turf][wAttacker])
	                 	{
	                 		if((ucideri[playerid][turf]-decese[playerid][turf]) < worstscoreat[turf])
							{
								worstscoreat[turf] = (ucideri[playerid][turf]-decese[playerid][turf]);
								worstmemberat[turf] = playerid;
							}
						}
	                 	if(PlayerInfo[playerid][pMember] == WarInfo[turf][wFaction])
	                 	{
	                 		if((ucideri[playerid][turf]-decese[playerid][turf]) < worstscoredf[turf])
							{
								worstscoredf[turf] = (ucideri[playerid][turf]-decese[playerid][turf]);
								worstmemberdf[turf] = playerid;
							}
						}
	                 	format(string, sizeof(string), "You have killed %s (%d).", GetName(playerid), playerid);
	                 	SCM(killerid, COLOR_GENANNOUNCE, string);
	                 	format(string, sizeof(string), "You have been killed by %s (%d).", GetName(killerid), killerid);
	                 	SCM(playerid, COLOR_GENANNOUNCE, string);
						if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pMember] == 6)
						{
							SetPlayerVirtualWorld(playerid, 1);
						}
						else
						{
							SetPlayerVirtualWorld(playerid, 0);
						}
	                 	return 1;
					}
             	}
         	}
    	}
		if (gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
		{
			DisablePlayerCheckpoint(playerid);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		}
		new caller = Mobile[playerid];
		if(caller != -1)
		{
			SendClientMessage(caller,  COLOR_GRAD2, "The line just went dead....");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = -1;
			Mobile[playerid] = -1;
			CellTime[playerid] = 0;
		}
		if(PlayerInfo[playerid][pPaintBallG] > 0)
		{
		    foreach(new iddd : Player)
		    {
		        if(PlayerInfo[iddd][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
		        {
					SendDeathMessageToPlayer(iddd, killerid, playerid, reason);
				}
			}
		    PlayerInfo[killerid][pPaintBallKills]++;
		    format(string,sizeof(string),"You have been killed by %s.", GetName(killerid));
		    SendClientMessage(playerid, COLOR_GENANNOUNCE, string);

		    format(string,sizeof(string),"You have killed %s. You now have %d kills.", GetName(playerid), PlayerInfo[killerid][pPaintBallKills]);
		    SendClientMessage(killerid, COLOR_GENANNOUNCE, string);

			if(PlayerInfo[killerid][pQuest2] == 3)
			{
				if(PlayerInfo[killerid][pQuestNeed2] > PlayerInfo[killerid][pQuestProgress2])
				{
					PlayerInfo[killerid][pQuestProgress2]++;
					Update(killerid, pQuestProgress2x);
					if(PlayerInfo[killerid][pQuestProgress2] >= PlayerInfo[killerid][pQuestNeed2])
					{
						FinishQuest2(killerid, 3);
					}
					else
					{
						new str[128];
						if(PlayerInfo[killerid][pLanguage] == 1)
						{
							format(str, sizeof(str),"Quest [Kill %d players at paintball] progress: %d/%d",PlayerInfo[killerid][pQuestNeed2],PlayerInfo[killerid][pQuestProgress2],PlayerInfo[killerid][pQuestNeed2]);
							SendClientMessage(killerid, COLOR_YELLOW, str);
						}
						else
						{
							format(str, sizeof(str),"Progres pentru misiunea [Omoara %d playeri la Paintball]: %d/%d",PlayerInfo[killerid][pQuestNeed2],PlayerInfo[killerid][pQuestProgress2],PlayerInfo[killerid][pQuestNeed2]);
							SendClientMessage(killerid, COLOR_YELLOW, str);
						}
					}
				}
			}

		    if(PlayerInfo[killerid][pPaintBallG] == 3)
			{
			    if(PlayerInfo[killerid][pPaintBallKills] == 2) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 29, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 4) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 28, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 6) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 33, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 8) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 32, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 10) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 25, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 12) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 26, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 14) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 34, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 16) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 27, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 18) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 31, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 20) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 30, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 22) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 23, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 24) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 22, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 26) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 9, 1); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 28) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 4, 1); }
			}

		    if(PlayerInfo[killerid][pPaintBallKills] == 29 && PlayerInfo[killerid][pPaintBallG] == 3)
		    {
		        foreach(new i : Player)
				{
  					if(PlayerInfo[i][pPaintBallG] == 3)
   					{
  						format(string,sizeof(string),"Round over! Winner: %s - 29 kills.",GetName(killerid));
						SendClientMessage(i, COLOR_YELLOW, string);
						SendClientMessage(i, COLOR_YELLOW, "Use /votemap to vote for a map.");
						ResetPlayerWeaponsEx(i);
		    			ResetPlayerWeapons(i);
		    			SetPlayerArmourEx(i, 0);
		    			PlayerInfo[i][pPaintBallKills] = 0;
		    			PlayerInfo[i][pPaintBallVoted] = 0;
		    			PlayerInfo[i][pPaintBallVoted2] = 0;
		    			for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
					}
				}
				KillTimer(paintrun3);
				paintt[3] = 0;
				paintrs[3] = 31;
				preparepaint3 = SetTimer("PrepareRoundPaintBall3", 1000, 1);
				PaintWinner[3] = -1;
				PaintBallWinnerKills[3] = 0;
				paintvotem[3][0] = 0;
				paintvotem[3][1] = 0;
				paintvotem[3][2] = 0;
				paintvotem[3][3] = 0;
				paintvotem[3][4] = 0;
				mapvoted[3] = 0;
		    }
		    if(PlayerInfo[killerid][pPaintBallKills] > PaintBallWinnerKills[PlayerInfo[playerid][pPaintBallG]])
		    {
				PaintWinner[PlayerInfo[playerid][pPaintBallG]] = killerid;
				PaintBallWinnerKills[PlayerInfo[playerid][pPaintBallG]] = PlayerInfo[killerid][pPaintBallKills];
				foreach(new i : Player)
				{
				    if(IsPlayerConnected(i))
				    {
				        if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				        {
				    		format(string,sizeof(string),"%s is in the lead with %d kills.",GetName(killerid),PaintBallWinnerKills[PlayerInfo[playerid][pPaintBallG]]);
				    		SendClientMessage(i, COLOR_YELLOW, string);
						}
					}
				}
			}
			return 1;
		}
		if(PlayerInfo[playerid][pHeadValue] > 0)
		{
	    	if(IsPlayerConnected(killerid))
	    	{
		    	if(PlayerInfo[killerid][pMember] == 11)
		    	{
		        	if(GoChase[killerid] == playerid)
		        	{
						new killer[MAX_PLAYER_NAME];
						GetPlayerName(killerid, killer, sizeof(killer));
						GivePlayerCash(killerid, PlayerInfo[playerid][pHeadValue]);
						if(Undercover[killerid] == 1 && PhoneOnline[killerid] == 1 && GetDistanceBetweenPlayers(killerid,playerid) >= 100)
						{
							format(string,256,"%s has succesfully completed the contract on %s for $%s, distance: %.0fm.",killer,name,FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
							new varxx[256];
							mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport1 = Raport1+1 WHERE name = '%s'",PlayerInfo[killerid][pNormalName]);
							mysql_tquery(SQL,varxx,"","");
						}
						if(Undercover[killerid] == 0)
						{
							format(string,256,"%s failed to complete the contract on %s for $%s, distance: %.0fm. Fail reason: not undercover.",killer,name,FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
						}
						if(PhoneOnline[killerid] == 0)
						{
							format(string,256,"%s failed to complete the contract on %s for $%s, distance: %.0fm. Fail reason: phone turned on.",killer,name,FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
						}
						if(GetDistanceBetweenPlayers(killerid,playerid) <= 99)
						{
							format(string,256,"%s failed to complete the contract on %s for $%s, distance: %.0fm. Fail reason: distance/weapon.",killer,name,FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
						}
						SendFamilyMessage(11, COLOR_TEAL, string);
						PlayerInfo[playerid][pHeadValue] = 0;
						GotHit[playerid] = 0;
						GetChased[playerid] = 999;
						GoChase[killerid] = 999;
						new str[256];
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `HeadValue`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str,"","");
						Update(killerid, pCashx);
				        togfind[killerid] = 0;
			            PlayerInfo[killerid][pHitT] = 300;
				        mysql_format(SQL, string, sizeof(string), "UPDATE users SET `HitT`='%d' WHERE `name`='%s'", PlayerInfo[killerid][pHitT], PlayerInfo[killerid][pNormalName]);
				        mysql_tquery(SQL,string,"","");
					}
				}
			}
			return 1;
		}
		if(gTeam[playerid] == 3)
		{
 			if(IsPlayerConnected(killerid))
   			{
 	    		if(gTeam[killerid] == 3 || gTeam[killerid] == 4 || gTeam[killerid] == 5 || (gTeam[killerid] == 11 && GoChase[killerid] == 999))
   	    		{
 	        		new namekill[25];
   	        		GetPlayerName(killerid,namekill,sizeof(namekill));
					strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
					WantedReason[playerid] = reason;
					format(string,sizeof(string),"{408080}Ai fost atacat de %s. Ai 60 de secunde sa folosesti /call 112 pentru a raporta incidentul.",GetName(killerid));
					SCM(playerid,COLOR_WHITE,string);
					WantedTimer[playerid] = 60;
	    		}
    		}
	    	return 1;
		}
		if(gTeam[playerid] == 2)
		{
 			if(IsPlayerConnected(killerid))
   			{
 	    		if(gTeam[killerid] == 3 || gTeam[killerid] == 4 || gTeam[killerid] == 5 || (gTeam[killerid] == 11 && GoChase[killerid] == 999))
   	    		{
 	        		new namekill[25];
   	        		GetPlayerName(killerid,namekill,sizeof(namekill));
					strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
					WantedReason[playerid] = reason;
					format(string,sizeof(string),"{408080}Ai fost atacat de %s. Ai 60 de secunde sa folosesti /call 112 pentru a raporta incidentul.",GetName(killerid));
					SCM(playerid,COLOR_WHITE,string);
					WantedTimer[playerid] = 60;
	    		}
    		}
	    	return 1;
		}
		if(gTeam[playerid] == 4)
		{
 			if(IsPlayerConnected(killerid))
   			{
 	    		if(gTeam[killerid] == 3 || gTeam[killerid] == 4 || gTeam[killerid] == 5 || (gTeam[killerid] == 11 && GoChase[killerid] == 999))
   	    		{
 	        		new namekill[25];
   	        		GetPlayerName(killerid,namekill,sizeof(namekill));
					strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
					WantedReason[playerid] = reason;
					format(string,sizeof(string),"{408080}Ai fost atacat de %s. Ai 60 de secunde sa folosesti /call 112 pentru a raporta incidentul.",GetName(killerid));
					SCM(playerid,COLOR_WHITE,string);
					WantedTimer[playerid] = 60;
	    		}
    		}
	    	return 1;
		}
		if(gTeam[playerid] == 5)
		{
 			if(IsPlayerConnected(killerid))
   			{
 	    		if(gTeam[killerid] == 3 || gTeam[killerid] == 4 || (gTeam[killerid] == 11 && GoChase[killerid] == 999))
   	    		{
 	        		new namekill[25];
   	        		GetPlayerName(killerid,namekill,sizeof(namekill));
					strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
					WantedReason[playerid] = reason;
					format(string,sizeof(string),"{408080}Ai fost atacat de %s. Ai 60 de secunde sa folosesti /call 112 pentru a raporta incidentul.",GetName(killerid));
					SCM(playerid,COLOR_WHITE,string);
					WantedTimer[playerid] = 60;
	    		}
    		}
	    	return 1;
		}
		if(gTeam[playerid] == 11)
		{
 			if(IsPlayerConnected(killerid))
   			{
 	    		if(gTeam[killerid] == 3 || gTeam[killerid] == 4 || gTeam[killerid] == 5)
   	    		{
 	        		new namekill[25];
   	        		GetPlayerName(killerid,namekill,sizeof(namekill));
					strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
					WantedReason[playerid] = reason;
					format(string,sizeof(string),"{408080}Ai fost atacat de %s. Ai 60 de secunde sa folosesti /call 112 pentru a raporta incidentul.",GetName(killerid));
					SCM(playerid,COLOR_WHITE,string);
					WantedTimer[playerid] = 60;
	    		}
    		}
	    	return 1;
		}
		killerid = INVALID_PLAYER_ID;
	}
	return 1;
}

new legalmods[48][22] = {
        {400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
        {404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
		{415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
        {492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
        {500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
        {518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
        {527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
        {534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
        {535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
        {536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
        {540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
        {542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
        {547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
        {550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
        {551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
        {558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
        {559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
        {560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
        {561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
        {562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
        {565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
        {567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
        {575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
        {600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};

public OnVehicleMod(playerid, vehicleid, componentid)
{
    if(GetPlayerInterior(playerid) == 0 && PlayerInfo[playerid][pAdmin] < 1)
    {
		new name[25],string[256];
		GetPlayerName(playerid,name,sizeof(name));
		format(string, sizeof(string), "(N) %s (%d, level %d) has tunned car %d with component %d.",name,playerid,PlayerInfo[playerid][pLevel],vehicleid,componentid);
        ABroadCast(COLOR_RED,string,1);
    }
    new vehicleide = GetVehicleModel(vehicleid),
    	modok = islegalcarmod(vehicleide, componentid),
    	Name[24];

    GetPlayerName(playerid, Name, 24);
    if (!modok)
	{
        BanEx(playerid, "Request");
    }
    if(IsAnOwnableCar(vehicleid))
	{
		SaveComponent(vehicleid, componentid);
	}
    return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(IsAnOwnableCar(vehicleid))
	{
		foreach(new i : Player)
		{
			for(new v; v < MAX_PERSONAL_VEHICLES; v++)
			{
				if(PlayerInfo[i][pCarID][v] == vehicleid)
				{
					PlayerInfo[i][pCarPaintJ][v] = paintjobid;
				}
			}
		}
	}
	return 1;
}

stock iswheelmodel(modelid) {

    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};

    for(new I = 0, b = sizeof(wheelmodels); I != b; ++I) {
        if (modelid == wheelmodels[I])
            return true;

    }

    return false;
}

stock IllegalCarNitroIde(carmodel) {

    new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };

    for(new I = 0, b = sizeof(illegalvehs); I != b; ++I) {

        if (carmodel == illegalvehs[I])
            return true;

    }

    return false;
}

// assumes player is in a car - make sure it is.
stock illegal_nos_vehicle(PlayerID) {

    new carid = GetPlayerVehicleID(PlayerID);
    new playercarmodel = GetVehicleModel(carid);

    return IllegalCarNitroIde(playercarmodel);

}

stock islegalcarmod(vehicleide, componentid) {

    new modok = false;

    // stereo, hydraulics & nos (1x 2x 3x) are special.
    if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) {

        new nosblocker = IllegalCarNitroIde(vehicleide);

        if (!nosblocker)
            modok = true;

    } else {

        // check if the specified model CAN use this particular mod.
        for(new I = 0, b = sizeof(legalmods); I != b; ++I) {

            if (legalmods[I][0] == vehicleide) { // first is car IDE

                for(new J = 1; J < 22; J++) { // start with 1
                    if (legalmods[I][J] == componentid)
                        modok = true;
                }

            }

        }

    }

    return modok;
}

public Truckerr1(playerid)
{
	if(!IsATruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_WHITE, "Error! You are not the driver!");
    new string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],string5[MAX_STRING],string6[MAX_STRING],allstrings[MAX_STRING];
    new Float: Position[3],
    	Float: Distance[19];
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[2][0], CHKTruck[2][1], CHKTruck[2][2]);
	Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[4][0], CHKTruck[4][1], CHKTruck[4][2]);
	Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[11][0], CHKTruck[11][1], CHKTruck[11][2]);
	Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[10][0], CHKTruck[10][1], CHKTruck[10][2]);
	Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[7][0], CHKTruck[7][1], CHKTruck[7][2]);
	Distance[6] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[6][0], CHKTruck[6][1], CHKTruck[6][2]);
	Distance[7] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[8][0], CHKTruck[8][1], CHKTruck[8][2]);
	Distance[8] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[9][0], CHKTruck[9][1], CHKTruck[9][2]);
	Distance[9] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[3][0], CHKTruck[3][1], CHKTruck[3][2]);
	Distance[10] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[5][0], CHKTruck[5][1], CHKTruck[5][2]);
	Distance[11] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[12][0], CHKTruck[12][1], CHKTruck[12][2]);
	Distance[12] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[13][0], CHKTruck[13][1], CHKTruck[13][2]);
	Distance[13] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[17][0], CHKTruck[17][1], CHKTruck[17][2]);
	Distance[14] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[15][0], CHKTruck[15][1], CHKTruck[15][2]);
	Distance[15] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[16][0], CHKTruck[16][1], CHKTruck[16][2]);
	Distance[16] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[14][0], CHKTruck[14][1], CHKTruck[14][2]);
 	format(string1,sizeof(string1),"{FFFFFF}LS Pizza Delivery (%.0fm) - {568203}legal\n{FFFFFF}LS Chop Shop (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Chuckup (%.0fm) - {FF0000}illegal",Distance[1],Distance[2],Distance[3]);
 	format(string2,sizeof(string2),"{FFFFFF}LV Pirate Ship (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Clothing Store (%.0fm) - {568203}legal\n{FFFFFF}LV Gas Station (%.0fm) - {FF0000}explosive",Distance[4],Distance[5],Distance[6]);
  	format(string3,sizeof(string3),"{FFFFFF}LV Burger Shot (%.0fm) - {568203}legal\n{FFFFFF}LV Pool (%.0fm) - {568203}legal\n{FFFFFF}LS 8 Track (%.0fm) - {568203}legal",Distance[7],Distance[8],Distance[9]);
  	format(string4,sizeof(string4),"{FFFFFF}LS Crack House (%.0fm) - {FF0000}illegal\n{FFFFFF}SF Ship (%.0fm) - {568203}legal\n{FFFFFF}SF Gas Station (%.0fm) - {FF0000}explosive",Distance[10],Distance[11],Distance[12]);
   	format(string5,sizeof(string5),"{FFFFFF}SF Homies Sharp (%.0fm) - {568203}legal\n{FFFFFF}SF Supa Save! (%.0fm) - {FF0000}illegal\n{FFFFFF}SF Restaurant (%.0fm) - {FF0000}illegal",Distance[13],Distance[14],Distance[15]);
    format(string6,sizeof(string6),"{FFFFFF}SF Pier 69 Pizza Place (%.0fm) - {568203}legal",Distance[16]);
    format(allstrings,sizeof(allstrings), "%s\n%s\n%s\n%s\n%s\n%s", string1, string2, string3, string4, string5, string6);
    ShowPlayerDialog(playerid, DIALOG_TRUCKER1, DIALOG_STYLE_LIST, "Choose destination", allstrings, "Ok", "Cancel");
    return 1;
}

public Truckerr2(playerid)
{
    if(!IsATruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_WHITE, "Error! You are not the driver!");
	new string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],allstrings[MAX_STRING];
 	new Float: Position[3],
  		Float: Distance[19];
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[11][0], CHKTruck[11][1], CHKTruck[11][2]);
	Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[10][0], CHKTruck[10][1], CHKTruck[10][2]);
	Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[7][0], CHKTruck[7][1], CHKTruck[7][2]);
	Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[6][0], CHKTruck[6][1], CHKTruck[6][2]);
	Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[8][0], CHKTruck[8][1], CHKTruck[8][2]);
	Distance[6] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[9][0], CHKTruck[9][1], CHKTruck[9][2]);
	Distance[7] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[0][0], CHKTruck[0][1], CHKTruck[0][2]);
	Distance[8] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[12][0], CHKTruck[12][1], CHKTruck[12][2]);
	Distance[9] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[13][0], CHKTruck[13][1], CHKTruck[13][2]);
	Distance[10] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[17][0], CHKTruck[17][1], CHKTruck[17][2]);
	Distance[11] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[15][0], CHKTruck[15][1], CHKTruck[15][2]);
	Distance[12] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[16][0], CHKTruck[16][1], CHKTruck[16][2]);
 	format(string1,sizeof(string1),"{FFFFFF}LV Chuckup (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Pirate Ship (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Clothing Store (%.0fm) - {568203}legal",Distance[1],Distance[2],Distance[3]);
 	format(string2,sizeof(string2),"{FFFFFF}LV Gas Station (%.0fm) - {FF0000}explosive\n{FFFFFF}LV Burger Shot (%.0fm) - {568203}legal\n{FFFFFF}LV Pool (%.0fm) - {568203}legal",Distance[4],Distance[5],Distance[6]);
 	format(string3,sizeof(string3),"{FFFFFF}LS Gas Station (%.0fm) - {FF0000}explosive\n{FFFFFF}SF Ship (%.0fm) - {568203}legal\n{FFFFFF}SF Gas Station (%.0fm) - {FF0000}explosive",Distance[7],Distance[8],Distance[9]);
 	format(string4,sizeof(string4),"{FFFFFF}SF Homies Sharp (%.0fm) - {568203}legal\n{FFFFFF}SF Supa Save! (%.0fm) - {FF0000}illegal\n{FFFFFF}SF Restaurant (%.0fm) - {FF0000}illegal",Distance[10],Distance[11],Distance[12]);
 	format(allstrings,sizeof(allstrings), "%s\n%s\n%s\n%s", string1, string2, string3, string4);
 	ShowPlayerDialog(playerid, DIALOG_TRUCKER2, DIALOG_STYLE_LIST, "Choose destination", allstrings, "Ok", "Cancel");
 	return 1;
}

public Truckerr3(playerid)
{
    if(!IsATruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_WHITE, "Error! You are not the driver!");
    new string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],allstrings[MAX_STRING];
    new Float: Position[3],
		Float: Distance[19];
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[2][0], CHKTruck[2][1], CHKTruck[2][2]);
	Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[4][0], CHKTruck[4][1], CHKTruck[4][2]);
	Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[3][0], CHKTruck[3][1], CHKTruck[3][2]);
	Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[5][0], CHKTruck[5][1], CHKTruck[5][2]);
	Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[1][0], CHKTruck[1][1], CHKTruck[1][2]);
	Distance[6] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[0][0], CHKTruck[0][1], CHKTruck[0][2]);
	Distance[7] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[12][0], CHKTruck[12][1], CHKTruck[12][2]);
	Distance[8] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[13][0], CHKTruck[13][1], CHKTruck[13][2]);
	Distance[9] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[17][0], CHKTruck[17][1], CHKTruck[17][2]);
	Distance[10] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[15][0], CHKTruck[15][1], CHKTruck[15][2]);
	Distance[11] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[16][0], CHKTruck[16][1], CHKTruck[16][2]);
	Distance[12] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[14][0], CHKTruck[14][1], CHKTruck[14][2]);
 	format(string1,sizeof(string1),"{FFFFFF}LS Pizza Delivery (%.0fm) - {568203}legal\n{FFFFFF}LS Chop Shop (%.0fm) - {FF0000}illegal\n{FFFFFF}LS 8 Track (%.0fm) - {568203}legal",Distance[1],Distance[2],Distance[3]);
 	format(string2,sizeof(string2),"{FFFFFF}LS Crack House (%.0fm) - {FF0000}illegal\n{FFFFFF}LS 24/7 Store (%.0fm) - {568203}legal\n{FFFFFF}LS Gas Station (%.0fm) - {FF0000}explosive",Distance[4],Distance[5],Distance[6]);
 	format(string3,sizeof(string3),"{FFFFFF}SF Ship (%.0fm) - {568203}legal\n{FFFFFF}SF Gas Station (%.0fm) - {FF0000}explosive\n{FFFFFF}SF Homies Sharp (%.0fm) - {568203}legal",Distance[7],Distance[8],Distance[9]);
 	format(string4,sizeof(string4),"{FFFFFF}SF Supa Save! (%.0fm) - {FF0000}illegal\n{FFFFFF}SF Restaurant (%.0fm) - {FF0000}illegal\n{FFFFFF}SF Pier 69 Pizza Place (%.0fm) - {568203}legal",Distance[10],Distance[11],Distance[12]);
    format(allstrings,sizeof(allstrings), "%s\n%s\n%s\n%s", string1, string2, string3, string4);
    ShowPlayerDialog(playerid, DIALOG_TRUCKER3, DIALOG_STYLE_LIST, "Choose destination", allstrings, "Ok", "Cancel");
	return 1;
}

public Truckerr4(playerid)
{
    if(!IsATruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_WHITE, "Error! You are not the driver!");
    new string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],allstrings[MAX_STRING];
    new Float: Position[3],
    	Float: Distance[19];
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[2][0], CHKTruck[2][1], CHKTruck[2][2]);
	Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[4][0], CHKTruck[4][1], CHKTruck[4][2]);
	Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[11][0], CHKTruck[11][1], CHKTruck[11][2]);
	Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[10][0], CHKTruck[10][1], CHKTruck[10][2]);
	Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[7][0], CHKTruck[7][1], CHKTruck[7][2]);
	Distance[6] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[6][0], CHKTruck[6][1], CHKTruck[6][2]);
	Distance[7] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[8][0], CHKTruck[8][1], CHKTruck[8][2]);
	Distance[8] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[9][0], CHKTruck[9][1], CHKTruck[9][2]);
	Distance[9] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[3][0], CHKTruck[3][1], CHKTruck[3][2]);
	Distance[10] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[5][0], CHKTruck[5][1], CHKTruck[5][2]);
	Distance[11] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[1][0], CHKTruck[1][1], CHKTruck[1][2]);
	Distance[12] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[0][0], CHKTruck[0][1], CHKTruck[0][2]);
	format(string1,sizeof(string1),"{FFFFFF}LS Pizza Delivery (%.0fm) - {568203}legal\n{FFFFFF}LS Chop Shop (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Chuckup (%.0fm) - {FF0000}illegal",Distance[1],Distance[2],Distance[3]);
	format(string2,sizeof(string2),"{FFFFFF}LV Pirate Ship (%.0fm) - {FF0000}illegal\n{FFFFFF}LV Clothing Store (%.0fm) - {568203}legal\n{FFFFFF}LV Gas Station (%.0fm) - {FF0000}explosive",Distance[4],Distance[5],Distance[6]);
	format(string3,sizeof(string3),"{FFFFFF}LV Burger Shot (%.0fm) - {568203}legal\n{FFFFFF}LV Pool (%.0fm) - {568203}legal\n{FFFFFF}LS 8 Track (%.0fm) - {568203}legal",Distance[7],Distance[8],Distance[9]);
	format(string4,sizeof(string4),"{FFFFFF}LS Crack House (%.0fm) - {FF0000}illegal\n{FFFFFF}LS 24/7 Store (%.0fm) - {568203}legal\n{FFFFFF}LS Gas Station (%.0fm) - {FF0000}explosive",Distance[10],Distance[11],Distance[12]);
	format(allstrings,sizeof(allstrings), "%s\n%s\n%s\n%s", string1, string2, string3, string4);
	ShowPlayerDialog(playerid, DIALOG_TRUCKER4, DIALOG_STYLE_LIST, "Choose destination", allstrings, "Ok", "Cancel");
	return 1;
}

public AfterSpray(playerid)
{
	new carid = GetPlayerVehicleID(playerid),
		Float:health,
		string[MAX_STRING];
    if(IsPlayerInRangeOfPoint(playerid,15.0,1025.0671,-1023.7895,32.1016))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
			Cash[playerid] -= BizzInfo[36][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[36][bTill] += BizzInfo[36][bEntranceCost];
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='36'",BizzInfo[36][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[36][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,15.0,719.9537,-457.2771,16.3359))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
			new str[128];
			Cash[playerid] -= BizzInfo[34][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[34][bTill] += BizzInfo[34][bEntranceCost];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='34'",BizzInfo[34][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[34][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,15.0,487.4134,-1740.1738,11.1370))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
			Cash[playerid] -= BizzInfo[37][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[37][bTill] += BizzInfo[37][bEntranceCost];
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='37'",BizzInfo[37][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[37][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,15.0,2065.5911,-1831.4495,13.5469))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
			new str[128];
			Cash[playerid] -= BizzInfo[35][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[35][bTill] += BizzInfo[35][bEntranceCost];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='35'",BizzInfo[35][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[35][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,15.0,1974.3198,2162.7249,11.0703))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
   			Cash[playerid] -= BizzInfo[40][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[40][bTill] += BizzInfo[40][bEntranceCost];
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='40'",BizzInfo[40][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[40][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,15.0,-100.1086,1117.3312,19.7417))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
			Cash[playerid] -= BizzInfo[41][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[41][bTill] += BizzInfo[41][bEntranceCost];
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='41'",BizzInfo[41][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[41][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
    SetPlayerHealthEx(playerid, 100);
    SetPlayerArmourEx(playerid, 0);
	TextDrawShowForPlayer(playerid, Time);
	TextDrawShowForPlayer(playerid, Date);
    SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
    DestroyDynamic3DTextLabel(DeadScris[playerid]);
    if(PlayerInfo[playerid][pWantedLevel] >= 1)
    {
        new str1[256];
        PlayerTextDrawShow(playerid, WantedText[playerid]);
        if(PlayerInfo[playerid][pLanguage] == 2) format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[playerid]/60+1);
		else format(str1,sizeof(str1),"WANTED DECREASES IN: ~r~%d MINUTES",wantedlost[playerid]/60+1);
		PlayerTextDrawSetString(playerid, WantedText[playerid], str1);
	}
    SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	tazer[playerid] = 0;
	if(Sunglasses[playerid] == 1)
	{
		new skin = GetPlayerSkin(playerid);
		SetPlayerHoldingObject(playerid, PlayerInfo[playerid][pGlasses], 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
	}
	if(IsPlayerNPC(playerid))
    {
        new npcname[MAX_PLAYER_NAME]; GetPlayerName(playerid, npcname, sizeof(npcname));
        if(!strcmp(npcname, "Mihai", true))// Mihai find numele botului
    {
    PutPlayerInVehicle(playerid, buscar1, 0);// pune botul in vehicul
    SetPlayerSkin(playerid, 253);// skinul botuui
    SetPlayerColor(playerid,COLOR_WHITE);// culoare lui
    PlayerInfo[playerid][pCarLic] = 1;// in caz ca vreti sa adaugati pe RP mai recomandat este sa ii dati licenta
    return 1;
    }
}
	if(Hatss[playerid] == 1)
	{
		new skin = GetPlayerSkin(playerid);
		SetPlayerAttachedObject(playerid, 0, PlayerInfo[playerid][pHats], 2, SkinCaps[skin][0], SkinCaps[skin][1], SkinCaps[skin][2], SkinCaps[skin][3],SkinCaps[skin][4], SkinCaps[skin][5], 1.000000, 1.000000, 1.000000);
	}
    if(OnDuty[playerid] > 0)
	{
		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		{
			GivePlayerWeaponEx(playerid, 24, 500);
			GivePlayerWeaponEx(playerid, 3, 1);
			GivePlayerWeaponEx(playerid, 41, 500);
			GivePlayerWeaponEx(playerid, 29, 1000);
			GivePlayerWeaponEx(playerid, 31, 1000);
			SetPlayerArmourEx(playerid, 100);
			SetPlayerHealthEx(playerid, 100);
		}
		if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
 		{
			GivePlayerWeaponEx(playerid, 24, 500);
			GivePlayerWeaponEx(playerid, 3, 1);
			GivePlayerWeaponEx(playerid, 41, 500);
			GivePlayerWeaponEx(playerid, 29, 1000);
			GivePlayerWeaponEx(playerid, 31, 1000);
			SetPlayerArmourEx(playerid, 100);
			SetPlayerHealthEx(playerid, 100);
		}
		if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
 		{
			GivePlayerWeaponEx(playerid, 24, 500);
			GivePlayerWeaponEx(playerid, 41, 500);
			GivePlayerWeaponEx(playerid, 29, 1000);
			GivePlayerWeaponEx(playerid, 31, 1000);
			SetPlayerArmourEx(playerid, 100);
			SetPlayerHealthEx(playerid, 100);
		}
		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
 		{
			GivePlayerWeaponEx(playerid, 24, 500);
			GivePlayerWeaponEx(playerid, 3, 1);
			GivePlayerWeaponEx(playerid, 41, 500);
			GivePlayerWeaponEx(playerid, 29, 1000);
			GivePlayerWeaponEx(playerid, 31, 1000);
			SetPlayerArmourEx(playerid, 100);
			SetPlayerHealthEx(playerid, 100);
		}
	}
	if(!gPlayerAnimLibsPreloaded[playerid])
	{
   		PreloadAnimLib(playerid,"BOMBER");
   		PreloadAnimLib(playerid,"RAPPING");
    	PreloadAnimLib(playerid,"SHOP");
   		PreloadAnimLib(playerid,"BEACH");
   		PreloadAnimLib(playerid,"SMOKING");
    	PreloadAnimLib(playerid,"FOOD");
    	PreloadAnimLib(playerid,"ON_LOOKERS");
    	PreloadAnimLib(playerid,"DEALER");
    	PreloadAnimLib(playerid,"MISC");
    	PreloadAnimLib(playerid,"SWEET");
    	PreloadAnimLib(playerid,"RIOT");
    	PreloadAnimLib(playerid,"PED");
    	PreloadAnimLib(playerid,"POLICE");
		PreloadAnimLib(playerid,"CRACK");
		PreloadAnimLib(playerid,"CARRY");
		PreloadAnimLib(playerid,"COP_AMBIENT");
		PreloadAnimLib(playerid,"PARK");
		PreloadAnimLib(playerid,"INT_HOUSE");
		PreloadAnimLib(playerid,"FOOD");
		gPlayerAnimLibsPreloaded[playerid] = 1;
	}
	gTeam[playerid] = PlayerInfo[playerid][pTeam];
	if(gTeam[playerid] == 4)
	{
		gTeam[playerid] = 4;
	}
	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	{
		gTeam[playerid] = 2;
		PlayerInfo[playerid][pTeam] = 2;
	}
	if(gPlayerLogged[playerid] == 0)
	{
    	SendClientMessage(playerid, COLOR_RED2, "You need to log in first.");
    	KickEx(playerid);
		return 1;
 	}
 	ChosenSkin[playerid] = 1;
	SetPlayerSpawn(playerid);
	SetPlayerToTeamColor(playerid);
	playerdeath[playerid] = 0;
	Undercover[playerid] = 0;
	SetPlayerTeam(playerid,4);
	StopAudioStreamForPlayer(playerid);
	return 1;
}

// LOGS

public Log(playerid, string[], where[])
{
	new query[300], escape[256];
	mysql_real_escape_string(string, escape);
	mysql_format(SQL,query,sizeof(query),"INSERT INTO logs (`playerid`,`log`,`where`,`time`) VALUES ('%d','%s','%s','%d')", playerid, escape, where, gettime());
	mysql_tquery(SQL,query,"","");
	return 1;
}

public Factionlog(factionid,psql,lsql,action[])
{
	new query[300],escape[256];
	mysql_real_escape_string(action, escape);
	mysql_format(SQL,query,sizeof(query),"INSERT INTO factionlog (`factionid`,`player`,`leader`,`action`) VALUES ('%d','%d','%d','%s')",factionid,psql,lsql,escape);
	mysql_tquery(SQL,query,"","");
	return 1;
}

// OnPlayerEnterRaceCheckpoint
public OnPlayerEnterRaceCheckpoint(playerid)
{
	new ccar = IsPlayerInAnyVehicle(playerid);
    new tmpcar = GetPlayerVehicleID(playerid);
 	if(pizzaj[playerid] == 1 && PizzaCP[playerid] == 1)
	{
		new string[128];
		DisablePlayerRaceCheckpoint(playerid);
		PizzaCP[playerid] = 0;
		pizzaj[playerid] = 0;
		format(string,sizeof(string),"Pizza livrata! Ai castigat %s$. Foloseste /pizza pentru a livra o alta pizza!",FormatNumber(pizzaprize[playerid]));
		SCM(playerid,COLOR_GREEN,string);
		GivePlayerCash(playerid,pizzaprize[playerid]);
		Update(playerid, pCashx);
		pizzaprize[playerid] = 0;
		PlayerInfo[playerid][pPizzaRem]--;
		PlayerInfo[playerid][pPizzaTimes]++;
		Update(playerid,pPizzaRemx);
		Update(playerid,pPizzaTimesx);
		if(PlayerInfo[playerid][pQuest2] == 1)
		{
			if(PlayerInfo[playerid][pQuestNeed2] > PlayerInfo[playerid][pQuestProgress2])
			{
				PlayerInfo[playerid][pQuestProgress2]++;
				Update(playerid, pQuestProgress2x);
				if(PlayerInfo[playerid][pQuestProgress2] >= PlayerInfo[playerid][pQuestNeed2])
				{
					FinishQuest2(playerid, 1);
				}
				else
				{
					new str[128];
					if(PlayerInfo[playerid][pLanguage] == 1)
					{
						format(str, sizeof(str),"Quest [Deliver %d pizza] progress: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
						SendClientMessage(playerid, COLOR_YELLOW, str);
					}
					else
					{
						format(str, sizeof(str),"Progres pentru misiunea [Livreaza %d pizza]: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
						SendClientMessage(playerid, COLOR_YELLOW, str);
					}
				}
			}
		}
		if(PlayerInfo[playerid][pPizzaSkill] <= 5)
		{
			if(PlayerInfo[playerid][pPizzaRem] <= 0)
			{
			    PlayerInfo[playerid][pPizzaSkill]++;
   				if(PlayerInfo[playerid][pPizzaSkill] == 2)
				{
					PlayerInfo[playerid][pPizzaRem] = 34;
				}
				else if(PlayerInfo[playerid][pPizzaSkill] == 3)
				{
					PlayerInfo[playerid][pPizzaRem] = 49;
				}
				else if(PlayerInfo[playerid][pPizzaSkill] == 4)
				{
					PlayerInfo[playerid][pPizzaRem] = 89;
				}
				else if(PlayerInfo[playerid][pPizzaSkill] == 5)
				{
					PlayerInfo[playerid][pPizzaRem] = 99;
				}
		    	Update(playerid,pPizzaSkillx);
		    	Update(playerid,pPizzaRemx);
				new stringe[128];
			    format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pPizzaSkill]);
				format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pPizzaSkill]);
			    SS(playerid, COLOR_YELLOW, string, stringe);
			}
		}
	}
	if(RaceCP[playerid] != 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(PlayerInfo[playerid][pRaceG] == 0)
			{
				if(racem[PlayerInfo[playerid][pRaceG]] == 1)
				{
					if(RaceCP[playerid] == 1)
					{
						new count;
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[x] == 1) count++;
							}
						}
						RacePos[playerid] = racep[0] - count;
					}
					else
					{
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[playerid] >= RaceCP[x] && RacePos[playerid] > RacePos[x])
								{
									new pos = RacePos[playerid];
									RacePos[playerid] = RacePos[x];
									RacePos[x] = pos;
								}
							}
						}
					}
					if(RaceCP[playerid] < 24)
					{
						new iddd = RaceCP[playerid] + 1, idd = RaceCP[playerid];
						if(RaceCP[playerid] == 23)
						{
							SetPlayerRaceCheckpoint(playerid, 1, RaceCCPos1[idd][0], RaceCCPos1[idd][1], RaceCCPos1[idd][2], 0.0, 0.0, 0.0, 10.0);
						}
						else
						{
							SetPlayerRaceCheckpoint(playerid, 0, RaceCCPos1[idd][0], RaceCCPos1[idd][1], RaceCCPos1[idd][2], RaceCCPos1[iddd][0], RaceCCPos1[iddd][1], RaceCCPos1[iddd][2], 10.0);
						}
						PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					}
					else if(RaceCP[playerid] == 24)
					{
						new string[128],namee[30],sum;
						GetPlayerName(playerid, namee, sizeof(namee));
						if(RacePos[playerid] == 1)
						{
							sum = racep[PlayerInfo[playerid][pRaceG]] * 5000;
							format(string, sizeof(string),"* %s finished race %dst and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							Update(playerid, pCashx);
						}
						if(RacePos[playerid] == 2)
						{
							sum = racep[PlayerInfo[playerid][pRaceG]] * 2000;
							format(string, sizeof(string),"* %s finished race %dnd and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							Update(playerid, pCashx);
						}
						if(RacePos[playerid] == 3)
						{
							sum = racep[PlayerInfo[playerid][pRaceG]] * 1000;
							format(string, sizeof(string),"* %s finished race %drd and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							Update(playerid, pCashx);
						}
						if(RacePos[playerid] > 3) format(string, sizeof(string),"* %s finished race %dth.",namee,RacePos[playerid]);
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG]) SendClientMessage(x, COLOR_YELLOW, string);
						}
						PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
						if(RacePos[playerid] == 1) format(string, sizeof(string),"~r~You finished race:~n~~g~%dst",RacePos[playerid]);
						if(RacePos[playerid] == 2) format(string, sizeof(string),"~r~You finished race:~n~~g~%dnd",RacePos[playerid]);
						if(RacePos[playerid] == 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%drd",RacePos[playerid]);
						if(RacePos[playerid] > 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%dth",RacePos[playerid]);
						GameTextForPlayer(playerid, string, 5000, 4);
						SetPlayerHealthEx(playerid, 100.0);
						curatj[playerid] = 0;
						for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
						PlayerTextDrawHide(playerid, PaintBallText[playerid]);
						racep[PlayerInfo[playerid][pRaceG]]--;
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid,0);
						SetPlayerPos(playerid, 1154.2588,-1457.9507,15.7969);
						RaceCP[playerid] = 0;
						DisablePlayerRaceCheckpoint(playerid);
						DisableRemoteVehicleCollisions(playerid, 0);
						StopAudioStreamForPlayer(playerid);
						PlayerInfo[playerid][pRaceG] = -1;
						curatj[playerid] = 0;
						PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
						for(new cs; cs < 20; cs++)
						{
							if(rcarid[0][cs] == GetPlayerVehicleID(playerid))
							{
								DestroyVehicle(rcarid[0][cs]);
								rcarid[0][cs] = 0;
							}
						}
					}
					RaceCP[playerid]++;
				}
				if(racem[PlayerInfo[playerid][pRaceG]] == 2)
				{
					if(RaceCP[playerid] == 1)
					{
						new count;
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[x] == 1) count++;
							}
						}
						RacePos[playerid] = racep[0] - count;
					}
					else
					{
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[playerid] >= RaceCP[x] && RacePos[playerid] > RacePos[x])
								{
									new pos = RacePos[playerid];
									RacePos[playerid] = RacePos[x];
									RacePos[x] = pos;
								}
							}
						}
					}
					if(RaceCP[playerid] < 22)
					{
						new iddd = RaceCP[playerid] + 1, idd = RaceCP[playerid];
						if(RaceCP[playerid] == 21)
						{
							SetPlayerRaceCheckpoint(playerid, 1, RaceCCPos2[idd][0], RaceCCPos2[idd][1], RaceCCPos2[idd][2], 0.0, 0.0, 0.0, 10.0);
						}
						else
						{
							SetPlayerRaceCheckpoint(playerid, 0, RaceCCPos2[idd][0], RaceCCPos2[idd][1], RaceCCPos2[idd][2], RaceCCPos2[iddd][0], RaceCCPos2[iddd][1], RaceCCPos2[iddd][2], 10.0);
						}
						PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					}
					else if(RaceCP[playerid] == 22)
					{
						new string[128],namee[30],sum;
						GetPlayerName(playerid, namee, sizeof(namee));
						if(RacePos[playerid] == 1)
						{
							sum = racep[PlayerInfo[playerid][pRaceG]] * 5000;
							format(string, sizeof(string),"* %s finished race %dst and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							Update(playerid, pCashx);
						}
						if(RacePos[playerid] == 2)
						{
							sum = racep[PlayerInfo[playerid][pRaceG]] * 2000;
							format(string, sizeof(string),"* %s finished race %dnd and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							Update(playerid, pCashx);
						}
						if(RacePos[playerid] == 3)
						{
							sum = racep[PlayerInfo[playerid][pRaceG]] * 1000;
							format(string, sizeof(string),"* %s finished race %drd and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							Update(playerid, pCashx);
						}
						if(RacePos[playerid] > 3) format(string, sizeof(string),"* %s finished race %dth.",namee,RacePos[playerid]);
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG]) SendClientMessage(x, COLOR_YELLOW, string);
						}
						PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
						if(RacePos[playerid] == 1) format(string, sizeof(string),"~r~You finished race:~n~~g~%dst",RacePos[playerid]);
						if(RacePos[playerid] == 2) format(string, sizeof(string),"~r~You finished race:~n~~g~%dnd",RacePos[playerid]);
						if(RacePos[playerid] == 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%drd",RacePos[playerid]);
						if(RacePos[playerid] > 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%dth",RacePos[playerid]);
						GameTextForPlayer(playerid, string, 5000, 4);
						SetPlayerHealthEx(playerid, 100.0);
						curatj[playerid] = 0;
						for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
						PlayerTextDrawHide(playerid, PaintBallText[playerid]);
						racep[PlayerInfo[playerid][pRaceG]]--;
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid,0);
						SetPlayerPos(playerid, 1154.2588,-1457.9507,15.7969);
						RaceCP[playerid] = 0;
						DisablePlayerRaceCheckpoint(playerid);
						DisableRemoteVehicleCollisions(playerid, 0);
						StopAudioStreamForPlayer(playerid);
						PlayerInfo[playerid][pRaceG] = -1;
						curatj[playerid] = 0;
						PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
						for(new cs; cs < 20; cs++)
						{
							if(rcarid[0][cs] == GetPlayerVehicleID(playerid))
							{
								DestroyVehicle(rcarid[0][cs]);
								rcarid[0][cs] = 0;
							}
						}
					}
					RaceCP[playerid]++;
				}
				if(racem[PlayerInfo[playerid][pRaceG]] == 3)
				{
					if(RaceCP[playerid] == 1)
					{
						new count;
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[x] == 1) count++;
							}
						}
						RacePos[playerid] = racep[0] - count;
					}
					else
					{
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[playerid] >= RaceCP[x] && RacePos[playerid] > RacePos[x])
								{
									new pos = RacePos[playerid];
									RacePos[playerid] = RacePos[x];
									RacePos[x] = pos;
								}
							}
						}
					}
					if(RaceCP[playerid] < 24)
					{
						new iddd = RaceCP[playerid] + 1, idd = RaceCP[playerid];
						if(RaceCP[playerid] == 23)
						{
							SetPlayerRaceCheckpoint(playerid, 1, RaceCCPos3[idd][0], RaceCCPos3[idd][1], RaceCCPos3[idd][2], 0.0, 0.0, 0.0, 10.0);
						}
						else
						{
							SetPlayerRaceCheckpoint(playerid, 0, RaceCCPos3[idd][0], RaceCCPos3[idd][1], RaceCCPos3[idd][2], RaceCCPos3[iddd][0], RaceCCPos3[iddd][1], RaceCCPos3[iddd][2], 10.0);
						}
						PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					}
					else if(RaceCP[playerid] == 24)
					{
						new string[128],namee[30],sum;
						GetPlayerName(playerid, namee, sizeof(namee));
						if(RacePos[playerid] == 1)
						{
							sum = racep[PlayerInfo[playerid][pRaceG]] * 5000;
							format(string, sizeof(string),"* %s finished race %dst and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							Update(playerid, pCashx);
						}
						if(RacePos[playerid] == 2)
						{
							sum = racep[PlayerInfo[playerid][pRaceG]] * 2000;
							format(string, sizeof(string),"* %s finished race %dnd and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							Update(playerid, pCashx);
						}
						if(RacePos[playerid] == 3)
						{
							sum = racep[PlayerInfo[playerid][pRaceG]] * 1000;
							format(string, sizeof(string),"* %s finished race %drd and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							Update(playerid, pCashx);
						}
						if(RacePos[playerid] > 3) format(string, sizeof(string),"* %s finished race %dth.",namee,RacePos[playerid]);
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG]) SendClientMessage(x, COLOR_YELLOW, string);
						}
						PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
						if(RacePos[playerid] == 1) format(string, sizeof(string),"~r~You finished race:~n~~g~%dst",RacePos[playerid]);
						if(RacePos[playerid] == 2) format(string, sizeof(string),"~r~You finished race:~n~~g~%dnd",RacePos[playerid]);
						if(RacePos[playerid] == 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%drd",RacePos[playerid]);
						if(RacePos[playerid] > 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%dth",RacePos[playerid]);
						GameTextForPlayer(playerid, string, 5000, 4);
						SetPlayerHealthEx(playerid, 100.0);
						curatj[playerid] = 0;
						for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
						PlayerTextDrawHide(playerid, PaintBallText[playerid]);
						racep[PlayerInfo[playerid][pRaceG]]--;
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid,0);
						SetPlayerPos(playerid, 1154.2588,-1457.9507,15.7969);
						RaceCP[playerid] = 0;
						DisablePlayerRaceCheckpoint(playerid);
						DisableRemoteVehicleCollisions(playerid, 0);
						StopAudioStreamForPlayer(playerid);
						PlayerInfo[playerid][pRaceG] = -1;
						curatj[playerid] = 0;
						PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
						for(new cs; cs < 20; cs++)
						{
							if(rcarid[0][cs] == GetPlayerVehicleID(playerid))
							{
								DestroyVehicle(rcarid[0][cs]);
								rcarid[0][cs] = 0;
							}
						}
					}
					RaceCP[playerid]++;
				}
			}
			if(PlayerInfo[playerid][pRaceG] == 1)
			{
				if(racem[PlayerInfo[playerid][pRaceG]] == 1)
				{
					if(RaceCP[playerid] == 1)
					{
						new count;
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[x] == 1) count++;
							}
						}
						ARacePos[playerid] = racep[1] - count;
					}
					else
					{
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[playerid] >= RaceCP[x] && ARacePos[playerid] > ARacePos[x])
								{
									new pos = ARacePos[playerid];
									ARacePos[playerid] = ARacePos[x];
									ARacePos[x] = pos;
								}
							}
						}
					}
					if(RaceCP[playerid] < 22)
					{
						new iddd = RaceCP[playerid] + 1, idd = RaceCP[playerid];
						if(RaceCP[playerid] == 21)
						{
							SetPlayerRaceCheckpoint(playerid, 4, ARaceCCPos1[idd][0], ARaceCCPos1[idd][1], ARaceCCPos1[idd][2], 0.0, 0.0, 0.0, 20.0);
						}
						else
						{
							SetPlayerRaceCheckpoint(playerid, 3, ARaceCCPos1[idd][0], ARaceCCPos1[idd][1], ARaceCCPos1[idd][2], ARaceCCPos1[iddd][0], ARaceCCPos1[iddd][1], ARaceCCPos1[iddd][2], 20.0);
						}
						PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					}
					else if(RaceCP[playerid] == 22)
					{
						new string[128],namee[30],sum;
						GetPlayerName(playerid, namee, sizeof(namee));
						if(ARacePos[playerid] == 1)
						{
							sum = racep[PlayerInfo[playerid][pRaceG]] * 5000;
							format(string, sizeof(string),"* %s finished race %dst and received $%s.",namee,ARacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							Update(playerid, pCashx);
						}
						if(ARacePos[playerid] == 2)
						{
							sum = racep[PlayerInfo[playerid][pRaceG]] * 2000;
							format(string, sizeof(string),"* %s finished race %dnd and received $%s.",namee,ARacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							Update(playerid, pCashx);
						}
						if(ARacePos[playerid] == 3)
						{
							sum = racep[PlayerInfo[playerid][pRaceG]] * 1000;
							format(string, sizeof(string),"* %s finished race %drd and received $%s.",namee,ARacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							Update(playerid, pCashx);
						}
						if(ARacePos[playerid] > 3) format(string, sizeof(string),"* %s finished race %dth.",namee,ARacePos[playerid]);
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG]) SendClientMessage(x, COLOR_YELLOW, string);
						}
						PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
						if(ARacePos[playerid] == 1) format(string, sizeof(string),"~r~You finished race:~n~~g~%dst",ARacePos[playerid]);
						if(ARacePos[playerid] == 2) format(string, sizeof(string),"~r~You finished race:~n~~g~%dnd",ARacePos[playerid]);
						if(ARacePos[playerid] == 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%drd",ARacePos[playerid]);
						if(ARacePos[playerid] > 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%dth",ARacePos[playerid]);
						GameTextForPlayer(playerid, string, 5000, 4);
						SetPlayerHealthEx(playerid, 100.0);
						curatj[playerid] = 0;
						for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
						PlayerTextDrawHide(playerid, PaintBallText[playerid]);
						racep[PlayerInfo[playerid][pRaceG]]--;
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid,0);
						SetPlayerPos(playerid, 1154.2588,-1457.9507,15.7969);
						RaceCP[playerid] = 0;
						DisablePlayerRaceCheckpoint(playerid);
						DisableRemoteVehicleCollisions(playerid, 0);
						StopAudioStreamForPlayer(playerid);
						PlayerInfo[playerid][pRaceG] = -1;
						curatj[playerid] = 0;
						PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
						for(new cs; cs < 20; cs++)
						{
							if(rcarid[1][cs] == GetPlayerVehicleID(playerid))
							{
								DestroyVehicle(rcarid[1][cs]);
								rcarid[1][cs] = 0;
							}
						}
					}
					RaceCP[playerid]++;
				}
				if(racem[PlayerInfo[playerid][pRaceG]] == 2)
				{
					if(RaceCP[playerid] == 1)
					{
						new count;
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[x] == 1) count++;
							}
						}
						ARacePos[playerid] = racep[1] - count;
					}
					else
					{
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[playerid] >= RaceCP[x] && ARacePos[playerid] > ARacePos[x])
								{
									new pos = ARacePos[playerid];
									ARacePos[playerid] = ARacePos[x];
									ARacePos[x] = pos;
								}
							}
						}
					}
					if(RaceCP[playerid] < 22)
					{
						new iddd = RaceCP[playerid] + 1, idd = RaceCP[playerid];
						if(RaceCP[playerid] == 21)
						{
							SetPlayerRaceCheckpoint(playerid, 4, ARaceCCPos2[idd][0], ARaceCCPos2[idd][1], ARaceCCPos2[idd][2], 0.0, 0.0, 0.0, 20.0);
						}
						else
						{
							SetPlayerRaceCheckpoint(playerid, 3, ARaceCCPos2[idd][0], ARaceCCPos2[idd][1], ARaceCCPos2[idd][2], ARaceCCPos2[iddd][0], ARaceCCPos2[iddd][1], ARaceCCPos2[iddd][2], 20.0);
						}
						PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					}
					else if(RaceCP[playerid] == 22)
					{
						new string[128],namee[30],sum;
						GetPlayerName(playerid, namee, sizeof(namee));
						if(ARacePos[playerid] == 1)
						{
							sum = racep[PlayerInfo[playerid][pRaceG]] * 5000;
							format(string, sizeof(string),"* %s finished race %dst and received $%s.",namee,ARacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							Update(playerid, pCashx);
						}
						if(ARacePos[playerid] == 2)
						{
							sum = racep[PlayerInfo[playerid][pRaceG]] * 2000;
							format(string, sizeof(string),"* %s finished race %dnd and received $%s.",namee,ARacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							Update(playerid, pCashx);
						}
						if(ARacePos[playerid] == 3)
						{
							sum = racep[PlayerInfo[playerid][pRaceG]] * 1000;
							format(string, sizeof(string),"* %s finished race %drd and received $%s.",namee,ARacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							Update(playerid, pCashx);
						}
						if(ARacePos[playerid] > 3) format(string, sizeof(string),"* %s finished race %dth.",namee,ARacePos[playerid]);
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG]) SendClientMessage(x, COLOR_YELLOW, string);
						}
						PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
						if(ARacePos[playerid] == 1) format(string, sizeof(string),"~r~You finished race:~n~~g~%dst",ARacePos[playerid]);
						if(ARacePos[playerid] == 2) format(string, sizeof(string),"~r~You finished race:~n~~g~%dnd",ARacePos[playerid]);
						if(ARacePos[playerid] == 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%drd",ARacePos[playerid]);
						if(ARacePos[playerid] > 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%dth",ARacePos[playerid]);
						GameTextForPlayer(playerid, string, 5000, 4);
						SetPlayerHealthEx(playerid, 100.0);
						curatj[playerid] = 0;
						for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
						PlayerTextDrawHide(playerid, PaintBallText[playerid]);
						racep[PlayerInfo[playerid][pRaceG]]--;
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid,0);
						SetPlayerPos(playerid, 1154.2588,-1457.9507,15.7969);
						RaceCP[playerid] = 0;
						DisablePlayerRaceCheckpoint(playerid);
						DisableRemoteVehicleCollisions(playerid, 0);
						StopAudioStreamForPlayer(playerid);
						PlayerInfo[playerid][pRaceG] = -1;
						curatj[playerid] = 0;
						PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
						for(new cs; cs < 20; cs++)
						{
							if(rcarid[1][cs] == GetPlayerVehicleID(playerid))
							{
								DestroyVehicle(rcarid[1][cs]);
								rcarid[1][cs] = 0;
							}
						}
					}
					RaceCP[playerid]++;
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You are not in your car.");
	}
	if(CP[playerid] == 99)
	{
	   DisablePlayerRaceCheckpoint(playerid);
	   CP[playerid] = 0;
	}
	if(CheckBus[playerid] >= 1 && ccar && IsABus(tmpcar))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Opreste autobuzul in checkpoint-ul rosu.");
		timerbus[playerid] = SetTimerEx("BusDriverCheck", 3000, 1, "i", playerid);
	}
	new string[MAX_STRING];
	if(CP[playerid] == 100 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 0, 1045.2626,-1809.4169,13.2637,849.1470,-1767.0336,13.0397, 4.0);
		CP[playerid] = 101;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~1~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 101 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 849.1470,-1767.0336,13.0397,635.5740,-1712.8594,13.8757, 4.0);
		CP[playerid] = 102;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~2~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 102 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 635.5740,-1712.8594,13.8757,605.3907,-1672.5651,15.5764, 4.0);
		CP[playerid] = 103;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~3~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 103 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 605.3907,-1672.5651,15.5764,485.4009,-1658.0165,21.8713, 4.0);
		CP[playerid] = 104;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~4~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 104 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 485.4009,-1658.0165,21.8713,325.8313,-1640.2993,32.7597, 4.0);
		CP[playerid] = 105;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~5~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 105 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 325.8313,-1640.2993,32.7597,246.6969,-1561.6211,32.6957, 4.0);
		CP[playerid] = 106;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~6~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 106 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 246.6969,-1561.6211,32.6957,274.5565,-1478.2930,29.9500, 4.0);
		CP[playerid] = 107;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~7~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 107 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 274.5565,-1478.2930,29.9500,193.8137,-1506.6576,12.2538, 4.0);
		CP[playerid] = 108;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~8~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 108 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 0,193.8137,-1506.6576,12.2538,324.4604,-1400.7098,13.7601, 4.0);
		CP[playerid] = 109;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~9~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 109 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 324.4604,-1400.7098,13.7601,509.5384,-1282.4365,15.4881, 4.0);
		CP[playerid] = 110;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~10~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
    }
	else if(CP[playerid] == 110 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 509.5384,-1282.4365,15.4881,599.4775,-1228.8478,17.5563, 4.0);
		CP[playerid] = 111;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~11~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 111 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 0, 599.4775,-1228.8478,17.5563,623.2209,-1238.7283,17.5613, 4.0);
		CP[playerid] = 112;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~12~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 112 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid,0, 623.2209,-1238.7283,17.5613,627.9891,-1319.5573,13.2599, 4.0);
		CP[playerid] = 113;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~13~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 113 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	   	DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid,0, 627.9891,-1319.5573,13.2599,716.7220,-1322.1327,13.0510, 4.0);
		CP[playerid] = 114;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~14~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 114 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid,0, 716.7220,-1322.1327,13.0510,864.1711,-1327.4478,13.1957, 4.0);
		CP[playerid] = 115;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~15~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 115 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid,0, 864.1711,-1327.4478,13.1957,1046.0955,-1328.6143,13.0441, 4.0);
		CP[playerid] = 116;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~16~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 116 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid,0, 1046.0955,-1328.6143,13.0441,1054.7998,-1383.8990,13.1580, 4.0);
		CP[playerid] = 117;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~17~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 117 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid,0, 1054.7998,-1383.8990,13.1580,1055.3480,-1464.9629,13.0095, 4.0);
		CP[playerid] = 118;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~18~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 118 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 0,1055.3480,-1464.9629,13.0095,1035.1870,-1557.0361,13.0122, 4.0);
		CP[playerid] = 119;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~19~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 119 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 0, 1035.1870,-1557.0361,13.0122,1084.2502,-1574.0663,13.0356, 4.0);
		CP[playerid] = 120;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~20~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 120 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 0, 1084.2502,-1574.0663,13.0356,1295.7023,-1582.3715,13.0348, 4.0);
		CP[playerid] = 121;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~21~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 121 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 0, 1295.7023,-1582.3715,13.0348,1295.5782,-1832.5750,13.3828, 4.0);
		CP[playerid] = 122;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~22~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 122 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 1, 1295.5782,-1832.5750,13.3828,0.0,0.0,0.0, 4.0);
		CP[playerid] = 123;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~23~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 123 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
        PlayerTextDrawHide(playerid, DMVexam[playerid]);
        PlayerTextDrawHide(playerid, DMVcheck[playerid]);
		DisablePlayerRaceCheckpoint(playerid);
		PlayerInfo[playerid][pCarLic] = 1;
		PlayerInfo[playerid][pCarLicT] = 100;
		TakingLesson[playerid] = 0;
		DestroyVehicle(examcar[playerid]);
		DisableRemoteVehicleCollisions(playerid, 0);
		examcar[playerid] = -1;
		new str1[128];
		mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `CarLic`='1',`CarLicT`='100' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,str1,"","");
		SS(playerid, COLOR_WHITE, "Felicitari! Ai primit permisul de conducere!", "Exam finished! You can now drive any car!");
		CP[playerid] = 0;
	}
    return 1;
}

// OnPlayerLeaveRaceCheckpoint
public OnPlayerLeaveRaceCheckpoint(playerid)
{
	new tmpcar = GetPlayerVehicleID(playerid),
		ccar = IsPlayerInAnyVehicle(playerid);
	if(CheckBus[playerid] >= 1 && ccar && IsABus(tmpcar))
	{
		KillTimer(timerbus[playerid]);
	}
	return 1;
}

public OnSecondTimer()
{
	foreach(new i : Player)
	{
		if(CloseBMatch[i] > 0)
		{
			CloseBMatch[i]--;
			if(CloseBMatch[i] == 0)
			{
				BJMatch[i] = 0;
				BDeal[i] = 0;
				BDealerScore[i] = 0;
				BlackJackPlayerScore[i] = 0;
				BDealerCards[i] = 0;
				BlackJackPlayerCards[i] = 0;
				for(new x; x < 5; x++)
				{
					BDealerCard[i][x] = 0;
					BlackJackPlayerCard[i][x] = 0;
				}
				new text[100];
				PlayerTextDrawSetString(i, BJDealAmountText[i], "0$");
				format(text, sizeof(text), "%s$", FormatNumber(GetPlayerCash(i)));
				PlayerTextDrawSetString(i, BJBalanceAmountText[i], text);
				PlayerTextDrawSetString(i, BJDealerScoreText[i], "DEALER: 0");
				PlayerTextDrawSetString(i, BJPlayerScoreText[i], "PLAYER: 0");
				PlayerTextDrawSetString(i, BJDealerCard1[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJDealerCard2[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJDealerCard3[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJDealerCard4[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJDealerCard5[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJPlayerCard1[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJPlayerCard2[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJPlayerCard3[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJPlayerCard4[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJPlayerCard5[i], "LD_CARD:cdback");
				PlayerTextDrawHide(i, BJWinText[i]);
			}
		}
	}
	return 1;
}

// OnPlayerEnterCheckpoint
public OnPlayerEnterCheckpoint(playerid)
{
    if(XCheckpoints[playerid] == 0)
    {
       LastCheckpoint[playerid] = gettime();
    }
    XCheckpoints[playerid]++;
    if(XCheckpoints[playerid] == 2)
    {
        if((gettime() - LastCheckpoint[playerid]) <= 2)
        {
			if(UsedFind[playerid] == 0)
			{
				new string[256];
				new playername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, playername, sizeof(playername));
				format(string, 256, "(N) %s (%d, level %d) may be using teleport hack.", playername, playerid, PlayerInfo[playerid][pLevel]);
				ABroadCast(COLOR_RED,string,1);
				XCheckpoints[playerid] = 0;
				LastCheckpoint[playerid] = 0;
			}
			else
			{
				XCheckpoints[playerid]=0;
			}
        }else
        if((gettime() - LastCheckpoint[playerid]) > 2)
        {
            XCheckpoints[playerid]=0;
        }
	}
	new string[MAX_STRING];
	if(GotoMats[playerid] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    GotoMats[playerid] = 0;
	    SendClientMessage(playerid, COLOR_YELLOW, "Foloseste /getmats aici pentru a colecta materiale.");
	}
	else if(MatsHolding[playerid] == 1 && CP[playerid] == 6901)
	{
	    DisablePlayerCheckpoint(playerid);
		MatsHolding[playerid] = 0;
		CP[playerid] = 0;
		new totalmats,strings[64];
		if(SvarInfo[2][svValue] == 0) totalmats = 1000 + PlayerInfo[playerid][pArmsSkill]*300;
		else totalmats = 1200 + PlayerInfo[playerid][pArmsSkill]*300;
		PlayerInfo[playerid][pMats] += totalmats;
		Update(playerid,pMatsx);
		format(strings,sizeof(strings),"Ai colectat %s materiale.",FormatNumber(totalmats));
		SendClientMessage(playerid, COLOR_WHITE, strings);
		PlayerInfo[playerid][pArmsRem]--;
		PlayerInfo[playerid][pArmsTimes]++;
		Update(playerid,pArmsRemx);
		Update(playerid,pArmsTimesx);
		if(PlayerInfo[playerid][pQuest1] == 5)
		{
			if(PlayerInfo[playerid][pQuestNeed1] > PlayerInfo[playerid][pQuestProgress1])
			{
				PlayerInfo[playerid][pQuestProgress1] += totalmats;
				Update(playerid, pQuestProgress1x);
				if(PlayerInfo[playerid][pQuestProgress1] >= PlayerInfo[playerid][pQuestNeed1])
				{
					FinishQuest1(playerid, 5);
				}
				else
				{
					new str[128];
					if(PlayerInfo[playerid][pLanguage] == 1)
					{
						format(str, sizeof(str),"Quest [Collect %d materials] progress: %d/%d",PlayerInfo[playerid][pQuestNeed1],PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
						SendClientMessage(playerid, COLOR_YELLOW, str);
					}
					else
					{
						format(str, sizeof(str),"Progres pentru misiunea [Colecteaza %d materiale]: %d/%d",PlayerInfo[playerid][pQuestNeed1],PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
						SendClientMessage(playerid, COLOR_YELLOW, str);
					}
				}
			}
		}
		if(PlayerInfo[playerid][pArmsSkill] <= 5)
		{
			if(PlayerInfo[playerid][pArmsRem] <= 0)
			{
			    PlayerInfo[playerid][pArmsSkill]++;
   				if(PlayerInfo[playerid][pArmsSkill] == 2)
				{
					PlayerInfo[playerid][pArmsRem] = 34;
				}
				else if(PlayerInfo[playerid][pArmsSkill] == 3)
				{
					PlayerInfo[playerid][pArmsRem] = 49;
				}
				else if(PlayerInfo[playerid][pArmsSkill] == 4)
				{
					PlayerInfo[playerid][pArmsRem] = 89;
				}
				else if(PlayerInfo[playerid][pArmsSkill] == 5)
				{
					PlayerInfo[playerid][pArmsRem] = 99;
				}
		    	Update(playerid,pArmsSkillx);
		    	Update(playerid,pArmsRemx);
				new stringe[128];
			    format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pArmsSkill]);
				format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pArmsSkill]);
			    SS(playerid, COLOR_YELLOW, string, stringe);
			}
		}
	}
	else if(TaxiAccepted[playerid] != -1)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You have reached your destination!");
		TaxiAccepted[playerid] = -1;
		DisablePlayerCheckpoint(playerid);
		targetfind[playerid] = -1;
		UsedFind[playerid] = 0;
	}
	else if(MedicAccepted[playerid] != -1)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You have reached your destination!");
		MedicAccepted[playerid] = -1;
		DisablePlayerCheckpoint(playerid);
		targetfind[playerid] = -1;
		UsedFind[playerid] = 0;
	}
	else if(CarJacker[playerid] == 1)
	{
	    new str[MAX_STRING],
	    	money = 8000 + random(7000);
	    DisablePlayerCheckpoint(playerid);
	    CarJacker[playerid] = 0;
	    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	    GivePlayerCash(playerid, money);
	    Update(playerid, pCashx);
	    format(str,sizeof(str),"You have dropped a vehicle at the crane and earned $%s!", FormatNumber(money));
	    SendClientMessage(playerid, COLOR_WHITE, str);
	    JackAcc[playerid] = 120;
	}
	else if(Trucker[playerid] >= 1)
	{
    	new pertransport,skillmoney,totalmoney;
    	if(!IsPlayerInAnyVehicle(playerid)) return 1;
    	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && IsATruck(GetPlayerVehicleID(playerid))) return SS(playerid, COLOR_WHITE, "Nu ai niciun trailer atasat!", "You don't have a trailer attached!");
   		DisablePlayerCheckpoint(playerid);
    	DestroyVehicle(viddd[playerid]);
    	viddd[playerid] = 0;
    	if(Trucker[playerid] == 1)
    	{
     		if(SvarInfo[2][svValue] == 0) pertransport = 10000 + random(10000);
     		else pertransport = 11000 + random(11000);
    		Trucker2[playerid] = 2;
    		SetPlayerCheckpoint(playerid,CHKTruck2[2][0],CHKTruck2[2][1],CHKTruck2[2][2],5.0);
		}
		else if(Trucker[playerid] == 2)
		{
  			if(SvarInfo[2][svValue] == 0) pertransport = 17000 + random(10000);
  			else pertransport = 18700 + random(11000);
 			Trucker2[playerid] = 2;
 			SetPlayerCheckpoint(playerid,CHKTruck2[4][0],CHKTruck2[4][1],CHKTruck2[4][2],5.0);
		}
		else if(Trucker[playerid] == 3)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 17000 + random(10000);
		    else pertransport = 18700 + random(11000);
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[11][0],CHKTruck2[11][1],CHKTruck2[11][2],5.0);
		}
		else if(Trucker[playerid] == 4)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 17000 + random(10000);
		    else pertransport = 18700 + random(11000);
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[10][0],CHKTruck2[10][1],CHKTruck2[10][2],5.0);
		}
		else if(Trucker[playerid] == 5)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 10000 + random(10000);
		    else pertransport = 11000 + random(11000);
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[7][0],CHKTruck2[7][1],CHKTruck2[7][2],5.0);
		}
		else if(Trucker[playerid] == 6)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 25000 + random(15000);
		    else pertransport = 27500 + random(16500);
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[6][0],CHKTruck2[6][1],CHKTruck2[6][2],5.0);
		}
		else if(Trucker[playerid] == 7)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 10000 + random(10000);
		    else pertransport = 11000 + random(11000);
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[8][0],CHKTruck2[8][1],CHKTruck2[8][2],5.0);
		}
		else if(Trucker[playerid] == 8)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 10000 + random(10000);
		    else pertransport = 11000 + random(11000);
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[9][0],CHKTruck2[9][1],CHKTruck2[9][2],5.0);
		}
		else if(Trucker[playerid] == 9)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 10000 + random(10000);
		    else pertransport = 11000 + random(11000);
	    	Trucker2[playerid] = 2;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[3][0],CHKTruck2[3][1],CHKTruck2[3][2],5.0);
		}
		else if(Trucker[playerid] == 10)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 17000 + random(10000);
		    else pertransport = 18700 + random(11000);
	    	Trucker2[playerid] = 2;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[5][0],CHKTruck2[5][1],CHKTruck2[5][2],5.0);
		}
		else if(Trucker[playerid] == 11)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 10000 + random(10000);
		    else pertransport = 11000 + random(11000);
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[12][0],CHKTruck2[12][1],CHKTruck2[12][2],5.0);
		}
		else if(Trucker[playerid] == 12)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 27000 + random(15000);
		    else pertransport = 29700 + random(16500);
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[13][0],CHKTruck2[13][1],CHKTruck2[13][2],5.0);
		}
		else if(Trucker[playerid] == 13)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 10000 + random(10000);
		    else pertransport = 11000 + random(11000);
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[17][0],CHKTruck2[17][1],CHKTruck2[17][2],5.0);
		}
		else if(Trucker[playerid] == 14)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 17000 + random(10000);
		    else pertransport = 18700 + random(11000);
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[15][0],CHKTruck2[15][1],CHKTruck2[15][2],5.0);
		}
		else if(Trucker[playerid] == 15)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 17000 + random(10000);
		    else pertransport = 18700 + random(11000);
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[16][0],CHKTruck2[16][1],CHKTruck2[16][2],5.0);
		}
		else if(Trucker[playerid] == 16)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 10000 + random(10000);
		    else pertransport = 11000 + random(11000);
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[14][0],CHKTruck2[14][1],CHKTruck2[14][2],5.0);
		}
		else if(Trucker[playerid] == 17)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 27000 + random(15000);
		    else pertransport = 29700 + random(16500);
	    	Trucker2[playerid] = 1;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[0][0],CHKTruck2[0][1],CHKTruck2[0][2],5.0);
		}
		else if(Trucker[playerid] == 18)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = 10000 + random(10000);
		    else pertransport = 11000 + random(11000);
	    	Trucker2[playerid] = 2;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[1][0],CHKTruck2[1][1],CHKTruck2[1][2],5.0);
		}
		if(SvarInfo[2][svValue] == 0) skillmoney = PlayerInfo[playerid][pTruckSkill] * 3000;
		else skillmoney = PlayerInfo[playerid][pTruckSkill] * 3300;
		totalmoney = pertransport + skillmoney;
		PlayerInfo[playerid][pTruckRem]--;
		PlayerInfo[playerid][pTruckTimes]++;
		GivePlayerCash(playerid,totalmoney);
		Update(playerid,pCashx);
		Update(playerid,pTruckRemx);
		Update(playerid,pTruckTimesx);
		new stringe[128];
		if(PlayerInfo[playerid][pTruckSkill] <= 5)
		{
			if(PlayerInfo[playerid][pTruckRem] <= 0)
			{
			    PlayerInfo[playerid][pTruckSkill]++;
   				if(PlayerInfo[playerid][pTruckSkill] == 2)
				{
					PlayerInfo[playerid][pTruckRem] = 34;
				}
				else if(PlayerInfo[playerid][pTruckSkill] == 3)
				{
					PlayerInfo[playerid][pTruckRem] = 49;
				}
				else if(PlayerInfo[playerid][pTruckSkill] == 4)
				{
					PlayerInfo[playerid][pTruckRem] = 89;
				}
				else if(PlayerInfo[playerid][pTruckSkill] == 5)
				{
					PlayerInfo[playerid][pTruckRem] = 99;
				}
		    	Update(playerid,pTruckSkillx);
		    	Update(playerid,pTruckRemx);
			    format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pTruckSkill]);
				format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pTruckSkill]);
			    SS(playerid, COLOR_YELLOW, string, stringe);
			}
		}
		Trucker[playerid] = 0;
		format(string,sizeof(string),"(+) Ai primit $%s pentru livrarea marfii.",FormatNumber(totalmoney));
		format(stringe,sizeof(stringe),"(+) You received $%s for delivery.",FormatNumber(totalmoney));
		SendClientMessage(playerid, COLOR_GREEN, string);
	}
	else if(Trucker2[playerid] == 1) //Langa Gas Station(primul)
	{
	    SetTimerEx("Truckerr1", 200, 0, "i",playerid);
	}
	else if(Trucker2[playerid] == 2)//IN LS
	{
	    SetTimerEx("Truckerr2", 200, 0, "i",playerid);
	}
	else if(Trucker2[playerid] == 3)//IN LV
	{
	    SetTimerEx("Truckerr3", 200, 0, "i",playerid);
	}
	else if(Trucker2[playerid] == 4)//IN SF
	{
	    SetTimerEx("Truckerr4", 200, 0, "i",playerid);
	}
	new lol = GetPlayerVehicleID(playerid);
	if(CP[playerid] == 34) // tow car
	{
	    if(IsTrailerAttachedToVehicle(lol) == 0) return SS(playerid, COLOR_WHITE, "Nu ai nici o masina atasata.", "You don't have a car attached.");
	    if(TowAcc[playerid] == 1) return SendClientMessage(playerid, COLOR_GREY, "You can't tow a vehicle so fast. You can tow a car / 2 minute! Wait here.");
		DisablePlayerCheckpoint(playerid);
		CP[playerid] = 0;
		TowAcc[playerid] = 1;
		new towedcar;
		towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
		SetVehicleToRespawn(towedcar);
		GivePlayerCash(playerid, 15000);
		SCM(playerid,COLOR_WHITE,"Good job! You got $15000 for towing this car! You can tow another car in 2 minutes!");
		Update(playerid, pCashx);
		SetTimerEx("TowAgain", 120000, 0, "i", playerid);
	}
	else if(CP[playerid] == 43) // disable point
	{
		CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You have reached your destination.");
	}
	else if(CP[playerid] == 1012) //disable vehicle
	{
		CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You have reached your vehicle.");
	}
	else if(CP[playerid] == 10972) //GARBAGE
	{
		CP[playerid] = 0;
		GameTextForPlayer(playerid, "~w~press ~r~y~w~ to pickup the trash bag.", 5000, 3);
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid] == 10973) //GARBAGE
	{
		DisablePlayerCheckpoint(playerid);
		CP[playerid] = 0;
		if(GetPlayerVehicleID(playerid) == JobCar[playerid])
		{
			if(GarbageInCar[GetPlayerVehicleID(playerid)] == 0)
			{
				SS(playerid, COLOR_LIGHTGREEN3, "Nu exista gunoi in masina de gunoi.", "There is no trash in your vehicle.");
			}
			else
			{
				PlayerInfo[playerid][pGarbageRem]--;
				PlayerInfo[playerid][pGarbageTimes]++;
				Update(playerid,pGarbageRemx);
				Update(playerid,pGarbageTimesx);
				if(PlayerInfo[playerid][pGarbageSkill] <= 5)
				{
					if(PlayerInfo[playerid][pGarbageRem] <= 0)
					{
						PlayerInfo[playerid][pGarbageSkill]++;
						if(PlayerInfo[playerid][pGarbageSkill] == 2)
						{
							PlayerInfo[playerid][pGarbageRem] = 34;
						}
						else if(PlayerInfo[playerid][pGarbageSkill] == 3)
						{
							PlayerInfo[playerid][pGarbageRem] = 49;
						}
						else if(PlayerInfo[playerid][pGarbageSkill] == 4)
						{
							PlayerInfo[playerid][pGarbageRem] = 89;
						}
						else if(PlayerInfo[playerid][pGarbageSkill] == 5)
						{
							PlayerInfo[playerid][pGarbageRem] = 99;
						}
						Update(playerid,pGarbageSkillx);
						Update(playerid,pGarbageRemx);
						new stringe[128];
						format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pGarbageSkill]);
						format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pGarbageSkill]);
						SS(playerid, COLOR_YELLOW, string, stringe);
					}
				}
				new money,strings[128],stringee[128];
				if(SvarInfo[2][svValue] == 0) money = GarbageInCar[GetPlayerVehicleID(playerid)] * (1200 + random(200));
				else money = GarbageInCar[GetPlayerVehicleID(playerid)] * (1440 + random(240));
				GivePlayerCash(playerid, money);
				Update(playerid, pCashx);
				format(strings, sizeof(strings),"(+) Ai primit $%s pentru %d kg de gunoi.",FormatNumber(money),GarbageInCar[GetPlayerVehicleID(playerid)]);
				format(stringee, sizeof(stringee),"(+) You received $%s for %d kg of garbage.",FormatNumber(money),GarbageInCar[GetPlayerVehicleID(playerid)]);
				SS(playerid, COLOR_GREEN, strings, stringee);
				if(PlayerInfo[playerid][pQuest2] == 4)
				{
					if(PlayerInfo[playerid][pQuestNeed2] > PlayerInfo[playerid][pQuestProgress2])
					{
						PlayerInfo[playerid][pQuestProgress2] += GarbageInCar[GetPlayerVehicleID(playerid)];
						Update(playerid, pQuestProgress2x);
						if(PlayerInfo[playerid][pQuestProgress2] >= PlayerInfo[playerid][pQuestNeed2])
						{
							FinishQuest2(playerid, 4);
						}
						else
						{
							new str[128];
							if(PlayerInfo[playerid][pLanguage] == 1)
							{
								format(str, sizeof(str),"Quest [Collect and unload %d KG of garbage] progress: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
								SendClientMessage(playerid, COLOR_YELLOW, str);
							}
							else
							{
								format(str, sizeof(str),"Progres pentru misiunea [Colecteaza si descarca %d KG de gunoi]: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
								SendClientMessage(playerid, COLOR_YELLOW, str);
							}
						}
					}
				}
				GarbageInCar[GetPlayerVehicleID(playerid)] = 0;
			}
		}
		else return SS(playerid, COLOR_LIGHTGREEN3, "EROARE: Nu esti intr-o masina de gunoi.", "ERROR: You are not in a garbage truck.");
	}
	else if(CP[playerid] == 6868)
	{
		DisablePlayerCheckpoint(playerid);
		CP[playerid] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "You have reached your destination.");
	}
	else if(BusinessRob[playerid] == 2)//Robbing1
	{
	    new cashr,
	        str[128],
	        rand = 180000 + random(70000);
	    if(PlayerInfo[playerid][pRobSkill] == 1)
	    {
	        cashr = rand;
		}
	    else if(PlayerInfo[playerid][pRobSkill] == 2)
	    {
        	cashr = (50000 + rand);
		}
		else if(PlayerInfo[playerid][pRobSkill] == 3)
	    {
        	cashr = (100000 + rand);
		}
		else if(PlayerInfo[playerid][pRobSkill] == 4)
	    {
        	cashr = (150000 + rand);
		}
		else if(PlayerInfo[playerid][pRobSkill] == 5)
	    {
        	cashr = (200000 + rand);
		}
		else if(PlayerInfo[playerid][pRobSkill] >= 6)
	    {
        	cashr = (250000 + rand);
		}
	    DisablePlayerCheckpoint(playerid);
		GivePlayerCash(playerid, cashr);
    	format(str, 128,"(+) Money earned from the rob: $%s. Rob time: %d seconds.", FormatNumber(cashr), RobTime[playerid]);
    	SendClientMessage(playerid, COLOR_GREEN, str);
    	BusinessRob[playerid] = 1;
		Update(playerid, pCashx);
		new rando = random(sizeof(gRandomRob2));
		SetPlayerCheckpoint(playerid, gRandomRob2[rando][0],gRandomRob2[rando][1],gRandomRob2[rando][2], 4.0);
	}
	else if(BusinessRob[playerid] == 1)//Robbing2
	{
	    new cashr,
	        str[128],
	        rand = 180000 + random(70000);
	    if(PlayerInfo[playerid][pRobSkill] == 1)
	    {
	        cashr = rand;
		}
	    else if(PlayerInfo[playerid][pRobSkill] == 2)
	    {
        	cashr = (50000 + rand);
		}
		else if(PlayerInfo[playerid][pRobSkill] == 3)
	    {
        	cashr = (100000 + rand);
		}
		else if(PlayerInfo[playerid][pRobSkill] == 4)
	    {
        	cashr = (150000 + rand);
		}
		else if(PlayerInfo[playerid][pRobSkill] == 5)
	    {
        	cashr = (200000 + rand);
		}
		else if(PlayerInfo[playerid][pRobSkill] >= 6)
	    {
        	cashr = (250000 + rand);
		}
		PlayerInfo[playerid][pRobTimes]++;
		PlayerInfo[playerid][pRobRem]--;
		Update(playerid, pRobTimesx);
		Update(playerid, pRobRemx);
	    DisablePlayerCheckpoint(playerid);
		GivePlayerCash(playerid, cashr);
    	format(str, 128,"(+) Money earned from the rob: $%s. Rob time: %d seconds.", FormatNumber(cashr), RobTime[playerid]);
    	SendClientMessage(playerid, COLOR_GREEN, str);
    	BusinessRob[playerid] = 0;
		RobTime[playerid] = -1;
		Update(playerid, pCashx);
		if(PlayerInfo[playerid][pRobSkill] <= 5)
		{
			if(PlayerInfo[playerid][pRobRem] <= 0)
			{
				PlayerInfo[playerid][pRobSkill]++;
				if(PlayerInfo[playerid][pRobSkill] == 2)
				{
					PlayerInfo[playerid][pRobRem] = 34;
				}
				else if(PlayerInfo[playerid][pRobSkill] == 3)
				{
					PlayerInfo[playerid][pRobRem] = 49;
				}
				else if(PlayerInfo[playerid][pRobSkill] == 4)
				{
					PlayerInfo[playerid][pRobRem] = 89;
				}
				else if(PlayerInfo[playerid][pRobSkill] == 5)
				{
					PlayerInfo[playerid][pRobRem] = 99;
				}
				Update(playerid,pRobSkillx);
				Update(playerid,pRobRemx);
				new stringe[128];
				format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru rob!",PlayerInfo[playerid][pRobSkill]);
				format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for rob!",PlayerInfo[playerid][pRobSkill]);
				SS(playerid, COLOR_YELLOW, string, stringe);
			}
		}
	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_LOCATE:
		    {
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			}
		}
	}
	return 1;
}


public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	new Menu:CurrentMenu = GetPlayerMenu(playerid);
	if(!IsValidMenu(CurrentMenu)) return 1;
	ShowMenuForPlayer(CurrentMenu, playerid);
	TogglePlayerControllable(playerid,1);
	return 1;
}

public SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetPlayerCheckpoint(i,allx,ally,allz, radi);
			if (num != 255)
			{
				gPlayerCheckpointStatus[i] = num;
			}
		}
	}
	return 1;
}

public SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(gTeam[i] == 2)
			{
				SetPlayerCheckpoint(i,allx,ally,allz, radi);
			}
		}
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	new string[500],
		vehicleid = GetPlayerVehicleID(playerid);
	if( newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_PASSENGER)
	{
	    StopAudioStreamForPlayer(playerid);
		Listening[playerid] = -1;
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		PlayerTextDrawHide(playerid, Fuell[playerid]);
		PlayerTextDrawHide(playerid, Speedd[playerid]);
		TextDrawHideForPlayer(playerid, ArataKM);
		PlayerTextDrawHide(playerid, Odom[playerid]);
		PlayerTextDrawHide(playerid, carlocked[playerid]);
		if(pizzaj[playerid] == 1)
		{
			failpizza[playerid] = 120;
		}
		if(farmerc[playerid] == 1)
		{
			farmerc[playerid] = 0;
			farmertime[playerid] = 1;
			PlayerTextDrawHide(playerid, farmjob[playerid]);
			PlayerTextDrawHide(playerid, farmbox[playerid]);
			PlayerTextDrawHide(playerid, farmtime[playerid]);
			PlayerTextDrawHide(playerid, farmspeed[playerid]);
			PlayerTextDrawHide(playerid, farmwanted[playerid]);
			KillTimer(timerfarmm[playerid]);
		}
		if(CarJacker[playerid] > 0)
		{
		    DisablePlayerCheckpoint(playerid);
		    CarJacker[playerid] = 0;
		    JackAcc[playerid] = 0;
		}
		if(Trucker2[playerid] == 1)
		{
			Trucker2[playerid] = 0;
 			DisablePlayerCheckpoint(playerid);
		}
		if(Trucker[playerid] >= 1)
		{
		   	RemovePlayerFromVehicle(playerid);
   			restruck[playerid] = SetTimerEx("RespawnTruck", 1, 0, "i",playerid);
  			RemovePlayerFromVehicle(playerid);
		   	Trucker[playerid] = 0;
	        Trucker2[playerid] = 0;
	        DestroyVehicle(viddd[playerid]);
      		viddd[playerid] = 0;
      		SetVehicleToRespawn(TruckID[playerid]);
      		TruckID[playerid] = 0;
      		DisablePlayerCheckpoint(playerid);
    		restruck[playerid] = SetTimerEx("RespawnTruck", 1, 0, "i",playerid);
		}
		if(CP[playerid] == 340 || CP[playerid] == 341 || CP[playerid] == 342 || CP[playerid] == 343 || CP[playerid] == 344 || CP[playerid] == 345 || CP[playerid] == 346 || CP[playerid] == 347)
		{
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
		}
		if(CP[playerid] == 34)
		{
		    TowAcc[playerid] = 1;
		    CP[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
		    SetTimerEx("TowAgain", 120000, 0, "i", playerid);
		}
		if(TaxiTimer[playerid] > 0 && TaxiDriver[playerid] != -1)
		{
			TaxiTimer[playerid] = 0;
			PlayerTextDrawHide(playerid, RentCarText[playerid]);
			new name[30], name1[30];
			GetPlayerName(TaxiDriver[playerid], name, sizeof(name));
			GetPlayerName(playerid, name1, sizeof(name1));
			format(string, sizeof(string), "* %s gets off the cab and pays $%s to %s.", name1, FormatNumber(TaxiMoneySpent[playerid]), name);
			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			if(TaxiMoneySpent[playerid] >= 1000)
			{
				new varxx[256],are;
				format(varxx, sizeof(varxx), "SELECT * FROM `antifraudaraport` WHERE `pid1`='%d' AND `pid2`='%d'", PlayerInfo[TaxiDriver[playerid]][pSQLID], PlayerInfo[playerid][pSQLID]);
				new Cache: ab = mysql_query(SQL, varxx);
				if(cache_get_row_count() > 0) are = 1;
				cache_delete(ab);
				if(are == 0)
				{
					mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport1 = Raport1+1 WHERE name = '%s'", PlayerInfo[TaxiDriver[playerid]][pNormalName]);
					mysql_tquery(SQL,varxx,"","");
					mysql_format(SQL, varxx, sizeof(varxx), "INSERT INTO `antifraudaraport` (`pid1`,`pid2`,`time`) VALUES ('%d','%d','%d')", PlayerInfo[TaxiDriver[playerid]][pSQLID], PlayerInfo[playerid][pSQLID], (gettime() + 900));
					mysql_tquery(SQL,varxx,"","");
				}
			}
			TaxiMoneySpent[playerid] = 0;
			TaxiDriver[playerid] = -1;
		}
		if(TaxiFare[playerid] > 0)
		{
			PlayerTextDrawHide(playerid, RentCarText[playerid]);
			TaxiFare[playerid] = 0;
			TaxiMoneyEarned[playerid] = 0;
			foreach(new x : Player)
			{
				if(TaxiDriver[x] == playerid)
				{
					TaxiDriver[x] = -1;
					TaxiMoneySpent[x] = 0;
					TaxiTimer[x] = 0;
					PlayerTextDrawHide(x, RentCarText[playerid]);
				}
			}
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
	}
	if(newstate == PLAYER_STATE_WASTED)
	{
	    StopAudioStreamForPlayer(playerid);
	    if(PlayerInfo[playerid][pWantedLevel] >= 1)
		{
		    new copkill=0, price = PlayerInfo[playerid][pWantedLevel] * 1000, str23[MAX_STRING], string3[256], string4[256], lastname[30], timejail;
		    if((PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 3 && PlayerInfo[playerid][pMember] != 8))
			{
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
					{
					    if(IsACop(i) && CrimInRange(50.0, playerid,i) && OnDuty[i] == 1)
						{
							if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
							{
								new streap[MAX_PLAYER_NAME];
								GetPlayerName(playerid, streap, sizeof(streap));
								GetPlayerName(i, lastname, sizeof(lastname));
								format(string3, sizeof(string3), "Ai primit $%d bonus pentru prinderea suspectului %s.", price, streap);
								SendClientMessage(i, COLOR_DBLUE, string3);
								GameTextForPlayer(i, "Running Suspect bonus!", 5000, 1);
								ConsumingMoney[i] = 1;
								GivePlayerCash(i, price);
								Update(i, pCashx);
								new idfac = PlayerInfo[i][pMember];
								DynamicFactions[idfac][fBank] += price;
								mysql_format(SQL,str23,sizeof(str23),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[idfac][fBank], idfac);
								mysql_tquery(SQL,str23,"","");
								PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
								copkill = 1;
								if(SvarInfo[1][svValue] == 0) timejail = PlayerInfo[playerid][pWantedLevel]*300;
								else timejail = PlayerInfo[playerid][pWantedLevel]*150;
								format(string, sizeof(string), "Dispatch: %s has been killed by No One and will be in jail for %d seconds, over.",streap,timejail);
								new varxx[256];
								mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport3 = Raport3+1 WHERE name = '%s'",PlayerInfo[i][pNormalName]);
								mysql_tquery(SQL,varxx,"","");
							}
						}
					}
				}
				if(copkill == 1)
				{
					if(SvarInfo[1][svValue] == 0) PlayerInfo[playerid][pJailTime] = (PlayerInfo[playerid][pWantedLevel])*(300);
					else PlayerInfo[playerid][pJailTime] = (PlayerInfo[playerid][pWantedLevel])*(150);
					format(string4, sizeof(string4), "Because you got killed, you lost $%s and you will be taken to jail. You are no longer a criminal.", FormatNumber(price));
					SendClientMessage(playerid, COLOR_LIGHTRED, string4);
					PlayerInfo[playerid][pJailed] = 1;
					PlayerInfo[playerid][pWantedLevel] = 0;
					PlayerInfo[playerid][pWantedDeaths] += 1;
					WantedPoints[playerid] = 0;
					GivePlayerCash(playerid, - price);
					new streap[30];
					GetPlayerName(playerid, streap, sizeof(streap));
					format(string3, sizeof(string3), "Dispatch: %s has been killed by No One and will be in jail for %d seconds, over.",streap,PlayerInfo[playerid][pJailTime]);
					SendTeamMessage(1, COLOR_LIGHTBLUE, string3);
					SendTeamMessage(2, COLOR_LIGHTBLUE, string3);
					SendTeamMessage(3, COLOR_LIGHTBLUE, string3);
					SendTeamMessage(8, COLOR_LIGHTBLUE, string3);
					Update(playerid,pWantedLevelx);
					Update(playerid,pJailedx);
					Update(playerid,pJailTimex);
					ClearCrime(playerid);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("UnFreezeStation", 1000, false, "i", playerid);
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_PASSENGER) // TAXI & BUSSES
	{
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));
	    if(vehRadio[vehicleid] > 0)
	    {
	        if(vehRadio[vehicleid] == 1)
	    	{
	    		StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://stream.profm.ro:8012/profm.mp3");
			}
			else if(vehRadio[vehicleid] == 2)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://live.radiobandit.ro:8000");
			}
			else if(vehRadio[vehicleid] == 3)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://radiotaraf.com/live.m3u");
			}
			else if(vehRadio[vehicleid] == 4)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://live.radiohot.ro:8000/");
			}
			else if(vehRadio[vehicleid] == 5)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://dance.radiogangsta.ro:8800");
			}
			else if(vehRadio[vehicleid] == 6)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://live.radiogangsta.ro:8800");
			}
			else if(vehRadio[vehicleid] == 7)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://7619.live.streamtheworld.com:80/977_HITS_SC");
			}
			else if(vehRadio[vehicleid] == 8)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://7639.live.streamtheworld.com:80/977_MIX_SC");
			}
			else if(vehRadio[vehicleid] == 9)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://7579.live.streamtheworld.com:80/977_ALTERN_SC");
			}
			else if(vehRadio[vehicleid] == 10)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://www.listenlive.eu/bbcradio1.m3u");
			}
			else if(vehRadio[vehicleid] == 11)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://dubstep.fm/128.pls");
			}
			else if(vehRadio[vehicleid] == 12)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://www.radio-hit.ro/asculta.m3u");
			}
			else if(vehRadio[vehicleid] == 13)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://live.radioclubmix.ro:9999");
			}
			else if(vehRadio[vehicleid] == 14)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://80.86.106.136/listen.pls");
			}
			else if(vehRadio[vehicleid] == 15)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://www.radiozu.ro/live.m3u");
			}
			else if(vehRadio[vehicleid] == 16)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://livemp3.radiopopular.ro:7777");
			}
			else if(vehRadio[vehicleid] == 17)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://radio.trap.fm/listen128.pls");
			}
			else if(vehRadio[vehicleid] == 18)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://radiotequila.ro/hiphop.m3u");
			}
			else if(vehRadio[vehicleid] == 19)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, customRadio[vehicleid]);
			}
			Listening[playerid] = vehRadio[vehicleid]-1;
		}
		if(IsAnTaxi(vehicleid) && PlayerInfo[playerid][pMember] != 13)
		{
			foreach(new i : Player)
			{
				if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == 0 && PlayerInfo[i][pMember] == 13)
				{
					if(TaxiFare[i] > 0)
					{
						new randomtime = 10 + random(7);
						TaxiTimer[playerid] = randomtime;
						GivePlayerCash(playerid, -TaxiFare[i]);
						GivePlayerCash(i, TaxiFare[i]);
						Update(playerid, pCashx);
						Update(i, pCashx);
						TaxiMoneySpent[playerid] += TaxiFare[i];
						TaxiMoneyEarned[i] += TaxiFare[i];
						TaxiDriver[playerid] = i;
						format(string, sizeof(string), "money spent so far: ~g~$%d", TaxiMoneySpent[playerid]);
						PlayerTextDrawSetString(playerid, RentCarText[playerid], string);
						PlayerTextDrawShow(playerid, RentCarText[playerid]);
						format(string, sizeof(string), "money earned: ~g~$%d", TaxiMoneyEarned[i]);
						PlayerTextDrawSetString(i, RentCarText[i], string);
						PlayerTextDrawShow(i, RentCarText[i]);
					}
				}
			}
		}
        new gun,tmp;
        GetPlayerWeaponData(playerid,5,gun,tmp);
        #pragma unused tmp
        if(gun)SetPlayerArmedWeapon(playerid,gun);
        else SetPlayerArmedWeapon(playerid,0);
	    return 1;
	}
    if(oldstate == PLAYER_STATE_DRIVER)
    {
        StopAudioStreamForPlayer(playerid);
		if((GetTickCount()-PlayerEnterTime[playerid]) < 220)
        {
			new anticar[300];
			format(anticar, sizeof(anticar), "(N) %s (%d, level %d) may be using vehicle teleport (Car Circle, Floating cars etc).",GetName(playerid),playerid,PlayerInfo[playerid][pLevel]);
        	ABroadCast(COLOR_RED,anticar,1);
		}
		return 1;
    }
	if(newstate == PLAYER_STATE_DRIVER)
	{
		SetPlayerArmedWeapon(playerid, 0);
 		if(vehRadio[vehicleid] == 1)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://stream.profm.ro:8012/profm.mp3");
		}
		else if(vehRadio[vehicleid] == 2)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://live.radiobandit.ro:8000");
		}
		else if(vehRadio[vehicleid] == 3)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://radiotaraf.com/live.m3u");
		}
		else if(vehRadio[vehicleid] == 4)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://live.radiohot.ro:8000/");
		}
		else if(vehRadio[vehicleid] == 5)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://dance.radiogangsta.ro:8800");
		}
		else if(vehRadio[vehicleid] == 6)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://live.radiogangsta.ro:8800");
		}
		else if(vehRadio[vehicleid] == 7)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://7619.live.streamtheworld.com:80/977_HITS_SC");
		}
		else if(vehRadio[vehicleid] == 8)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://7639.live.streamtheworld.com:80/977_MIX_SC");
		}
		else if(vehRadio[vehicleid] == 9)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://7579.live.streamtheworld.com:80/977_ALTERN_SC");
		}
		else if(vehRadio[vehicleid] == 10)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://www.listenlive.eu/bbcradio1.m3u");
		}
		else if(vehRadio[vehicleid] == 11)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://dubstep.fm/128.pls");
		}
		else if(vehRadio[vehicleid] == 12)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://www.radio-hit.ro/asculta.m3u");
		}
		else if(vehRadio[vehicleid] == 13)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://live.radioclubmix.ro:9999");
		}
		else if(vehRadio[vehicleid] == 14)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://80.86.106.136/listen.pls");
		}
		else if(vehRadio[vehicleid] == 15)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://www.radiozu.ro/live.m3u");
		}
		else if(vehRadio[vehicleid] == 16)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://livemp3.radiopopular.ro:7777");
		}
		else if(vehRadio[vehicleid] == 17)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://radio.trap.fm/listen128.pls");
		}
		else if(vehRadio[vehicleid] == 18)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://radiotequila.ro/hiphop.m3u");
		}
		else if(vehRadio[vehicleid] == 19)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, customRadio[vehicleid]);
		}
		Listening[playerid] = vehRadio[vehicleid]-1;
		new newcar = GetPlayerVehicleID(playerid);
		GetVehiclePos(newcar, old_veh_pos[newcar][0], old_veh_pos[newcar][1], old_veh_pos[newcar][2]);
		if(PlayerInfo[playerid][pQuest1] == 3)
		{
			if(GetVehicleModel(newcar) == PlayerInfo[playerid][pQuestCar])
			{
				QuestCarKM[newcar] = PlayerInfo[playerid][pQuestProgress1];
			}
		}
		if(VehicleInfo[newcar][vehJob] == 10)
		{
			if(JobCar[playerid] != newcar) GarbageInCar[newcar] = 0;
			if(JobCar[playerid] != -1 && newcar != JobCar[playerid])
			{
				SetVehicleToRespawnEx(JobCar[playerid]);
				JobCar[playerid] = -1;
			}
			JobCar[playerid] = newcar;
			if(GarbageInCar[newcar] == 0)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Foloseste /collecttrash pentru a incepe sa colectezi gunoiul.");
			}
			else
			{
				SendSplitMessage(playerid, COLOR_DARKPINK, "Foloseste /unloadtrash pentru a descarca gunoiul colectat si a fi platit sau foloseste /collecttrash pentru a colecta mai mult gunoi.");
			}
		}
	    if(!IsABoat(newcar))
	    {
			PlayerEnterTime[playerid] = GetTickCount();
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		new engine,lights,alarm,doors,bonnet,boot,objective;
	    if(vehEngine[newcar] == 0)
	    {
			GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
		    SetVehicleParamsEx(newcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		}
		else if(vehEngine[newcar] == 1)
		{
			GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(newcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		}
		if(Gas[newcar] == 0)
		{
	        TogglePlayerControllable(playerid, 0);
	        NoFuel[playerid] = 1;
		}
		if(Trucker[playerid] >= 1)
		{
		    KillTimer(restruck[playerid]);
		}
		if(IsABoat(newcar))
		{
		    if(PlayerInfo[playerid][pBoatLic] < 1)
			{
                if(TakingLesson[playerid] == 2) { }
                else {
			    SendClientMessage(playerid,COLOR_GREY, "You don't have a boat license.");
			    RemovePlayerFromVehicle(playerid);
			    TogglePlayerControllable(playerid, 1); }
			}
		}
		else if(IsAPlane(newcar))
		{
		    if(PlayerInfo[playerid][pFlyLic] < 1)
			{
			    if(TakingLesson[playerid] == 2) { }
			    else {
			    SendClientMessage(playerid, COLOR_GREY, "You don't have a flying license.");
			    RemovePlayerFromVehicle(playerid);
				TogglePlayerControllable(playerid, 1); }
			}
		}
		else
		{
			if(PlayerInfo[playerid][pCarLic] < 1)
			{
			    if(IsABike(newcar) || IsAPlane(newcar) || GetVehicleModel(newcar) == 462) { }
			    else
			    {
					if(TakingLesson[playerid] == 1) { }
					else {
				 	SendClientMessage(playerid,COLOR_GREY, "You don't have a driving license.");
                    RemovePlayerFromVehicle(playerid);
                    TogglePlayerControllable(playerid, 1);
					SetTimerEx("UnFreezeStation", 500, 0, "i", playerid);
				  }
				}
			}
		}//Done with car check
		for(new x = 0; x < sizeof(VehicleInfo); x++)
		{
			if(VehicleInfo[x][vehCarID] == newcar)
			{
				if(VehicleInfo[x][vehGroup] != 0 && VehicleInfo[x][vehGroup] != 30 && VehicleInfo[x][vehGroup] != 8 && VehicleInfo[x][vehGroup] != 2 && VehicleInfo[x][vehGroup] != 3 && VehicleInfo[x][vehGroup] != 1)
				{
					new strr[128];
					if(PlayerInfo[playerid][pMember] == VehicleInfo[x][vehGroup]) { }
					else
					{
						if(AdminDuty[playerid] == 1)
						{
							format(strr,sizeof(strr),"This %s (model %d, ID %d) is locked to group %s (%d).",aVehicleNames[GetVehicleModel(VehicleInfo[x][vehCarID]) - 400],GetVehicleModel(VehicleInfo[x][vehCarID]),VehicleInfo[x][vehCarID],DynamicFactions[VehicleInfo[x][vehGroup]][fName],VehicleInfo[x][vehGroup]);
							SendClientMessage(playerid, COLOR_WHITE, strr);
						}
						else
						{
		                    new Float:slx, Float:sly, Float:slz;
					        GetPlayerPos(playerid, slx, sly, slz);
					        SetPlayerPosEx(playerid, slx, sly, slz+5.0);
			                PlayerPlaySound(playerid, 1190, slx, sly, slz);
							format(strr,sizeof(strr),"This vehicle is locked to group %s.",DynamicFactions[VehicleInfo[x][vehGroup]][fName]);
							SendClientMessage(playerid, COLOR_WHITE, strr);
						}
						return 1;
					}
				}
				if(VehicleInfo[x][vehRank] != 1)
				{
					if(PlayerInfo[playerid][pRank] < VehicleInfo[x][vehRank])
					{
						if(PlayerInfo[playerid][pRank] < VehicleInfo[x][vehRank])
						{
							new strr[128];
							if(AdminDuty[playerid] == 1)
							{
								format(strr,sizeof(strr),"This %s (model %d, ID %d) is locked to group %s (%d).",aVehicleNames[GetVehicleModel(VehicleInfo[x][vehCarID]) - 400],GetVehicleModel(VehicleInfo[x][vehCarID]),VehicleInfo[x][vehCarID],DynamicFactions[VehicleInfo[x][vehGroup]][fName],VehicleInfo[x][vehGroup]);
								SendClientMessage(playerid, COLOR_WHITE, strr);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								format(strr,sizeof(strr),"You need rank %d to drive this car.",VehicleInfo[x][vehRank]);
								SendClientMessage(playerid, COLOR_WHITE, strr);
							}
							return 1;
						}
						return 1;
					}
				}
				if(VehicleInfo[x][vehJob] != 0)
				{
					if(AdminDuty[playerid] != 1)
					{
						if(VehicleInfo[x][vehJob] == 5 && PlayerInfo[playerid][pJob] != 5)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, COLOR_WHITE, "You need to be a pizza boy to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 6 && PlayerInfo[playerid][pJob] != 6)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, COLOR_WHITE, "You need to be a farmer to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 7 && PlayerInfo[playerid][pJob] != 7)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, COLOR_WHITE, "You need to be a bus driver to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 8 && PlayerInfo[playerid][pJob] != 8)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, COLOR_WHITE, "You need to be a mechanic to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 10 && PlayerInfo[playerid][pJob] != 10)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, COLOR_WHITE, "You need to be a garbage man to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 14 && PlayerInfo[playerid][pJob] != 14)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, COLOR_WHITE, "You need to be a trucker to drive this car.");
						}
					}
					else
					{
						new strr[128];
						format(strr,sizeof(strr),"This %s (model %d, ID %d) is locked to job %d.",aVehicleNames[GetVehicleModel(VehicleInfo[x][vehCarID]) - 400],GetVehicleModel(VehicleInfo[x][vehCarID]),VehicleInfo[x][vehCarID],VehicleInfo[x][vehJob]);
						SendClientMessage(playerid, COLOR_WHITE, strr);
					}
				}
			}
		}
		if(IsABike(newcar))
		{
            TogglePlayerControllable(playerid, 1);
            vehEngine[vehicleid] = 1;
            GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		    SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		}
		if(IsACopCar(newcar))
		{
		    if(IsACop(playerid))
			{
				if(OnDuty[playerid] != 1) { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "You are not on duty."); }
			}
		    else { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "This vehicle is locked to group Los Santos Police Department."); }
		}
		if(IsAFbiCar(newcar))
		{
		    if(IsACop(playerid))
			{
				if(OnDuty[playerid] != 1) { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "You are not on duty."); }
			}
		    else { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "This vehicle is locked to group Federal Bureau of Investigations."); }
		}
		if(IsALVPDCar(newcar))
		{
		    if(IsACop(playerid))
			{
				if(OnDuty[playerid] != 1) { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "You are not on duty."); }
			}
		    else { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "This vehicle is locked to group Las Venturas Police Department."); }
		}
		if(IsANgCar(newcar))
		{
		    if(IsACop(playerid))
			{
				if(OnDuty[playerid] != 1) { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "You are not on duty."); }
			}
		    else { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "This vehicle is locked to group National Guard."); }
		}
		if(IsATruck(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 14)
			{
			    if(Trucker2[playerid] == 0 && viddd[playerid] == 0)
		    	{
		    		Trucker2[playerid] = 1;
		    		SetPlayerCheckpoint(playerid,-54.6322,-1461.7084,6.8239,5.0);
		    		SendClientMessage(playerid, COLOR_DARKPINK, "Mergi la checkpoint pentru a incepe munca.");
		    		TruckID[playerid] = GetPlayerVehicleID(playerid);
				}
				return 1;
    		}
		}

		if(IsABus(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 7)
			{
			    PlayerTextDrawShow(playerid, BusJob[playerid]);
			    format(string,sizeof(string),"~w~CHECKPOINTS: ~r~0~w~/~r~59");
				PlayerTextDrawSetString(playerid, BusCheck[playerid], string);
				PlayerTextDrawShow(playerid, BusCheck[playerid]);
				SendClientMessage(playerid, COLOR_WHITE, "Mergi la checkpoint.");
				busc[playerid] = 1;
				CheckBus[playerid] = 1;
				SetPlayerRaceCheckpoint(playerid, 0, 1693.2972,-2197.6602,13.4714,1941.3706,-2169.2083,13.4851,4.0);
			}
		}
		if(IsAFarmer(newcar))
		{
		    KillTimer(timerfarmm[playerid]);
		    if(AreFaina[playerid] != 0)
		    {
				SS(playerid, COLOR_YELLOW, "Vinde faina inainte de a munci din nou.", "Sell the flour before working again.");
			    RemovePlayerFromVehicle(playerid);
		    	TogglePlayerControllable(playerid, 1);
		    	KillTimer(timerfarmm[playerid]);
			}
			if(strcmp(PlayerInfo[playerid][pCrime1], "stealing a vehicle from the farm", false) == 0 || strcmp(PlayerInfo[playerid][pCrime2], "stealing a vehicle from the farm", false) == 0 || strcmp(PlayerInfo[playerid][pCrime3], "stealing a vehicle from the farm", false) == 0)
			{
				SS(playerid, COLOR_LIGHTGREEN3, "Nu poti munci aici pentru ca ai furat un vehicul de la ferma.", "You can't work here because you recently stole a vehicle from the farm.");
			    RemovePlayerFromVehicle(playerid);
		    	TogglePlayerControllable(playerid, 1);
		    	KillTimer(timerfarmm[playerid]);
			}
			if(PlayerInfo[playerid][pJob] == 6)
			{
				farmerc[playerid] = 1;
				farmertime[playerid] = 120;
				timerfarmm[playerid] = SetTimerEx("SetFarmer", 1000, 1, "i", playerid);
				Gas[GetPlayerVehicleID(playerid)] = 100;
    		}
		}
		if(IsARentCar(newcar))
		{
			if(GetPlayerCash(playerid) < 20)
			{
			    RemovePlayerFromVehicle(playerid);
				return 1;
			}
			PlayerTextDrawSetString(playerid, RentCarText[playerid], "rentcar cost: ~g~$0");
			PlayerTextDrawShow(playerid, RentCarText[playerid]);
			RentTime[playerid] = 1;
			RentMoneySpent[playerid] = 0;
			if(RentCar[playerid] != newcar)
			{
				SS(playerid, COLOR_WHITE, "Masina inchiriata. Foloseste /lock pentru a incuia usile masinii. Vei plati $20/10 secunde cat timp folosesti masina.", "Car rented. Use /lock to lock your new rented car. You will pay $20 / 10 seconds when you are using the car.");
				SS(playerid, COLOR_WHITE, "Masina va fi respawnata dupa 30 minute daca nu este folosita.", "The car will be respawned after 30 minutes when not in use.");
				RentCar[playerid] = newcar;
				foreach(new i : Player)
				{
					if(i != playerid && RentCar[i] == RentCar[playerid])
					{
						RentCar[i] = -1;
						RentTime[i] = 0;
						RentMoneySpent[i] = 0;
						PlayerTextDrawHide(i, RentCarText[i]);
						SendClientMessage(i, COLOR_WHITE, "Your car was rented by another player!");
						SendClientMessage(i, COLOR_WHITE, "Lock it next time if you don't want it to be stolen!");
					}
				}
			}
        }
		if(IsAnOwnableCar(newcar))
		{
			foreach(new i : Player)
			{
				for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				{
					if(PlayerInfo[i][pCarID][v] == newcar)
					{
						if(PlayerInfo[i][pCarIns][v] == 0)
						{
							if(i == playerid)
							{
								format(string, sizeof(string), "Do you want to pay $%s to repair your car?", FormatNumber(PlayerInfo[i][pCarInsPrice][v]));
								ShowPlayerDialog(playerid, DIALOG_CARDAMAGE, DIALOG_STYLE_MSGBOX, "Pay for insurance!", string, "Pay", "Cancel");
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, COLOR_WHITE, "Can't drive this car until the owner pay the insurance.");
							}
						}
					}
				}
			}
    	}
		if(IsAnOwnableCar(newcar))
		{
			new stringtext[100],vip[15];
			format(stringtext,sizeof(stringtext),"~r~~h~~h~~h~~h~%s",aVehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
			GameTextForPlayer(playerid, stringtext, 5000, 1);
			foreach(new i : Player)
			{
				for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				{
					if(PlayerInfo[i][pCarID][v] == newcar)
					{
						if(PlayerInfo[i][pCarVIP][v] > 0) format(vip, sizeof(vip), "{FFFF00}[VIP]");
						if(PlayerInfo[i][pCarColor1][v] >= 128 || PlayerInfo[i][pCarColor2][v] >= 128)
						{
							format(string,sizeof(string),"This %s (ID %d) is owned by %s | Age: %d days | Odometer: %.0f km | Insurance: $%d (%d points) | Hidden colors: %d, %d %s",aVehicleNames[PlayerInfo[i][pCarModel][v] - 400],PlayerInfo[i][pCar][v],PlayerInfo[i][pNormalName],GetDaysFromTimestamp(PlayerInfo[i][pCarBuyTime][v]),PlayerInfo[i][pCarKM][v],PlayerInfo[i][pCarInsPrice][v],PlayerInfo[i][pCarIns][v],PlayerInfo[i][pCarColor1][v],PlayerInfo[i][pCarColor2][v],vip);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
						else
						{
							format(string,sizeof(string),"This %s (ID %d) is owned by %s | Age: %d days | Odometer: %.0f km | Insurance: $%d (%d points) %s",aVehicleNames[PlayerInfo[i][pCarModel][v] - 400],PlayerInfo[i][pCar][v],PlayerInfo[i][pNormalName],GetDaysFromTimestamp(PlayerInfo[i][pCarBuyTime][v]),PlayerInfo[i][pCarKM][v],PlayerInfo[i][pCarInsPrice][v],PlayerInfo[i][pCarIns][v],vip);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
					}
				}
			}
		}
		else
		{
			if(IsARentCar(newcar))
			{
				GameTextForPlayer(playerid, "~g~car rented", 5000, 1);
			}
			else
			{
				new stringtext[100];
				format(stringtext,sizeof(stringtext),"~g~~h~%s",aVehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
				GameTextForPlayer(playerid, stringtext, 5000, 1);
			}
		}
		gLastCar[playerid] = newcar;
		gLastDriver[newcar] = playerid;
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		new Float: lwx, Float:lwy, Float:lwz;
		GetPlayerPos(playerid, lwx, lwy, lwz);
		if((lwz > 530.0 && PlayerInfo[playerid][pInt] == 0) || PlayerToPoint(1000.0, playerid, -1041.9,-1868.4,79.1)) //the highest land point in sa = 526.8
		{
			SetPlayerSpawn(playerid);
		}
		if(WantedPoints[playerid] > 0)
		{
		    PlayerInfo[playerid][pWantedDeaths] += 1;
		}
		if(PlayerInfo[playerid][pPremiumAccount] > 0)
		{
		    SetPlayerHealthEx(playerid, 100.0);
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		gPlayerSpawned[playerid] = 1;
		SafeTime[playerid] = 60;
	}
	return 1;
}

public CarCheck()
{
	new string[256];
	foreach(new j : Player)
	{
	    if(IsPlayerConnected(j))
	    {
		    new Float:health;
		    GetPlayerHealth(j, health);
			SetPlayerHealthEx(j, health - 1.0);
			if(GetPlayerCash(j) < 0)
			{
			    if(MoneyMessage[j]==0)
			    {
				    format(string, sizeof(string), "You are in debt, you have till next Time Check to get: $%d or you go to jail.", GetPlayerCash(j));
					SendClientMessage(j, COLOR_LIGHTRED, string);
					MoneyMessage[j] = 1;
				}
			}
			else
			{
			    MoneyMessage[j] = 0;
			}
		}
	}
	return 1;
}

public CarTow(carid)
{
	foreach(new i : Player)
	{
		if(IsPlayerInVehicle(i, carid))
		{
			return 0;
		}
	}
	return 1;
}

public LocateCar(car,playerid)
{
    new Float:x,Float:y,Float:z,Float:xx,Float:yy,Float:zz,Float: distance,string[256];
	GetVehiclePos(car, x, y, z);
	GetPlayerPos(playerid, xx, yy, zz);
	SetPlayerCheckpoint(playerid, x, y, z, 4);
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_LOCATE;
	distance = GetDistanceBetweenPoints(xx,yy,zz,x,y,z);
	if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Mergi la punctul rosu de pe minimap pentru a ajunge la masina ta. Distanta: %.0fm.", distance);
	else format(string, sizeof(string), "Follow the checkpoint to get your car. Distance: %.0fm.", distance);
	SendClientMessage(playerid,COLOR_YELLOW,string);
	CP[playerid] = 43;
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    if(!success)
    {
        new pip[16],string[256],name[25];
        foreach(new i : Player)
        {
            GetPlayerIp(i, pip, sizeof(pip));
            if(!strcmp(ip, pip, true))
           	{
				GetPlayerName(i, name, sizeof(name));
		        format(string,sizeof(string),"Notice: {FFFFFF}%s has entered a wrong rcon password (IP: %s).",name,ip);
                ABroadCast(COLOR_RED2,string,3);
                KickEx(i);
                return 1;
            }
        }
    }
    else if(success)
    {
        new pip[16],string[256],name[25];
        foreach(new i : Player)
        {
            GetPlayerIp(i, pip, sizeof(pip));
            if(!strcmp(ip, pip, true))
           	{
				GetPlayerName(i, name, sizeof(name));
		        format(string,sizeof(string),"Notice: {FFFFFF}%s (%d) has connected successfully to rcon (IP: %s).",name,i,ip);
                ABroadCast(COLOR_RED2,string,3);
                return 1;
            }
        }
	}
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    StopAudioStreamForPlayer(playerid);
	if(IsAnOwnableCar(vehicleid))
	{
		foreach(new i : Player)
		{
			for(new v; v < MAX_PERSONAL_VEHICLES; v++)
			{
				if(PlayerInfo[i][pCarID][v] == vehicleid)
				{
					GetVehiclePos(vehicleid, PlayerInfo[i][pCarLLocX][v], PlayerInfo[i][pCarLLocY][v], PlayerInfo[i][pCarLLocZ][v]);
					GetVehicleZAngle(vehicleid, PlayerInfo[i][pCarAngle2][v]);
					cUpdate(i, v, cLocationx2x);
					cUpdate(i, v, cLocationy2x);
					cUpdate(i, v, cLocationz2x);
					cUpdate(i, v, cAngle2x);
				}
			}
		}
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
			if(PlayerInfo[playerid][pCarID][v] == vehicleid)
			{
				SetVehicleParamsForPlayer(vehicleid,playerid,0,0);
			}
		}
	}
    if(TakingLesson[playerid] == 1)
    {
        PlayerTextDrawHide(playerid, DMVexam[playerid]);
        PlayerTextDrawHide(playerid, DMVcheck[playerid]);
        TakingLesson[playerid] = 0;
	    DisablePlayerRaceCheckpoint(playerid);
        DestroyVehicle(examcar[playerid]);
		DisableRemoteVehicleCollisions(playerid, 0);
		examcar[playerid] = -1;
		SendClientMessage(playerid, COLOR_WHITE, "Ai picat examenul pentru ca ai coborat din masina.");
    }
    if(CP[playerid] == 34)
	{
	    TowAcc[playerid] = 1;
		new towedcar;
		towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
		SetVehicleToRespawn(towedcar);
		SetVehicleToRespawn(vehicleid);
		RemovePlayerFromVehicle(playerid);
   		CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    SetTimerEx("TowAgain", 120000, 0, "i", playerid);
	}
	if(busc[playerid] == 1)
	{
 		busc[playerid] = 0;
   		PlayerTextDrawHide(playerid, BusJob[playerid]);
   		PlayerTextDrawHide(playerid, BusCheck[playerid]);
   		SetVehicleToRespawn(vehicleid);
   		KillTimer(timerbus[playerid]);
   		DisablePlayerRaceCheckpoint(playerid);
		CheckBus[playerid] = 0;
		if(JobStep[playerid] >= 1)
  		{
    		JobStep[playerid] = 0;
	    	GivePlayerCash(playerid, -2000);
	    	SendClientMessage(playerid, COLOR_GREEN, "(-) Ai platit $2.000 companiei de autobuze pentru taxe.");
		}
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if(gPlayerLogged[playerid] == 1)
	{
		PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
		new query[184];
        mysql_format(SQL,query, sizeof(query), "UPDATE users SET `Model`='%d' WHERE `name`='%s'",GetPlayerSkin(playerid),PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,query,"","");
		ChangeClothes[playerid] = 0;
    }
	else
	{
		SendClientMessage(playerid, COLOR_RED2, "You need to log in first.");
	}
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(gPlayerLogged[playerid] == 1 && ChangeClothes[playerid] == 0)
	{
		SpawnPlayer(playerid);
	}
	if (RegistrationStep[playerid] == 0 && gPlayerLogged[playerid] != 1)
	{
 		SetPlayerInterior(playerid,0);
		SetPlayerPosEx(playerid, 1742.9814,-1863.0938,16.2048);
		InterpolateCameraPos(playerid, 1804.1313,-1732.0179,21.7294, 1037.3715,-1732.7358,25.2859, 30000, CAMERA_MOVE);
		InterpolateCameraLookAt(playerid,1441.6654,-1732.0317,18.0373,1037.3715,-1732.7358,25.2859, 30000, CAMERA_MOVE);
		TogglePlayerControllable(playerid, 0);
		if (gPlayerAccount[playerid] != 0)
		{
            SendClientMessage(playerid, COLOR_GENANNOUNCE, "SERVER: {FFFFFF}Welcome to ForEver RPG.");
			SendClientMessage(playerid, COLOR_GENANNOUNCE, "SERVER: {FFFFFF}You already have a registered account, please enter your password into the dialog box.");
			ShowPlayerDialog(playerid,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"SERVER: Login","Welcome to the ForEver RPG Server.\n\nPlease enter your password below!","Login","Cancel");
		}
		else
		{
			gPlayerAccount[playerid] = 0;
 			new loginname[158],
				stringgg[300],
				playerip[16];
			GetPlayerName(playerid,loginname,sizeof(loginname));
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			new stre[256],timee[64],timee2,timex[11];
			format(stre, sizeof(stre), "SELECT * FROM `bans` WHERE `IP`='%s' AND `Active`='1'", playerip);
			new Cache: xd = mysql_query(SQL, stre);
			if(cache_get_row_count() > 0)
			{
				for(new i, j = cache_get_row_count(); i != j; i++)
				{
					cache_get_field_content(i, "BanTimeDate", timee);
					strmid(timex, timee, 0, 11);
					timee2 = DateToTimestamp(timex);
					if(timee2 > gettime() - 24 * 3600)
					{
						new namex[30];
						GetPlayerName(playerid, namex, sizeof(namex));
						format(stre, sizeof(stre), "User %s was not able to register with IP: %s. (recently banned)", namex, playerip);
						ABroadCast(COLOR_REDX, stre, 1);
						SendClientMessage(playerid, COLOR_GENANNOUNCE, "You can not register right now. Please try again in a few hours!");
						SendClientMessage(playerid, COLOR_GENANNOUNCE, "Nu te poti inregistra acum. Incearca din nou peste cateva ore.");
						KickEx(playerid);
						cache_delete(xd);
						return 1;
					}
				}
			}
			cache_delete(xd);
			for(new clanid; clanid < MAX_CLANS; clanid++)
			{
				if(strfind(loginname,ClanInfo[clanid][cClanTag],true) != -1)
				{
					format(stringgg,sizeof(stringgg),"Nu poti folosi acel username. '%s' este inregistrat de un clan. Nu poti folosi acel cuvant in nickname-ul tau.",ClanInfo[clanid][cClanTag]);
					SendClientMessage(playerid, COLOR_RED, stringgg);
					format(stringgg,sizeof(stringgg),"You can't use that username! '%s' is a registered clan tag. You can't use that word in your nickname.",ClanInfo[clanid][cClanTag]);
					SendClientMessage(playerid, COLOR_RED, stringgg);
					KickEx(playerid);
				}
			}
			SendClientMessage(playerid, COLOR_GENANNOUNCE, "SERVER: {FFFFFF}Welcome to ForEver RPG.");
			SendClientMessage(playerid, COLOR_GENANNOUNCE, "SERVER: {FFFFFF}You aren't registered yet. Please enter your desired password in the dialog box to register.");
			ShowPlayerDialog(playerid,DIALOG_LOGIN1,DIALOG_STYLE_PASSWORD,"SERVER: Registration","Welcome to the ForEver RPG Server.\n\nPlease enter your desired password below!","Register","Cancel");
		}
		login[playerid] = 60;
	}
	else if(IsPlayerNPC(playerid)) return 1;
	return 1;
}

public SetupPlayerForClassSelection(playerid)
{
	switch (gTeam[playerid])
	{
		case TEAM_BLUE:
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPosEx(playerid,323.4,305.6,999.1);
			SetPlayerFacingAngle(playerid, 90.0);
		    SetPlayerCameraPos(playerid, 1460.0, -1324.0, 287.2);
		    SetPlayerCameraLookAt(playerid,1374.5, -1291.1, 239.0);
		}
		case TEAM_ADMIN:
		{
		    SetPlayerInterior(playerid,0);
			SetPlayerPosEx(playerid,-2654.4,1424.2,912.4);
			SetPlayerFacingAngle(playerid, 90.0);
		    SetPlayerCameraPos(playerid, 1460.0, -1324.0, 287.2);
		    SetPlayerCameraLookAt(playerid,1374.5, -1291.1, 239.0);
		}
		default:
		{
            SetPlayerPosEx(playerid,358.0976,-1841.3488,5.1257);
		    SetPlayerInterior(playerid,0);
		    SetPlayerFacingAngle(playerid, 90.0);
		    SetPlayerCameraPos(playerid, 1460.0, -1324.0, 287.2);
		    SetPlayerCameraLookAt(playerid,1374.5, -1291.1, 239.0);
		}
	}
}

public SetPlayerTeamFromClass(playerid,classid)
{
 	if (classid >= 1 && classid <= 15)
	{
		gTeam[playerid] = 15; //admin
		PlayerInfo[playerid][pTeam] = 15;
	}
	else
	{
	    gTeam[playerid] = 3;
	    PlayerInfo[playerid][pTeam] = 3;
	}
}

// SetPlayerCriminal(playerid,255, "Stealing A Police Vehicle");
public SetPlayerCriminal(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrimes] += 1;
	    Update(playerid,pCrimesx);
	    new points = WantedPoints[playerid],
			turned[MAX_PLAYER_NAME],
			turner[MAX_PLAYER_NAME],
			turnmes[128],
			ini;
		ini = PlayerInfo[playerid][pWantedLevel];
		GetPlayerName(playerid, turned, sizeof(turned));
		if(declare == -1)
		{
			format(turner, sizeof(turner), "Unknown");
			strmid(PlayerInfo[playerid][pVictim], turner, 0, strlen(turner), 255);
			Update(playerid,pVictimx);
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerInfo[playerid][pVictim], turner, 0, strlen(turner), 255);
				Update(playerid,pVictimx);
			}
		}
		new string[184];
		new y,m,d,h,mi;
		getdate(y,m,d);
		gettime(h,mi);
		if(strcmp(PlayerInfo[playerid][pCrime1], "Fara Crima", true) == 0)
		{
			format(string,sizeof(string),"%s",reason);
			strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
			Update(playerid,pCrime1x);
		}
		else if(strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0)
		{
			format(string,sizeof(string),"%s",reason);
			strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
			Update(playerid,pCrime2x);
		}
		else if(strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0)
		{
			format(string,sizeof(string),"%s",reason);
		    strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
			Update(playerid,pCrime3x);
		}
		else if(strcmp(PlayerInfo[playerid][pCrime1],  "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0) { }
		else
		{
			format(string,sizeof(string),"%s",reason);
		    strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
			Update(playerid,pCrime1x);
			format(string, sizeof(string), "Fara Crima");
			strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
			strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
			Update(playerid,pCrime2x);
			Update(playerid,pCrime3x);
		}
		if(points > 0)
		{
		    new yesno;
			if(points >= 1 && points <= 3)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 1)
				{
					PlayerInfo[playerid][pWantedLevel] = 1;
					yesno = 1;
				}
			}
			else if(points >= 4 && points <= 5)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 2)
				{
					PlayerInfo[playerid][pWantedLevel] = 2;
					yesno = 1;
				}
			}
			else if(points >= 6 && points <= 7)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 3)
				{
					PlayerInfo[playerid][pWantedLevel] = 3;
					yesno = 1;
				}
			}
			else if(points >= 8 && points <= 9)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 4)
				{
					PlayerInfo[playerid][pWantedLevel] = 4;
					yesno = 1;
				}
			}
			else if(points >= 10 && points <= 11)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 5)
				{
					PlayerInfo[playerid][pWantedLevel] = 5;
					yesno = 1;
				}
			}
			else if(points >= 12 && points <= 13)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 6)
				{
					PlayerInfo[playerid][pWantedLevel] = 6;
					yesno = 1;
				}
			}
			if(PlayerInfo[playerid][pWantedLevel] >= 1)
			{
				if(gTeam[playerid] == 3)
				{
					gTeam[playerid] = 3;
				}
			}
			Update(playerid,pWantedLevelx);
			wantedlost[playerid] = 900;
			if(yesno)
			{
				ini = PlayerInfo[playerid][pWantedLevel]-ini;
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pLeader] == 3 || PlayerInfo[i][pMember] == 8 || PlayerInfo[i][pLeader] == 8)
					    {
							format(cbjstore, sizeof(turnmes), "Dispatch: %s [%d] has committed a crime: %s. Reporter: %s. W: +%d. New wanted level: %d.",turned,playerid,reason,turner,ini,PlayerInfo[playerid][pWantedLevel]);
							SendClientMessage(i, COLOR_DBLUE, cbjstore);
						}
					}
				}
				if(PlayerInfo[playerid][pLanguage] == 2) format(turnmes, sizeof(turnmes), "Ai comis o infractiune: %s, raportat de: %s. W: +%d. Nivel de urmarire nou: %d.",reason,turner,ini,PlayerInfo[playerid][pWantedLevel]);
				else format(turnmes, sizeof(turnmes), "You committed a crime: %s, reported by: %s. W: +%d. New wanted level: %d.",reason,turner,ini,PlayerInfo[playerid][pWantedLevel]);
				SendClientMessage(playerid, COLOR_RED2, turnmes);
			}
		}
	}
	return 1;
}

public BusDriverCheck(playerid)
{
	if(CheckBus[playerid] >= 1)
	{
	    new money,
	    	totalmoney,
	    	string[MAX_STRING],
			string2[MAX_STRING];
		money = 1500 + random(1000);
		if(PlayerInfo[playerid][pBusSkill] == 1) totalmoney = money;
		if(PlayerInfo[playerid][pBusSkill] == 2) totalmoney = money + money*(10/100);
		if(PlayerInfo[playerid][pBusSkill] == 3) totalmoney = money + money*(20/100);
		if(PlayerInfo[playerid][pBusSkill] == 4) totalmoney = money + money*(30/100);
		if(PlayerInfo[playerid][pBusSkill] == 5) totalmoney = money + money*(40/100);
		if(PlayerInfo[playerid][pBusSkill] == 6) totalmoney = money + money*(50/100);
		GivePlayerCash(playerid, totalmoney);
		format(string2,sizeof(string2),"Ai primit $%s. Mergi la urmatorul checkpoint.", FormatNumber(totalmoney));
		SendClientMessage(playerid, COLOR_GREEN, string2);
		DisablePlayerRaceCheckpoint(playerid);
	    JobStep[playerid] ++;
		BusCheckk[playerid] ++;
		if(BusCheckk[playerid] >= 10)
		{
			BusCheckk[playerid] = 0;
			PlayerInfo[playerid][pBusRem]--;
			PlayerInfo[playerid][pBusTimes]++;
			Update(playerid,pBusRemx);
			Update(playerid,pBusTimesx);
			if(PlayerInfo[playerid][pBusSkill] <= 5)
			{
				if(PlayerInfo[playerid][pBusRem] <= 0)
				{
					PlayerInfo[playerid][pBusSkill]++;
					if(PlayerInfo[playerid][pBusSkill] == 2)
					{
						PlayerInfo[playerid][pBusRem] = 34;
					}
					else if(PlayerInfo[playerid][pBusSkill] == 3)
					{
						PlayerInfo[playerid][pBusRem] = 49;
					}
					else if(PlayerInfo[playerid][pBusSkill] == 4)
					{
						PlayerInfo[playerid][pBusRem] = 89;
					}
					else if(PlayerInfo[playerid][pBusSkill] == 5)
					{
						PlayerInfo[playerid][pBusRem] = 99;
					}
					Update(playerid,pBusSkillx);
					Update(playerid,pBusRemx);
					new stringe[128];
					format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pBusSkill]);
					format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pBusSkill]);
					SS(playerid, COLOR_YELLOW, string, stringe);
				}
			}
		}
	    KillTimer(timerbus[playerid]);
	    format(string,sizeof(string),"~w~CHECKPOINTS: ~r~%d~w~/~r~59", JobStep[playerid]);
	    PlayerTextDrawSetString(playerid, BusCheck[playerid], string);
		PlayerTextDrawShow(playerid, BusCheck[playerid]);
	    if(JobStep[playerid] == 1) SetPlayerRaceCheckpoint(playerid, 0, 1941.3706,-2169.2083,13.4851,1964.6262,-1899.2827,13.4838,4.0);
	    if(JobStep[playerid] == 2) SetPlayerRaceCheckpoint(playerid, 0, 1964.6262,-1899.2827,13.4838,1921.6910,-1749.1346,13.4828,4.0);
	    if(JobStep[playerid] == 3) SetPlayerRaceCheckpoint(playerid, 0, 1921.6910,-1749.1346,13.4828,1819.4100,-1814.2385,13.5056,4.0);
	    if(JobStep[playerid] == 4) SetPlayerRaceCheckpoint(playerid, 0, 1819.4100,-1814.2385,13.5056,1692.2909,-1764.9092,13.4875,4.0);
	    if(JobStep[playerid] == 5) SetPlayerRaceCheckpoint(playerid, 0, 1692.2909,-1764.9092,13.4875,1395.2542,-1729.2012,13.4901,4.0);
	    if(JobStep[playerid] == 6) SetPlayerRaceCheckpoint(playerid, 0, 1395.2542,-1729.2012,13.4901,1315.4188,-1631.5197,13.4827,4.0);
	    if(JobStep[playerid] == 7) SetPlayerRaceCheckpoint(playerid, 0, 1315.4188,-1631.5197,13.4827,1325.5859,-1392.4742,13.4741,4.0);
	    if(JobStep[playerid] == 8) SetPlayerRaceCheckpoint(playerid, 0, 1325.5859,-1392.4742,13.4741,1209.0767,-1324.8274,13.5002,4.0);
	    if(JobStep[playerid] == 9) SetPlayerRaceCheckpoint(playerid, 0, 1209.0767,-1324.8274,13.5002,1082.8730,-1277.8145,13.5019,4.0);
	    if(JobStep[playerid] == 10) SetPlayerRaceCheckpoint(playerid, 0, 1082.8730,-1277.8145,13.5019,966.0933,-1218.3807,16.8770,4.0);
	    if(JobStep[playerid] == 11) SetPlayerRaceCheckpoint(playerid, 0, 966.0933,-1218.3807,16.8770,818.9665,-1137.8669,23.8506,4.0);
	    if(JobStep[playerid] == 12) SetPlayerRaceCheckpoint(playerid, 0, 818.9665,-1137.8669,23.8506,794.1818,-1301.3213,13.4795,4.0);
	    if(JobStep[playerid] == 13) SetPlayerRaceCheckpoint(playerid, 0, 794.1818,-1301.3213,13.4795,678.5087,-1392.8485,13.5081,4.0);
	    if(JobStep[playerid] == 14) SetPlayerRaceCheckpoint(playerid, 0, 678.5087,-1392.8485,13.5081,380.8662,-1492.7212,32.2020,4.0);
	    if(JobStep[playerid] == 15) SetPlayerRaceCheckpoint(playerid, 0, 380.8662,-1492.7212,32.2020,258.5574,-1537.6969,32.3608,4.0);
	    if(JobStep[playerid] == 16) SetPlayerRaceCheckpoint(playerid, 0, 258.5574,-1537.6969,32.3608,484.7990,-1357.7792,17.9893,4.0);
	    if(JobStep[playerid] == 17) SetPlayerRaceCheckpoint(playerid, 0, 484.7990,-1357.7792,17.9893,588.3983,-1232.8560,17.8009,4.0);
	    if(JobStep[playerid] == 18) SetPlayerRaceCheckpoint(playerid, 0, 588.3983,-1232.8560,17.8009,774.5882,-1058.5305,24.5938,4.0);
	    if(JobStep[playerid] == 19) SetPlayerRaceCheckpoint(playerid, 0, 774.5882,-1058.5305,24.5938,1209.5120,-948.5093,42.8005,4.0);
	    if(JobStep[playerid] == 20) SetPlayerRaceCheckpoint(playerid, 0, 1209.5120,-948.5093,42.8005,1566.5400,-997.7548,45.7116,4.0);
	    if(JobStep[playerid] == 21) SetPlayerRaceCheckpoint(playerid, 0, 1566.5400,-997.7548,45.7116,1709.9061,-733.8804,50.0985,4.0);
	    if(JobStep[playerid] == 22) SetPlayerRaceCheckpoint(playerid, 0, 1709.9061,-733.8804,50.0985,1658.8318,-43.4300,36.4876,4.0);
	    if(JobStep[playerid] == 23) SetPlayerRaceCheckpoint(playerid, 0, 1658.8318,-43.4300,36.4876,1772.3663,581.9141,23.7034,4.0);
	    if(JobStep[playerid] == 24) SetPlayerRaceCheckpoint(playerid, 0, 1772.3663,581.9141,23.7034,1841.4648,829.6874,9.9861,4.0);
	    if(JobStep[playerid] == 25) SetPlayerRaceCheckpoint(playerid, 0, 1841.4648,829.6874,9.9861,2187.5762,806.9039,7.2061,4.0);
	    if(JobStep[playerid] == 26) SetPlayerRaceCheckpoint(playerid, 0, 2187.5762,806.9039,7.2061,2290.9165,841.0883,13.9592,4.0);
	    if(JobStep[playerid] == 27) SetPlayerRaceCheckpoint(playerid, 0, 2290.9165,841.0883,13.9592,2350.4082,1025.8792,10.7723,4.0);
	    if(JobStep[playerid] == 28) SetPlayerRaceCheckpoint(playerid, 0, 2350.4082,1025.8792,10.7723,2570.7004,1070.5811,10.7773,4.0);
	    if(JobStep[playerid] == 29) SetPlayerRaceCheckpoint(playerid, 0, 2570.7004,1070.5811,10.7773,2613.5254,1315.6500,10.7696,4.0);
	    if(JobStep[playerid] == 30) SetPlayerRaceCheckpoint(playerid, 0, 2613.5254,1315.6500,10.7696,2476.1697,1476.3761,10.7715,4.0);
	    if(JobStep[playerid] == 31) SetPlayerRaceCheckpoint(playerid, 0, 2476.1697,1476.3761,10.7715,2401.2478,1616.5609,10.7727,4.0);
	    if(JobStep[playerid] == 32) SetPlayerRaceCheckpoint(playerid, 0, 2401.2478,1616.5609,10.7727,2291.8828,1775.9521,10.7812,4.0);
	    if(JobStep[playerid] == 33) SetPlayerRaceCheckpoint(playerid, 0, 2291.8828,1775.9521,10.7812,2154.7061,1996.3882,10.7744,4.0);
	    if(JobStep[playerid] == 34) SetPlayerRaceCheckpoint(playerid, 0, 2154.7061,1996.3882,10.7744,2228.1877,2386.0630,10.7777,4.0);
	    if(JobStep[playerid] == 35) SetPlayerRaceCheckpoint(playerid, 0, 2228.1877,2386.0630,10.7777,2086.0520,2456.9954,10.8048,4.0);
	    if(JobStep[playerid] == 36) SetPlayerRaceCheckpoint(playerid, 0, 2086.0520,2456.9954,10.8048,1948.1777,2396.3440,10.7688,4.0);
	    if(JobStep[playerid] == 37) SetPlayerRaceCheckpoint(playerid, 0, 1948.1777,2396.3440,10.7688,1922.7677,2317.8069,10.8393,4.0);
	    if(JobStep[playerid] == 38) SetPlayerRaceCheckpoint(playerid, 0, 1922.7677,2317.8069,10.8393,1922.8735,2117.9375,10.8652,4.0);
	    if(JobStep[playerid] == 39) SetPlayerRaceCheckpoint(playerid, 0, 1922.8735,2117.9375,10.8652,2093.9612,2017.9711,10.8407,4.0);
	    if(JobStep[playerid] == 40) SetPlayerRaceCheckpoint(playerid, 0, 2093.9612,2017.9711,10.8407,2039.7142,1522.0779,10.7595,4.0);
	    if(JobStep[playerid] == 41) SetPlayerRaceCheckpoint(playerid, 0, 2039.7142,1522.0779,10.7595,2040.6129,1169.0469,10.7807,4.0);
	    if(JobStep[playerid] == 42) SetPlayerRaceCheckpoint(playerid, 0, 2040.6129,1169.0469,10.7807,2038.9994,878.8145,7.1755,4.0);
	    if(JobStep[playerid] == 43) SetPlayerRaceCheckpoint(playerid, 0, 2038.9994,878.8145,7.1755,1755.5402,619.8901,21.3552,4.0);
	    if(JobStep[playerid] == 44) SetPlayerRaceCheckpoint(playerid, 0, 1755.5402,619.8901,21.3552,1619.3414,186.8276,33.5024,4.0);
	    if(JobStep[playerid] == 45) SetPlayerRaceCheckpoint(playerid, 0, 1619.3414,186.8276,33.5024,1659.4628,-329.5979,40.4135,4.0);
	    if(JobStep[playerid] == 46) SetPlayerRaceCheckpoint(playerid, 0, 1659.4628,-329.5979,40.4135,1688.2992,-728.0701,49.8404,4.0);
	    if(JobStep[playerid] == 47) SetPlayerRaceCheckpoint(playerid, 0, 1688.2992,-728.0701,49.8404,1412.3439,-937.3050,35.6120,4.0);
	    if(JobStep[playerid] == 48) SetPlayerRaceCheckpoint(playerid, 0, 1412.3439,-937.3050,35.6120,1432.5333,-1037.7094,23.7933,4.0);
	    if(JobStep[playerid] == 49) SetPlayerRaceCheckpoint(playerid, 0, 1432.5333,-1037.7094,23.7933,1574.0338,-1138.6904,23.6757,4.0);
	    if(JobStep[playerid] == 50) SetPlayerRaceCheckpoint(playerid, 0, 1574.0338,-1138.6904,23.6757,1711.5553,-1263.2328,13.4910,4.0);
	    if(JobStep[playerid] == 51) SetPlayerRaceCheckpoint(playerid, 0, 1711.5553,-1263.2328,13.4910,1590.8885,-1437.7626,13.4817,4.0);
	    if(JobStep[playerid] == 52) SetPlayerRaceCheckpoint(playerid, 0, 1590.8885,-1437.7626,13.4817,1428.2323,-1567.3893,13.4529,4.0);
	    if(JobStep[playerid] == 53) SetPlayerRaceCheckpoint(playerid, 0, 1428.2323,-1567.3893,13.4529,1446.8442,-1735.5527,13.4789,4.0);
	    if(JobStep[playerid] == 54) SetPlayerRaceCheckpoint(playerid, 0, 1446.8442,-1735.5527,13.4789,1580.1357,-1874.8420,13.4791,4.0);
	    if(JobStep[playerid] == 55) SetPlayerRaceCheckpoint(playerid, 0, 1580.1357,-1874.8420,13.4791,1818.1030,-1904.3914,13.5025,4.0);
	    if(JobStep[playerid] == 56) SetPlayerRaceCheckpoint(playerid, 0, 1818.1030,-1904.3914,13.5025,1958.2472,-1999.3572,13.4949,4.0);
	    if(JobStep[playerid] == 57) SetPlayerRaceCheckpoint(playerid, 0, 1958.2472,-1999.3572,13.4949,1936.2253,-2163.5068,13.4765,4.0);
	    if(JobStep[playerid] == 58)
		{
		    JobStep[playerid] = 0;
	 		SetPlayerRaceCheckpoint(playerid, 0, 1693.2972,-2197.6602,13.4714,1941.3706,-2169.2083,13.4851,4.0);
		}
	}
	return 1;
}

public restartTimer()
{
    iGMXTick--;
	new string[128];
	if(iGMXTick == 0)
	{
		KillTimer(iGMXTimer);
		SetTimer("GameModeInitExitFunc", 1000, 0);
		return 1;
	}
	if(iGMXTick == 20)
	{
		SendClientMessageToAll(COLOR_GREEN3, "Info: Afacerile cu bani reali sunt interzise.");
		SendClientMessageToAll(COLOR_GREEN3, "Info: Imprumuturile se fac pe propie raspundere. Va sfatuim sa nu imprumutati bani altor playeri.");
	}
	if(iGMXTick == 40)
	{
		SendClientMessageToAll(COLOR_GREEN3, "Info: Scopul restarturilor este de a repara bug-uri si/sau de a adauga chestii noi.");
		SendClientMessageToAll(COLOR_GREEN3, "Info: Daca se adauga ceva nou pe server, se va posta pe forum in topicul 'Server Updates' din forumul 'Anunturi Administrative'.");
		SendClientMessageToAll(COLOR_GREEN3, "Info: Daca nu se posteaza nimic pe forum, probabil nu s-a adaugat nimic nou.");
	}
	format(string, sizeof(string), "~w~The server will restart in...~n~ ~r~%d~w~ seconds.", iGMXTick);
	GameTextForAll(string, 1100, 3);
	return 1;
}

public SetFarmer(playerid)
{
	if(farmerc[playerid] == 1)
	{
		PlayerTextDrawShow(playerid, farmtime[playerid]);
	    PlayerTextDrawShow(playerid, farmjob[playerid]);
		PlayerTextDrawShow(playerid, farmbox[playerid]);
		PlayerTextDrawShow(playerid, farmtime[playerid]);
	    if(IsPlayerInRangeOfPoint(playerid,270.0,-388.4804,-1395.7417,23.4229))
	    {
			new tmpcar = GetPlayerVehicleID(playerid),
				ccar = IsPlayerInAnyVehicle(playerid),
				spe = Carspeed(playerid);
			GetPlayerPos(playerid, PlayerPos[playerid][0], PlayerPos[playerid][1], PlayerPos[playerid][2]);
			if(PlayerPos[playerid][0] == PlayerPos[playerid][3] && PlayerPos[playerid][1] == PlayerPos[playerid][4] && PlayerPos[playerid][2] == PlayerPos[playerid][5])
			{
				PlayerTextDrawShow(playerid, farmspeed[playerid]);
				if(PlayerInfo[playerid][pLanguage] == 1) PlayerTextDrawSetString(playerid, farmspeed[playerid], "~r~(!) Your moving speed needs to be higher than 25 KM/H.");
				if(PlayerInfo[playerid][pLanguage] == 2) PlayerTextDrawSetString(playerid, farmspeed[playerid], "~r~(!) Trebuie sa mergi cu o viteza mai mare de 25 KM/H.");
				return 1;
			}
			PlayerPos[playerid][3] = PlayerPos[playerid][0];
			PlayerPos[playerid][4] = PlayerPos[playerid][1];
			PlayerPos[playerid][5] = PlayerPos[playerid][2];
			if(ccar && IsAFarmer(tmpcar) && spe > 24)
			{
			    PlayerTextDrawHide(playerid, farmspeed[playerid]);
			    PlayerTextDrawHide(playerid, farmwanted[playerid]);
				if(farmertime[playerid] >= 1)
				{
					farmertime[playerid]--;
					new str2[128];
					if(PlayerInfo[playerid][pLanguage] == 1)
					{
						format(str2,sizeof(str2),"Work ~r~%d ~w~more seconds to get your reward",farmertime[playerid]);
					}
					else
					{
						format(str2,sizeof(str2),"Munceste pentru inca ~r~%d ~w~secunde pentru a fi platit",farmertime[playerid]);
					}
					PlayerTextDrawSetString(playerid, farmtime[playerid], str2);
					PlayerTextDrawShow(playerid, farmtime[playerid]);
				}
				else if(farmertime[playerid] == 0)
				{
				    new str3[128];
				    farmertime[playerid] = 1;
					farmerc[playerid] = 0;
					SetVehicleToRespawn(tmpcar);
					new randomtransport = random(10);
					if(randomtransport > 8)
					{
						new randfarmer;
						if(SvarInfo[2][svValue] == 0) randfarmer = 30000 + random(50000);
						else randfarmer = 33000 + random(55000);
						if(PlayerInfo[playerid][pLanguage] == 1) format(str3,sizeof(str3),"The farm owners were very pleased with the quality of your work. You received $%s.",FormatNumber(randfarmer));
						if(PlayerInfo[playerid][pLanguage] == 2) format(str3,sizeof(str3),"Detinatorii fermei au fost foarte multumiti de calitatea muncii prestate. Ai primit $%s.",FormatNumber(randfarmer));
						SCM(playerid,COLOR_GREEN,str3);
						GivePlayerCash(playerid,randfarmer);
						Update(playerid, pCashx);
					}
					else if(randomtransport >= 0 && randomtransport <= 8)
					{
						new faina;
						if(PlayerInfo[playerid][pFarmSkill] == 1)
						{
							faina = 15 + random(15);
						}
						else if(PlayerInfo[playerid][pFarmSkill] == 2)
						{
							faina = 17 + random(15);
						}
						else if(PlayerInfo[playerid][pFarmSkill] == 3)
						{
							faina = 19 + random(15);
						}
						else if(PlayerInfo[playerid][pFarmSkill] == 4)
						{
							faina = 21 + random(15);
						}
						else if(PlayerInfo[playerid][pFarmSkill] == 5)
						{
							faina = 23 + random(15);
						}
						else if(PlayerInfo[playerid][pFarmSkill] >= 6)
						{
							faina = 25 + random(15);
						}
					    AreFaina[playerid] = faina;
						if(PlayerInfo[playerid][pLanguage] == 1)
						{
							SendClientMessage(playerid, COLOR_GREEN, "The farm owners don't have any money to give you, but they can give you a bag of flour.");
							format(str3,sizeof(str3),"You have received a bag that contains %d kg of flour.", faina);
							SendClientMessage(playerid, COLOR_GREEN, str3);
							new randsms = random(2);
							if(randsms == 0)
							{
								SendClientMessage(playerid, COLOR_YELLOW, "SMS from Jake_Farmer (5554444): I heard the local fast food store is looking to buy some flour.");
							}
							else if(randsms == 1)
							{
								SendSplitMessage(playerid, COLOR_YELLOW, "SMS from Joe_Farmer (5554443): The local fast food store is probably looking to buy some flour. If I had the time, I would sell it myself.");
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREEN, "Detinatorii fermei nu au bani pentru a te plati, dar iti pot oferi un sac cu faina drept rasplata.");
							format(str3,sizeof(str3),"Ai primit un sac ce contine %d kg de faina.", faina);
							SendClientMessage(playerid, COLOR_GREEN, str3);
							new randsms = random(4);
							if(randsms == 0)
							{
								SendClientMessage(playerid, COLOR_YELLOW, "SMS de la Aurel.Tractoristul (5554441): Poti merge la fast food-urile din zona pentru a vinde faina.");
							}
							else if(randsms == 1)
							{
								SendClientMessage(playerid, COLOR_YELLOW, "SMS de la Marian.Tractoristul (5554442): Poti merge la fast food-urile din zona pentru a vinde faina.");
							}
							else if(randsms == 2)
							{
								SendClientMessage(playerid, COLOR_YELLOW, "SMS de la Mihai.Fermierul (5554443): Poti merge la fast food-urile din zona pentru a vinde faina.");
							}
							else if(randsms == 3)
							{
								SendClientMessage(playerid, COLOR_YELLOW, "SMS de la Gigel.Fermierul (5554444): Poti merge la fast food-urile din zona pentru a vinde faina.");
							}
						}
					}
					PlayerTextDrawHide(playerid, farmtime[playerid]);
					PlayerTextDrawHide(playerid, farmjob[playerid]);
					PlayerTextDrawHide(playerid, farmbox[playerid]);
					PlayerTextDrawHide(playerid, farmspeed[playerid]);
					PlayerTextDrawHide(playerid, farmwanted[playerid]);
					KillTimer(timerfarmm[playerid]);
				}
			}
			else
			{
			    PlayerTextDrawShow(playerid, farmspeed[playerid]);
				if(PlayerInfo[playerid][pLanguage] == 1) PlayerTextDrawSetString(playerid, farmspeed[playerid], "~r~(!) Your moving speed needs to be higher than 25 KM/H.");
				if(PlayerInfo[playerid][pLanguage] == 2) PlayerTextDrawSetString(playerid, farmspeed[playerid], "~r~(!) Trebuie sa mergi cu o viteza mai mare de 25 KM/H.");
			}
		}
		else
		{
			if(WantedFarmer[playerid] == 0)
			{
				PlayerTextDrawHide(playerid, farmspeed[playerid]);
				PlayerTextDrawShow(playerid, farmwanted[playerid]);
				if(PlayerInfo[playerid][pLanguage] == 1) PlayerTextDrawSetString(playerid, farmwanted[playerid], "~r~Go back to the farm or the farm owners ~n~will call the police.");
				if(PlayerInfo[playerid][pLanguage] == 2) PlayerTextDrawSetString(playerid, farmwanted[playerid], "~r~Mergi inapoi la ferma sau vei primi wanted !");
				WantedFarmer[playerid] = 60;
			}
			else
			{
				WantedFarmer[playerid]--;
				if(WantedFarmer[playerid] == 0)
				{
					if(!IsACop(playerid))
					{
						SetVehicleToRespawn(GetPlayerVehicleID(playerid));
						WantedPoints[playerid] += 2;
						SetPlayerCriminal(playerid,-1, "stealing a vehicle from the farm");
					}
					else
					{
						WantedFarmer[playerid] = 60;
					}
				}
			}
		}
	}
	return 1;
}
public TenSecondsTimer()
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && gPlayerLogged[i] != 0)
		{
		    if(PlayerInfo[i][pWantedLevel] == 0)
			{
				SetPlayerWantedLevel(i,0);
				PlayerTextDrawHide(i, WantedText[i]);
			}
		    else if(PlayerInfo[i][pWantedLevel] == 1) SetPlayerWantedLevel(i,1);
			else if(PlayerInfo[i][pWantedLevel] == 2) SetPlayerWantedLevel(i,2);
			else if(PlayerInfo[i][pWantedLevel] == 3) SetPlayerWantedLevel(i,3);
			else if(PlayerInfo[i][pWantedLevel] == 4) SetPlayerWantedLevel(i,4);
			else if(PlayerInfo[i][pWantedLevel] == 5) SetPlayerWantedLevel(i,5);
			else if(PlayerInfo[i][pWantedLevel] >= 6) SetPlayerWantedLevel(i,6);
			if(PlayerInfo[i][pWantedLevel] >= 1)
			{
				new str1[256];
			    PlayerTextDrawShow(i, WantedText[i]);
	   			if(PlayerInfo[i][pLanguage] == 2) format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[i]/60+1);
				else format(str1,sizeof(str1),"WANTED DECREASES IN: ~r~%d MINUTES",wantedlost[i]/60+1);
				PlayerTextDrawSetString(i, WantedText[i], str1);
			}
			if(IsACop(i))
			{
				foreach(new j : Player)
				{
					if(PlayerInfo[j][pWantedLevel] >= 1)
					{
						SetPlayerMarkerForPlayer( i, j, ( 0xFF2B5D72 & 0xFFFFFF00 ) );
					}
				}
			}
			if(PlayerInfo[i][pQuest1] == 1 && PlayerInfo[i][pQuestProgress1] == 0)
			{
				if(IsPlayerInRangeOfPoint(i,100.0,1356.1946,2147.4456,11.0156))
				{
					PlayerInfo[i][pQuestProgress1] = 1;
					Update(i, pQuestProgress1x);
					FinishQuest1(i, 1);
				}
			}
			if(PlayerInfo[i][pQuest1] == 2 && PlayerInfo[i][pQuestProgress1] == 0)
			{
				if(IsPlayerInRangeOfPoint(i,100.0,-2317.8091,-1637.5575,483.7031))
				{
					PlayerInfo[i][pQuestProgress1] = 1;
					Update(i, pQuestProgress1x);
					FinishQuest1(i, 2);
				}
			}
			if(playerdeath[i] == 1 && IsPlayerAFK[i] == 0) SetPlayerHealthEx(i, 0.0); // [dead] bug
		}
	}
	new query[300],playerid,giverid,actionid,actiontime,complaint,reason[64],stringg[256],playername[30],givername[30],var100[300],dm,reason2[64];
	//Check panel
	format(query, sizeof(query), "SELECT * FROM `actiunipanelbre`");
	new Cache: stringresult = mysql_query(SQL, query);
	if(cache_get_row_count() > 0)
	{
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			playerid                    = cache_get_field_content_int(i, "playerid");
			giverid                     = cache_get_field_content_int(i, "giverid");
			actionid                    = cache_get_field_content_int(i, "actionid");
			actiontime                  = cache_get_field_content_int(i, "actiontime");
			complaint                 	= cache_get_field_content_int(i, "complaintid");
			dm							= cache_get_field_content_int(i, "dm");
			cache_get_field_content(i, "playername", playername, SQL, sizeof(playername));
			cache_get_field_content(i, "givername", givername, SQL, sizeof(givername));
			cache_get_field_content(i, "reason", reason, SQL, sizeof(reason));

			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO panelactions2 (`playerid`,`giverid`,`actionid`,`actiontime`,`complaintid`,`dm`,`playername`,`givername`,`reason`) VALUES ('%d','%d','%d','%d','%d','%d','%s','%s','%s')",playerid,giverid,actionid,actiontime,complaint,dm,playername,givername,reason);
			mysql_tquery(SQL,var100,"","");

			switch(actionid)
			{
				case 1: {
					if(complaint > 0)
					{
						format(stringg,sizeof(stringg),"AdmPanel: %s has been banned by %s for %d days, reason: %s [complaint:%d].",playername,givername,actiontime,reason,complaint);
						SendClientMessageToAll(COLOR_LIGHTRED, stringg);
						format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
					}
					else
					{
						format(stringg,sizeof(stringg),"AdmPanel: %s has been banned by %s for %d days, reason: %s.",playername,givername,actiontime,reason);
						SendClientMessageToAll(COLOR_LIGHTRED, stringg);
						format(reason2,sizeof(reason2),"%s",reason);
					}
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','1','%d','%s','%s','%s','%d')",playerid,giverid,actiontime,reason2,playername,givername,gettime());
					mysql_tquery(SQL,var100,"","");
					foreach(new idd : Player)
					{
						if(PlayerInfo[idd][pSQLID] == playerid)
						{
							KickEx(idd);
						}
					}
				}
				case 2: {
					if(complaint > 0)
					{
						format(stringg,sizeof(stringg),"AdmPanel: %s has been permanent banned by %s, reason: %s [complaint:%d].",playername,givername,reason,complaint);
						SendClientMessageToAll(COLOR_LIGHTRED, stringg);
						format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
					}
					else
					{
						format(stringg,sizeof(stringg),"AdmPanel: %s has been permanent banned by %s, reason: %s.",playername,givername,reason);
						SendClientMessageToAll(COLOR_LIGHTRED, stringg);
						format(reason2,sizeof(reason2),"%s",reason);
					}
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','2','0','%s','%s','%s','%d')",playerid,giverid,reason2,playername,givername,gettime());
					mysql_tquery(SQL,var100,"","");
					foreach(new idd : Player)
					{
						if(PlayerInfo[idd][pSQLID] == playerid)
						{
							KickEx(idd);
						}
					}
				}
				case 3: {
					if(complaint > 0)
					{
						format(stringg, sizeof(stringg), "AdmPanel: %s was jailed by %s for %d minutes, reason: %s [complaint:%d]",playername,givername,actiontime,reason,complaint);
						SendClientMessageToAll(COLOR_LIGHTRED, stringg);
						format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
					}
					else
					{
						format(stringg, sizeof(stringg), "AdmPanel: %s was jailed by %s for %d minutes, reason: %s",playername,givername,actiontime,reason);
						SendClientMessageToAll(COLOR_LIGHTRED, stringg);
						format(reason2,sizeof(reason2),"%s",reason);
					}
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','6','%d','%s','%s','%s','%d')",playerid,giverid,actiontime,reason2,playername,givername,gettime());
					mysql_tquery(SQL,var100,"","");
					foreach(new idd : Player)
					{
						if(PlayerInfo[idd][pSQLID] == playerid)
						{
							ResetPlayerWeaponsEx(idd);
							ResetPlayerWeapons(idd);
							WantedPoints[idd] = 0;
							PlayerInfo[idd][pJailed] = 2;
							PlayerInfo[idd][pJailTime] = actiontime*60;
							SetPlayerInterior(idd, 10);
							new rand;
							rand = random(sizeof(gRandomAJailSpawns));
							SetPlayerPosEx(idd,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
							if(dm > 0)
							{
								PlayerInfo[idd][pGunLic] = 0;
								PlayerInfo[idd][pGunLicT] = 0;
								PlayerInfo[idd][pGunLicSuspend] = dm + 1;
							}
						}
					}
				}
				case 4: {
					if(complaint > 0)
					{
						format(stringg, sizeof(stringg), "AdmPanel: %s received a warn from admin %s, reason: %s [complaint:%d].",playername,givername,reason,complaint);
						SendClientMessageToAll(COLOR_LIGHTRED, stringg);
						format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
					}
					else
					{
						format(stringg, sizeof(stringg), "AdmPanel: %s received a warn from admin %s, reason: %s.",playername,givername,reason);
						SendClientMessageToAll(COLOR_LIGHTRED, stringg);
						format(reason2,sizeof(reason2),"%s",reason);
					}
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','5','%d','%s','%s','%s','%d')",playerid,giverid,actiontime,reason2,playername,givername,gettime());
					mysql_tquery(SQL,var100,"","");
					foreach(new idd : Player)
					{
						if(PlayerInfo[idd][pSQLID] == playerid)
						{
							PlayerInfo[idd][pWarns] += 1;
						}
					}
					format(query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%d' ORDER BY `id`",playerid);
					new Cache: stringresultt = mysql_query(SQL, query);
					if(cache_get_row_count() > 0)
					{
						new warns,str[256],time;
						for(new is, js = cache_get_row_count (); is != js; ++is)
						{
							warns                    = cache_get_field_content_int(is, "Warnings");
						}
						if(warns == 1)
						{
							mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `WarnReason1` = '%s' WHERE `name`='%s'",reason,playername);
							mysql_tquery(SQL,str,"","");
						}
						else if(warns == 2)
						{
							mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `WarnReason2` = '%s' WHERE `name`='%s'",reason,playername);
							mysql_tquery(SQL,str,"","");
						}
						else if(warns > 2)
						{
							format(stringg, sizeof(stringg), "AdmPanel: %s has been banned by AdmBot for 3 days, reason: 3/3 warns.",playername);
							time = gettime() + (3*86400);
							mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', 'AdmBot', '3/3 warns', '0', 3, 0, 0, 1, %d)",
							playername,time);
							mysql_tquery(SQL,str,"","");
							mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `Warnings`='0', `WarnReason1` = '(null)', `WarnReason2` = '(null)' WHERE `name`='%s'",playername);
							mysql_tquery(SQL,str,"","");
							mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','0','1','3','3/3 warns','%s','AdmBot','%d')",playerid,playername, gettime());
							mysql_tquery(SQL,var100,"","");
							SendClientMessageToAll(COLOR_LIGHTRED, stringg);
							foreach(new idd : Player)
							{
								if(PlayerInfo[idd][pSQLID] == playerid)
								{
									format(stringg, sizeof(stringg), "You have received an warn from admin %s, reason: %s", givername, reason);
									SendClientMessage(idd, COLOR_RED2, stringg);
									KickEx(idd);
								}
							}
						}
					}
					cache_delete(stringresultt);
				}
				case 5: {
					if(complaint > 0)
					{
						format(stringg, sizeof(stringg), "AdmPanel: %s has been muted by %s for %d minutes, reason: %s [complaint:%d].",playername,givername,actiontime,reason,complaint);
						ABroadCast(COLOR_LIGHTRED, stringg, 1);
						format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
					}
					else
					{
						format(stringg, sizeof(stringg), "AdmPanel: %s has been muted by %s for %d minutes, reason: %s.",playername,givername,actiontime,reason);
						ABroadCast(COLOR_LIGHTRED, stringg, 1);
						format(reason2,sizeof(reason2),"%s",reason);
					}
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','7','%d','%s','%s','%s','%d')",playerid,giverid,actiontime,reason2,playername,givername,gettime());
					mysql_tquery(SQL,var100,"","");
					foreach(new idd : Player)
					{
						if(PlayerInfo[idd][pSQLID] == playerid)
						{
							PlayerInfo[idd][pMuted] = 1;
							PlayerInfo[idd][pMuteTime] = actiontime*60;
							format(stringg, sizeof(stringg), "* You were muted by Admin %s for %d minutes, reason: %s.", givername, actiontime, reason);
							SendClientMessage(idd, COLOR_RED2, stringg);
						}
					}
				}
				case 6: {
					if(complaint > 0)
					{
						format(stringg, sizeof(stringg), "AdmPanel: %s has been kicked by %s, reason: %s [complaint:%d].",playername,givername,reason,complaint);
						SendClientMessageToAll(COLOR_LIGHTRED, stringg);
						format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
					}
					else
					{
						format(stringg, sizeof(stringg), "AdmPanel: %s has been kicked by %s, reason: %s.",playername,givername,reason);
						SendClientMessageToAll(COLOR_LIGHTRED, stringg);
						format(reason2,sizeof(reason2),"%s",reason);
					}
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO kicklogs (`playerid`,`giverid`,`playername`,`givername`,`reason`) VALUES ('%d','%d','%s','%s','%s')", playerid,giverid,playername,givername,reason2);
					mysql_tquery(SQL,var100,"","");
					foreach(new idd : Player)
					{
						if(PlayerInfo[idd][pSQLID] == playerid)
						{
							KickEx(idd);
						}
					}
				}
				case 7: {
					mysql_format(SQL, var100, sizeof(var100), "SELECT * FROM `clans`");
					mysql_tquery(SQL, var100, "LoadClanInfo", "");
					foreach(new ids : Player)
					{
						if(IsPlayerConnected(ids))
						{
							if(PlayerInfo[ids][pSQLID] == playerid)
							{
								PlayerInfo[ids][pClan] = complaint;
								PlayerInfo[ids][pCRank] = 7;
								PlayerInfo[ids][pPremiumPoints] -= 100;
							}
						}
					}
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','Felicitari! Ai cumparat un clan cu numele %s, foloseste /clan pentru a deschide meniul acestuia.')",playerid,playername);
					mysql_tquery(SQL,var100,"","");
				}
				case 8: {
					foreach(new idd : Player)
					{
						if(PlayerInfo[idd][pSQLID] == playerid)
						{
							if(PlayerInfo[idd][pLanguage] == 2) format(stringg, sizeof(stringg), "Tu sau altcineva ce are acces la contul tau a solicitat deconectarea ta din joc. IP: %s.", playername);
							else format(stringg, sizeof(stringg), "You or someone else that have access to your account has requested to disconnect you from game. IP: %s.", playername);
							SendClientMessage(idd, COLOR_YELLOW, stringg);
							KickEx(idd);
						}
					}
				}
				case 9: {
					format(stringg, sizeof(stringg), "(ADMINS)AdmPanel: Admin %s has set %s's premium points to %d.", givername, playername, complaint);
					ABroadCast(COLOR_COOLRED, stringg, 1);
					format(stringg, sizeof(stringg), "AdmPanel: Admin %s has set %s's premium points to %d.", givername, playername, complaint);
					Log(actiontime, stringg, "set");
					foreach(new idd : Player)
					{
						if(PlayerInfo[idd][pSQLID] == playerid)
						{
							PlayerInfo[idd][pPremiumPoints] = complaint;
							format(stringg, sizeof(stringg), "* Admin %s has set your premium points to %d.", givername, complaint);
							SendClientMessage(idd, COLOR_RED2, stringg);
						}
					}
				}
				case 10: {
					format(stringg, sizeof(stringg), "(ADMINS)AdmPanel: Admin %s has set %s's faction punish to %d.", givername, playername, complaint);
					ABroadCast(COLOR_COOLRED, stringg, 1);
					format(stringg, sizeof(stringg), "AdmPanel: Admin %s has set %s's faction punish to %d.", givername, playername, complaint);
					Log(actiontime, stringg, "set");
					foreach(new idd : Player)
					{
						if(PlayerInfo[idd][pSQLID] == playerid)
						{
							PlayerInfo[idd][pFpunish] = complaint;
							format(stringg, sizeof(stringg), "* Admin %s has set your faction punish to %d.", givername, complaint);
							SendClientMessage(idd, COLOR_RED2, stringg);
						}
					}
				}
				case 11: {
					format(stringg, sizeof(stringg), "(ADMINS)AdmPanel: Admin %s has set %s's warns to %d.", givername, playername, complaint);
					ABroadCast(COLOR_COOLRED, stringg, 1);
					format(stringg, sizeof(stringg), "AdmPanel: Admin %s has set %s's warns to %d.", givername, playername, complaint);
					Log(actiontime, stringg, "set");
					foreach(new idd : Player)
					{
						if(PlayerInfo[idd][pSQLID] == playerid)
						{
							PlayerInfo[idd][pWarns] = complaint;
							Update(idd, pWarnsx);
							format(stringg, sizeof(stringg), "* Admin %s has set your warns to %d.", givername, complaint);
							SendClientMessage(idd, COLOR_RED2, stringg);
							if(complaint == 0)
							{
								mysql_format(SQL, var100, sizeof(var100), "UPDATE `users` SET `WarnReason1` = '(null)', `WarnReason2` = '(null)' WHERE `id` = '%d'", playerid);
								mysql_tquery(SQL, var100, "", "");
							}
							else if(complaint == 1)
							{
								if(actiontime == 1)
								{
									mysql_format(SQL, var100, sizeof(var100), "UPDATE `users` SET `WarnReason2` = '(null)' WHERE `id` = '%d'", playerid);
									mysql_tquery(SQL, var100, "", "");
								}
							}
						}
					}
				}
				case 12: {
					if(actiontime == 1) DynamicFactions[complaint][fApplication] = 0;
					else if(actiontime == 2) DynamicFactions[complaint][fApplication] = 1;
				}
				case 13: {
					format(stringg, sizeof(stringg), "(ADMINS)AdmPanel: Admin %s has released %s from jail.", givername, playername, complaint);
					ABroadCast(COLOR_COOLRED, stringg, 1);
					foreach(new idd : Player)
					{
						if(PlayerInfo[idd][pSQLID] == playerid)
						{
							format(stringg, sizeof(stringg), "* Admin %s has released you from jail.", givername);
							SendClientMessage(idd, COLOR_RED2, stringg);
							ResetPlayerWeaponsEx(idd);
							ResetPlayerWeapons(idd);
							WantedPoints[idd] = 0;
							PlayerInfo[idd][pJailed] = 0;
							PlayerInfo[idd][pJailTime] = 0;
							PlayerInfo[idd][pWantedLevel] = 0;
							SetPlayerInterior(idd, 0);
							SetPlayerVirtualWorld(idd, 0);
							SetPlayerPosEx(idd, -1973.7002,137.7904,27.6875);
							SetPlayerSkin(idd, PlayerInfo[idd][pModel]);
							ClearCrime(idd);
							PlayerTextDrawHide(idd, Jailtime[idd]);
						}
					}
					format(stringg, sizeof(stringg), "AdmPanel: %s was released from jail by admin %s.", playername, givername);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`actiontime`,`unixtime`) VALUES ('%d','%d','8','panel','%s','%s','0','%d')",playerid,giverid,playername,givername,gettime());
					mysql_tquery(SQL, var100, "", "");
				}
				case 14: {
					mysql_format(SQL, var100, sizeof(var100), "SELECT * FROM `clans`");
					mysql_tquery(SQL, var100, "LoadClanInfo", "");
					foreach(new xd : Player)
					{
						if(PlayerInfo[xd][pSQLID] == playerid) PlayerInfo[xd][pPremiumPoints] -= 25;
					}
				}
				case 15: {
					mysql_format(SQL, var100, sizeof(var100), "SELECT * FROM `clans`");
					mysql_tquery(SQL, var100, "LoadClanInfo", "");
					foreach(new xd : Player)
					{
						if(PlayerInfo[xd][pSQLID] == playerid) PlayerInfo[xd][pPremiumPoints] -= 10;
					}
				}
				case 16: {
					new idd;
					format(query, sizeof(query), "SELECT id FROM `users` WHERE `Clan` = '%d'", complaint);
					new Cache: masta = mysql_query(SQL, query);
					if(cache_get_row_count() >= 1)
					{
						for(new x, xx = cache_get_row_count (); x != xx; ++x)
						{
							idd = cache_get_field_content_int(x, "id");
							mysql_format(SQL, query, sizeof(query), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','Ai fost dat afara din clan deoarece acesta a fost sters.')",idd);
							mysql_tquery(SQL, query, "", "");
						}
					}
					cache_delete(masta);
					mysql_format(SQL, query, sizeof(query), "UPDATE users SET `CRank`='0',`Clan`='0',`ClanJoin`='0',`ClanTag`='0',`ClanWarns`='0' WHERE `Clan`='%d'", complaint);
					mysql_tquery(SQL, query, "", "");
					mysql_format(SQL, query, sizeof(query), "UPDATE `clans` SET `clanName`='None',`clanTag`='[NONE]',`clanMOTD`='Expired',`clanActive`='0' WHERE `clanID`='%d'", complaint);
					mysql_tquery(SQL, query, "", "");
					mysql_format(SQL, query, sizeof(query), "INSERT INTO clan_logs (`action`,`clanid`) VALUES ('The clan was deleted by %s. All members were uninvited.','%d')",playername,complaint);
					mysql_tquery(SQL, query, "", "");
					foreach(new x : Player)
					{
						if(PlayerInfo[x][pClan] == complaint)
						{
							format(stringg, 50, "%s", PlayerInfo[x][pNormalName]);
							SetPlayerName(x,stringg);
							PlayerInfo[x][pClan] = 0;
							PlayerInfo[x][pCRank] = 0;
							PlayerInfo[x][pCWarns] = 0;
						}
					}
				}
			}
		}
		mysql_query(SQL,"DELETE FROM `actiunipanelbre`");
	}
	cache_delete(stringresult);
	// Check emails
	format(query, sizeof(query), "SELECT * FROM `emails` WHERE `EmailRead` = '1' ORDER BY `ID`");
	new Cache: stringresult2 = mysql_query(SQL, query);
	if(cache_get_row_count() > 0)
	{
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
   			playerid                    = cache_get_field_content_int(i, "playerid");
   			giverid                     = cache_get_field_content_int(i, "giverid");
   			foreach(new idd : Player)
   			{
   			    if(PlayerInfo[idd][pSQLID] == playerid && PlayerInfo[idd][pNextNotification] < 1 && gPlayerLogged[idd] == 1 && PlayerInfo[idd][pBlockedAcc] == 0)
   			    {
   			        SendClientMessage(idd, COLOR_YELLOW, "{FF6200}** {FFFF00}You have a new email(s). Use /email to read it. {FF6200}**");
   			        PlayerInfo[idd][pNextNotification] = 3600;
				}
			}
		}
	}
	cache_delete(stringresult2);
	return 1;
}
public SavePlayerData()
{
	foreach(new i : Player)
	{
    	OnPlayerDateUpdateX2(i);
		Update(i, pPayDayx);
		Update(i, pPayCheckx);
		Update(i, pFpunishx);
		Update(i, pConnectTimex);
		Update(i, pBank);
		Update(i, pCashx);
		Update(i, pRP);
		Update(i, pJailTimex);
		Update(i, pLevelx);
		Update(i, pOnlineTimeTodayx);
	}
	new query[300],var100[300];
	// Auto Delete Server Logs
	foreach(new id : Player)
	{
		//Delete Chat Logs
		format(query, sizeof(query), "SELECT * FROM `chat_logs` WHERE `playerid`='%d' ORDER BY `ID`", PlayerInfo[id][pSQLID]);
		new Cache: chatnums = mysql_query(SQL, query);
		if(cache_get_row_count() > 200)
		{
			new limit = cache_get_row_count() - 200;
			mysql_format(SQL, var100, sizeof(var100), "DELETE FROM `chat_logs` WHERE `playerid`='%d' ORDER BY `ID` ASC limit %d", PlayerInfo[id][pSQLID], limit);
    		mysql_tquery(SQL, var100, "", "");
		}
		cache_delete(chatnums);
	    //Delete Player Logs
		format(query, sizeof(query), "SELECT * FROM `playerlogs` WHERE `playerid` = '%d' ORDER BY `ID`", PlayerInfo[id][pSQLID]);
		new Cache: stringresult3 = mysql_query(SQL, query);
		if(cache_get_row_count() > 200)
		{
			new limit = cache_get_row_count() - 200;
   			mysql_format(SQL, var100, sizeof(var100), "DELETE FROM `playerlogs` WHERE `playerid`='%d' ORDER BY `ID` ASC limit %d", PlayerInfo[id][pSQLID], limit);
    		mysql_tquery(SQL, var100, "", "");
		}
		cache_delete(stringresult3);
		//Delete Kill Logs
		format(query, sizeof(query), "SELECT * FROM `kill_logs` WHERE `playerid` = '%d' ORDER BY `ID`", PlayerInfo[id][pSQLID]);
		new Cache: stringresult5 = mysql_query(SQL, query);
		if(cache_get_row_count() > 100)
		{
			new limit = cache_get_row_count() - 100;
   			mysql_format(SQL, var100, sizeof(var100), "DELETE FROM `kill_logs` WHERE `playerid`='%d' ORDER BY `ID` ASC limit %d", PlayerInfo[id][pSQLID], limit);
    		mysql_tquery(SQL, var100, "", "");
		}
		cache_delete(stringresult5);
		//Delete Suspect Logs
		format(query, sizeof(query), "SELECT * FROM `su_logs` WHERE `playerid` = '%d' ORDER BY `ID`", PlayerInfo[id][pSQLID]);
		new Cache: stringresult6 = mysql_query(SQL, query);
		if(cache_get_row_count() > 50)
		{
			new limit = cache_get_row_count() - 50;
   			mysql_format(SQL, var100, sizeof(var100), "DELETE FROM `su_logs` WHERE `playerid`='%d' ORDER BY `ID` ASC limit %d", PlayerInfo[id][pSQLID], limit);
    		mysql_tquery(SQL, var100, "", "");
		}
		cache_delete(stringresult6);
	}
	//Auto Delete IP Logs
	mysql_format(SQL, query, sizeof(query), "DELETE FROM playerconnections WHERE time < %d", gettime()-86400*14);
	mysql_tquery(SQL, query, "", "");
	//Auto Expire Clan
	format(query, sizeof(query), "SELECT * FROM `clans` WHERE `clanExpire` < '%d' AND `clanActive`='1' ORDER BY `clanID`",gettime());
	new Cache: stringresult8 = mysql_query(SQL, query);
	if(cache_get_row_count() > 0)
	{
		new clanid;
		clanid = cache_get_field_content_int(0, "clanID");
		foreach(new id : Player)
		{
			if(PlayerInfo[id][pClan] == clanid)
			{
				if(PlayerInfo[id][pCRank] < 7)
				{
					SetPlayerName(id, PlayerInfo[id][pNormalName]);
					PlayerInfo[id][pClan] = 0;
					PlayerInfo[id][pCRank] = 0;
					PlayerInfo[id][pCWarns] = 0;
					PlayerInfo[id][pClanTag] = 0;
				}
			}
		}
		mysql_format(SQL,var100,sizeof(var100),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('This clan has expired. All members were uninvited. / Perioada pentru care a fost platit clanul s-a terminat. Toti membrii clanului au primit uninvite.','%d')", clanid);
		mysql_tquery(SQL,var100,"","");
		mysql_format(SQL,var100, sizeof(var100), "UPDATE `users` SET `Clan`='0',`CRank`='0',`ClanTag`='0',`CWarns`='0' WHERE `Clan`='%d' AND `CRank` < '7'", clanid);
		mysql_tquery(SQL,var100,"","");
		mysql_format(SQL,var100, sizeof(var100), "UPDATE `clans` SET `clanActive`='0' WHERE `clanID`='%d'",clanid);
		mysql_tquery(SQL,var100,"","");
	}
	cache_delete(stringresult8);
	printf("SavePlayerData: All player data saved(10 minutes).");
	return 1;
}
public PlayerMapIconPaint(playerid)
{
	foreach(new iss : Player)
	{
		if(PlayerInfo[iss][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
		{
			if(playerid != iss)
			{
				SetPlayerMarkerForPlayer( playerid, iss, GetPlayerColor( iss ) );
				SetPlayerMarkerForPlayer( iss, playerid, GetPlayerColor( playerid ) );
			}
		}
	}
	return 1;
}
public PrepareRoundRace1()
{
	if(racep[0] > 1)
	{
		if(racers[0] == 119)
		{
			racecol[0] = 0;
			racevotecol[0][0] = 0;
			racevotecol[0][1] = 0;
			for(new x; x < 20; x++)
			{
				racevotec[0][x] = 0;
			}
			for(new s; s < 5; s++)
			{
				racevotem[0][s] = 0;
			}
			rmapvoted[0] = 0;
			carvoted[0] = 0;
			racec[0] = 0;
			racem[0] = 0;
		}
		new string[128];
    	if(racers[0] >= 1)
     	{
			racers[0]--;
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][pRaceG] == 0)
	    		{
					new stringg[64];
					PlayerTextDrawShow(i, PaintBallText[i]);
        			new minutes = floatround(racers[0]/60),
  			    		seconds = floatround(racers[0] - minutes*60);
       				if(seconds>9)format(stringg,sizeof(stringg),"0%d:%d",minutes,seconds);
   					else format(stringg,sizeof(stringg),"0%d:0%d",minutes,seconds);
   					format(string,sizeof(string),"RACE ROUND STARTS IN ~y~%s",stringg);
    				PlayerTextDrawSetString(i, PaintBallText[i], string);
					if(racers[0] == 5)
					{
						GameTextForPlayer(i, "~r~3", 1000, 3);
						PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
						PlayerInfo[i][pRaceVoted] = 0;
					}
					if(racers[0] == 4)
					{
						GameTextForPlayer(i, "~y~2", 1000, 3);
						PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
					}
					if(racers[0] == 3)
					{
						GameTextForPlayer(i, "~g~1", 1000, 3);
						PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
					}
					if(racers[0] == 2)
					{
						GameTextForPlayer(i, "~b~GO ~y~GO ~r~GO", 3000, 3);
						PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
						TogglePlayerControllable(i, 1);
						StopAudioStreamForPlayer(i);
						PlayAudioStreamForPlayer(i, "http://k003.kiwi6.com/hotlink/i7s248tqup/Aywy._and_EphRem_-_Adderall.mp3");
						for(new cars; cars < racep[0]; cars++)
						{
							new engine,lights,alarm,doors,bonnet,boot,objective;
							GetVehicleParamsEx(rcarid[0][cars],engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(rcarid[0][cars],VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
						}
					}
				}
			}
		}
		if(racers[0] == 12)
		{
			new maxim,map,maximm,car;
			for(new g = 0; g < 5; g++) if(racevotem[0][g] > maxim) { maxim = racevotem[0][g]; map = g;}
			if(rmapvoted[0] > 0)
			{
				racem[0] = map+1;
			}
			for(new m = 0; m < 20; m++) if(racevotec[0][m] > maximm) { maximm = racevotec[0][m]; car = m;}
			if(carvoted[0] > 0)
			{
				racec[0] = car;
			}
			for(new cars; cars < racep[0]; cars++)
			{
				if(racem[0] == 1)
				{
					rcarid[0][cars] = CreateVehicle(RaceCar[racec[0]][0], RaceCPos1[cars][0], RaceCPos1[cars][1], RaceCPos1[cars][2], RaceCPos1[cars][3], -1, -1, -1);
				}
				if(racem[0] == 2)
				{
					rcarid[0][cars] = CreateVehicle(RaceCar[racec[0]][0], RaceCPos2[cars][0], RaceCPos2[cars][1], RaceCPos2[cars][2], RaceCPos2[cars][3], -1, -1, -1);
				}
				if(racem[0] == 3)
				{
					rcarid[0][cars] = CreateVehicle(RaceCar[racec[0]][0], RaceCPos3[cars][0], RaceCPos3[cars][1], RaceCPos3[cars][2], RaceCPos3[cars][3], -1, -1, -1);
				}
				SetVehicleVirtualWorld(rcarid[0][cars], 1);
			}
			foreach(new d : Player)
			{
				if(PlayerInfo[d][pRaceG] == 0)
				{
					RaceCP[d] = 0;
					RacePos[d] = 0;
				}
			}
		}
		if(racers[0] == 10)
		{
			new ss;
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pRaceG] == 0)
				{
					ApplyAnimation(i, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
        			ClearAnimations(i);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
       				PlayerHandsup[i] = 0;
					PutPlayerInVehicleEx(i, rcarid[0][ss], 0);
					SetPlayerVirtualWorld(i, 1);
					if(racem[0] == 1)
					{
						SetPlayerRaceCheckpoint(i, 0, RaceCCPos1[0][0], RaceCCPos1[0][1], RaceCCPos1[0][2], RaceCCPos1[1][0], RaceCCPos1[1][1], RaceCCPos1[1][2], 10.0);
						RaceCP[i] = 1;
					}
					if(racem[0] == 2)
					{
						SetPlayerRaceCheckpoint(i, 0, RaceCCPos2[0][0], RaceCCPos2[0][1], RaceCCPos2[0][2], RaceCCPos2[1][0], RaceCCPos2[1][1], RaceCCPos2[1][2], 10.0);
						RaceCP[i] = 1;
					}
					if(racem[0] == 3)
					{
						SetPlayerRaceCheckpoint(i, 0, RaceCCPos3[0][0], RaceCCPos3[0][1], RaceCCPos3[0][2], RaceCCPos3[1][0], RaceCCPos3[1][1], RaceCCPos3[1][2], 10.0);
						RaceCP[i] = 1;
					}
					if(racecol[0] == 1)
					{
						DisableRemoteVehicleCollisions(i, 1);
					}
					TogglePlayerControllable(i, 0);
					ss++;
					StopAudioStreamForPlayer(i);
					RacePos[i] = racep[0];
				}
			}
		}
		if(racers[0] == 2)
		{
		    racers[0] = 0;
			racet[0] = 601;
			KillTimer(preparerace1);
			KillTimer(racerun1);
			racerun1 = SetTimer("RaceRun1", 1000, 1);
		}
	}
	else if(racep[0] < 2)
	{
		racet[0] = 0;
  		racers[0] = 0;
		KillTimer(preparerace1);
		KillTimer(racerun1);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pRaceG] == 0)
			{
			    curatj[i] = 0;
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
				PlayerInfo[i][pRaceVoted] = 0;
			}
		}
	}
	return 1;
}
public PrepareRoundRace2()
{
	if(racep[1] > 1)
	{
		if(racers[1] == 119)
		{
			racecol[1] = 0;
			racevotecol[1][0] = 0;
			racevotecol[1][1] = 0;
			for(new x; x < 20; x++)
			{
				racevotec[1][x] = 0;
			}
			for(new s; s < 5; s++)
			{
				racevotem[1][s] = 0;
			}
			rmapvoted[1] = 0;
			carvoted[1] = 0;
			racec[1] = 0;
			racem[1] = 0;
		}
		new string[128];
    	if(racers[1] >= 1)
     	{
			racers[1]--;
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][pRaceG] == 1)
	    		{
					new stringg[64];
					PlayerTextDrawShow(i, PaintBallText[i]);
        			new minutes = floatround(racers[1]/60),
  			    		seconds = floatround(racers[1] - minutes*60);
       				if(seconds>9)format(stringg,sizeof(stringg),"0%d:%d",minutes,seconds);
   					else format(stringg,sizeof(stringg),"0%d:0%d",minutes,seconds);
   					format(string,sizeof(string),"RACE ROUND STARTS IN ~y~%s",stringg);
    				PlayerTextDrawSetString(i, PaintBallText[i], string);
					if(racers[1] == 5)
					{
						GameTextForPlayer(i, "~r~3", 1000, 3);
						PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
						PlayerInfo[i][pRaceVoted] = 0;
					}
					if(racers[1] == 4)
					{
						GameTextForPlayer(i, "~y~2", 1000, 3);
						PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
					}
					if(racers[1] == 3)
					{
						GameTextForPlayer(i, "~g~1", 1000, 3);
						PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
					}
					if(racers[1] == 2)
					{
						GameTextForPlayer(i, "~b~GO ~y~GO ~r~GO", 3000, 3);
						PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
						TogglePlayerControllable(i, 1);
						StopAudioStreamForPlayer(i);
						PlayAudioStreamForPlayer(i, "http://k003.kiwi6.com/hotlink/vex9v58yhw/GENETIKK_-_W_nsch_dir_was_Official_HD_Video_.mp3");
						for(new cars; cars < racep[1]; cars++)
						{
							new engine,lights,alarm,doors,bonnet,boot,objective;
							GetVehicleParamsEx(rcarid[1][cars],engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(rcarid[1][cars],VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
						}
					}
				}
			}
		}
		if(racers[1] == 12)
		{
			new maxim,map,maximm,car;
			for(new g = 0; g < 5; g++) if(racevotem[1][g] > maxim) { maxim = racevotem[1][g]; map = g;}
			if(rmapvoted[1] > 0)
			{
				racem[1] = map+1;
			}
			for(new m = 0; m < 20; m++) if(racevotec[1][m] > maximm) { maximm = racevotec[1][m]; car = m;}
			if(carvoted[1] > 0)
			{
				racec[1] = car;
			}
			for(new cars; cars < racep[1]; cars++)
			{
				if(racem[1] == 1)
				{
					rcarid[1][cars] = CreateVehicle(ARaceCar[racec[1]][0], ARaceCPos1[cars][0], ARaceCPos1[cars][1], ARaceCPos1[cars][2], ARaceCPos1[cars][3], -1, -1, -1);
				}
				if(racem[1] == 2)
				{
					rcarid[1][cars] = CreateVehicle(ARaceCar[racec[1]][0], ARaceCPos2[cars][0], ARaceCPos2[cars][1], ARaceCPos2[cars][2], ARaceCPos2[cars][3], -1, -1, -1);
				}
				SetVehicleVirtualWorld(rcarid[1][cars], 2);
			}
			foreach(new d : Player)
			{
				if(PlayerInfo[d][pRaceG] == 1)
				{
					RaceCP[d] = 0;
					ARacePos[d] = 0;
				}
			}
		}
		if(racers[1] == 10)
		{
			new ss;
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pRaceG] == 1)
				{
					ApplyAnimation(i, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	        		ClearAnimations(i);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
	       			PlayerHandsup[i] = 0;
					PutPlayerInVehicleEx(i, rcarid[1][ss], 0);
					SetPlayerVirtualWorld(i, 2);
					if(racem[1] == 1)
					{
						SetPlayerRaceCheckpoint(i, 3, ARaceCCPos1[0][0], ARaceCCPos1[0][1], ARaceCCPos1[0][2], ARaceCCPos1[1][0], ARaceCCPos1[1][1], ARaceCCPos1[1][2], 20.0);
						RaceCP[i] = 1;
					}
					if(racem[1] == 2)
					{
						SetPlayerRaceCheckpoint(i, 3, ARaceCCPos2[0][0], ARaceCCPos2[0][1], ARaceCCPos2[0][2], ARaceCCPos2[1][0], ARaceCCPos2[1][1], ARaceCCPos2[1][2], 20.0);
						RaceCP[i] = 1;
					}
					if(racecol[1] == 1)
					{
						DisableRemoteVehicleCollisions(i, 1);
					}
					TogglePlayerControllable(i, 0);
					ss++;
					StopAudioStreamForPlayer(i);
					ARacePos[i] = racep[1];
				}
			}
		}
		if(racers[1] == 2)
		{
		    racers[1] = 0;
			racet[1] = 601;
			KillTimer(preparerace2);
			KillTimer(racerun2);
			racerun2 = SetTimer("RaceRun2", 1000, 1);
		}
	}
	else if(racep[1] < 2)
	{
		racet[1] = 0;
  		racers[1] = 0;
		KillTimer(preparerace2);
		KillTimer(racerun2);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pRaceG] == 1)
			{
			    curatj[i] = 0;
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
				PlayerInfo[i][pRaceVoted] = 0;
			}
		}
	}
	return 1;
}
public PrepareRoundPaintBall1()
{
	if(paintp[1] > 1)
 	{
  		new string[128];
    	if(paintrs[1] >= 1)
     	{
      		paintrs[1]--;
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][pPaintBallG] == 1)
	    		{
	    		    PlayerTextDrawShow(i, PaintBallText[i]);
	                if(paintrs[1] > 9) format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:%d",paintrs[1]);
	                else format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:0%d",paintrs[1]);
	                PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintrs[1] == 2)
		{
		    paintrs[1] = 0;
			paintt[1] = 301;
			KillTimer(preparepaint1);
			paintrun1 = SetTimer("PaintBallRun1", 1000, 1);
		}
  	}
   	else if(paintp[1] < 2)
	{
		paintt[1] = 0;
  		paintrs[1] = 0;
  		PaintWinner[1] = -1;
		PaintBallWinnerKills[1] = 0;
		paintvoteg[1][0] = 0;
		paintvoteg[1][1] = 0;
		paintvoteg[1][2] = 0;
		paintvotem[1][0] = 0;
		paintvotem[1][1] = 0;
		paintvotem[1][2] = 0;
		paintvotem[1][3] = 0;
		paintvotem[1][4] = 0;
		mapvoted[1] = 0;
		gunvoted[1] = 0;
		KillTimer(preparepaint1);
		KillTimer(paintrun1);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 1)
			{
			    curatj[i] = 0;
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}
public PrepareRoundPaintBall2()
{
	if(paintp[2] > 1)
 	{
  		new string[128];
    	if(paintrs[2] >= 1)
     	{
      		paintrs[2]--;
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][pPaintBallG] == 2)
	    		{
	    		    PlayerTextDrawShow(i, PaintBallText[i]);
	                if(paintrs[2] > 9) format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:%d",paintrs[2]);
	                else format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:0%d",paintrs[2]);
	                PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintrs[2] == 2)
		{
		    paintrs[2] = 0;
			paintt[2] = 301;
			KillTimer(preparepaint2);
			paintrun2 = SetTimer("PaintBallRun2", 1000, 1);
		}
  	}
   	else if(paintp[2] < 2)
	{
		paintt[2] = 0;
  		paintrs[2] = 0;
  		PaintWinner[2] = -1;
		PaintBallWinnerKills[2] = 0;
		paintvoteg[2][0] = 0;
		paintvoteg[2][1] = 0;
		paintvoteg[2][2] = 0;
		paintvotem[2][0] = 0;
		paintvotem[2][1] = 0;
		paintvotem[2][2] = 0;
		paintvotem[2][3] = 0;
		paintvotem[2][4] = 0;
		mapvoted[2] = 0;
		gunvoted[2] = 0;
		KillTimer(preparepaint2);
		KillTimer(paintrun2);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 2)
			{
			    curatj[i] = 0;
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}
public PrepareRoundPaintBall3()
{
    if(paintp[3] > 1)
 	{
  		new string[128];
    	if(paintrs[3] >= 1)
     	{
      		paintrs[3]--;
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][pPaintBallG] == 3)
	    		{
	    		    PlayerTextDrawShow(i, PaintBallText[i]);
	                if(paintrs[3] > 9) format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:%d",paintrs[3]);
	                else format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:0%d",paintrs[3]);
	                PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintrs[3] == 2)
		{
		    paintrs[3] = 0;
			paintt[3] = 601;
			KillTimer(preparepaint3);
			paintrun3 = SetTimer("PaintBallRun3", 1000, 1);
		}
  	}
   	else if(paintp[3] < 2)
	{
		paintt[3] = 0;
  		paintrs[3] = 0;
  		PaintWinner[3] = -1;
		PaintBallWinnerKills[3] = 0;
		paintvotem[3][0] = 0;
		paintvotem[3][1] = 0;
		paintvotem[3][2] = 0;
		paintvotem[3][3] = 0;
		paintvotem[3][4] = 0;
		mapvoted[3] = 0;
		KillTimer(preparepaint3);
		KillTimer(paintrun3);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 3)
			{
			    curatj[i] = 0;
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}
public PrepareRoundPaintBall4()
{
    if(paintp[4] > 1)
 	{
  		new string[128];
    	if(paintrs[4] >= 1)
     	{
      		paintrs[4]--;
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][pPaintBallG] == 4)
	    		{
	    		    PlayerTextDrawShow(i, PaintBallText[i]);
	                if(paintrs[4] > 9) format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:%d",paintrs[4]);
	                else format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:0%d",paintrs[4]);
	                PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintrs[4] == 2)
		{
		    paintrs[4] = 0;
			paintt[4] = 301;
			KillTimer(preparepaint4);
			paintrun4 = SetTimer("PaintBallRun4", 1000, 1);
		}
  	}
   	else if(paintp[4] < 2)
	{
		paintt[4] = 0;
  		paintrs[4] = 0;
  		PaintWinner[4] = -1;
		PaintBallWinnerKills[4] = 0;
		paintvotem[4][0] = 0;
		paintvotem[4][1] = 0;
		paintvotem[4][2] = 0;
		paintvotem[4][3] = 0;
		paintvotem[4][4] = 0;
		mapvoted[4] = 0;
		KillTimer(preparepaint4);
		KillTimer(paintrun4);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 4)
			{
			    curatj[i] = 0;
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}
public RaceRun1()
{
	racet[0]--;
	if(racep[0] > 0)
	{
		new string[128];
		if(racet[0] >= 1)
		{
			foreach(new i : Player)
			{
 				if(PlayerInfo[i][pRaceG] == 0)
 				{
   					new stringg[64];
   					PlayerTextDrawShow(i, PaintBallText[i]);
        			new minutes = floatround(racet[0]/60),
  			    		seconds = floatround(racet[0] - minutes*60);
       				if(seconds>9)format(stringg,sizeof(stringg),"0%d:%d",minutes,seconds);
   					else format(stringg,sizeof(stringg),"0%d:0%d",minutes,seconds);
   					format(string,sizeof(string),"RACE ROUND ENDS IN ~b~%s",stringg);
    				PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(racet[0] == 2)
		{
			foreach(new i : Player)
			{
  				if(PlayerInfo[i][pRaceG] == 0)
   				{
					SendClientMessage(i, COLOR_YELLOW, "Time is over.");
		    		for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
		    		curatj[i] = 0;
					RemovePlayerFromVehicleEx(i);
					SetPlayerPos(i, -40.3110,1508.9723,1000.9155);
					TogglePlayerControllable(i, 0);
					SetTimerEx("UnFreezeStation", 2000, false, "i", i);
					PlayerInfo[i][pRaceVoted] = 0;
				}
			}
			for(new cs; cs < 20; cs++)
			{
				if(rcarid[0][cs] != 0)
				{
					DestroyVehicle(rcarid[0][cs]);
					rcarid[0][cs] = 0;
				}
			}
			KillTimer(racerun1);
			racet[0] = 0;
			racers[0] = 61;
			preparerace1 = SetTimer("PrepareRoundRace1", 1000, 1);
		}
	}
	else if(racep[0] <= 0)
	{
		racet[0] = 0;
  		racers[0] = 0;
		KillTimer(preparerace1);
		KillTimer(racerun1);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pRaceG] == 0)
			{
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    curatj[i] = 0;
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
				RemovePlayerFromVehicleEx(i);
				SetPlayerPos(i, -40.3110,1508.9723,1000.9155);
				TogglePlayerControllable(i, 0);
				SetTimerEx("UnFreezeStation", 2000, false, "i", i);
				PlayerInfo[i][pRaceVoted] = 0;
			}
		}
		for(new cs; cs < 20; cs++)
		{
			if(rcarid[0][cs] != 0)
			{
				DestroyVehicle(rcarid[0][cs]);
				rcarid[0][cs] = 0;
			}
		}
	}
	return 1;
}
public RaceRun2()
{
	racet[1]--;
	if(racep[1] > 0)
	{
		new string[128];
		if(racet[1] >= 1)
		{
			foreach(new i : Player)
			{
 				if(PlayerInfo[i][pRaceG] == 1)
 				{
   					new stringg[64];
   					PlayerTextDrawShow(i, PaintBallText[i]);
        			new minutes = floatround(racet[1]/60),
  			    		seconds = floatround(racet[1] - minutes*60);
       				if(seconds>9)format(stringg,sizeof(stringg),"0%d:%d",minutes,seconds);
   					else format(stringg,sizeof(stringg),"0%d:0%d",minutes,seconds);
   					format(string,sizeof(string),"RACE ROUND ENDS IN ~b~%s",stringg);
    				PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(racet[1] == 2)
		{
			foreach(new i : Player)
			{
  				if(PlayerInfo[i][pRaceG] == 1)
   				{
					SendClientMessage(i, COLOR_YELLOW, "Time is over.");
		    		for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
		    		curatj[i] = 0;
					RemovePlayerFromVehicleEx(i);
					SetPlayerPos(i, -40.3110,1508.9723,1000.9155);
					TogglePlayerControllable(i, 0);
					SetTimerEx("UnFreezeStation", 2000, false, "i", i);
					PlayerInfo[i][pRaceVoted] = 0;
				}
			}
			for(new cs; cs < 20; cs++)
			{
				if(rcarid[1][cs] != 0)
				{
					DestroyVehicle(rcarid[1][cs]);
					rcarid[1][cs] = 0;
				}
			}
			KillTimer(racerun2);
			racet[1] = 0;
			racers[1] = 61;
			preparerace2 = SetTimer("PrepareRoundRace2", 1000, 1);
		}
	}
	else if(racep[1] <= 0)
	{
		racet[1] = 0;
  		racers[1] = 0;
		KillTimer(preparerace2);
		KillTimer(racerun2);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pRaceG] == 1)
			{
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    curatj[i] = 0;
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
				RemovePlayerFromVehicleEx(i);
				SetPlayerPos(i, -40.3110,1508.9723,1000.9155);
				TogglePlayerControllable(i, 0);
				SetTimerEx("UnFreezeStation", 2000, false, "i", i);
				PlayerInfo[i][pRaceVoted] = 0;
			}
		}
		for(new cs; cs < 20; cs++)
		{
			if(rcarid[1][cs] != 0)
			{
				DestroyVehicle(rcarid[1][cs]);
				rcarid[1][cs] = 0;
			}
		}
	}
	return 1;
}
public PaintBallRun1()
{
    paintt[1]--;
    if(paintp[1] > 1)
 	{
  		new string[128];
  		if(paintt[1] >= 1)
		{
		    if(paintt[1] == 300)
		    {
		        new maxim,weapon,maximm,map;
		        for(new g = 0; g < 3; g++) if(paintvoteg[1][g] > maxim) { maxim = paintvoteg[1][g]; weapon = g;}
		        if(gunvoted[1] > 0)
		        {
					if(weapon == 0) paintg[1] = 1;
					if(weapon == 1) paintg[1] = 2;
					if(weapon == 2) paintg[1] = 3;
				}
				for(new m = 0; m < 5; m++) if(paintvotem[1][m] > maximm) { maximm = paintvotem[1][m]; map = m;}
				if(mapvoted[1] > 0)
				{
					if(map == 0) paintm[1] = 1;
					if(map == 1) paintm[1] = 2;
					if(map == 2) paintm[1] = 3;
					if(map == 3) paintm[1] = 4;
					if(map == 4) paintm[1] = 5;
				}
		        foreach(new i : Player)
				{
 					if(PlayerInfo[i][pPaintBallG] == 1)
 					{
						SetPlayerSpawn(i);
					}
				}
			}
			foreach(new i : Player)
			{
 				if(PlayerInfo[i][pPaintBallG] == 1)
 				{
   					new stringg[64];
   					PlayerTextDrawShow(i, PaintBallText[i]);
        			new minutes = floatround(paintt[1]/60),
  			    		seconds = floatround(paintt[1] - minutes*60);
       				if(seconds>9)format(stringg,sizeof(stringg),"0%d:%d",minutes,seconds);
   					else format(stringg,sizeof(stringg),"0%d:0%d",minutes,seconds);
   					format(string,sizeof(string),"PAINTBALL ROUND ENDS IN ~b~%s",stringg);
    				PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintt[1] == 2)
		{
		    if(PaintWinner[1] != -1)
	    	{
 	    		foreach(new i : Player)
				{
  					if(PlayerInfo[i][pPaintBallG] == 1)
   					{
  						format(string,sizeof(string),"Round over! Winner: %s - %d kills.",GetName(PaintWinner[1]),PaintBallWinnerKills[1]);
						SendClientMessage(i, COLOR_YELLOW, string);
						SendClientMessage(i, COLOR_YELLOW, "Use /votegun to vote for a gun. Use /votemap to vote for a map.");
						ResetPlayerWeaponsEx(i);
		    			ResetPlayerWeapons(i);
		    			SetPlayerArmourEx(i, 0);
		    			PlayerInfo[i][pPaintBallKills] = 0;
		    			PlayerInfo[i][pPaintBallVoted] = 0;
		    			PlayerInfo[i][pPaintBallVoted2] = 0;
		    			for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
		    			curatj[i] = 0;
					}
				}
			}
			KillTimer(paintrun1);
			paintt[1] = 0;
			paintrs[1] = 31;
			preparepaint1 = SetTimer("PrepareRoundPaintBall1", 1000, 1);
			paintg[1] = 1;
			PaintWinner[1] = -1;
			PaintBallWinnerKills[1] = 0;
			paintvoteg[1][0] = 0;
			paintvoteg[1][1] = 0;
			paintvoteg[1][2] = 0;
			paintvotem[1][0] = 0;
			paintvotem[1][1] = 0;
			paintvotem[1][2] = 0;
			paintvotem[1][3] = 0;
			paintvotem[1][4] = 0;
			mapvoted[1] = 0;
			gunvoted[1] = 0;
		}
	}
    else if(paintp[1] < 2)
	{
		paintt[1] = 0;
  		paintrs[1] = 0;
  		PaintWinner[1] = -1;
		PaintBallWinnerKills[1] = 0;
		paintvoteg[1][0] = 0;
		paintvoteg[1][1] = 0;
		paintvoteg[1][2] = 0;
		paintvotem[1][0] = 0;
		paintvotem[1][1] = 0;
		paintvotem[1][2] = 0;
		paintvotem[1][3] = 0;
		paintvotem[1][4] = 0;
		mapvoted[1] = 0;
		gunvoted[1] = 0;
		KillTimer(preparepaint1);
		KillTimer(paintrun1);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 1)
			{
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    curatj[i] = 0;
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}
public PaintBallRun2()
{
    paintt[2]--;
    if(paintp[2] > 1)
 	{
  		new string[128];
  		if(paintt[2] >= 1)
		{
		    if(paintt[2] == 300)
		    {
		        new maxim,weapon,maximm,map;
		        for(new g = 0; g < 3; g++) if(paintvoteg[2][g] > maxim) { maxim = paintvoteg[2][g]; weapon = g;}
		        if(gunvoted[2] > 0)
		        {
					if(weapon == 0) paintg[2] = 1;
					if(weapon == 1) paintg[2] = 2;
					if(weapon == 2) paintg[2] = 3;
				}
				for(new m = 0; m < 5; m++) if(paintvotem[2][m] > maximm) { maximm = paintvotem[2][m]; map = m;}
				if(mapvoted[2] > 0)
				{
					if(map == 0) paintm[2] = 1;
					if(map == 1) paintm[2] = 2;
					if(map == 2) paintm[2] = 3;
					if(map == 3) paintm[2] = 4;
					if(map == 4) paintm[2] = 5;
				}
		        foreach(new i : Player)
				{
 					if(PlayerInfo[i][pPaintBallG] == 2)
 					{
						SetPlayerSpawn(i);
					}
				}
			}
			foreach(new i : Player)
			{
 				if(PlayerInfo[i][pPaintBallG] == 2)
 				{
   					new stringg[64];
   					PlayerTextDrawShow(i, PaintBallText[i]);
        			new minutes = floatround(paintt[2]/60),
  			    		seconds = floatround(paintt[2] - minutes*60);
       				if(seconds>9)format(stringg,sizeof(stringg),"0%d:%d",minutes,seconds);
   					else format(stringg,sizeof(stringg),"0%d:0%d",minutes,seconds);
   					format(string,sizeof(string),"PAINTBALL ROUND ENDS IN ~b~%s",stringg);
    				PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintt[2] == 2)
		{
		    if(PaintWinner[2] != -1)
	    	{
 	    		foreach(new i : Player)
				{
  					if(PlayerInfo[i][pPaintBallG] == 2)
   					{
  						format(string,sizeof(string),"Round over! Winner: %s - %d kills.",GetName(PaintWinner[2]),PaintBallWinnerKills[2]);
						SendClientMessage(i, COLOR_YELLOW, string);
						SendClientMessage(i, COLOR_YELLOW, "Use /votegun to vote for a gun. Use /votemap to vote for a map.");
						ResetPlayerWeaponsEx(i);
		    			ResetPlayerWeapons(i);
		    			SetPlayerArmourEx(i, 0);
		    			PlayerInfo[i][pPaintBallKills] = 0;
		    			PlayerInfo[i][pPaintBallVoted] = 0;
		    			PlayerInfo[i][pPaintBallVoted2] = 0;
		    			for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
		    			curatj[i] = 0;
					}
				}
			}
			KillTimer(paintrun2);
			paintt[2] = 0;
			paintrs[2] = 31;
			preparepaint2 = SetTimer("PrepareRoundPaintBall2", 1000, 1);
			paintg[2] = 1;
			PaintWinner[2] = -1;
			PaintBallWinnerKills[2] = 0;
			paintvoteg[2][0] = 0;
			paintvoteg[2][1] = 0;
			paintvoteg[2][2] = 0;
			paintvotem[2][0] = 0;
			paintvotem[2][1] = 0;
			paintvotem[2][2] = 0;
			paintvotem[2][3] = 0;
			paintvotem[2][4] = 0;
			mapvoted[2] = 0;
			gunvoted[2] = 0;
		}
	}
    else if(paintp[2] < 2)
	{
		paintt[2] = 0;
  		paintrs[2] = 0;
  		PaintWinner[2] = -1;
		PaintBallWinnerKills[2] = 0;
		paintvoteg[2][0] = 0;
		paintvoteg[2][1] = 0;
		paintvoteg[2][2] = 0;
		paintvotem[2][0] = 0;
		paintvotem[2][1] = 0;
		paintvotem[2][2] = 0;
		paintvotem[2][3] = 0;
		paintvotem[2][4] = 0;
		mapvoted[2] = 0;
		gunvoted[2] = 0;
		KillTimer(paintrun2);
		KillTimer(preparepaint2);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 2)
			{
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    curatj[i] = 0;
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}
public PaintBallRun3()
{
    paintt[3]--;
    if(paintp[3] > 1)
 	{
  		new string[128];
  		if(paintt[3] >= 1)
		{
		    if(paintt[3] == 600)
		    {
		        new maximm,map;
				for(new m = 0; m < 5; m++) if(paintvotem[3][m] > maximm) { maximm = paintvotem[3][m]; map = m;}
				if(mapvoted[3] > 0)
				{
					if(map == 0) paintm[3] = 1;
					if(map == 1) paintm[3] = 2;
					if(map == 2) paintm[3] = 3;
					if(map == 3) paintm[3] = 4;
					if(map == 4) paintm[3] = 5;
				}
		        foreach(new i : Player)
				{
 					if(PlayerInfo[i][pPaintBallG] == 3)
 					{
						SetPlayerSpawn(i);
					}
				}
			}
			foreach(new i : Player)
			{
 				if(PlayerInfo[i][pPaintBallG] == 3)
 				{
   					new stringg[64];
   					PlayerTextDrawShow(i, PaintBallText[i]);
        			new minutes = floatround(paintt[3]/60),
  			    		seconds = floatround(paintt[3] - minutes*60);
       				if(seconds>9)format(stringg,sizeof(stringg),"0%d:%d",minutes,seconds);
   					else format(stringg,sizeof(stringg),"0%d:0%d",minutes,seconds);
   					format(string,sizeof(string),"PAINTBALL ROUND ENDS IN ~b~%s",stringg);
    				PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintt[3] == 2)
		{
		    if(PaintWinner[3] != -1)
	    	{
 	    		foreach(new i : Player)
				{
  					if(PlayerInfo[i][pPaintBallG] == 3)
   					{
  						format(string,sizeof(string),"Round over! Winner: %s - %d kills.",GetName(PaintWinner[3]),PaintBallWinnerKills[3]);
						SendClientMessage(i, COLOR_YELLOW, string);
						SendClientMessage(i, COLOR_YELLOW, "Use /votemap to vote for a map.");
						ResetPlayerWeaponsEx(i);
		    			ResetPlayerWeapons(i);
		    			SetPlayerArmourEx(i, 0);
		    			PlayerInfo[i][pPaintBallKills] = 0;
		    			PlayerInfo[i][pPaintBallVoted] = 0;
		    			PlayerInfo[i][pPaintBallVoted2] = 0;
		    			for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
		    			curatj[i] = 0;
					}
				}
			}
			KillTimer(paintrun3);
			paintt[3] = 0;
			paintrs[3] = 31;
			preparepaint3 = SetTimer("PrepareRoundPaintBall3", 1000, 1);
			PaintWinner[3] = -1;
			PaintBallWinnerKills[3] = 0;
			paintvotem[3][0] = 0;
			paintvotem[3][1] = 0;
			paintvotem[3][2] = 0;
			paintvotem[3][3] = 0;
			paintvotem[3][4] = 0;
			mapvoted[3] = 0;
		}
	}
    else if(paintp[3] < 2)
	{
		paintt[3] = 0;
  		paintrs[3] = 0;
  		PaintWinner[3] = -1;
		PaintBallWinnerKills[3] = 0;
		paintvotem[3][0] = 0;
		paintvotem[3][1] = 0;
		paintvotem[3][2] = 0;
		paintvotem[3][3] = 0;
		paintvotem[3][4] = 0;
		mapvoted[3] = 0;
		KillTimer(preparepaint3);
		KillTimer(paintrun3);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 3)
			{
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    curatj[i] = 0;
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}
public PaintBallRun4()
{
    paintt[4]--;
    if(paintp[4] > 1)
 	{
  		new string[128];
  		if(paintt[4] >= 1)
		{
		    if(paintt[4] == 300)
		    {
		        new maximm,map;
				for(new m = 0; m < 5; m++) if(paintvotem[4][m] > maximm) { maximm = paintvotem[4][m]; map = m;}
				if(mapvoted[4] > 0)
				{
					if(map == 0) paintm[4] = 1;
					if(map == 1) paintm[4] = 2;
					if(map == 2) paintm[4] = 3;
					if(map == 3) paintm[4] = 4;
					if(map == 4) paintm[4] = 5;
				}
		        foreach(new i : Player)
				{
 					if(PlayerInfo[i][pPaintBallG] == 4)
 					{
						SetPlayerSpawn(i);
					}
				}
			}
			foreach(new i : Player)
			{
 				if(PlayerInfo[i][pPaintBallG] == 4)
 				{
   					new stringg[64];
   					PlayerTextDrawShow(i, PaintBallText[i]);
        			new minutes = floatround(paintt[4]/60),
  			    		seconds = floatround(paintt[4] - minutes*60);
       				if(seconds>9)format(stringg,sizeof(stringg),"0%d:%d",minutes,seconds);
   					else format(stringg,sizeof(stringg),"0%d:0%d",minutes,seconds);
   					format(string,sizeof(string),"PAINTBALL ROUND ENDS IN ~b~%s",stringg);
    				PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintt[4] == 2)
		{
		    if(PaintWinner[4] != -1)
	    	{
 	    		foreach(new i : Player)
				{
  					if(PlayerInfo[i][pPaintBallG] == 4)
   					{
  						format(string,sizeof(string),"Round over! Winner: %s - %d kills.",GetName(PaintWinner[4]),PaintBallWinnerKills[4]);
						SendClientMessage(i, COLOR_YELLOW, string);
						SendClientMessage(i, COLOR_YELLOW, "Use /votemap to vote for a map.");
						ResetPlayerWeaponsEx(i);
		    			ResetPlayerWeapons(i);
		    			SetPlayerArmourEx(i, 0);
		    			PlayerInfo[i][pPaintBallKills] = 0;
		    			PlayerInfo[i][pPaintBallVoted] = 0;
		    			PlayerInfo[i][pPaintBallVoted2] = 0;
		    			for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
		    			curatj[i] = 0;
					}
				}
			}
			KillTimer(paintrun4);
			paintt[4] = 0;
			paintrs[4] = 31;
			preparepaint4 = SetTimer("PrepareRoundPaintBall4", 1000, 1);
			PaintWinner[4] = -1;
			PaintBallWinnerKills[4] = 0;
			paintvotem[4][0] = 0;
			paintvotem[4][1] = 0;
			paintvotem[4][2] = 0;
			paintvotem[4][3] = 0;
			paintvotem[4][4] = 0;
			mapvoted[4] = 0;
		}
	}
    else if(paintp[4] < 2)
	{
		paintt[4] = 0;
  		paintrs[4] = 0;
  		PaintWinner[4] = -1;
		PaintBallWinnerKills[4] = 0;
		paintvotem[4][0] = 0;
		paintvotem[4][1] = 0;
		paintvotem[4][2] = 0;
		paintvotem[4][3] = 0;
		paintvotem[4][4] = 0;
		mapvoted[4] = 0;
		KillTimer(preparepaint4);
		KillTimer(paintrun4);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 4)
			{
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    curatj[i] = 0;
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}
public DeleteDeathMessage(playerid)
{
	if(InWar[PlayerInfo[playerid][pMember]] != 1)
	{
		for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
		KillTimer(deathdeletetime[playerid]);
	}
	else
	{
		KillTimer(deathdeletetime[playerid]);
	}
	return 1;
}
public SetPlayerUnjail()
{
	new string[256],stringg[256];
	for(new i = 1; i < sizeof(Turfs); i++)
	{
		new attackers = WarInfo[i][wAttacker],
			defenders = WarInfo[i][wFaction],
			count=0,
			warid,
			var100[500];
		if(WarInfo[i][wTime] > 0)
		{
			WarInfo[i][wTime]--;
			foreach(new j : Player)
			{
				if(PlayerInfo[j][pMember] == attackers)
				{
					format(string,sizeof(string),"~w~TURF TIMER:~h~~y~ %s",CalculeazaTimp2(WarInfo[i][wTime]));
					PlayerTextDrawSetString(j, TimeLeftWar1[j], string);
					PlayerTextDrawShow(j, TimeLeftWar1[j]);
				}
				if(PlayerInfo[j][pMember] == defenders)
				{
					format(string,sizeof(string),"~w~TURF TIMER:~h~~y~ %s",CalculeazaTimp2(WarInfo[i][wTime]));
					PlayerTextDrawSetString(j, TimeLeftWar1[j], string);
					PlayerTextDrawShow(j, TimeLeftWar1[j]);
				}
			}
			if(WarInfo[i][wTime] == 1)
			{
				new atscore = 0,
					defscore = 0,
					winner;
				atscore = WarScoreF[attackers][i];
				defscore = WarScoreF[defenders][i];
				foreach(new j : Player)
				{
					if(PlayerInfo[j][pMember] == attackers)
					{
						GangZoneStopFlashForPlayer(j,Turfs[i]);
					}
					if(PlayerInfo[j][pMember] == defenders)
					{
						GangZoneStopFlashForPlayer(j,Turfs[i]);
					}
				}
				if(atscore > defscore)
				{
					winner = 1;
				}
				else
				{
					winner = 2;
				}
				if(atscore == defscore)
				{
					winner = 2;
				}
				if(winner == 1)
				{
					new str[128],stringyy[MAX_STRING];
					format(var100, sizeof(var100),"INSERT INTO `wars` (`Attacker`,`Defender`,`Atscore`,`Defscore`,`Result`) VALUES ('%d','%d','%d','%d','1')",attackers,defenders,atscore,defscore);
					new Cache: ab = mysql_query(SQL,var100);
					warid = cache_insert_id();
					cache_delete(ab);
					TurfInfo[i][zOwned] = WarInfo[i][wAttacker];
					mysql_format(SQL,str,128,"UPDATE `turfs` SET `Owned`='%d' WHERE `ID`='%d'",TurfInfo[i][zOwned],i);
					mysql_tquery(SQL,str,"","");
					format(stringyy, sizeof(stringyy), "NR AdmBot: Gruparea mafiota %s a cucerit teritoriul #%d ce era detinut de mafia %s.",NumeFactiune(WarInfo[i][wAttacker]),i,NumeFactiune(WarInfo[i][wFaction]));
					OOCNews(COLOR_ORANGE,stringyy);
				}
				if(winner == 2)
				{
					new stringyy[MAX_STRING];
					format(var100, sizeof(var100),"INSERT INTO `wars` (`Attacker`,`Defender`,`Atscore`,`Defscore`,`Result`) VALUES ('%d','%d','%d','%d','2')",attackers,defenders,atscore,defscore);
					new Cache: ab = mysql_query(SQL,var100);
					warid = cache_insert_id();
					cache_delete(ab);
				    format(stringyy, sizeof(stringyy), "NR AdmBot: Gruparea mafiota %s a aparat teritoriul #%d atacat de mafia %s.",NumeFactiune(WarInfo[i][wFaction]),i,NumeFactiune(WarInfo[i][wAttacker]));
				    OOCNews(COLOR_ORANGE,stringyy);
				}
				format(stringg,sizeof(stringg),"------------ [ war overview #%d ] ------------", warid);
				SendFamilyMessage(attackers, COLOR_GREEN, stringg);
				SendFamilyMessage(defenders, COLOR_GREEN, stringg);
				if(winner == 1)
				{
					format(stringg,sizeof(stringg),"Score: %s %d - %d %s.",NumeFactiune(WarInfo[i][wAttacker]),atscore,defscore,NumeFactiune(WarInfo[i][wFaction]));
					SendFamilyMessage(attackers, COLOR_GREEN, stringg);
					SendFamilyMessage(defenders, COLOR_GREEN, stringg);
				}
				if(winner == 2)
				{
					format(stringg,sizeof(stringg),"Score: %s %d - %d %s.",NumeFactiune(WarInfo[i][wFaction]),defscore,atscore,NumeFactiune(WarInfo[i][wAttacker]));
					SendFamilyMessage(attackers, COLOR_GREEN, stringg);
					SendFamilyMessage(defenders, COLOR_GREEN, stringg);
				}
				new id = CalculateBestScore(i),
					id2 = CalculateWorstScore(i),
					bestnamee[30],
					worstnamee[30];
				GetPlayerName(id, bestnamee, sizeof(bestnamee));
				GetPlayerName(id2, worstnamee, sizeof(worstnamee));
				format(stringg,sizeof(stringg),"Best score: %s with a score of %d (%d kills, %d deaths). Worst score: %s with a score of %d (%d kills, %d deaths).", bestnamee, ucideri[id][i]-decese[id][i], ucideri[id][i], decese[id][i], worstnamee, ucideri[id2][i]-decese[id2][i], ucideri[id2][i], decese[id2][i]);
				SendFamilyMessage(attackers, COLOR_GREEN, stringg);
				SendFamilyMessage(defenders, COLOR_GREEN, stringg);
				foreach(new j : Player)
				{
					if((PlayerInfo[j][pMember] == attackers) || (PlayerInfo[j][pMember] == defenders))
					{
						format(stringg,sizeof(stringg),"Your personal score: %d (%d kills, %d deaths).",ucideri[j][i]-decese[j][i],ucideri[j][i], decese[j][i]);
						SendClientMessage(j, COLOR_GREEN,stringg);
						PlayerTextDrawHide(j, TimeLeftWar1[j]);
						for (new sss = 0; sss != 5; ++sss) SendDeathMessageToPlayer(j, 1001, 1001, 1001);
					}
				}
				SendFamilyMessage(attackers, COLOR_GREEN,"------------------------------------");
				SendFamilyMessage(defenders, COLOR_GREEN,"------------------------------------");
				WarScoreF[defenders][i] = 0;
				WarScoreF[attackers][i] = 0;
				InWar[attackers] = 0;
				InWar[defenders] = 0;
				waitwar[attackers] = 60;
				waitwar[defenders] = 60;
				foreach(new j : Player)
				{
					if((PlayerInfo[j][pMember] == attackers) || (PlayerInfo[j][pMember] == defenders))
					{
						SendClientMessage(j, COLOR_YELLOW, "Ai fost transferat in Virtual World-ul normal (0).");
						if(GetPlayerInterior(j) < 1)
						{
							SetPlayerVirtualWorld(j, 0);
						}
						if(attackers == 4 || defenders == 4)
						{
							for(new x = 0; x < sizeof(VehicleInfo); x++)
							{
								if(VehicleInfo[x][vehGroup] == 4)
								{
									SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
								}
							}
						}
						if(attackers == 5 || defenders == 5)
						{
							for(new x = 0; x < sizeof(VehicleInfo); x++)
							{
								if(VehicleInfo[x][vehGroup] == 5)
								{
									SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
								}
							}
						}
						if(attackers == 6 || defenders == 6)
						{
							for(new x = 0; x < sizeof(VehicleInfo); x++)
							{
								if(VehicleInfo[x][vehGroup] == 6)
								{
									SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
								}
							}
						}
						if(attackers == 10 || defenders == 10)
						{
							for(new x = 0; x < sizeof(VehicleInfo); x++)
							{
								if(VehicleInfo[x][vehGroup] == 10)
								{
									SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
								}
							}
						}
						mysql_format(SQL, var100, sizeof(var100),"INSERT INTO `warlogs` (`PlayerID`,`WarID`,`Kills`,`Deaths`,`Faction`) VALUES ('%d','%d','%d','%d','%d')",PlayerInfo[j][pSQLID],warid,ucideri[j][i],decese[j][i],PlayerInfo[j][pMember]);
						mysql_tquery(SQL,var100,"","");
						ucideri[j][i] = 0;
						decese[j][i] = 0;
					}
				}
				if(winner == 1)
				{
					foreach(new j : Player)
					{
						if(TurfsDisp[j] == 1)
						{
							GangZoneHideForPlayerEx(j,Turfs[i]);
							if(attackers == 4)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0xCC000099);
							}
							if(attackers == 5)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0x40863CAA);
							}
							if(attackers == 6)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0x2F2F2F99);
							}
							if(attackers == 10)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0x88572499);
							}
						}
					}
					DeelayWar[WarInfo[i][wFaction]] = 600;
					DeelayWar[WarInfo[i][wAttacker]] = 1800;
				}
				if(winner == 2)
				{
					DeelayWar[WarInfo[i][wFaction]] = 600;
					DeelayWar[WarInfo[i][wAttacker]] = 1800;
				}
				WarInfo[i][wTime] = 0;
				WarInfo[i][wFaction] = 0;
				WarInfo[i][wAttacker] = 0;
				worstscoreat[i] = 0;
				worstmemberat[i] = 999;
				bestscoreat[i] = 0;
				bestmemberat[i] = 999;
				worstscoredf[i] = 0;
				worstmemberdf[i] = 999;
				bestscoredf[i] = 0;
				bestmemberdf[i] = 999;
			}
			if(WarInfo[i][wTime] > 2)
			{
				foreach(new j : Player)
				{
					if(IsPlayerInTurf(j, i))
					{
						if(IsPlayerInAnyVehicle(j))
						{
							if(PlayerInfo[j][pMember] == attackers || PlayerInfo[j][pMember] == defenders)
							{
								SendClientMessage(j, COLOR_WHITE, "Nu ai voie sa folosesti masini in war area.");
								SetVehicleToRespawn(GetPlayerVehicleID(j));
								SetVehicleVirtualWorld(GetPlayerVehicleID(j), 1024);
							}
						}
					}
					if(PlayerInfo[j][pMember] == attackers || PlayerInfo[j][pMember] == defenders)
					{
						if(WarInfo[i][wAttacker] == 4)
						{
							GangZoneFlashForPlayer(j,Turfs[i], 0xCC000099);
						}
						else if(WarInfo[i][wAttacker] == 5)
						{
							GangZoneFlashForPlayer(j,Turfs[i], 0x66857399);
						}
						else if(WarInfo[i][wAttacker] == 6)
						{
							GangZoneFlashForPlayer(j,Turfs[i], 0x2F2F2F99);
						}
						else if(WarInfo[i][wAttacker] == 10)
						{
							GangZoneFlashForPlayer(j,Turfs[i], 0x88572499);
						}
					}
					if(IsPlayerInTurf(j, i))
					{
						if(PlayerInfo[j][pMember] == attackers)
						{
							count++;
						}
					}
				}
				if(count < 1)
				{
					if(waitwar[attackers] > 0)
					{
						waitwar[attackers]--;
					}
					if(waitwar[attackers] == 0)
					{
						waitwar[attackers] = 0;
						new atscore = 0,
							defscore = 0,
							winner;
						atscore = WarScoreF[attackers][i];
						defscore = WarScoreF[defenders][i];
						foreach(new j : Player)
						{
							if(PlayerInfo[j][pMember] == attackers)
							{
								GangZoneStopFlashForPlayer(j,Turfs[i]);
							}
							if(PlayerInfo[j][pMember] == defenders)
							{
								GangZoneStopFlashForPlayer(j,Turfs[i]);
							}
						}
						if(atscore > defscore)
						{
							winner = 1;
						}
						else
						{
							winner = 2;
						}
						if(atscore == defscore)
						{
							winner = 2;
						}
						format(var100, sizeof(var100),"INSERT INTO `wars` (`Attacker`,`Defender`,`Atscore`,`Defscore`,`Result`) VALUES ('%d','%d','%d','%d','3')",attackers,defenders,atscore,defscore);
						new Cache: ab = mysql_query(SQL,var100);
						warid = cache_insert_id();
						cache_delete(ab);
						format(stringg,sizeof(stringg),"[WAR] %s failed to win turf %d owned by %s because they left the turf.",NumeFactiune(WarInfo[i][wAttacker]),i,NumeFactiune(WarInfo[i][wFaction]));
						SendFamilyMessage(attackers, COLOR_GREEN, stringg);
						SendFamilyMessage(defenders, COLOR_GREEN, stringg);
						format(stringg,sizeof(stringg),"------------ [ war overview #%d ] ------------", warid);
						SendFamilyMessage(attackers, COLOR_GREEN, stringg);
						SendFamilyMessage(defenders, COLOR_GREEN, stringg);
						if(winner == 1)
						{
							format(stringg,sizeof(stringg),"Score: %s %d - %d %s.",NumeFactiune(WarInfo[i][wAttacker]),atscore,defscore,NumeFactiune(WarInfo[i][wFaction]));
							SendFamilyMessage(attackers, COLOR_GREEN, stringg);
							SendFamilyMessage(defenders, COLOR_GREEN, stringg);
						}
						if(winner == 2)
						{
							format(stringg,sizeof(stringg),"Score: %s %d - %d %s.",NumeFactiune(WarInfo[i][wFaction]),defscore,atscore,NumeFactiune(WarInfo[i][wAttacker]));
							SendFamilyMessage(attackers, COLOR_GREEN, stringg);
							SendFamilyMessage(defenders, COLOR_GREEN, stringg);
						}
						new id = CalculateBestScore(i),
							id2 = CalculateWorstScore(i),
							bestnamee[30],
							worstnamee[30];
						GetPlayerName(id, bestnamee, sizeof(bestnamee));
						GetPlayerName(id2, worstnamee, sizeof(worstnamee));
						format(stringg,sizeof(stringg),"Best score: %s with a score of %d (%d kills, %d deaths). Worst score: %s with a score of %d (%d kills, %d deaths).", bestnamee, ucideri[id][i]-decese[id][i], ucideri[id][i], decese[id][i], worstnamee, ucideri[id2][i]-decese[id2][i], ucideri[id2][i], decese[id2][i]);
						SendFamilyMessage(attackers, COLOR_GREEN, stringg);
						SendFamilyMessage(defenders, COLOR_GREEN, stringg);
						foreach(new j : Player)
						{
							if((PlayerInfo[j][pMember] == attackers) || (PlayerInfo[j][pMember] == defenders))
							{
								format(stringg,sizeof(stringg),"Your personal score: %d (%d kills, %d deaths).",ucideri[j][i]-decese[j][i],ucideri[j][i], decese[j][i]);
								SendClientMessage(j, COLOR_GREEN,stringg);
								PlayerTextDrawHide(j, TimeLeftWar1[j]);
								for (new sss = 0; sss != 5; ++sss) SendDeathMessageToPlayer(j, 1001, 1001, 1001);
							}
						}
						SendFamilyMessage(attackers, COLOR_GREEN,"------------------------------------");
						SendFamilyMessage(defenders, COLOR_GREEN,"------------------------------------");
						WarScoreF[defenders][i] = 0;
						WarScoreF[attackers][i] = 0;
						InWar[attackers] = 0;
						InWar[defenders] = 0;
						foreach(new j : Player)
						{
							if((PlayerInfo[j][pMember] == attackers) || (PlayerInfo[j][pMember] == defenders))
							{
								SendClientMessage(j, COLOR_YELLOW, "Ai fost transferat in Virtual World-ul normal (0).");
								if(GetPlayerInterior(j) < 1)
								{
									SetPlayerVirtualWorld(j, 0);
								}
								if(attackers == 4 || defenders == 4)
								{
									for(new x = 0; x < sizeof(VehicleInfo); x++)
									{
										if(VehicleInfo[x][vehGroup] == 4)
										{
											SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
										}
									}
								}
								if(attackers == 5 || defenders == 5)
								{
									for(new x = 0; x < sizeof(VehicleInfo); x++)
									{
										if(VehicleInfo[x][vehGroup] == 5)
										{
											SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
										}
									}
								}
								if(attackers == 6 || defenders == 6)
								{
									for(new x = 0; x < sizeof(VehicleInfo); x++)
									{
										if(VehicleInfo[x][vehGroup] == 6)
										{
											SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
										}
									}
								}
								if(attackers == 10 || defenders == 10)
								{
									for(new x = 0; x < sizeof(VehicleInfo); x++)
									{
										if(VehicleInfo[x][vehGroup] == 10)
										{
											SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
										}
									}
								}
								mysql_format(SQL, var100, sizeof(var100),"INSERT INTO `warlogs` (`PlayerID`,`WarID`,`Kills`,`Deaths`,`Faction`) VALUES ('%d','%d','%d','%d','%d')",PlayerInfo[j][pSQLID],warid,ucideri[j][i],decese[j][i],PlayerInfo[j][pMember]);
								mysql_tquery(SQL,var100,"","");
								ucideri[j][i] = 0;
								decese[j][i] = 0;
							}
						}
						DeelayWar[WarInfo[i][wFaction]] = 600;
						DeelayWar[WarInfo[i][wAttacker]] = 1800;
						WarInfo[i][wTime] = 0;
						WarInfo[i][wFaction] = 0;
						WarInfo[i][wAttacker] = 0;
						worstscoreat[i] = 0;
						worstmemberat[i] = 999;
						bestscoreat[i] = 0;
						bestmemberat[i] = 999;
						worstscoredf[i] = 0;
						worstmemberdf[i] = 999;
						bestscoredf[i] = 0;
						bestmemberdf[i] = 999;
					}
				}
				else
				{
					waitwar[attackers] = 60;
				}
			}
		}
	}
	new h,mi,sec;
	gettime(h,mi,sec);
	if(mi == 2)
	{
		mysql_query(SQL,"UPDATE `users` SET `Session`='0'");
		foreach(new i : Player)
		{
			PlayerInfo[i][pSession] = 0;
		}
	}
	foreach(new i : Player)
	{
	    if(IsPlayerConnected(i))
	    {
		    if(SafeTime[i] > 0)
			{
				SafeTime[i]--;
			}
			if(SafeTime[i] == 1)
			{
				if(gPlayerAccount[i] == 1 && gPlayerLogged[i] == 0)
				{
					ShowPlayerDialog(i,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"SERVER: Login","Welcome to the ForEver RPG Server.\n\nPlease enter your password below!","Login","Cancel");
				}
			}
			new newcar = GetPlayerVehicleID(i),
				level = PlayerInfo[i][pLevel];
			if(level >= 0 && level <= 2) { PlayerInfo[i][pPayCheck] += 2; }
			else if(level >= 3 && level <= 4) { PlayerInfo[i][pPayCheck] += 3; }
			else if(level >= 5 && level <= 6) { PlayerInfo[i][pPayCheck] += 4; }
			else if(level >= 7 && level <= 8) { PlayerInfo[i][pPayCheck] += 5; }
			else if(level >= 9 && level <= 10) { PlayerInfo[i][pPayCheck] += 6; }
			else if(level >= 11 && level <= 12) { PlayerInfo[i][pPayCheck] += 7; }
			else if(level >= 13 && level <= 14) { PlayerInfo[i][pPayCheck] += 8; }
			else if(level >= 15 && level <= 16) { PlayerInfo[i][pPayCheck] += 9; }
			else if(level >= 17 && level <= 18) { PlayerInfo[i][pPayCheck] += 10; }
			else if(level >= 19 && level <= 20) { PlayerInfo[i][pPayCheck] += 11; }
			else if(level >= 21) { PlayerInfo[i][pPayCheck] += 12; }
		    if(PlayerInfo[i][pJailed] > 0)
		    {
				if(PlayerInfo[i][pJailTime] > 0)
				{
				    if(gPlayerLogged[i] == 1)
				    {
						PlayerInfo[i][pJailTime]--;
						PlayerTextDrawShow(i, Jailtime[i]);
						new string3[60];
						if(PlayerInfo[i][pLanguage] == 2) format(string3,sizeof(string3),"ELIBERAT IN: ~r~%d MINUTE", PlayerInfo[i][pJailTime]/60+1);
						else format(string3,sizeof(string3),"RELEASED IN: ~r~%d MINUTES", PlayerInfo[i][pJailTime]/60+1);
						PlayerTextDrawSetString(i, Jailtime[i], string3);
					}
				}
				if(PlayerInfo[i][pJailTime] <= 0)
				{
				    PlayerInfo[i][pJailTime] = 0;
					if(PlayerInfo[i][pJailed] == 1)
					{
				    	SetPlayerInterior(i, 6);
		    			SetPlayerPosEx(i, 268.7461,76.8184,1001.0391);
					}
					if(PlayerInfo[i][pJailed] == 2)
					{
						SetPlayerInterior(i, 0);
						SetPlayerVirtualWorld(i, 0);
						SetPlayerPosEx(i, -1973.7002,137.7904,27.6875);
					}
					PlayerInfo[i][pJailed] = 0;
					SendClientMessage(i, COLOR_WHITE, "Your time is up! You have been released from jail/prison.");
					SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
			    	RemovePlayerAttachedObject(i,1);
					PlayerTextDrawHide(i, Jailtime[i]);
    				SetPlayerSkin(i, PlayerInfo[i][pModel]);
					ClearCrime(i);
					SetPlayerToTeamColor(i);
					TogglePlayerControllable(i, 1);
				}
			}
			if(IsPlayerInAnyVehicle(i))
			{
				if(IsPlayerInRangeOfPoint(i,50.0,BizzInfo[34][bEntranceX], BizzInfo[34][bEntranceY], BizzInfo[34][bEntranceZ]) || IsPlayerInRangeOfPoint(i,50.0,BizzInfo[35][bEntranceX], BizzInfo[35][bEntranceY], BizzInfo[35][bEntranceZ]) || IsPlayerInRangeOfPoint(i,50.0,BizzInfo[36][bEntranceX], BizzInfo[36][bEntranceY], BizzInfo[36][bEntranceZ]) || IsPlayerInRangeOfPoint(i,50.0,BizzInfo[37][bEntranceX], BizzInfo[37][bEntranceY], BizzInfo[37][bEntranceZ])
				|| IsPlayerInRangeOfPoint(i,50.0,BizzInfo[40][bEntranceX], BizzInfo[40][bEntranceY], BizzInfo[40][bEntranceZ]) || IsPlayerInRangeOfPoint(i,50.0,BizzInfo[41][bEntranceX], BizzInfo[41][bEntranceY], BizzInfo[41][bEntranceZ]))
				{
					if(CarCollisions[i] == 0)
					{
						DisableRemoteVehicleCollisions(i, 1);
						CarCollisions[i] = 1;
					}
				}
				else
				{
					if(CarCollisions[i] == 1)
					{
						DisableRemoteVehicleCollisions(i, 0);
						CarCollisions[i] = 0;
					}
				}
			}
			#if ACTIVE_QUEST == 1
				new countx,strtext[500],strb[128];
				for(new xx = 1; xx <= questobjectss; xx++)
				{
					if(IsPlayerInRangeOfPoint(i,50.0, ObjectInfo[xx][objPosX], ObjectInfo[xx][objPosY], ObjectInfo[xx][objPosZ]) && PlayerInfo[i][pFoundObject][xx] == 0)
					{
						format(strb, sizeof(strb), "~n~~g~Obiectul %d este aproape", ObjectInfo[xx][objID]);
						strcat(strtext, strb);
						countx++;
						if(PlayerInfo[i][pObject][xx] == 0) PlayerInfo[i][pObject][xx] = CreateDynamicPickup(ObjectInfo[xx][objModel], 1, ObjectInfo[xx][objPosX], ObjectInfo[xx][objPosY], ObjectInfo[xx][objPosZ], -1, -1, i, 100.0);
						continue;
					}
					if(IsPlayerInRangeOfPoint(i,100.0, ObjectInfo[xx][objPosX], ObjectInfo[xx][objPosY], ObjectInfo[xx][objPosZ]) && PlayerInfo[i][pFoundObject][xx] == 0)
					{
						format(strb, sizeof(strb), "~n~~y~Obiectul %d este aproape", ObjectInfo[xx][objID]);
						strcat(strtext, strb);
						countx++;
						continue;
					}
					if(IsPlayerInRangeOfPoint(i,200.0, ObjectInfo[xx][objPosX], ObjectInfo[xx][objPosY], ObjectInfo[xx][objPosZ]) && PlayerInfo[i][pFoundObject][xx] == 0)
					{
						format(strb, sizeof(strb), "~n~~r~Obiectul %d este aproape", ObjectInfo[xx][objID]);
						strcat(strtext, strb);
						countx++;
						if(PlayerInfo[i][pObject][xx] == 0) PlayerInfo[i][pObject][xx] = CreateDynamicPickup(ObjectInfo[xx][objModel], 1, ObjectInfo[xx][objPosX], ObjectInfo[xx][objPosY], ObjectInfo[xx][objPosZ], -1, -1, i, 100.0);
						continue;
					}
					if(!IsPlayerInRangeOfPoint(i,200.0, ObjectInfo[xx][objPosX], ObjectInfo[xx][objPosY], ObjectInfo[xx][objPosZ]) && PlayerInfo[i][pFoundObject][xx] == 0)
					{
						if(PlayerInfo[i][pObject][xx] != 0)
						{
							DestroyDynamicPickup(PlayerInfo[i][pObject][xx]);
							PlayerInfo[i][pObject][xx] = 0;
						}
					}
				}
				if(countx > 0)
				{
					PlayerTextDrawShow(i, QuestText[i]);
					PlayerTextDrawSetString(i, QuestText[i], strtext);
				}
				else PlayerTextDrawHide(i, QuestText[i]);
			#endif
			if(QuestWait[i] > 0) QuestWait[i]--;
			if(HealTimer[i] > 0) HealTimer[i]--;
			if(timersoo[i] > 0) timersoo[i]--;
			if(FreeExpire[i] > 0)
			{
				FreeExpire[i]--;
				if(FreeExpire[i] == 0)
				{
					FreeOffer[FreePlayer[i]] = -1;
					FreePrice[FreePlayer[i]] = 0;
					FreePlayer[i] = -1;
					SS(i, COLOR_WHITE, "Oferta de free a expirat, acum poti oferii free altcuiva.", "Free offer has expired, you can now offer free to somebody else.");
				}
			}
			if(soexpire[i] > 0)
			{
				soexpire[i]--;
				if(soexpire[i] == 0)
				{
					if(somated[i] != -1)
					{
						somated[i] = -1;
						somatename[i] = "NULL";
					}
				}
			}
			if(WantedTimer[i] > 0)
			{
				WantedTimer[i]--;
				if(WantedTimer[i] == 0) ClearWanted(i);
			}
			if(login[i] > 0)
			{
				login[i]--;
				if(login[i] == 0) KickEx(i);
			}
			if(TextCount[i] > 0)
			{
				if(LastTextTime[i] < GetTickCount()) TextCount[i] = 0;
			}
			if(TaxiTimer[i] > 0)
			{
				TaxiTimer[i]--;
				if(TaxiTimer[i] == 0)
				{
					new randomtime = 10 + random(7), taxitext[30];
					TaxiTimer[i] = randomtime;
					new x = TaxiDriver[i];
					GivePlayerCash(i, -TaxiFare[x]);
					GivePlayerCash(x, TaxiFare[x]);
					Update(i, pCashx);
					Update(x, pCashx);
					TaxiMoneySpent[i] += TaxiFare[x];
					TaxiMoneyEarned[x] += TaxiFare[x];
					format(taxitext, sizeof(taxitext), "money spent: ~g~$%d", TaxiMoneySpent[i]);
					PlayerTextDrawSetString(i, RentCarText[i], taxitext);
					PlayerTextDrawShow(i, RentCarText[i]);
					format(taxitext, sizeof(taxitext), "money earned: ~g~$%d", TaxiMoneyEarned[x]);
					PlayerTextDrawSetString(x, RentCarText[x], taxitext);
					PlayerTextDrawShow(x, RentCarText[x]);
				}
			}
			if(TaxiFare[i] > 0 && !IsPlayerInAnyVehicle(i))
			{
				TaxiFare[i] = 0;
				TaxiMoneyEarned[i] = 0;
				PlayerTextDrawHide(i, RentCarText[i]);
				foreach(new x : Player)
				{
					if(TaxiDriver[x] == i)
					{
						TaxiDriver[x] = -1;
						TaxiTimer[x] = 0;
						TaxiMoneySpent[x] = 0;
						PlayerTextDrawHide(x, RentCarText[x]);
					}
				}
			}
			if(gPlayerLogged[i] == 1)
			{
				new xd;
				if(!IsPlayerInRangeOfPoint(i, 3.0, 1219.0502, -1812.7823, 16.5938) && !IsPlayerInRangeOfPoint(i, 3.0, 328.3534, -1513.1687, 36.0391))
				{
					xd = 1;
				}
				if(xd == 1)
				{
					new pac;
					for(new a; a < MAX_ATMS; a++)
					{
						if(IsPlayerInRangeOfPoint(i, 3.0, AtmInfo[a][fATMPos][0], AtmInfo[a][fATMPos][1], AtmInfo[a][fATMPos][2]))
						{
							PlayerTextDrawSetString(i, TextJos[i], "Type ~r~/atm ~w~to withdraw money from the ATM.");
							PlayerTextDrawShow(i, TextJos[i]);
							pac = 1;
						}
					}
					if(pac == 0) PlayerTextDrawHide(i, TextJos[i]);
				}
			}
			if(PlayerInfo[i][pPaintBallG] > 0)
			{
				PlayerMapIconPaint(i);
			}
			if(RentTime[i] >= 1)
			{
				if(IsARentCar(GetPlayerVehicleID(i)))
				{
					RentTime[i]++;
					if(GetPlayerCash(i) < 20)
					{
						RemovePlayerFromVehicle(i);
						RentTime[i] = 0;
					}
					if(RentTime[i] >= 11)
					{
						new str2[256];
						RentTime[i] = 1;
						GivePlayerCash(i, -20);
						Update(i, pCashx);
						RentMoneySpent[i] += 20;
						format(string,sizeof(string),"rentcar cost: ~g~$%d", RentMoneySpent[i]);
						PlayerTextDrawSetString(i, RentCarText[i], string);
						PlayerTextDrawShow(i, RentCarText[i]);
						BizzInfo[31][bTill] += 20;
						mysql_format(SQL, str2, sizeof(str2), "UPDATE `bizz` SET `Till`='%d' WHERE `ID`='31'", BizzInfo[31][bTill]);
						mysql_tquery(SQL, str2, "", "");
					}
				}
				else
				{
					PlayerTextDrawHide(i, RentCarText[i]);
					RentTime[i] = 0;
					RentMoneySpent[i] = 0;
				}
			}
			if(PlayerInfo[i][pRaceG] > -1)
			{
				if(PlayerInfo[i][pRaceG] == 0)
				{
					if(racet[0] > 0)
					{
						new names[30],strings[128],bestid=-1,best=racep[0];
						PlayerTextDrawShow(i, RaceTD[i][0]);
						PlayerTextDrawShow(i, RaceTD[i][1]);
						PlayerTextDrawShow(i, RaceTD[i][2]);
						PlayerTextDrawShow(i, RaceTD[i][3]);
						PlayerTextDrawShow(i, RaceTD[i][4]);
						if(bestid == -1) PlayerTextDrawSetString(i, RaceTD[i][4], "~w~First: ~r~Nobody");
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == 0)
							{
								if(RacePos[x] < best)
								{
									best = RacePos[x];
									bestid = x;
								}
							}
						}
						if(bestid != -1)
						{
							GetPlayerName(bestid, names, sizeof(names));
							format(strings, sizeof(strings), "First: ~r~%s", names);
							PlayerTextDrawSetString(i, RaceTD[i][4], strings);
						}
						format(strings, sizeof(strings), "Position: ~r~%d~w~/~r~%d", RacePos[i], racep[0]);
						PlayerTextDrawSetString(i, RaceTD[i][2], strings);
						if(racem[0] == 1 || racem[0] == 3)
						{
							format(strings, sizeof(strings), "Checkpoints: ~r~%d~w~/~r~24", (RaceCP[i]-1));
						}
						if(racem[0] == 2)
						{
							format(strings, sizeof(strings), "Checkpoints: ~r~%d~w~/~r~22", (RaceCP[i]-1));
						}
						PlayerTextDrawSetString(i, RaceTD[i][3], strings);
					}
					else
					{
						PlayerTextDrawHide(i, RaceTD[i][0]);
						PlayerTextDrawHide(i, RaceTD[i][1]);
						PlayerTextDrawHide(i, RaceTD[i][2]);
						PlayerTextDrawHide(i, RaceTD[i][3]);
						PlayerTextDrawHide(i, RaceTD[i][4]);
					}
				}
				if(PlayerInfo[i][pRaceG] == 1)
				{
					if(racet[1] > 0)
					{
						new names[30],strings[128],bestid=-1,best=racep[1];
						PlayerTextDrawShow(i, RaceTD[i][0]);
						PlayerTextDrawShow(i, RaceTD[i][1]);
						PlayerTextDrawShow(i, RaceTD[i][2]);
						PlayerTextDrawShow(i, RaceTD[i][3]);
						PlayerTextDrawShow(i, RaceTD[i][4]);
						if(bestid == -1) PlayerTextDrawSetString(i, RaceTD[i][4], "~w~First: ~r~Nobody");
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == 1)
							{
								if(ARacePos[x] < best)
								{
									best = ARacePos[x];
									bestid = x;
								}
							}
						}
						if(bestid != -1)
						{
							GetPlayerName(bestid, names, sizeof(names));
							format(strings, sizeof(strings), "First: ~r~%s", names);
							PlayerTextDrawSetString(i, RaceTD[i][4], strings);
						}
						format(strings, sizeof(strings), "Position: ~r~%d~w~/~r~%d", ARacePos[i], racep[1]);
						PlayerTextDrawSetString(i, RaceTD[i][2], strings);
						if(racem[1] == 1)
						{
							format(strings, sizeof(strings), "Checkpoints: ~r~%d~w~/~r~22", (RaceCP[i]-1));
						}
						if(racem[1] == 2)
						{
							format(strings, sizeof(strings), "Checkpoints: ~r~%d~w~/~r~22", (RaceCP[i]-1));
						}
						PlayerTextDrawSetString(i, RaceTD[i][3], strings);
					}
					else
					{
						PlayerTextDrawHide(i, RaceTD[i][0]);
						PlayerTextDrawHide(i, RaceTD[i][1]);
						PlayerTextDrawHide(i, RaceTD[i][2]);
						PlayerTextDrawHide(i, RaceTD[i][3]);
						PlayerTextDrawHide(i, RaceTD[i][4]);
					}
				}
			}
			if(PlayerInfo[i][pRaceG] > -1 && !IsPlayerInAnyVehicle(i) && racet[PlayerInfo[i][pRaceG]] > 0)
			{
				if(PlayerInfo[i][pRaceG] == 0)
				{
					new sendername[30];
					GetPlayerName(i, sendername, sizeof(sendername));
					SendClientMessage(i, COLOR_WHITE, "Because you left your car, you were kicked from race arena.");
					foreach(new d : Player)
					{
						if(PlayerInfo[d][pRaceG] == PlayerInfo[i][pRaceG])
						{
							format(string,sizeof(string),"%s has left the race arena.", sendername);
							SendClientMessage(d, COLOR_YELLOW, string);
						}
					}
					SetPlayerHealthEx(i, 100.0);
					curatj[i] = 0;
					for (new x = 0; x != 5; ++x) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
					PlayerTextDrawHide(i, PaintBallText[i]);
					racep[PlayerInfo[i][pRaceG]]--;
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i,0);
					SetPlayerPos(i, 1154.2588,-1457.9507,15.7969);
					RaceCP[i] = 0;
					DisablePlayerRaceCheckpoint(i);
					StopAudioStreamForPlayer(i);
					DisableRemoteVehicleCollisions(i, 0);
					if(racet[PlayerInfo[i][pRaceG]] > -1)
					{
						for(new cs; cs < 20; cs++)
						{
							if(rcarid[0][cs] == gLastCar[i])
							{
								DestroyVehicle(rcarid[0][cs]);
								rcarid[0][cs] = 0;
							}
						}
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[i][pRaceG] && x != i)
							{
								if(RacePos[x] > RacePos[i]) RacePos[x]--;
							}
						}
					}
					PlayerInfo[i][pRaceG] = -1;
					PlayerTextDrawHide(i, RaceTD[i][0]);
					PlayerTextDrawHide(i, RaceTD[i][1]);
					PlayerTextDrawHide(i, RaceTD[i][2]);
					PlayerTextDrawHide(i, RaceTD[i][3]);
					PlayerTextDrawHide(i, RaceTD[i][4]);
					PlayerInfo[i][pRaceVoted] = 0;
				}
				if(PlayerInfo[i][pRaceG] == 1)
				{
					new sendername[30];
					GetPlayerName(i, sendername, sizeof(sendername));
					SendClientMessage(i, COLOR_WHITE, "Because you left your car, you were kicked from race arena.");
					foreach(new d : Player)
					{
						if(PlayerInfo[d][pRaceG] == PlayerInfo[i][pRaceG])
						{
							format(string,sizeof(string),"%s has left the race arena.", sendername);
							SendClientMessage(d, COLOR_YELLOW, string);
						}
					}
					SetPlayerHealthEx(i, 100.0);
					curatj[i] = 0;
					for (new x = 0; x != 5; ++x) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
					PlayerTextDrawHide(i, PaintBallText[i]);
					racep[PlayerInfo[i][pRaceG]]--;
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i,0);
					SetPlayerPos(i, 1154.2588,-1457.9507,15.7969);
					RaceCP[i] = 0;
					DisablePlayerRaceCheckpoint(i);
					StopAudioStreamForPlayer(i);
					DisableRemoteVehicleCollisions(i, 0);
					if(racet[PlayerInfo[i][pRaceG]] > -1)
					{
						for(new cs; cs < 20; cs++)
						{
							if(rcarid[1][cs] == gLastCar[i])
							{
								DestroyVehicle(rcarid[1][cs]);
								rcarid[1][cs] = 0;
							}
						}
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[i][pRaceG] && x != i)
							{
								if(ARacePos[x] > ARacePos[i]) ARacePos[x]--;
							}
						}
					}
					PlayerInfo[i][pRaceG] = -1;
					PlayerTextDrawHide(i, RaceTD[i][0]);
					PlayerTextDrawHide(i, RaceTD[i][1]);
					PlayerTextDrawHide(i, RaceTD[i][2]);
					PlayerTextDrawHide(i, RaceTD[i][3]);
					PlayerTextDrawHide(i, RaceTD[i][4]);
					PlayerInfo[i][pRaceVoted] = 0;
				}
			}
			if(UsingDrugs[i] != 0)
			{
				new Float:NewPos[3];
				GetPlayerPos(i, NewPos[0], NewPos[1], NewPos[2]);
				if(LastPos[i][0] != NewPos[0] || LastPos[i][1] != NewPos[1] || LastPos[i][2] != NewPos[2])
				{
					UsingDrugs[i] = 0;
					ClearAnimations(i);
					SetPlayerDrunkLevel (i, 0);
					PlayerStoned[i] = 0;
					KillTimer(drug[i]);
					SendClientMessage(i, COLOR_WHITE, "You failed to take the drugs.");
				}
			}
			if(FireworkTimer[i] > 0) FireworkTimer[i]--;
			if(LastBizTime[i] > 0)
			{
				LastBizTime[i]--;
				if(LastBizTime[i] == 0) LastBiz[i] = -1;
			}
			if(HelperTimer[i] > 0)
			{
				HelperTimer[i]--;
				if(HelperTimer[i] == 0)
				{
					HelperDuty[i] = 0;
					HaveNewbie[i] = -1;
					SendClientMessage(i, COLOR_LIGHTGREEN3, "Nu mai esti /hduty deoarece nu ai raspuns in 120 de secunde la intrebare.");
				}
			}
			if(timernewbie[i] > 0)
			{
				timernewbie[i]--;
				if(timernewbie[i] == 0)
				{
					if(PlayerInfo[HaveNewbie[i]][pFirstAnswer] != 1)
					{
						format(PlayerInfo[HaveNewbie[i]][pNewbieQuestion], 256, "NULL");
					}
					HaveNewbie[i] = -1;
				}
			}
			if(TimerQuestion[i] > 0)
			{
				TimerQuestion[i]--;
				if(TimerQuestion[i] == 0)
				{
					TimerQuestion[i] = -1;
					format(LiveQuestion[i], 128, "NULL");
				}
			}
			if(Fishing[i] != 0)
			{
				new Float:NewPos[3];
				GetPlayerPos(i, NewPos[0], NewPos[1], NewPos[2]);
				if(LastPos[i][0] != NewPos[0] || LastPos[i][1] != NewPos[1] || LastPos[i][2] != NewPos[2])
				{
					Fishing[i] = 0;
					FishTimer[i] = 0;
					ClearAnimations(i);
					ApplyAnimation(i, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
					TogglePlayerControllable(i, 1);
					RemovePlayerAttachedObject(i, 4);
					KillTimer(FishTimerr[i]);
					SS(i, COLOR_LIGHTGREEN3, "Daca te misti vei speria pestii. Incearca din nou sa pescuiesti fara a te misca.", "You scared the fish by moving and the fish got away.");
				}
			}
			if(GetPlayerSurfingVehicleID(i) != INVALID_VEHICLE_ID && GetPlayerWeapon(i) != 0)
			{
				new Float: slx, Float: sly, Float:slz;
				GetPlayerPos(i, slx, sly, slz);
				SetPlayerPosEx(i, slx, sly, slz+5);
				SetPlayerArmedWeapon(i,0);
				SendClientMessage(i, COLOR_RED, "Nu poti folosi armele pe o masina!");
			}
			if(PlayerInfo[i][pHUD1] != 0)
			{
				new Float:health;
				GetPlayerHealth(i,health);
				PlayerTextDrawShow(i, HUD[1][i]);
				format(string,sizeof(string),"%.0f",health);
				if(PlayerInfo[i][pHUD1] == 1)
				{
					PlayerTextDrawColor(i, HUD[1][i], 0xC0C0C0FF);
				}
				else if(PlayerInfo[i][pHUD1] == 2)
				{
					PlayerTextDrawColor(i, HUD[1][i], 0xFF0000FF);
				}
				else if(PlayerInfo[i][pHUD1] == 3)
				{
					PlayerTextDrawColor(i, HUD[1][i], 0x00FF00FF);
				}
				else if(PlayerInfo[i][pHUD1] == 4)
				{
					PlayerTextDrawColor(i, HUD[1][i], 0x0000FFFF);
				}
				else if(PlayerInfo[i][pHUD1] == 5)
				{
					PlayerTextDrawColor(i, HUD[1][i], 0xFFFF00FF);
				}
				PlayerTextDrawSetString(i, HUD[1][i], string);
				PlayerTextDrawShow(i, HUD[1][i]);
			}
			if(PlayerInfo[i][pHUD2] != 0)
			{
				new Float:armour;
				GetPlayerArmour(i,armour);
				PlayerTextDrawShow(i, HUD[2][i]);
				format(string,sizeof(string),"%.0f",armour);
				if(PlayerInfo[i][pHUD2] == 1)
				{
					PlayerTextDrawColor(i, HUD[2][i], 0xC0C0C0FF);
				}
				else if(PlayerInfo[i][pHUD2] == 2)
				{
					PlayerTextDrawColor(i, HUD[2][i], 0xFF0000FF);
				}
				else if(PlayerInfo[i][pHUD2] == 3)
				{
					PlayerTextDrawColor(i, HUD[2][i], 0x00FF00FF);
				}
				else if(PlayerInfo[i][pHUD2] == 4)
				{
					PlayerTextDrawColor(i, HUD[2][i], 0x0000FFFF);
				}
				else if(PlayerInfo[i][pHUD2] == 5)
				{
					PlayerTextDrawColor(i, HUD[2][i], 0xFFFF00FF);
				}
				PlayerTextDrawSetString(i, HUD[2][i], string);
				PlayerTextDrawShow(i, HUD[2][i]);
				if(armour < 1)
				{
					PlayerTextDrawHide(i, HUD[2][i]);
				}
			}
			new drunknew = GetPlayerDrunkLevel(i);
			if (drunknew < 100) {
				SetPlayerDrunkLevel(i, 2000);
			} else {

				if(PlayerInfo[i][pDrunkLevelLast] != drunknew) {

					new wfps = PlayerInfo[i][pDrunkLevelLast] - drunknew;

					if ((wfps > 0) && (wfps < 200))
						PlayerInfo[i][pFPS] = wfps;

					PlayerInfo[i][pDrunkLevelLast] = drunknew;
				}

			}
			if(PlayerInfo[i][pHUD3] != 0)
			{
				PlayerTextDrawShow(i, HUD[3][i]);
				format(string,sizeof(string),"%d",PlayerInfo[i][pFPS]);
				PlayerTextDrawSetString(i, HUD[3][i], string);
				PlayerTextDrawShow(i, HUD[3][i]);
			}
			if(PlayerInfo[i][pAdmin] >= 5)
			{
				new reports=0,cheaters=0;
				foreach(new id : Player)
				{
					if(strcmp(reporttext[id], "NULL", true) && reportcheater[id] == -1)
					{
						reports++;
					}
					if(reportcheater[id] != -1)
					{
						cheaters++;
					}
				}
				TextDrawShowForPlayer(i, AdminHUD);
				format(string, sizeof(string), "Tick: ~b~%d~w~ / Reports: ~r~%d~w~ / Cheaters: ~r~%d~w~ / FPS: ~g~%d~w~ / Ping: ~r~%d~w~ / Anim: ~y~%d~w~", GetServerTickRate(), reports, cheaters, PlayerInfo[i][pFPS], GetPlayerPing(i), GetPlayerAnimationIndex(i));
				TextDrawSetString(AdminHUD, string);
			}
			if(IsPlayerAFK[i] == 0)
			{
				OnlineTime[i]++;
				OnlineTimeToday[i]++;
			}
			if(RobTime[i] >= 0)
			{
				RobTime[i]++;
			}
			if(DrugTimer[i] > 0)
			{
				DrugTimer[i]--;
			}
			if(SellTradeTimer[i] > 0)
			{
				SellTradeTimer[i]--;
				if(SellTradeTimer[i] == 0)
				{
					foreach(new xd : Player)
					{
						if(i == tradeofferer[xd])
						{
							tradeofferer[xd] = -1;
							tradediff[xd] = 0;
							tradetype[xd] = -1;
							tradetype2[xd] = -1;
							tradecars[xd] = -1;
							tradecars2[xd] = -1;
						}
					}
					SellTradeTimer[i] = 0;
					SendClientMessage(i, COLOR_WHITE, "The sell/trade offer has expired.");
				}
			}
			if(GarbageTimer[i] > 0)
			{
				GarbageTimer[i]--;
				if(GarbageTimer[i] == 0)
				{
					SendClientMessage(i, COLOR_WHITE, "Job esuat. Nu ai pus sacul de gunoi in masina in 60 secunde.");
					RemovePlayerAttachedObject(i, 3);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
				}
			}
			if(PlayerInfo[i][pNextNotification] > 0)
			{
			    PlayerInfo[i][pNextNotification]--;
			}
			if(pizzatime[i] > 0)
			{
			    pizzatime[i]--;
			    if(pizzatime[i] == 0)
			    {
			        SendClientMessage(i, COLOR_GREY, "Job reload time ended.");
			        pizzatime[i] = 0;
				}
			}
			if(failpizza[i] > 0)
			{
				failpizza[i]--;
				if(failpizza[i] == 0)
				{
					DisablePlayerRaceCheckpoint(i);
					pizzaj[i] = 0;
					pizzatime[i] = 0;
					failpizza[i] = -1;
					PizzaCP[i] = 0;
					pizzaprize[i] = 0;
				}
			}
			if(PlayerInfo[i][pSleeping] == 1)
			{
				SetPlayerHealthEx(i, 100);
			}
			if(JackAcc[i] > 0)
			{
				JackAcc[i]--;
				if(JackAcc[i] == 0) SCM(i,COLOR_WHITE,"You can now drop vehicles again at the crane.");
			}
			if(PlayerInfo[i][pAdmin] >= 1 && PlayerInfo[i][pAdmin] <= 5)
			{
				new reports=0,cheaters=0,strr[128];
				foreach(new id : Player)
				{
					if(strcmp(reporttext[id], "NULL", true) && reportcheater[id] == -1)
					{
						reports++;
					}
					if(reportcheater[id] != -1)
					{
						cheaters++;
					}
				}
				if(reports > 0 || cheaters > 0)
				{
					PlayerTextDrawShow(i, Reportss[i]);
					format(strr,sizeof(strr),"REPORTS: ~r~%d~w~ / CHEATERS: ~r~%d",reports,cheaters);
					PlayerTextDrawSetString(i, Reportss[i], strr);
				}
				else if(reports == 0)
				{
					PlayerTextDrawHide(i, Reportss[i]);
				}
			}
			else
			{
				PlayerTextDrawHide(i, Reportss[i]);
			}
			if(IsPlayerInAnyVehicle(i))
			{
				if(PlayerInfo[i][pQuest1] == 3)
				{
					if(PlayerInfo[i][pQuestCar] == GetVehicleModel(GetPlayerVehicleID(i)))
					{
						if(PlayerInfo[i][pQuestNeed1] > PlayerInfo[i][pQuestProgress1])
						{
							if(GetPlayerVehicleSeat(i) == 0)
							{
								if(IsPlayerAFK[i] == 0)
								{
									new vehid = GetPlayerVehicleID(i),Float:distance;
									if(IsPlayerInRangeOfPoint(i, 10.0, 617.5361,-1.9900,1000.6635) || IsPlayerInRangeOfPoint(i, 10.0, 1041.6093,-1019.4713,31.8327) || IsPlayerInRangeOfPoint(i, 10.0, 2385.9341,1049.5715,10.5474) || IsPlayerInRangeOfPoint(i, 10.0, -1936.0393,244.7725,34.1890)
									|| IsPlayerInRangeOfPoint(i, 10.0, -2722.2681,216.9585,4.1897) || IsPlayerInRangeOfPoint(i, 10.0, 615.2837,-124.2390,997.7005) || IsPlayerInRangeOfPoint(i, 10.0, 2644.9446,-2043.7083,13.3856) || IsPlayerInRangeOfPoint(i, 10.0, 616.7852,-74.8150,997.7812)) GetVehiclePos(vehid, old_veh_pos[vehid][0], old_veh_pos[vehid][1], old_veh_pos[vehid][2]);
									distance = GetPlayerDistanceFromPoint(i, old_veh_pos[vehid][0], old_veh_pos[vehid][1], old_veh_pos[vehid][2]);
									QuestCarKM[vehid] += distance / 1000;
									GetVehiclePos(vehid, old_veh_pos[vehid][0], old_veh_pos[vehid][1], old_veh_pos[vehid][2]);
									if(floatround(QuestCarKM[vehid], floatround_round) > PlayerInfo[i][pQuestProgress1])
									{
										PlayerInfo[i][pQuestProgress1] = floatround(QuestCarKM[vehid], floatround_round);
										Update(i, pQuestProgress1x);
										if(PlayerInfo[i][pQuestProgress1] >= PlayerInfo[i][pQuestNeed1])
										{
											FinishQuest1(i, 3);
										}
										else
										{
											new str[128];
											if(PlayerInfo[i][pLanguage] == 1)
											{
												format(str, sizeof(str),"Quest [Travel %d KM with vehicle %s] progress: %d/%d",PlayerInfo[i][pQuestNeed1],aVehicleNames[PlayerInfo[i][pQuestCar] - 400],PlayerInfo[i][pQuestProgress1],PlayerInfo[i][pQuestNeed1]);
												SendClientMessage(i, COLOR_YELLOW, str);
											}
											else
											{
												format(str, sizeof(str),"Progres pentru misiunea [Parcurge distanta de %d KM cu un vehicul de tipul %s]: %d/%d",PlayerInfo[i][pQuestNeed1],aVehicleNames[PlayerInfo[i][pQuestCar] - 400],PlayerInfo[i][pQuestProgress1],PlayerInfo[i][pQuestNeed1]);
												SendClientMessage(i, COLOR_YELLOW, str);
											}
										}
									}
								}
							}
						}
					}
				}
				if(IsAnOwnableCar(GetPlayerVehicleID(i)))
				{
					foreach(new s : Player)
					{
						for(new v; v < MAX_PERSONAL_VEHICLES; v++)
						{
							if(PlayerInfo[s][pCarID][v] == GetPlayerVehicleID(i))
							{
								if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
								{
									if(IsPlayerAFK[i] == 0)
									{
										new Float:distance,vehid = GetPlayerVehicleID(i),kmd;
										if(IsPlayerInRangeOfPoint(i, 10.0, 617.5361,-1.9900,1000.6635) || IsPlayerInRangeOfPoint(i, 10.0, 1041.6093,-1019.4713,31.8327) || IsPlayerInRangeOfPoint(i, 10.0, 2385.9341,1049.5715,10.5474) || IsPlayerInRangeOfPoint(i, 10.0, -1936.0393,244.7725,34.1890)
										|| IsPlayerInRangeOfPoint(i, 10.0, -2722.2681,216.9585,4.1897) || IsPlayerInRangeOfPoint(i, 10.0, 615.2837,-124.2390,997.7005) || IsPlayerInRangeOfPoint(i, 10.0, 2644.9446,-2043.7083,13.3856) || IsPlayerInRangeOfPoint(i, 10.0, 616.7852,-74.8150,997.7812)) GetVehiclePos(vehid, old_veh_pos[vehid][0], old_veh_pos[vehid][1], old_veh_pos[vehid][2]);
										distance = GetPlayerDistanceFromPoint(i, old_veh_pos[vehid][0], old_veh_pos[vehid][1], old_veh_pos[vehid][2]);
										PlayerInfo[s][pCarKM][v] += distance / 1000;
										GetVehiclePos(vehid, old_veh_pos[vehid][0], old_veh_pos[vehid][1], old_veh_pos[vehid][2]);
										kmd = floatround(PlayerInfo[s][pCarKM][v], floatround_round);
										if(kmd % 1000 == 0 && PlayerInfo[s][pCarKMLast][v] != kmd)
										{
											PlayerInfo[s][pCarKMLast][v] = kmd;
											PlayerInfo[s][pCarInsPrice][v] += 1000;
											cUpdate(s, v, cInscarpricex);
											cUpdate(s, v, cKMLastx);
										}
									}
								}
							}
						}
					}
				}
			}
		    if(CellTime[i] > 0)
			{
				CellTime[i] = CellTime[i] +1;
				if(PlayerInfo[i][pCredits] > 0)
				{
					CallCost[i] = CallCost[i] +1;
				}
				else
				{
					new caller = Mobile[i];
				    CellTime[i] = 0;
				    CellTime[caller] = 0;
					CellTime[i] = 0;
					SendClientMessage(i,COLOR_WHITE,"{B8FFDB}You hung up because you don't have enough credits.");
					Mobile[caller] = -1;
				}
			}
			if(CellTime[i] == 0 && CallCost[i] > 0)
			{
				format(string, sizeof(string), "~w~The call cost~n~~r~~h~%d credits",CallCost[i]);
				PlayerInfo[i][pCredits] = PlayerInfo[i][pCredits] - CallCost[i];
				GameTextForPlayer(i, string, 5000, 1);
				Update(i, pCreditsx);
				CallCost[i] = 0;
			}
			if(PlayerInfo[i][pNewbieTimeout] > 0)
			{
	            PlayerInfo[i][pNewbieTimeout]--;
	            if(PlayerInfo[i][pNewbieTimeout] == 0)
				{
					SendClientMessage(i, COLOR_WHITE, "You may now speak in the newbie chat channel again.");
				}
	        }

	        if(PlayerInfo[i][pNMuted] > 0)
			{
	            PlayerInfo[i][pNMuted]--;
	            Update(i,pNMutedx);
	            if(PlayerInfo[i][pNMuted] == 0) SendClientMessage(i, COLOR_WHITE, "You may now speak in the newbie chat channel again.");
			}
			new idcar = GetPlayerVehicleID(i);
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER && !IsAPlane(idcar))
			{
				new speed = Carspeed(i),
					antispeed[300],
					sendername[25];
				GetPlayerName(i,sendername,sizeof(sendername));
				if(speed > 222)
				{
					format(antispeed, sizeof(antispeed), "(N) %s (%d, level %d) may be using speed hack, vehicle: %s, speed: %.0d.",sendername,i,PlayerInfo[i][pLevel],aVehicleNames[GetVehicleModel(GetPlayerVehicleID(i))-400],speed);
        			ABroadCast(COLOR_RED,antispeed,1);
				}
			}
			if(PlayerInfo[i][pWantedLevel] > 0)
			{
			    wantedlost[i]--;
			    if(wantedlost[i] <= 0)
			    {
			        PlayerInfo[i][pWantedLevel] -= 1;
			        new name[25];
			        GetPlayerName(i,name,sizeof(name));
			        SCM(i,COLOR_LIGHTBLUE,"You lost one wanted points because you ran 15 minutes by police.");
			        Update(i,pWantedLevelx);
					format(string,sizeof(string),"%s(%d) lost one wanted points because it ran 15 minutes by police.",name,i);
					SendTeamMessage(3, COLOR_DBLUE, string);
					SendTeamMessage(2, COLOR_DBLUE, string);
					SendTeamMessage(1, COLOR_DBLUE, string);
					SendTeamMessage(8, COLOR_DBLUE, string);
					wantedlost[i] = 900;
					if(PlayerInfo[i][pWantedLevel] <= 0)
					{
					    ClearCrime(i);
					}
				}
			}
			if(PlayerInfo[i][pHitT] > 0)
			{
				PlayerInfo[i][pHitT] -= 1;
			}
		    if(RepairTime[i] > 0)
		    {
		        RepairTime[i] = RepairTime[i] - 1;
			}
			if(PlayerInfo[i][pMuted] > 0)
		    {
				if(PlayerInfo[i][pMuteTime] > 0)
				{
					PlayerInfo[i][pMuteTime]--;
				}
				if(PlayerInfo[i][pMuteTime] <= 0)
				{
				    PlayerInfo[i][pMuteTime] = 0;
                    SendClientMessage(i, COLOR_GREY, "You have now been automatically unmuted.");
					PlayerInfo[i][pMuted] = 0;
				}
			}
			if(targetfind[i] >= 0 && UsedFind[i] == 1)
   			{
   			    new target,strr[128],namee[30];
   			    target = targetfind[i];
   			    if(InBussines[target] > -1)
   			    {
					new j;
					j = InBussines[target];
					SetPlayerCheckpoint(i,BizzInfo[j][bEntranceX], BizzInfo[j][bEntranceY], BizzInfo[j][bEntranceZ],4);
				}
				else if(InHouse[target] > -1)
				{
					new j;
					j = InHouse[target];
					SetPlayerCheckpoint(i,HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez],4);
				}
				else if(InHQ[target] > -1)
				{
					SetPlayerCheckpoint(i, DynamicFactions[InHQ[target]][fceX], DynamicFactions[InHQ[target]][fceY], DynamicFactions[InHQ[target]][fceZ], 4);
				}
				else
				{
   			    	new Float: x, Float: y, Float: z;
   			    	GetPlayerPos(target, x, y, z);
   			    	SetPlayerCheckpoint(i, x, y, z, 4);
   			    }
				GetPlayerName(targetfind[i], namee, sizeof(namee));
				PlayerTextDrawShow(i, FindTXD[i][0]);
				PlayerTextDrawShow(i, FindTXD[i][1]);
				format(strr, sizeof(strr), "target: ~r~%s ~w~(%d)",namee,targetfind[i]);
				PlayerTextDrawSetString(i, FindTXD[i][0], strr);
				format(strr, sizeof(strr), "distance: ~r~%.0fm",GetDistanceBetweenPlayers(i, targetfind[i]));
				PlayerTextDrawSetString(i, FindTXD[i][1], strr);
   			}
		    if(IsABoat(newcar))
			{
			    if(PlayerInfo[i][pBoatLic] < 1 && GetPlayerState(i) == 2 && TakingLesson[i] != 2)
				{
				    RemovePlayerFromVehicleEx(i);
				}
			}
			else if(IsAPlane(newcar))
			{
			    if(PlayerInfo[i][pFlyLic] < 1 && GetPlayerState(i) == 2)
				{
				    if(TakingLesson[i] == 1  || TakingLesson[i] == 2) { }
				    else { RemovePlayerFromVehicleEx(i); }
				}
			}
			else
			{
				if(PlayerInfo[i][pCarLic] < 1 && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == 2)
				{
					if(TakingLesson[i] == 1) { }
				}
			}//Done with car check
			if(TutTime[i] >= 1)
			{
			    TutTime[i] += 1;
			    if(TutTime[i] == 3)
				{
                    PlayerTextDrawShow(i, Step[i]);
					PlayerTextDrawSetString(i, Step[i], "~w~Step: ~r~1~w~/~r~8");
                    PlayerTextDrawShow(i, Tutorial[i]);
					new Cache: ab = mysql_query(SQL, "SELECT * FROM users");
					new registered = cache_get_row_count();
					cache_delete(ab);
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SetPlayerVirtualWorld(i, 0);
					if(PlayerInfo[i][pLanguage] == 2)
					{
					    new name[MAX_PLAYER_NAME];
			        	GetPlayerName(i, name, sizeof name);
	    				SetPlayerPosEx(i, 366.0407,-1892.6018,1.6999);
						SetPlayerCameraPos(i, 558.3660,-1964.6206,85.2497);
						SetPlayerCameraLookAt(i, 419.0543,-1888.1879,23.8108);
						TogglePlayerControllable(i,0);
     					format(string, sizeof(string), "Salutare, %s! Bun venit pe RPG.ForEver RPG.RO!", name);
						SendClientMessage(i, COLOR_WHITE, string);
				        SendClientMessage(i, COLOR_WHITE, "Serverul RPG.ForEver RPG.RO a fost deschis pe 11 noiembrie 2016.");
						format(string, sizeof(string), "Avem %d playeri inregistrati, iar acum sunt %d playeri online.",registered,GetOnLinePlayers());
						SendClientMessage(i, COLOR_WHITE, string);
				        SendClientMessage(i, COLOR_WHITE, "Sunt 100 case si 54 business-uri pe server, iar in dealership sunt disponibile 103 modele diferite de masini.");
				        SendClientMessage(i, COLOR_WHITE, "Daca joci pe RPG.ForEver RPG.RO, ai siguranta ca nu vor fi resetate niciodata datele(wipe) niciodata asa cum se intampla pe alte servere.");
				        SendClientMessage(i, COLOR_WHITE, "Se fac updateuri frecvente la server, iar bugurile aparute sunt reparate rapid.");
				        SendClientMessage(i, COLOR_WHITE, "Adminii si helperii sunt bine alesi si te pot ajuta cu orice problema.");
				        SendClientMessage(i, COLOR_WHITE, "Intrebarile despre server le poti pune pe /n, iar daca ai o problema poti folosi /report.");
				        SendClientMessage(i, COLOR_WHITE, "In continuare iti vom prezenta cateva informatii despre joc.");
			        }
			        else
			        {
			            new name[MAX_PLAYER_NAME];
			        	GetPlayerName(i, name, sizeof name);
			            format(string, sizeof(string), "Hi, %s! Welcome to RPG.ForEver RPG.RO!", name);
						SendClientMessage(i, COLOR_WHITE, string);
						SendClientMessage(i, COLOR_WHITE, "Our server, RPG.ForEver RPG.RO, has opened on November 11th, 2016.");
						format(string, sizeof(string), "We have %d players registered and now there are %d players online.",registered,GetOnLinePlayers());
						SendClientMessage(i, COLOR_WHITE, string);
				        SendClientMessage(i, COLOR_WHITE, "There are 100 houses and 54 businesses on our server and there are 103 different car models that you can buy from our dealership.");
				        SendClientMessage(i, COLOR_WHITE, "If you play on RPG.ForEver RPG.RO, you'll never have to worry about server wipes.");
				        SendClientMessage(i, COLOR_WHITE, "Our server is frequently updated and the bugs are fixed quickly.");
				        SendClientMessage(i, COLOR_WHITE, "The admins and helpers can help you with any problem you may have.");
				        SendClientMessage(i, COLOR_WHITE, "If you have any questions, use /n. If you have any problems, use /report.");
			        }
			    }
			    else if(TutTime[i] == 15)
			    {
			        PlayerTextDrawShow(i, Step[i]);
					PlayerTextDrawSetString(i, Step[i], "~w~Step: ~r~2~w~/~r~8");
			        SetPlayerPosEx(i, 1857.4175,-1847.2292,13.5815);
					SetPlayerCameraPos(i, 1794.2242,-1819.9382,38.3741);
 					SetPlayerCameraLookAt(i, 1830.4750,-1840.9551,15.9818);
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					if(PlayerInfo[i][pLanguage] == 2)
					{
						SendClientMessage(i, COLOR_WHITE, "Acesta este un magazin 24/7, magazin de unde poti cumpara mai multe lucruri utile:");
						SendClientMessage(i, COLOR_WHITE, "- telefon - dupa ce cumperi un telefon, vei putea suna un player sau ii poti da sms.");
				        SendClientMessage(i, COLOR_WHITE, "- agenda telefonica - vei putea afla numerele de telefon ale altor playeri folosind comanda /number.");
						SendClientMessage(i, COLOR_WHITE, "- credit pentru telefon - pe serverul nostru telefoanele folosesc credit pentru apeluri si sms-uri.");
				        SendClientMessage(i, COLOR_WHITE, "- walkie-talkie - walkie-talkie poate fi folosit pentru a discuta cu un grup de prieteni.");
				        SendClientMessage(i, COLOR_WHITE, "Te lasam pe tine sa descoperi ce altceva poti cumpara din magazine.");
					}
					else
					{
						SendClientMessage(i, COLOR_WHITE, "This is a 24/7 store. You can buy the following products from here:");
						SendClientMessage(i, COLOR_WHITE, "- phone - you can use the phone to make calls(/call) and send texts(/sms).");
				        SendClientMessage(i, COLOR_WHITE, "- phonebook - you'll be able to find the phone number another player using /number.");
						SendClientMessage(i, COLOR_WHITE, "- prepay credit - on this server the phones use prepay credit. when it runs out, buy some more.");
				        SendClientMessage(i, COLOR_WHITE, "- walkie-talkie - this can be used to talk with a group of friends.");
				        SendClientMessage(i, COLOR_WHITE, "We'll let you discover what else can be bought from the stores.");
					}
			    }
			    else if(TutTime[i] == 27)
			    {
			        PlayerTextDrawShow(i, Step[i]);
					PlayerTextDrawSetString(i, Step[i], "~w~Step: ~r~3~w~/~r~8");
			        SetPlayerPosEx(i, 1223.5475,-1881.3280,30.6971);
   					SetPlayerCameraPos(i, 1199.0161,-1862.7023,46.3864);
	    			SetPlayerCameraLookAt(i, 1220.9999,-1838.0793,29.3740);
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					if(PlayerInfo[i][pLanguage] == 2)
					{
						SendClientMessage(i, COLOR_WHITE, "Aici poti da examen pentru a obtine permisul de conducere.");
						SendClientMessage(i, COLOR_WHITE, "Nu stii cum sa ajungi aici? Nicio problema. Poti folosi comanda /gps si vei putea alege 'Los Santos DMV' din lista.");
				        SendClientMessage(i, COLOR_WHITE, "Comanda /gps poate fi folosita si pentru a afla unde sunt alte locatii importante de pe server.");
				        SendClientMessage(i, COLOR_WHITE, "Dupa ce vei lua examenul vei primi permisul de conducere, vei putea conduce masini, dar nu avioane sau barci.");
				        SendClientMessage(i, COLOR_WHITE, "Cand vei face level 3 vei putea cumpara si licenta pentru a putea conduce un avion, o barca sau pentru a cumpara arme.");
				        SendClientMessage(i, COLOR_WHITE, "Licentele vor expira dupa 100 ore de joc si va trebui sa dai examenele din nou pentru a le obtine.");
					}
					else
					{
						SendClientMessage(i, COLOR_WHITE, "Here is the place where you can get your driver's licence.");
						SendClientMessage(i, COLOR_WHITE, "If you don't know to get here, you can use /gps and choose 'Los Santos DMV' from the list.");
				        SendClientMessage(i, COLOR_WHITE, "You can also use /gps to find out where other important locations are.Or you could call a cab using /service taxi.");
				        SendClientMessage(i, COLOR_WHITE, "Once you'll get your driver's license, you'll able to drive cars, but not planes or boats.");
				        SendClientMessage(i, COLOR_WHITE, "To be able to drive planes and boats, you'll need to contact an instructor once you reach level 3.");
				        SendClientMessage(i, COLOR_WHITE, "The licenses expires after 100 hours spent in game.");
					}
			    }
			    else if(TutTime[i] == 39)
			    {
			        PlayerTextDrawShow(i, Step[i]);
					PlayerTextDrawSetString(i, Step[i], "~w~Step: ~r~4~w~/~r~8");
			        SetPlayerPosEx(i, 414.1995,-1512.3070,31.5960);
   					SetPlayerCameraPos(i, 428.3816,-1493.0682,69.4719);
	    			SetPlayerCameraLookAt(i, 338.5612,-1515.7255,45.6690);
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					if(PlayerInfo[i][pLanguage] == 2)
					{
						SendClientMessage(i, COLOR_WHITE, "Aici este Dealership-ul, adica locul de unde poti cumpara masini.");
	                    SendClientMessage(i, COLOR_WHITE, "Pentru a cumpara o masina personala ai nevoie de level 3 si de bani suficienti.");
	                    SendClientMessage(i, COLOR_WHITE, "Cea mai ieftina masina este Bike $250,000, iar cea mai scumpa este Infernus si are pretul de $50,000,000.");
	                    SendClientMessage(i, COLOR_WHITE, "Sunt disponibile 103 modele diferite de masini in dealership.");
	                    SendClientMessage(i, COLOR_WHITE, "Dupa ce vei cumpara o masina personala vei putea incuia usile, o vei putea parca unde vrei si o vei putea localiza.");
	                    SendClientMessage(i, COLOR_WHITE, "Vei putea deasemenea sa vinzi masina sau sa faci schimb de masini cu un alt player.");
	                    SendClientMessage(i, COLOR_WHITE, "Poti detine maxim 2 masini personale sau 4 daca ai cont premium, iar toate masinile vor ramane spawnate.");
	                    SendClientMessage(i, COLOR_WHITE, "Pana ajungi la level 3 poti munci la unul in joburile disponibile.");
					}
					else
					{
						SendClientMessage(i, COLOR_WHITE, "That is the dealership, the place where players can buy personal vehicles.");
	                    SendClientMessage(i, COLOR_WHITE, "To buy your own vehicle you need level 3 and enough money.");
	                    SendClientMessage(i, COLOR_WHITE, "The cheapest car is Bike with price of $250,000 and the most expensive is Infernus and it costs $50,000,000.");
	                    SendClientMessage(i, COLOR_WHITE, "There are 103 different car models available in our vehicle dealership.");
	                    SendClientMessage(i, COLOR_WHITE, "Once you'll get your own car, you'll able to lock the doors of your car and you'll be able to park it wherever you want.");
	                    SendClientMessage(i, COLOR_WHITE, "You can have 2 personal vehicles or 4 if you have a premium account.");
	                    SendClientMessage(i, COLOR_WHITE, "Untill you reach level 3, you can use one of the 10+ jobs available.");
					}
			    }
			    else if(TutTime[i] == 51)
			    {
			        PlayerTextDrawShow(i, Step[i]);
					PlayerTextDrawSetString(i, Step[i], "~w~Step: ~r~5~w~/~r~8");
			       	SetPlayerPosEx(i, -35.6509,-1152.9932,1.1770);
					SetPlayerCameraPos(i, -74.3290,-1074.9336,18.7807);
 					SetPlayerCameraLookAt(i, -65.9360,-1128.8743,1.0781);
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					if(PlayerInfo[i][pLanguage] == 2)
					{
						SendClientMessage(i, COLOR_WHITE, "Trucker (sofer de tir) este unul din cele 11 job-uri disponibile pe serverul nostru.");
	                    SendClientMessage(i, COLOR_WHITE, "La acest job trebuie sa livrezi marfa dintr-un oras in altul.");
	                    SendClientMessage(i, COLOR_WHITE, "");
	                    SendClientMessage(i, COLOR_WHITE, "Pentru a vedea o lista cu joburile de pe server, foloseste comanda /jobs.");
						SendClientMessage(i, COLOR_WHITE, "La toate joburile se castiga la fel de multi bani, cu exceptia jobului de detectiv unde nu se castiga bani.");
						SendClientMessage(i, COLOR_WHITE, "Poti testa toate joburile pentru a testa care iti place mai mult.");
						SendClientMessage(i, COLOR_WHITE, "Daca te plictisesti de un job, vei putea folosi comanda /quitjob pentru a renunta la el oricand.");
					}
					else
					{
						SendClientMessage(i, COLOR_WHITE, "Trucker is one of the 10+ jobs available on our server.");
	                    SendClientMessage(i, COLOR_WHITE, "This job requires you to deliver stuff from one city to another.");
	                    SendClientMessage(i, COLOR_WHITE, "");
	                    SendClientMessage(i, COLOR_WHITE, "To see list of all available jobs, you can use the command /jobs.");
						SendClientMessage(i, COLOR_WHITE, "One most jobs you'll earn the same ammount of money.");
						SendClientMessage(i, COLOR_WHITE, "You can test all jobs to find out which one you like better.");
						SendClientMessage(i, COLOR_WHITE, "If you get bored, you can use /quitjob and take another job.");
					}
			    }
			    else if(TutTime[i] == 63)
			    {
			        PlayerTextDrawShow(i, Step[i]);
					PlayerTextDrawSetString(i, Step[i], "~w~Step: ~r~6~w~/~r~8");
			        SetPlayerPosEx(i, 1504.0387,-1664.6865,14.0031);
   					SetPlayerCameraPos(i, 1506.8416,-1697.2029,38.8016);
	    			SetPlayerCameraLookAt(i, 1533.4709,-1680.9561,29.7199);
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					if(PlayerInfo[i][pLanguage] == 2)
					{
						SendClientMessage(i, COLOR_WHITE, "Politistii sunt impartiti in 4 factiuni: Los Santos Police Department, Las Venturas Police Department, FBI si National Guard.");
				        SendClientMessage(i, COLOR_WHITE, "Vei putea aplica la una din cele 4 factiuni de politisti incepand cu level 7.");
				        SendClientMessage(i, COLOR_WHITE, "Pana ajungi la level 7, vei putea aplica la factiunile Taxi, Paramedic, News Reporters, School Instructors incepand cu level 5.");
				        SendClientMessage(i, COLOR_WHITE, "La factiunea Hitman Agency sau la una din cele 4 mafii, vei putea aplica incepand cu level 7.");
				        SendClientMessage(i, COLOR_WHITE, "Aplicatiile se fac pe forum (www.ForEver RPG.ro).");
				        SendClientMessage(i, COLOR_WHITE, "Cei care fac parte din factiuni primesc salarii saptamanale de la liderul factiunii.");
					}
					else
					{
						SendClientMessage(i, COLOR_WHITE, "Cops are divided in 4 factions: Los Santos Police Department, Las Venturas Police Department, FBI and National Guard.");
				        SendClientMessage(i, COLOR_WHITE, "You'll be able to apply to on of the cops factions once you get level 7.");
				        SendClientMessage(i, COLOR_WHITE, "You can apply to the factions Taxi, Paramedic, News Reporters and School Instructors once you get level 5.");
				        SendClientMessage(i, COLOR_WHITE, "You'll need level 7 to become a Hitman or a gang member.");
				        SendClientMessage(i, COLOR_WHITE, "You can apply to join a faction on our forum (www.ForEver RPG.ro).");
					}
			    }
			    else if(TutTime[i] == 75)
			    {
			        PlayerTextDrawShow(i, Step[i]);
					PlayerTextDrawSetString(i, Step[i], "~w~Step: ~r~7~w~/~r~8");
			        SetPlayerPosEx(i, 1463.5978,-1050.0614,24.0156);
   					SetPlayerCameraPos(i, 1484.4119,-1049.7178,39.7065);
	    			SetPlayerCameraLookAt(i, 1465.3987,-1025.0939,29.2015);
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					if(PlayerInfo[i][pLanguage] == 2)
					{
						SendClientMessage(i, COLOR_WHITE, "Aceasta este banca din orasul Los Santos. Mai exista o banca si in orasul Las Venturas.");
				        SendClientMessage(i, COLOR_WHITE, "Banca poate fi folosita pentru a depune si retrage bani sau pentru a transfera bani unui alt player.");
				        SendClientMessage(i, COLOR_WHITE, "Pentru banii depusi in banca vei primi dobanda odata pe ora.");
				        SendClientMessage(i, COLOR_WHITE, "Banii primiti din payday ajung in contul bancar si va trebui sa mergeti la banca pentru a-i retrage.");
				        SendClientMessage(i, COLOR_WHITE, "Te sfatuim sa nu imprumuti bani altor playeri deoarece nu au nicio garantie ca iti vor fi inapoiati.");
				        SendClientMessage(i, COLOR_WHITE, "De asemenea, afacerile cu bani reali sau bunuri ce nu tin de joc(conturi steam, conturi pe alte server) sunt interzise.");
				        SendClientMessage(i, COLOR_WHITE, "Daca cineva iti propune sa cumperi o masina in joc pentru bani reali, te sfatuim sa-l raportezi folosind comanda /report.");
				        SendClientMessage(i, COLOR_WHITE, "Playerii ce promit ca iti vor vinde bunuri in joc pentru bani reali nu iti vor da bunurile promise.");
					}
					else
					{
						SendClientMessage(i, COLOR_WHITE, "This is the Los Santos Bank. There is also a bank in Las Venturas.");
				        SendClientMessage(i, COLOR_WHITE, "The bank can be used to deposit and withdraw money from your bank account or transfer money to another player.");
				        SendClientMessage(i, COLOR_WHITE, "You'll get interest from the bank for the money you have deposited in your bank account.");
				        SendClientMessage(i, COLOR_WHITE, "Don't loan money for other players. You'll have no guaratees that you'll get them back.");
				        SendClientMessage(i, COLOR_WHITE, "Also, buying in game goods(money, cars, houses) with real life money from other players is forbidden.");
				        SendClientMessage(i, COLOR_WHITE, "Most People that offering in game goods for real money are scammers.");
				        SendClientMessage(i, COLOR_WHITE, "You can get some stuff by donating(ForEver RPG.ro/premium). The money from donations are used to support the server.");
					}
			    }
			    else if(TutTime[i] == 87)
			    {
			        PlayerTextDrawShow(i, Step[i]);
					PlayerTextDrawSetString(i, Step[i], "~w~Step: ~r~8~w~/~r~8");
			        SetPlayerPosEx(i, 1093.7021,-1485.0731,15.7074);
					SetPlayerCameraPos(i, 1065.9988,-1418.0643,56.6048);
 					SetPlayerCameraLookAt(i, 1127.9037,-1486.0226,22.7690);
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					if(PlayerInfo[i][pLanguage] == 2)
					{
						SendClientMessage(i, COLOR_WHITE, "Aici este CNN Los Santos, adica locul unde poti plasa anunturi pe server.");
				        SendClientMessage(i, COLOR_WHITE, "Anunturile sunt vazute de toti playerii de pe server si sunt folosite pentru a vinde/cumpara/schimba bunuri pe server.");
				        SendClientMessage(i, COLOR_WHITE, "Anunturile se folosesc doar pentru vanzari, cumparari si schimburi de bunuri.");
				        SendClientMessage(i, COLOR_WHITE, "Vei putea scrie un anunt incepand cu level 5.");
				        SendClientMessage(i, COLOR_WHITE, "");
				        SendClientMessage(i, COLOR_WHITE, "Si pe forumul nostru www.ForEver RPG.ro exista o sectiune de vanzari unde playerii pot posta anunturi.");
					}
					else
					{
						SendClientMessage(i, COLOR_WHITE, "This is CNN Los Santos, the place where players can place ads to buy, sell or trade stuff.");
				        SendClientMessage(i, COLOR_WHITE, "This ads are seen by all players on the server. You'll be able to place an /ad once you reach level 5.");
				        SendClientMessage(i, COLOR_WHITE, "Players can also use our forum (www.ForEver RPG.ro) to advertise for stuff.");
					}
			    }
			    else if(TutTime[i] == 99)
			    {
			        PlayerTextDrawHide(i, Step[i]);
			        PlayerTextDrawHide(i, Tutorial[i]);
			        SendClientMessage(i, COLOR_WHITE, "");
			    	SendClientMessage(i, COLOR_WHITE, "");
			    	SendClientMessage(i, COLOR_WHITE, "");
			    	SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
			        if(PlayerInfo[i][pLanguage] == 2)
			        {
			        	SendClientMessage(i, COLOR_YELLOW, "Ai ajuns la sfarsitul tutorialului. Daca ai fost atent, ar trebui sa stii cateva lucruri despre joc.");
			        	SendClientMessage(i, COLOR_YELLOW, "Daca ai vreo intrebare legata de joc, foloseste /n si helperii vor incerca sa te ajute.");
                    	SendClientMessage(i, COLOR_YELLOW, "Poti folosi si /help pentru comenzi de baza.");
                        SendClientMessage(i, COLOR_YELLOW, "Distractie placuta!");
					}
					else
                    {
			        	SendClientMessage(i, COLOR_YELLOW, "We reached the end of the tutorial. We hope you learned something about the game.");
			        	SendClientMessage(i, COLOR_YELLOW, "If you have any game-questions, you can use /n and our helpers will try to help you.");
                    	SendClientMessage(i, COLOR_YELLOW, "You cand also use /help for basic commands.");
                        SendClientMessage(i, COLOR_YELLOW, "Have fun!");
					}
					CP[i] = 43;
				    SetPlayerCheckpoint(i, 1219.0502,-1812.7823,16.5938, 4.0);
				    StopAudioStreamForPlayer(i);
			    }
			    else if(TutTime[i] == 101)
			    {
			        TutTime[i] = 0; PlayerInfo[i][pTut] = 1;
					gNews[i] = 0;
					TogglePlayerControllable(i, 1);
					SetCameraBehindPlayer(i);
					TogglePlayerSpectating(i, 0);
					SetPlayerSpawn(i);
					PlayerInfo[i][pAccount] = 10000;
					ResetPlayerCash(i);
					GivePlayerCash(i,50000);
					SetPlayerInterior(i,0);
					SetPlayerVirtualWorld(i,0);
					TogglePlayerControllable(i,true);
					new str1[256];
					mysql_format(SQL,str1,256,"UPDATE users SET `Tutorial`='1',`Bank`='10000',`Money`='50000' WHERE `name`='%s'",PlayerInfo[i][pNormalName]);
					mysql_tquery(SQL,str1,"","");
					//Bonus
					GivePlayerCash(i, 70000000);
					PlayerInfo[i][pLevel] = 3;
					Update(i, pCashx);
					Update(i, pLevelx);
					SetPlayerScore(i, PlayerInfo[i][pLevel]);
					SS(i, COLOR_LIGHTBLUE, "Ai primit $70,000,000 si level 3 bonus de bun venit.", "You received $70,000,000 and level 3 for welcome.");
			    }
			}
			if(PlayerTazeTime[i] >= 1)
			{
			    PlayerTazeTime[i] += 1;
			    if(PlayerTazeTime[i] == 15)
			    {
                    PlayerTazeTime[i] = 0;
			    }
			    else
			    {
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					SetPlayerFacingAngle(i, angle + 90);
			    }
			}
			if(PlayerDrunk[i] >= 5)
			{
				if(PlayerInfo[i][pQuest2] == 7 && PlayerInfo[i][pQuestProgress2] == 0)
				{
					PlayerInfo[i][pQuestProgress2] = 1;
					Update(i, pQuestProgress2x);
					FinishQuest2(i, 7);
				}
			    PlayerDrunkTime[i] += 1;
			    if(PlayerDrunkTime[i] == 8)
			    {
			        PlayerDrunkTime[i] = 0;
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					if(IsPlayerInAnyVehicle(i))
					{
					    if(GetPlayerState(i) == 2)
					    {
					    	SetVehicleZAngle(GetPlayerVehicleID(i), angle + 15);
					    	SetPlayerDrunkLevel (i, 5000);
						}
					}
					else
					{
					    LoopingAnim(i,"PED","WALK_DRUNK",4.0,1,1,1,1,0);
					    SetPlayerDrunkLevel (i, 5000);
					}
			    }
			}
			if(PlayerStoned[i] >= 2)
			{
			    new Float:angle;
				GetPlayerFacingAngle(i, angle);
				if(IsPlayerInAnyVehicle(i))
				{
					if(GetPlayerState(i) == 2)
					{
					    SetVehicleZAngle(GetPlayerVehicleID(i), angle + 15);
					    SetPlayerDrunkLevel (i, 5000);
					}
				}
				else
				{
					SetPlayerDrunkLevel (i, 5000);
				}
			}
			if(PlayerCuffed[i] == 1)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        TogglePlayerControllable(i, 1);
			        PlayerCuffed[i] = 0;
			        PlayerCuffedTime[i] = 0;
			        PlayerTazeTime[i] = 1;
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}
			if(PlayerCuffed[i] == 2)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        GameTextForPlayer(i, "~r~~h~You broke the Cuffs, you are free!", 2500, 3);
			        TogglePlayerControllable(i, 1);
			        PlayerCuffed[i] = 0;
			        PlayerCuffedTime[i] = 0;
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}
			if(Cash[i] != GetPlayerMoney(i))
    		{
    		    new hack = GetPlayerMoney(i) - Cash[i];
				if(hack != 0)
				{
					ResetPlayerMoney(i);
					GivePlayerMoney(i, Cash[i]);
				}
    		}
    		if(Undercover[i] == 1)
			{
			    PlayerTextDrawShow(i, UndercoverText[i]);
			}
			else
			{
			    PlayerTextDrawHide(i, UndercoverText[i]);
			}
		}
	}
	foreach(new k : Player) //CHECK AFK
	{
		if(IsPlayerConnected(k))
		{
			GetPlayerPos(k, PlayerPosii[k][0], PlayerPosii[k][1], PlayerPosii[k][2]);
			if(PlayerPosii[k][0] == PlayerPosii[k][3] && PlayerPosii[k][1] == PlayerPosii[k][4] && PlayerPosii[k][2] == PlayerPosii[k][5])
			{
				if(LastMove[k] >= 20)
				{
					IsPlayerAFK[k]++;
				}
				else
				{
					LastMove[k]++;
				}
			}
			else
			{
				IsPlayerAFK[k] = 0;
				LastMove[k] = 0;
			}
			PlayerPosii[k][3] = PlayerPosii[k][0];
			PlayerPosii[k][4] = PlayerPosii[k][1];
			PlayerPosii[k][5] = PlayerPosii[k][2];
		}
	}
	new year,month,day,hours,minutes,seconds,strx[256];
    getdate(year, month, day), gettime(hours, minutes, seconds);
    format(strx, sizeof strx, "%s%d.%s%d.%s%d",((day < 10) ? ("0") : ("")), day, ((month < 10) ? ("0") : ("")), month, (year < 10) ? ("0") : (""), year);
    TextDrawSetString(Date, strx);
    format(strx, sizeof strx, "%s%d:%s%d", (hours < 10) ? ("0") : (""), hours, (minutes < 10) ? ("0") : (""), minutes, (seconds < 10) ? ("0") : (""), seconds);
    TextDrawSetString(Time, strx);
	SetActorPos(actor1,-27.4950,1518.7183,1000.9155);
  	SetActorFacingAngle(actor1, 175.20);
	SetActorVirtualWorld(actor1, 1);
	ApplyActorAnimation(actor1, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 0);
	SetActorPos(actor2,-27.4950,1518.7183,1000.9155);
  	SetActorFacingAngle(actor2, 175.20);
	SetActorVirtualWorld(actor2, 2);
	ApplyActorAnimation(actor2, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 0);
	foreach(new k : Player)
	{
		if(IsPlayerAFK[k] < 40)
		{
			PlayerInfo[k][pPayDay] += 1;
		}
	}
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pMember] == 9)
		{
			if(minutes == 50 && seconds == 1) SendFamilyMessage(9, COLOR_ADMCHAT, "Aveti 10 minute sa dati Anunturi Gratuite (AG).");
			if(minutes == 59 && seconds == 1) SendFamilyMessage(9, COLOR_ADMCHAT, "Mai aveti un minut de anunturi gratuite.");
		}
	}
	if(DeelayWar[4] > 0)
	{
		DeelayWar[4]--;
	}
	if(DeelayWar[5] > 0)
	{
		DeelayWar[5]--;
	}
	if(DeelayWar[6] > 0)
	{
		DeelayWar[6]--;
	}
	if(DeelayWar[10] > 0)
	{
		DeelayWar[10]--;
	}
	return 1;
}

/*public EstiFondator(playerid)
{
	if(IsPlayerConnected(playerid))
	{
        if(PlayerInfo[playerid][pSQLID] == 1 || PlayerInfo[playerid][pSQLID] == 2)
        {
		    return 1;
		}
	}
	return 0;
}*/
public EstiFondator(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new nume[512];
        GetPlayerName(playerid, nume, sizeof(nume));
        if((strcmp(nume, "DrooM.", true) == 0) || (strcmp(nume, "TacPac", true) == 0) || (strcmp(nume, "Dr0", true) == 0) || (strcmp(nume, "", true) == 0) || (strcmp(nume, "", true) == 0) || (strcmp(nume, "", true) == 0) || (strcmp(nume, "", true) == 0) || (strcmp(nume, "", true) == 0) || (strcmp(nume, "", true) == 0))
        {
		    return 1;
		}
	}
	return 0;
}

public NumberUsed(playerid)
{
	new string[256];
	format(string, sizeof(string),"SELECT * FROM `users` WHERE `PhoneNr` = '%d'",PlayerInfo[playerid][pPnumber]);
	new Cache: result = mysql_query(SQL, string);
	if(cache_get_row_count() > 0)
	{
		cache_delete(result);
		return 1;
	}
	cache_delete(result);
	return 0;
}

public Checkvehinfo()
{
	foreach(new i : Player)
	{
    	if(IsPlayerConnected(i))
       	{
       	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
       	    {
	       		new vehicle = GetPlayerVehicleID(i),
                	spe = Carspeed(i);
                new str1[128],str2[128],str3[128],str4[128],str5[128];
				PlayerTextDrawShow(i, Speedd[i]);
				TextDrawShowForPlayer(i, ArataKM);
				format(str1,sizeof(str1),"%d",spe);
				PlayerTextDrawSetString(i, Speedd[i], str1);
				PlayerTextDrawShow(i, Fuell[i]);
				format(str2,sizeof(str2),"Fuel: ~r~%d", Gas[vehicle]);
				PlayerTextDrawSetString(i, Fuell[i], str2);
				foreach(new s : Player)
				{
					for(new v; v < MAX_PERSONAL_VEHICLES; v++)
					{
						if(PlayerInfo[s][pCarID][v] == vehicle)
						{
							if(!IsAPlane(vehicle))
							{
								PlayerTextDrawShow(i, Odom[i]);
								format(str3,sizeof(str3),"Odometer: ~r~%.0fKM",PlayerInfo[s][pCarKM][v]);
								PlayerTextDrawSetString(i, Odom[i], str3);
							}
							if(PlayerInfo[s][pCarLock][v] == 0)
							{
								PlayerTextDrawShow(i, carlocked[i]);
								format(str4,sizeof(str4),"UNLOCKED");
								PlayerTextDrawSetString(i, carlocked[i], str4);
							}
							else if(PlayerInfo[s][pCarLock][v] == 1)
							{
								PlayerTextDrawShow(i, carlocked[i]);
								format(str5,sizeof(str5),"~r~LOCKED");
								PlayerTextDrawSetString(i, carlocked[i], str5);
							}
						}
					}
				}
			}
			else if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
       	    {
       	        new count;
       	        foreach(new x : Player)
				{
				    if(GetPlayerState(x) == PLAYER_STATE_DRIVER)
       	    		{
       	    		    if(GetPlayerVehicleID(x) == GetPlayerVehicleID(i))
       	    		    {
       	    		        count ++;
						}
					}
					if(count >= 1)
					{
					    new vehicle = GetPlayerVehicleID(i),
                			spe = Carspeed(i);
               		 	new str1[128],str2[128],str3[128],str4[128],str5[128];
						PlayerTextDrawShow(i, Speedd[i]);
						format(str1,sizeof(str1),"%d",spe);
						PlayerTextDrawSetString(i, Speedd[i], str1);
						PlayerTextDrawShow(i, Fuell[i]);
						format(str2,sizeof(str2),"Fuel: ~r~%d", Gas[vehicle]);
						PlayerTextDrawSetString(i, Fuell[i], str2);
						if(IsAnOwnableCar(vehicle))
						{
							foreach(new id : Player)
							{
								for(new v; v < MAX_PERSONAL_VEHICLES; v++)
								{
									if(PlayerInfo[id][pCarID][v] == vehicle)
									{
										if(!IsAPlane(vehicle))
										{
											PlayerTextDrawShow(i, Odom[i]);
											format(str3,sizeof(str3),"Odometer: ~r~%.0fKM",PlayerInfo[id][pCarKM][v]);
											PlayerTextDrawSetString(i, Odom[i], str3);
										}
										if(PlayerInfo[id][pCarLock][v] == 0)
										{
											PlayerTextDrawShow(i, carlocked[i]);
											format(str4,sizeof(str4),"UNLOCKED");
											PlayerTextDrawSetString(i, carlocked[i], str4);
										}
										else
										{
											PlayerTextDrawShow(i, carlocked[i]);
											format(str5,sizeof(str5),"~r~LOCKED");
											PlayerTextDrawSetString(i, carlocked[i], str5);
										}
									}
								}
							}
						}
					}
					else if(count < 1)
					{
	    				PlayerTextDrawHide(i, Fuell[i]);
		   				PlayerTextDrawHide(i, Speedd[i]);
		   				PlayerTextDrawHide(i, carlocked[i]);
		   				PlayerTextDrawHide(i, Odom[i]);
		   				TextDrawHideForPlayer(i, ArataKM);
					}
				}
			}
    	}
	}
	return 1;
}

public CheckGas()
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
	foreach(new i : Player)
	{
   	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
   	    {
       		new vehicle = GetPlayerVehicleID(i);
			if(Gas[vehicle] >= 1)
			{
	   		    if(vehEngine[vehicle] == 1)
	   		    {
					if(IsAPlane(vehicle) || IsABoat(vehicle) || IsABike(vehicle) || IsAGarbageTruck(vehicle) || IsABus(vehicle) || IsAPizza(vehicle)
					|| IsATruck(vehicle)) { Gas[vehicle]++; }
	              	Gas[vehicle]--;
					if(IsAnOwnableCar(vehicle))
	                {
						foreach(new s : Player)
						{
							for(new v; v < MAX_PERSONAL_VEHICLES; v++)
							{
								if(PlayerInfo[s][pCarID][v] == vehicle)
								{
									if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicle)
									{
										new Float:carhealth;
										GetVehicleHealth(vehicle, carhealth);
										GetVehicleDamageStatus(vehicle, PlayerInfo[s][pCarDamage1][v], PlayerInfo[s][pCarDamage2][v], PlayerInfo[s][pCarDamage3][v], PlayerInfo[s][pCarDamage4][v]);
										PlayerInfo[s][pCarHP][v] = carhealth;
										PlayerInfo[s][pCarGas][v] = Gas[vehicle];
										cUpdate(s, v, cHPx);
										cUpdate(s, v, cDamage1x);
										cUpdate(s, v, cDamage2x);
										cUpdate(s, v, cDamage3x);
										cUpdate(s, v, cDamage4x);
										cUpdate(s, v, cGasx);
										cUpdate(s, v, cKMx);
									}
								}
							}
						}
					}
				}
	   		}
   			else
           	{
              	NoFuel[i] = 1;
              	TogglePlayerControllable(i, 0);
	        	GameTextForPlayer(i,"~w~~n~~n~~n~~n~~n~~n~~n~~n~No fuel in vehicle.",1500,3);
	        	vehEngine[vehicle] = 0;
    			GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(vehicle,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
      	    	SetPVarInt(i, "Engine", 0);
			}
		}
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    if(enterexit == 0)
    {
		if(IsPlayerInRangeOfPoint(playerid,10.0,617.5360,-1.9900,1000.6647))
		{
			if(GetPlayerCash(playerid) >= BizzInfo[38][bEntranceCost])
			{
				EnterInModShop[playerid] = 1;
				return 1;
			}
		}
		if(IsPlayerInRangeOfPoint(playerid,10.0,616.7844,-74.8150,997.7675))
		{
			if(GetPlayerCash(playerid) >= BizzInfo[39][bEntranceCost])
			{
				EnterInModShop[playerid] = 1;
				return 1;
			}
		}
    }
    return 1;
}

public Fillup(playerid)
{
   	if(IsPlayerConnected(playerid))
   	{
	    new VID,
	    	FillUp,
	    	string[256];
	    VID = GetPlayerVehicleID(playerid);
	    FillUp = GasMax - Gas[VID];
	    new Incarcare = GasMax - Gas[VID];
	    FillUp = FillUp * 20;
	    if(Gas[VID] >= 100) { FillUp = 0; Incarcare = 0; }
		if(Refueling[playerid] == 1)
	    {
			if(GetPlayerCash(playerid) >= FillUp)
			{
				Gas[VID] += Incarcare;
			    format(string,sizeof(string),"Ai platit $%s pentru a face plinul la masina.",FormatNumber(FillUp));
			    SendClientMessage(playerid,COLOR_GREEN,string);
                TogglePlayerControllable(playerid, 1);
				GivePlayerCash(playerid, - FillUp);
				Refueling[playerid] = 0;
                new str[184];
				Update(playerid, pCashx);
				if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[33][bEntranceX],BizzInfo[33][bEntranceY],BizzInfo[33][bEntranceZ]))
				{
					BizzInfo[33][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='33'",BizzInfo[33][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[42][bEntranceX],BizzInfo[42][bEntranceY],BizzInfo[42][bEntranceZ]))
				{
					BizzInfo[42][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='42'",BizzInfo[42][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ]))
				{
					BizzInfo[43][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='43'",BizzInfo[43][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ]))
				{
					BizzInfo[44][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='44'",BizzInfo[44][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[45][bEntranceX],BizzInfo[45][bEntranceY],BizzInfo[45][bEntranceZ]))
				{
					BizzInfo[45][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='45'",BizzInfo[45][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[46][bEntranceX],BizzInfo[46][bEntranceY],BizzInfo[46][bEntranceZ]))
				{
					BizzInfo[46][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='46'",BizzInfo[46][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[47][bEntranceX],BizzInfo[47][bEntranceY],BizzInfo[47][bEntranceZ]))
				{
					BizzInfo[47][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='47'",BizzInfo[47][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[48][bEntranceX],BizzInfo[48][bEntranceY],BizzInfo[48][bEntranceZ]))
				{
					BizzInfo[48][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='48'",BizzInfo[48][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[49][bEntranceX],BizzInfo[49][bEntranceY],BizzInfo[49][bEntranceZ]))
				{
					BizzInfo[49][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='49'",BizzInfo[49][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[50][bEntranceX],BizzInfo[50][bEntranceY],BizzInfo[50][bEntranceZ]))
				{
					BizzInfo[50][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='50'",BizzInfo[50][bTill]);
					mysql_tquery(SQL,str,"","");
				}
			}
		   	else
		   	{
		   	    format(string,sizeof(string),"* Not enough Money to refill, it costs $%d to fill your Vehicle.",FillUp);
			    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
		   	}
	 	}
	}
	return 1;
}

public ShowStats(playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new cash =  GetPlayerMoney(targetid),ttext[20];
		if(PlayerInfo[targetid][pMember] == 0 && PlayerInfo[targetid][pLeader] == 0) { ttext = "None"; }
		else if(PlayerInfo[targetid][pMember] == 1 || PlayerInfo[targetid][pLeader] == 1) { ttext = "LSPD"; }
		else if(PlayerInfo[targetid][pMember] == 2 || PlayerInfo[targetid][pLeader] == 2) { ttext = "FBI"; }
		else if(PlayerInfo[targetid][pMember] == 3 || PlayerInfo[targetid][pLeader] == 3) { ttext = "National Guard"; }
		else if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 4) { ttext = "Los Aztecas"; }
		else if(PlayerInfo[targetid][pMember] == 5 || PlayerInfo[targetid][pLeader] == 5) { ttext = "Grove Street"; }
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 6) { ttext = "Los Vagos"; }
		else if(PlayerInfo[targetid][pMember] == 8 || PlayerInfo[targetid][pLeader] == 8) { ttext = "LVPD"; }
		else if(PlayerInfo[targetid][pMember] == 9 || PlayerInfo[targetid][pLeader] == 9) { ttext = "News Reporter"; }
		else if(PlayerInfo[targetid][pMember] == 10 || PlayerInfo[targetid][pLeader] == 10) { ttext = "Ballas"; }
		else if(PlayerInfo[targetid][pMember] == 11 || PlayerInfo[targetid][pLeader] == 11) { ttext = "Hitman Agency"; }
		else if(PlayerInfo[targetid][pMember] == 12 || PlayerInfo[targetid][pLeader] == 12) { ttext = "S.I LV"; }
		else if(PlayerInfo[targetid][pMember] == 13 || PlayerInfo[targetid][pLeader] == 13) { ttext = "Taxi"; }
		else if(PlayerInfo[targetid][pMember] == 14 || PlayerInfo[targetid][pLeader] == 14) { ttext = "Paramedic LV"; }
		else if(PlayerInfo[targetid][pMember] == 15 || PlayerInfo[targetid][pLeader] == 15) { ttext = "The Rifa"; }
		else if(PlayerInfo[targetid][pMember] == 16 || PlayerInfo[targetid][pLeader] == 16) { ttext = "SFPD"; }
		else if(PlayerInfo[targetid][pMember] == 17 || PlayerInfo[targetid][pLeader] == 17) { ttext = "S.I LS"; }
		else if(PlayerInfo[targetid][pMember] == 18 || PlayerInfo[targetid][pLeader] == 18) { ttext = "Paramedic SF"; }
	    new rtext[64];
		if(PlayerInfo[targetid][pRank] == 1) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName1]);
		else if(PlayerInfo[targetid][pRank] == 2) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName2]);
		else if(PlayerInfo[targetid][pRank] == 3) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName3]);
		else if(PlayerInfo[targetid][pRank] == 4) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName4]);
		else if(PlayerInfo[targetid][pRank] == 5) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName5]);
		else if(PlayerInfo[targetid][pRank] == 6) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName6]);
		else if(PlayerInfo[targetid][pRank] == 7) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName7]);
		else { rtext = "None"; }
        new jtext[20];
        if(PlayerInfo[targetid][pJob] == 1) { jtext = "Detective"; }
        else if(PlayerInfo[targetid][pJob] == 2) { jtext = "Car Jacker"; }
        else if(PlayerInfo[targetid][pJob] == 4) { jtext = "Drugs Dealer"; }
        else if(PlayerInfo[targetid][pJob] == 5) { jtext = "Pizza Boy"; }
        else if(PlayerInfo[targetid][pJob] == 6) { jtext = "Farmer"; }
        else if(PlayerInfo[targetid][pJob] == 7) { jtext = "Bus Driver"; }
        else if(PlayerInfo[targetid][pJob] == 8) { jtext = "Mechanic"; }
        else if(PlayerInfo[targetid][pJob] == 9) { jtext = "Arms Dealer"; }
        else if(PlayerInfo[targetid][pJob] == 10) { jtext = "Garbage Man"; }
        else if(PlayerInfo[targetid][pJob] == 13) { jtext = "Fisherman"; }
        else if(PlayerInfo[targetid][pJob] == 14) { jtext = "Trucker"; }
	    else { jtext = "None"; }
		new drank[20];
		if(PlayerInfo[targetid][pPremiumAccount] == 0) { drank = "No"; }
		else if(PlayerInfo[targetid][pPremiumAccount] == 1) { drank = "Yes"; }
		else if(PlayerInfo[targetid][pPremiumAccount] == 2) { drank = "VIP"; }
		else { drank = "No"; }
	 	new clanuuu[32];
	 	if(PlayerInfo[targetid][pClan] < 1)
		{
			clanuuu = "None";
		}
		else
		{
			format(clanuuu, sizeof(clanuuu), "%s", ClanInfo[PlayerInfo[targetid][pClan]][cClanName]);
		}
		new Float:ptime = PlayerInfo[targetid][pConnectTime];
		new crimes = PlayerInfo[targetid][pCrimes],arrests = PlayerInfo[targetid][pArrested],drugs = PlayerInfo[targetid][pDrugs],warnings = PlayerInfo[targetid][pWarns],mats = PlayerInfo[targetid][pMats],plevel = PlayerInfo[targetid][pLevel],exp = PlayerInfo[targetid][pExp],pnumber = PlayerInfo[targetid][pPnumber],account = PlayerInfo[targetid][pAccount],nxtlevel = PlayerInfo[targetid][pLevel],expamount;
		if(PlayerInfo[targetid][pLevel] == 1 || PlayerInfo[targetid][pLevel] == 2 || PlayerInfo[targetid][pLevel] == 3 || PlayerInfo[targetid][pLevel] == 4)
		{
		    expamount = nxtlevel*3;
		}
		else if(PlayerInfo[targetid][pLevel] >= 5)
		{
		    expamount = nxtlevel*levelexp;
		}
		new pretlevel = nxtlevel*levelcost,intir = PlayerInfo[targetid][pInt],bltime = PlayerInfo[targetid][pFpunish],premiumpoints = PlayerInfo[targetid][pPremiumPoints],treasure = PlayerInfo[targetid][pTreasurePoints],fireworks = PlayerInfo[targetid][pFWorks],maximpuncte,Float:health,name[30],Float:armour,status[20],robtext[50];
		if(IsACop(targetid))
		{
			format(robtext, sizeof(robtext),"Lawyer Points");
			maximpuncte = 3;
		}
		else
		{
			format(robtext, sizeof(robtext),"Rob Points");
			if(PlayerInfo[targetid][pPremiumAccount] == 0) maximpuncte = 10;
			if(PlayerInfo[targetid][pPremiumAccount] >= 1) maximpuncte = 8;
		}
		if(gPlayerLogged[targetid] == 1) format(status, sizeof(status),"Authenticated");
		else if(gPlayerLogged[targetid] == 0 && PlayerInfo[targetid][pReg] == 0 || PlayerInfo[targetid][pTut] > 1) format(status, sizeof(status),"Register");
		else if(gPlayerLogged[targetid] == 0 && PlayerInfo[targetid][pReg] != 0) format(status, sizeof(status),"Login");
		GetPlayerName(targetid, name, sizeof(name));
		GetPlayerHealth(targetid,health);
		GetPlayerArmour(targetid,armour);
		new Float:px,Float:py,Float:pz;
		GetPlayerPos(targetid, px, py, pz);
		new coordsstring[300],country[64];
		GetPlayerCountry(targetid, country, sizeof(country));
		format(coordsstring, sizeof(coordsstring), "(%d) %s | Playing hours: %.2f | Phone no: %d | Job: %s | Warns: %d/3",targetid,name,ptime,pnumber,jtext,warnings);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Level: %d | Respect Points: %d/%d | Next level price: %s | Money: %s | Bank money: %s",plevel,exp,expamount,FormatNumber(pretlevel),FormatNumber(cash),FormatNumber(account));
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		if(PlayerInfo[targetid][pMember] >= 1)
		{
			format(coordsstring, sizeof(coordsstring), "Group: %s | Rank: %d | Faction Warns: %d/3 | Faction Punish: %d/20 | Premium: %s(%d points)",ttext,PlayerInfo[targetid][pRank],PlayerInfo[targetid][pFACWarns],bltime,drank,premiumpoints);
			SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		}
		else
		{
			format(coordsstring, sizeof(coordsstring), "Group: %s | Faction Punish: %d/20 | Premium: %s(%d points)",ttext,bltime,drank,premiumpoints);
			SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		}
		if(PlayerInfo[targetid][pClan] >= 1)
		{
			format(coordsstring, sizeof(coordsstring), "Clan: %s(%s) | Rank: %d",clanuuu,ClanInfo[PlayerInfo[targetid][pClan]][cClanTag],PlayerInfo[targetid][pCRank]);
			SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		}
		format(coordsstring, sizeof(coordsstring), "%s: %d/%d | Arrests: %d | Crimes: %d | Credit: %d$ | Radio: #%d khz",robtext,PlayerInfo[targetid][pRob],maximpuncte,arrests,crimes,PlayerInfo[targetid][pCredits],WTChannel[targetid]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Materials: %s | Drugs: %d | Fireworks: %d | Hiddens: %d | Treasure Points: %d",FormatNumber(mats),drugs,fireworks,PlayerInfo[targetid][pHiddenColor], treasure);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			format(coordsstring, sizeof(coordsstring), "Status: %s | Admin Level: %d | Interior: %d | VW: %d", status, PlayerInfo[targetid][pAdmin], intir, GetPlayerVirtualWorld(targetid));
			SendClientMessage(playerid, COLOR_WHITE,coordsstring);
			format(coordsstring, sizeof(coordsstring), "Country: %s | HP: %.1f | Armour: %.1f | Jail: %d | W: %d | Duty: %d | Secs: %d", country, health, armour, PlayerInfo[targetid][pJailTime], PlayerInfo[targetid][pWantedLevel], OnDuty[targetid], OnlineTime[targetid]);
			SendClientMessage(playerid, COLOR_WHITE,coordsstring);

	  	}
		new vehicles;
		for(new v; v < PlayerInfo[targetid][pCarSlots]; v++)
		{
			if(PlayerInfo[targetid][pCar][v] != -1) vehicles++;
		}
		if(PlayerInfo[targetid][pPbiskey] == 255 && PlayerInfo[targetid][pPhousekey] == 999)
		{
			format(coordsstring, sizeof(coordsstring), "%d/%d vehicles",vehicles,PlayerInfo[targetid][pCarSlots]);
			SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		}
		else if(PlayerInfo[targetid][pPbiskey] != 255 && PlayerInfo[targetid][pPhousekey] == 999)
		{
			format(coordsstring, sizeof(coordsstring), "%d/%d vehicles | Business %d",vehicles,PlayerInfo[targetid][pCarSlots],PlayerInfo[targetid][pPbiskey]);
			SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		}
		else if(PlayerInfo[targetid][pPbiskey] == 255 && PlayerInfo[targetid][pPhousekey] != 999 && PlayerInfo[targetid][pRented] == -1)
		{
			format(coordsstring, sizeof(coordsstring), "%d/%d vehicles | House %d",vehicles,PlayerInfo[targetid][pCarSlots],PlayerInfo[targetid][pPhousekey]);
			SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		}
		else if(PlayerInfo[targetid][pPbiskey] != 255 && PlayerInfo[targetid][pPhousekey] != 999 && PlayerInfo[targetid][pRented] == -1)
		{
			format(coordsstring, sizeof(coordsstring), "%d/%d vehicles | Business %d | House %d",vehicles,PlayerInfo[targetid][pCarSlots],PlayerInfo[targetid][pPbiskey],PlayerInfo[targetid][pPhousekey]);
			SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		}
	}
}


public SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	  	SetPlayerColor(playerid,COLOR_WHITE); // Civilian
      	if(PlayerInfo[playerid][pMember] == 1) { SetPlayerColor(playerid, 0x0049D0FF); } // LSPD
      	if(PlayerInfo[playerid][pLeader] == 1) { SetPlayerColor(playerid, 0x0049D0FF); } // LSPD
      	if(PlayerInfo[playerid][pMember] == 2) { SetPlayerColor(playerid, 0x005AFFFF); } // FBI
      	if(PlayerInfo[playerid][pLeader] == 2) { SetPlayerColor(playerid, 0x005AFFFF); } // FBI
      	if(PlayerInfo[playerid][pLeader] == 3) { SetPlayerColor(playerid, 0x00006AFF); } // National Guard
      	if(PlayerInfo[playerid][pMember] == 3) { SetPlayerColor(playerid, 0x00006AFF); } // National Guard
      	if(PlayerInfo[playerid][pMember] == 4) { SetPlayerColor(playerid, 0x18EBD6C8); } // Los Aztecas
      	if(PlayerInfo[playerid][pLeader] == 4) { SetPlayerColor(playerid, 0x18EBD6C8); } // Los Aztecas
      	if(PlayerInfo[playerid][pMember] == 5) { SetPlayerColor(playerid, 0x40863CAA); } // Grove Street
      	if(PlayerInfo[playerid][pLeader] == 5) { SetPlayerColor(playerid, 0x40863CAA); } // Grove Street
      	if(PlayerInfo[playerid][pMember] == 6) { SetPlayerColor(playerid, 0xFFAE00C8); } // Los Vagos
      	if(PlayerInfo[playerid][pLeader] == 6) { SetPlayerColor(playerid, 0xFFAE00C8); } // Los Vagos
      	if(PlayerInfo[playerid][pMember] == 8) { SetPlayerColor(playerid, 0x0049D0FF); } // LVPD
      	if(PlayerInfo[playerid][pLeader] == 8) { SetPlayerColor(playerid, 0x0049D0FF); } // LVPD
      	if(PlayerInfo[playerid][pMember] == 9) { SetPlayerColor(playerid, 0xEFC6FFFF); } // News Reporter
      	if(PlayerInfo[playerid][pLeader] == 9) { SetPlayerColor(playerid, 0xEFC6FFFF); } // News Reporter
      	if(PlayerInfo[playerid][pMember] == 10) { SetPlayerColor(playerid, 0xBD1CDEC8); } // Ballas
      	if(PlayerInfo[playerid][pLeader] == 10) { SetPlayerColor(playerid, 0xBD1CDEC8); } // Ballas
      	if(PlayerInfo[playerid][pMember] == 11) { SetPlayerColor(playerid, 0x7E3937FF); } // Hitman
      	if(PlayerInfo[playerid][pLeader] == 11) { SetPlayerColor(playerid, 0x7E3937FF); } // Hitman
      	if(PlayerInfo[playerid][pMember] == 12) { SetPlayerColor(playerid, 0x00D179FF); } // SI
      	if(PlayerInfo[playerid][pLeader] == 12) { SetPlayerColor(playerid, 0x00D179FF); } // SI
      	if(PlayerInfo[playerid][pMember] == 13) { SetPlayerColor(playerid, COLOR_YELLOW); } // TAXI
      	if(PlayerInfo[playerid][pLeader] == 13) { SetPlayerColor(playerid, COLOR_YELLOW); } // TAXI
      	if(PlayerInfo[playerid][pMember] == 14) { SetPlayerColor(playerid, 0xf86448FF); } // fireman
      	if(PlayerInfo[playerid][pLeader] == 14) { SetPlayerColor(playerid, 0xf86448FF); } // fireman
        if(PlayerInfo[playerid][pMember] == 15) { SetPlayerColor(playerid, 0x46210EFF); } // rifa
  		if(PlayerInfo[playerid][pLeader] == 15) { SetPlayerColor(playerid, 0x46210EFF); } // rifa
  		if(PlayerInfo[playerid][pLeader] == 16) { SetPlayerColor(playerid, 0x0049D0FF); } // sfpd
  		if(PlayerInfo[playerid][pLeader] == 16) { SetPlayerColor(playerid, 0x0049D0FF); } // sfpd
  		if(PlayerInfo[playerid][pLeader] == 17) { SetPlayerColor(playerid, 0x00D179FF); } // s.i ls
  		if(PlayerInfo[playerid][pLeader] == 17) { SetPlayerColor(playerid, 0x00D179FF); } // s.i ls
  		if(PlayerInfo[playerid][pLeader] == 18) { SetPlayerColor(playerid, 0xf86448FF); } // sf paramedic
  		if(PlayerInfo[playerid][pLeader] == 18) { SetPlayerColor(playerid, 0xf86448FF); } // sf paramedic
      	if(PlayerInfo[playerid][pPaintBallG] > 0) { SetPlayerColor(playerid, 0xff6464FF); } //Paintball
    }
    return 1;
}

public GameModeInitExitFunc()
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			DisablePlayerCheckpoint(i);
			gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
			gPlayerLogged[i] = 0;
			KickEx(i);
		}
	}
	SetTimer("GameModeExitFunc", 1000, 0);
	return 1;
}

public GameModeExitFunc()
{
	KillTimer(synctimer);
	KillTimer(unjailtimer);
	KillTimer(cartimer);
	KillTimer(checkgastimer);
	KillTimer(checkvehinfotimer);
	KillTimer(productiontimer);
	KillTimer(twominutestimer);
	KillTimer(twosecondstimer);
	KillTimer(wantedicatimer);
	KillTimer(savedatatimer);
	KillTimer(weathertimer);
	KillTimer(preparerace1);
	KillTimer(preparerace2);
	KillTimer(preparepaint1);
	KillTimer(preparepaint2);
	KillTimer(preparepaint3);
	KillTimer(preparepaint4);
	KillTimer(paintrun1);
	KillTimer(paintrun2);
	KillTimer(paintrun3);
	KillTimer(paintrun4);
	KillTimer(racerun1);
	KillTimer(racerun2);
	GameModeExit();
}

public OnGameModeExit()
{
    new qqerry[128];
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `users` SET `Status` = '0'");
    mysql_tquery(SQL,qqerry,"","");
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `friends` SET `Status` = '0'");
    mysql_tquery(SQL,qqerry,"","");
    mysql_close(SQL);
   	KillTimer(Timer);
    return 1;
}

public LoadBizz()
{
    new PropertyString[256],locked[20];
	bussines = cache_num_rows();
	for(new i = 1; i <= bussines; i++)
	{
        new b = i - 1;
		BizzInfo[i][bID]                            = cache_get_field_content_int(b, "ID");
        BizzInfo[i][bOwned]							= cache_get_field_content_int(b, "Owned");
        cache_get_field_content(b, "Owner", BizzInfo[i][bOwner], SQL, 130);
        cache_get_field_content(b, "Message", BizzInfo[i][bMessage], SQL, 130);
   	    BizzInfo[i][bEntranceX]                     = cache_get_field_content_float(b, "EntranceX");
    	BizzInfo[i][bEntranceY]                     = cache_get_field_content_float(b, "EntranceY");
        BizzInfo[i][bEntranceZ]                     = cache_get_field_content_float(b, "EntranceZ");
        BizzInfo[i][bExitX]                         = cache_get_field_content_float(b, "ExitX");
        BizzInfo[i][bExitY]                         = cache_get_field_content_float(b, "ExitY");
        BizzInfo[i][bExitZ]                         = cache_get_field_content_float(b, "ExitZ");
        BizzInfo[i][bLevelNeeded]                   = cache_get_field_content_int(b, "LevelNeeded");
        BizzInfo[i][bBuyPrice]                      = cache_get_field_content_int(b, "BuyPrice");
        BizzInfo[i][bEntranceCost]                  = cache_get_field_content_int(b, "EntranceCost");
        BizzInfo[i][bTill]                          = cache_get_field_content_int(b, "Till");
        BizzInfo[i][bLocked]                        = cache_get_field_content_int(b, "Locked");
        BizzInfo[i][bInterior]                      = cache_get_field_content_int(b, "Interior");
        BizzInfo[i][bVirtual]                       = cache_get_field_content_int(b, "Virtual");
		BizzInfo[i][bSbiz]							= cache_get_field_content_int(b, "Sbiz");
		BizzInfo[i][bType]							= cache_get_field_content_int(b, "Type");
		BizzInfo[i][bPrice]							= cache_get_field_content_int(b, "Prices");
		if(BizzInfo[i][bLocked] == 1) format(locked, sizeof(locked), "\n(locked)");
		if(BizzInfo[i][bOwned] == 0)
		{
			DestroyDynamic3DTextLabel(BizzLabel[i]);
			format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n{0068CF}This Business is for sale(/buybusiness) ! \n {EEEEEE}Price: {0068CF}%s \n{EEEEEE}Level: {0068CF}%d %s",BizzInfo[i][bMessage],i,FormatNumber(BizzInfo[i][bBuyPrice]),BizzInfo[i][bLevelNeeded],locked);
			BizzLabel[i] = CreateDynamic3DTextLabel(PropertyString, 0x0053CFD1, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			CreateDynamicPickup(1239, 1, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]);
			pickups++;
		}
		else if(BizzInfo[i][bOwned] == 1)
		{
			DestroyDynamic3DTextLabel(BizzLabel[i]);
			if(BizzInfo[i][bPrice] > 0) format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n{EEEEEE}Owner: {0068CF}%s \n{EEEEEE}Fee: {0068CF}$%s \n{EEEEEE}Price: {0068CF}$%s %s",BizzInfo[i][bMessage],i,BizzInfo[i][bOwner],FormatNumber(BizzInfo[i][bEntranceCost]),FormatNumber(BizzInfo[i][bPrice]),locked);
			else format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n{EEEEEE}Owner: {0068CF}%s \n{EEEEEE}Fee: {0068CF}$%s %s",BizzInfo[i][bMessage],i,BizzInfo[i][bOwner],FormatNumber(BizzInfo[i][bEntranceCost]),locked);
			BizzLabel[i] = CreateDynamic3DTextLabel(PropertyString, 0x0068CFD1, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			CreateDynamicPickup(1239, 1, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]);
			pickups++;
		}
		if(BizzInfo[i][bType] == 1) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],52,0,-1,-1,-1,750.0); //Bank
		if(BizzInfo[i][bType] == 2) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],18,0,-1,-1,-1,750.0); //GunShop
		if(BizzInfo[i][bType] == 3) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],49,0,-1,-1,-1,750.0); //Bars
		if(BizzInfo[i][bType] == 4) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],38,0,-1,-1,-1,750.0); //Sex Shop
		if(BizzInfo[i][bType] == 5) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],25,0,-1,-1,-1,750.0); //Casino
		if(BizzInfo[i][bType] == 6) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],17,0,-1,-1,-1,750.0); //24/7
		if(BizzInfo[i][bType] == 7) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],10,0,-1,-1,-1,750.0); //Burger Shot
		if(BizzInfo[i][bType] == 8) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],54,0,-1,-1,-1,750.0); //Gym
		if(BizzInfo[i][bType] == 9) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],29,0,-1,-1,-1,750.0); //Pizza
		if(BizzInfo[i][bType] == 10) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],51,0,-1,-1,-1,750.0); //Rent Car
		if(BizzInfo[i][bType] == 11) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],45,0,-1,-1,-1,750.0); //Clothes
		if(BizzInfo[i][bType] == 12) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],27,0,-1,-1,-1,750.0); //Gas Station
		if(BizzInfo[i][bType] == 13) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],63,0,-1,-1,-1,750.0); //PNS
		if(BizzInfo[i][bType] == 14) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],14,0,-1,-1,-1,750.0); //Cluckin Bell
	}
	printf("[LOADING] %d businesses loaded.", bussines);
}

public LoadTurfs()
{
	new idx;
	new Cache: ab = mysql_query(SQL, "SELECT * FROM `turfs`");
	for(new i; i < cache_get_row_count(); i++)
	{
		idx++;
		TurfInfo[idx][zID]							 	= cache_get_field_content_int(i, "ID");
	 	TurfInfo[idx][zOwned] 							= cache_get_field_content_int(i, "Owned");
	 	TurfInfo[idx][zMinX] 							= cache_get_field_content_float(i, "MinX");
	 	TurfInfo[idx][zMinY] 							= cache_get_field_content_float(i, "MinY");
	 	TurfInfo[idx][zMaxX] 							= cache_get_field_content_float(i, "MaxX");
	 	TurfInfo[idx][zMaxY] 							= cache_get_field_content_float(i, "MaxY");
		turfsss++;
	}
	cache_delete(ab);
	return 1;
}

public LoadDynamicFactions()
{
	factionss = cache_num_rows();
	new string[310];
    for(new i = 1; i <= factionss; i++)
    {
		new f = i - 1;
		DynamicFactions[i][fID]                 = cache_get_field_content_int(f, "ID");
        cache_get_field_content(f, "Name", DynamicFactions[i][fName], SQL, 130);
		DynamicFactions[i][fcX]                 = cache_get_field_content_float(f, "X");
   	    DynamicFactions[i][fcY]                 = cache_get_field_content_float(f, "Y");
    	DynamicFactions[i][fcZ]                 = cache_get_field_content_float(f, "Z");
    	DynamicFactions[i][fceX]                = cache_get_field_content_float(f, "eX");
   	    DynamicFactions[i][fceY]                = cache_get_field_content_float(f, "eY");
    	DynamicFactions[i][fceZ]                = cache_get_field_content_float(f, "eZ");
    	DynamicFactions[i][fSafePos][0]			= cache_get_field_content_float(f, "SafePos1");
    	DynamicFactions[i][fSafePos][1]			= cache_get_field_content_float(f, "SafePos2");
    	DynamicFactions[i][fSafePos][2]			= cache_get_field_content_float(f, "SafePos3");
    	DynamicFactions[i][fMats]               = cache_get_field_content_int(f, "Mats");
    	DynamicFactions[i][fInterior]           = cache_get_field_content_int(f, "Interior");
    	DynamicFactions[i][fVirtual]            = cache_get_field_content_int(f, "Virtual");
    	DynamicFactions[i][fMapIcon]            = cache_get_field_content_int(f, "MapIcon");
    	DynamicFactions[i][fLocked]            	= cache_get_field_content_int(f, "Locked");
    	DynamicFactions[i][fDrugs]              = cache_get_field_content_int(f, "Drugs");
    	DynamicFactions[i][fBank]               = cache_get_field_content_int(f, "Bank");
    	DynamicFactions[i][fPickupIDD]          = cache_get_field_content_int(f, "PickupID");
        cache_get_field_content(f, "Anunt", DynamicFactions[i][fAnn], SQL, 130);
    	DynamicFactions[i][fWin]                = cache_get_field_content_int(f, "Win");
    	DynamicFactions[i][fLost]               = cache_get_field_content_int(f, "Lost");
    	DynamicFactions[i][fMaxMembers]         = cache_get_field_content_int(f, "MaxMembers");
		DynamicFactions[i][fMinLevel]         	= cache_get_field_content_int(f, "MinLevel");
    	DynamicFactions[i][fApplication]        = cache_get_field_content_int(f, "Application");
		cache_get_field_content(f, "Rank1", DynamicFactions[i][fRankName1], SQL, 130);
		cache_get_field_content(f, "Rank2", DynamicFactions[i][fRankName2], SQL, 130);
		cache_get_field_content(f, "Rank3", DynamicFactions[i][fRankName3], SQL, 130);
		cache_get_field_content(f, "Rank4", DynamicFactions[i][fRankName4], SQL, 130);
		cache_get_field_content(f, "Rank5", DynamicFactions[i][fRankName5], SQL, 130);
		cache_get_field_content(f, "Rank6", DynamicFactions[i][fRankName6], SQL, 130);
		cache_get_field_content(f, "Rank7", DynamicFactions[i][fRankName7], SQL, 130);
		for(new c; c < 10; c++)
		{
			new s[10];
			format(s, sizeof(s),"Skin%d",c);
			FactionSkin[i][c] = cache_get_field_content_int(f, s);
		}
		switch(DynamicFactions[i][fLocked]) {
	    	case 0: format(string, sizeof(string), "%s's HQ", DynamicFactions[i][fName]);
	    	case 1: format(string, sizeof(string), "%s's HQ\n\n(locked)", DynamicFactions[i][fName]);
	    }
	   	DynamicFactions[i][fPickupID] = CreateDynamicPickup(DynamicFactions[i][fPickupIDD], 23, DynamicFactions[i][fceX], DynamicFactions[i][fceY], DynamicFactions[i][fceZ], 0, -1, -1, 10);
		DynamicFactions[i][fLabelID] = CreateDynamic3DTextLabel(string, COLOR_COOLBLUE, DynamicFactions[i][fceX], DynamicFactions[i][fceY], DynamicFactions[i][fceZ], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 25.0);
		if(DynamicFactions[i][fMapIcon] != 0) CreateDynamicMapIcon(DynamicFactions[i][fceX],DynamicFactions[i][fceY],DynamicFactions[i][fceZ],DynamicFactions[i][fMapIcon],0,-1,-1,-1,750.0); //Bank
		format(string, sizeof(string), "%s\nGroup Safe", DynamicFactions[i][fName]);
		DynamicFactions[i][fSafePickupID] = CreateDynamicPickup(1274, 23, DynamicFactions[i][fSafePos][0], DynamicFactions[i][fSafePos][1], DynamicFactions[i][fSafePos][2], DynamicFactions[i][fVirtual], DynamicFactions[i][fInterior], -1, 50);
		DynamicFactions[i][fSafeLabelID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, DynamicFactions[i][fSafePos][0], DynamicFactions[i][fSafePos][1], DynamicFactions[i][fSafePos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DynamicFactions[i][fVirtual], DynamicFactions[i][fInterior], -1, 20.0);
	}
	printf("[LOADING] %d groups loaded.", factionss);
	return 1;
}

public LoadClanInfo()
{
    clanss = cache_num_rows();
    for(new i = 1; i <= clanss; i++)
    {
		new x = i - 1;
		ClanInfo[i][cClanID]              		= cache_get_field_content_int(x, "clanID");
		ClanInfo[i][cClanExpire]              	= cache_get_field_content_int(x, "clanExpire");
		ClanInfo[i][cClanActive]              	= cache_get_field_content_int(x, "clanActive");
		ClanInfo[i][cClanSlots]              	= cache_get_field_content_int(x, "clanSlots");
        cache_get_field_content(x, "clanName", ClanInfo[i][cClanName], SQL, 130);
		cache_get_field_content(x, "clanColor", ClanInfo[i][cClanColor], SQL, 130);
		cache_get_field_content(x, "clanMOTD", ClanInfo[i][cClanMOTD], SQL, 130);
   	    cache_get_field_content(x, "clanTag", ClanInfo[i][cClanTag], SQL, 130);
    	cache_get_field_content(x, "clanRankName7", ClanInfo[i][cClanRankName7], SQL, 130);
    	cache_get_field_content(x, "clanRankName6", ClanInfo[i][cClanRankName6], SQL, 130);
    	cache_get_field_content(x, "clanRankName5", ClanInfo[i][cClanRankName5], SQL, 130);
    	cache_get_field_content(x, "clanRankName4", ClanInfo[i][cClanRankName4], SQL, 130);
    	cache_get_field_content(x, "clanRankName3", ClanInfo[i][cClanRankName3], SQL, 130);
    	cache_get_field_content(x, "clanRankName2", ClanInfo[i][cClanRankName2], SQL, 130);
    	cache_get_field_content(x, "clanRankName1", ClanInfo[i][cClanRankName1], SQL, 130);
	}
	printf("[LOADING] %d clans loaded.", clanss);
}

public LoadStock()
{
	stockss = cache_num_rows();
    for(new i = 1; i <= stockss; i++)
    {
		new s = i - 1;
		Stock[i][vID]                               = cache_get_field_content_int(s, "ID");
		Stock[i][vStock]                            = cache_get_field_content_int(s, "Stock");
		Stock[i][vPrice]                            = cache_get_field_content_int(s, "Price");
		Stock[i][vModel]                            = cache_get_field_content_int(s, "vid");
		Stock[i][vSpeed]                            = cache_get_field_content_int(s, "speed");
		cache_get_field_content(s, "Car", Stock[i][vName], SQL, 130);
	}
	printf("[LOADING] %d models loaded.", stockss);
}

public LoadAtms()
{
	new atms = cache_num_rows();
	for(new i = 1; i <= atms; i++)
	{
		new s = i - 1;
		AtmInfo[i][fATMPos][0]						= cache_get_field_content_float(s, "atmPosX");
		AtmInfo[i][fATMPos][1]						= cache_get_field_content_float(s, "atmPosY");
		AtmInfo[i][fATMPos][2]						= cache_get_field_content_float(s, "atmPosZ");
		AtmInfo[i][fATMPosRot][0]					= cache_get_field_content_float(s, "atmPosRotX");
		AtmInfo[i][fATMPosRot][1]					= cache_get_field_content_float(s, "atmPosRotY");
		AtmInfo[i][fATMPosRot][2]					= cache_get_field_content_float(s, "atmPosRotZ");
		AtmInfo[i][rObjectId] = CreateDynamicObject(2618, AtmInfo[i][fATMPos][0], AtmInfo[i][fATMPos][1], AtmInfo[i][fATMPos][2], AtmInfo[i][fATMPosRot][0], AtmInfo[i][fATMPosRot][1], AtmInfo[i][fATMPosRot][2], -1, -1, -1, 500.0);
	}
}

public LoadSVars()
{
	svarss = cache_num_rows();
	for(new i = 1; i <= svarss; i++)
	{
		new s = i - 1;
		cache_get_field_content(s, "SvarName", SvarInfo[i][svName], SQL, 32);
		SvarInfo[i][svValue]						= cache_get_field_content_int(s, "SvarValue");
	}
	printf("[LOADING] %d sVars loaded.", svarss);
}

public LoadQuest()
{
	questobjectss = cache_num_rows();
	for(new i = 1; i <= questobjectss; i++)
	{
		new s = i - 1;
		ObjectInfo[i][objModel] 					= cache_get_field_content_int(s, "objModel");
		ObjectInfo[i][objID] 						= cache_get_field_content_int(s, "id");
		ObjectInfo[i][objPosX]						= cache_get_field_content_float(s, "objPosX");
		ObjectInfo[i][objPosY]						= cache_get_field_content_float(s, "objPosY");
		ObjectInfo[i][objPosZ]						= cache_get_field_content_float(s, "objPosZ");
	}
	printf("[LOADING] %d quest objects loaded.", questobjectss);
}

public LoadUsers()
{
	new players = cache_num_rows();
	printf("Players registered: %d",players);
}

public DespawnCar(playerid)
{
	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
		if(PlayerInfo[playerid][pCarID][v] != 0)
		{
			if(strlen(CarVipName[playerid][v]) > 0)
			{
				DestroyObject(vObject[PlayerInfo[playerid][pCarID][v]]);
				vObject[PlayerInfo[playerid][pCarID][v]] = 0;
			}
			DestroyObject(vObject[PlayerInfo[playerid][pCarID][v]]);
			vObject[PlayerInfo[playerid][pCarID][v]] = 0;
			DestroyVehicle(PlayerInfo[playerid][pCarID][v]);
			PlayerInfo[playerid][pCarID][v] = 0;
		}
	}
	return 1;
}

public ModPVehicle(playerid, idcar)
{
	LoadCar(playerid);
	for(new d; d < 17; d++)
	{
		if(CarMod[playerid][idcar][d] != 0) AddVehicleComponent(PlayerInfo[playerid][pCarID][idcar],CarMod[playerid][idcar][d]);
	}
	ChangeVehiclePaintjob(PlayerInfo[playerid][pCarID][idcar], PlayerInfo[playerid][pCarPaintJ][idcar]);
	return 1;
}

public LoadCarID(playerid)
{
	for(new idd; idd < MAX_PERSONAL_VEHICLES; idd++)
	{
		PlayerInfo[playerid][pCarID][idd]			= 0;
		PlayerInfo[playerid][pCar][idd]				= -1;
		PlayerInfo[playerid][pCarModel][idd] 		= 0;
		PlayerInfo[playerid][pCarLocX][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLocY][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLocZ][idd] 		= 0.0;
		PlayerInfo[playerid][pCarAngle][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocX][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocY][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocZ][idd] 		= 0.0;
		PlayerInfo[playerid][pCarAngle2][idd] 		= 0.0;
		PlayerInfo[playerid][pCarBuyTime][idd]		= 0;
		PlayerInfo[playerid][pCarColor1][idd] 		= 1;
		PlayerInfo[playerid][pCarColor2][idd] 		= 1;
		PlayerInfo[playerid][pCarLock][idd] 		= 0;
		PlayerInfo[playerid][pCarInsPrice][idd] 	= 0;
		PlayerInfo[playerid][pCarIns][idd] 			= 0;
		PlayerInfo[playerid][pCarKM][idd] 			= 0.0;
		PlayerInfo[playerid][pCarKMLast][idd]		= 0;
		PlayerInfo[playerid][pCarVIP][idd]			= 0;
		PlayerInfo[playerid][pCarVipColors][idd]		= 0;
		PlayerInfo[playerid][pCarHP][idd] 			= 0.0;
		PlayerInfo[playerid][pCarDamage1][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage2][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage3][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage4][idd] 		= 0;
		PlayerInfo[playerid][pCarGas][idd] 			= 100;
		PlayerInfo[playerid][pCarPaintJ][idd] 		= 6;
		PlayerInfo[playerid][pCarBlock][idd]		= 0;
		CarVipName[playerid][idd] = "";
		CarPlate[playerid][idd] = "";
		CarOwner[playerid][idd] = "";
		for(new s; s < 17; s++)
		{
			CarMod[playerid][idd][s] = 0;
		}
	}
	new string[256],count;
	format(string, sizeof(string), "SELECT * FROM `cars` WHERE `Owner`='%s'", PlayerInfo[playerid][pNormalName]);
	new Cache: xd = mysql_query(SQL, string);
	for(new i, j = cache_get_row_count (); i != j; ++i)
	{
		if(count < MAX_PERSONAL_VEHICLES)
		{
			PlayerInfo[playerid][pCar][count] = cache_get_field_content_int(i, "ID");
		}
		count++;
	}
	cache_delete(xd);
	if(count > PlayerInfo[playerid][pCarSlots])
	{
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Ai prea multe masini! Poti avea maxim %d masini (tu ai %d).", PlayerInfo[playerid][pCarSlots], count);
		else format(string, sizeof(string), "You have to many vehicles! You can have maximum %d cars (you have %d).", PlayerInfo[playerid][pCarSlots], count);
		SendClientMessage(playerid, COLOR_RED2, string);
		SS(playerid, COLOR_RED2, "Nu vei putea conduce nicio masina pana cand nu vei vinde una din masinile tale.", "You can't use a vehicle until you sell one of your cars.");
		BlockVehUse[playerid] = count;
	}
	else
	{
		BlockVehUse[playerid] = 0;
	}
	LoadCar(playerid);
	return 1;
}

public LoadCar(playerid)
{
	for(new idd; idd < MAX_PERSONAL_VEHICLES; idd++)
	{
		PlayerInfo[playerid][pCarModel][idd] 		= 0;
		PlayerInfo[playerid][pCarLocX][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLocY][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLocZ][idd] 		= 0.0;
		PlayerInfo[playerid][pCarAngle][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocX][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocY][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocZ][idd] 		= 0.0;
		PlayerInfo[playerid][pCarAngle2][idd] 		= 0.0;
		PlayerInfo[playerid][pCarBuyTime][idd]		= 0;
		PlayerInfo[playerid][pCarColor1][idd] 		= 1;
		PlayerInfo[playerid][pCarColor2][idd] 		= 1;
		PlayerInfo[playerid][pCarLock][idd] 		= 0;
		PlayerInfo[playerid][pCarInsPrice][idd] 	= 0;
		PlayerInfo[playerid][pCarIns][idd] 			= 0;
		PlayerInfo[playerid][pCarKM][idd] 			= 0.0;
		PlayerInfo[playerid][pCarKMLast][idd]		= 0;
		PlayerInfo[playerid][pCarVIP][idd]			= 0;
		PlayerInfo[playerid][pCarVipColors][idd]		= 0;
		PlayerInfo[playerid][pCarHP][idd] 			= 0.0;
		PlayerInfo[playerid][pCarDamage1][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage2][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage3][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage4][idd] 		= 0;
		PlayerInfo[playerid][pCarGas][idd] 			= 100;
		PlayerInfo[playerid][pCarPaintJ][idd] 		= 6;
		PlayerInfo[playerid][pCarBlock][idd]		= 0;
		CarVipName[playerid][idd] = "";
		CarPlate[playerid][idd] = "";
		CarOwner[playerid][idd] = "";
		for(new s; s < 17; s++)
		{
			CarMod[playerid][idd][s] = 0;
		}
	}
	new query[256],string[20];
	for(new idd; idd < MAX_PERSONAL_VEHICLES; idd++)
	{
		format(query, sizeof(query), "SELECT * FROM `cars` WHERE `ID`='%d'", PlayerInfo[playerid][pCar][idd]);
		new Cache: result = mysql_query(SQL, query);
		if(cache_get_row_count() > 0)
		{
			PlayerInfo[playerid][pCarModel][idd] 		= cache_get_field_content_int(0, "Model");
			PlayerInfo[playerid][pCarLocX][idd] 		= cache_get_field_content_float(0, "Locationx");
			PlayerInfo[playerid][pCarLocY][idd] 		= cache_get_field_content_float(0, "Locationy");
			PlayerInfo[playerid][pCarLocZ][idd] 		= cache_get_field_content_float(0, "Locationz");
			PlayerInfo[playerid][pCarAngle][idd] 		= cache_get_field_content_float(0, "Angle");
			PlayerInfo[playerid][pCarLLocX][idd] 		= cache_get_field_content_float(0, "Locationx2");
			PlayerInfo[playerid][pCarLLocY][idd] 		= cache_get_field_content_float(0, "Locationy2");
			PlayerInfo[playerid][pCarLLocZ][idd] 		= cache_get_field_content_float(0, "Locationz2");
			PlayerInfo[playerid][pCarAngle2][idd] 		= cache_get_field_content_float(0, "Angle2");
			PlayerInfo[playerid][pCarBuyTime][idd]		= cache_get_field_content_int(0, "BuyTime");
			PlayerInfo[playerid][pCarColor1][idd] 		= cache_get_field_content_int(0, "ColorOne");
			PlayerInfo[playerid][pCarColor2][idd] 		= cache_get_field_content_int(0, "ColorTwo");
			PlayerInfo[playerid][pCarLock][idd] 		= cache_get_field_content_int(0, "Lockk");
			PlayerInfo[playerid][pCarInsPrice][idd] 	= cache_get_field_content_int(0, "Inscarprice");
			PlayerInfo[playerid][pCarIns][idd] 			= cache_get_field_content_int(0, "Insurancecar");
			PlayerInfo[playerid][pCarKM][idd] 			= cache_get_field_content_float(0, "KM");
			PlayerInfo[playerid][pCarKMLast][idd]		= cache_get_field_content_int(0, "LastKM");
			PlayerInfo[playerid][pCarVIP][idd]			= cache_get_field_content_int(0, "VIP");
			PlayerInfo[playerid][pCarVipColors][idd]		= cache_get_field_content_int(0, "VipColors");
			PlayerInfo[playerid][pCarHP][idd] 			= cache_get_field_content_float(0, "HP");
			PlayerInfo[playerid][pCarDamage1][idd] 		= cache_get_field_content_int(0, "Damage1");
			PlayerInfo[playerid][pCarDamage2][idd] 		= cache_get_field_content_int(0, "Damage2");
			PlayerInfo[playerid][pCarDamage3][idd] 		= cache_get_field_content_int(0, "Damage3");
			PlayerInfo[playerid][pCarDamage4][idd] 		= cache_get_field_content_int(0, "Damage4");
			PlayerInfo[playerid][pCarGas][idd] 			= cache_get_field_content_int(0, "Gas");
			PlayerInfo[playerid][pCarPaintJ][idd] 		= cache_get_field_content_int(0, "PaintJ");
			PlayerInfo[playerid][pCarBlock][idd]		= cache_get_field_content_int(0, "Block");
			cache_get_field_content(0, "VipText", CarVipName[playerid][idd]);
			cache_get_field_content(0, "License", CarPlate[playerid][idd], SQL, 30);
			cache_get_field_content(0, "Owner", CarOwner[playerid][idd], SQL, 50);
			for(new s=1; s <= 17; s++)
			{
				format(string,sizeof(string),"mod%d",s);
				new ids = s-1;
				CarMod[playerid][idd][ids] = cache_get_field_content_int(0, string);
			}
		}
		cache_delete(result);
	}
}

public LoadProperty()
{
	housess = cache_num_rows();
	for(new i = 1; i <= housess; i++)
    {
		new h = i - 1;
		HouseInfo[i][hID]                           = cache_get_field_content_int(h, "ID");
   	    HouseInfo[i][hEntrancex]                    = cache_get_field_content_float(h, "Entrancex");
    	HouseInfo[i][hEntrancey]                    = cache_get_field_content_float(h, "Entrancey");
        HouseInfo[i][hEntrancez]                    = cache_get_field_content_float(h, "Entrancez");
        HouseInfo[i][hExitx]                        = cache_get_field_content_float(h, "Exitx");
        HouseInfo[i][hExity]                        = cache_get_field_content_float(h, "Exity");
        HouseInfo[i][hExitz]                        = cache_get_field_content_float(h, "Exitz");
        cache_get_field_content(h, "Owner", HouseInfo[i][hOwner], SQL, 130);
        cache_get_field_content(h, "Discription", HouseInfo[i][hDiscription], SQL, 130);
        HouseInfo[i][hValue]						= cache_get_field_content_int(h, "Value");
		HouseInfo[i][hPrice]						= cache_get_field_content_int(h, "Prices");
        HouseInfo[i][hHel]                          = cache_get_field_content_int(h, "Hel");
        HouseInfo[i][hMusic]						= cache_get_field_content_int(h, "Music");
        HouseInfo[i][hInterior]                     = cache_get_field_content_int(h, "Interior");
		HouseInfo[i][hInteriorType]                 = cache_get_field_content_int(h, "InteriorType");
        HouseInfo[i][hLock]                         = cache_get_field_content_int(h, "Lockk");
        HouseInfo[i][hOwned]                        = cache_get_field_content_int(h, "Owned");
        HouseInfo[i][hRent]                         = cache_get_field_content_int(h, "Rent");
        HouseInfo[i][hRentabil]                     = cache_get_field_content_int(h, "Rentabil");
        HouseInfo[i][hTakings]                      = cache_get_field_content_int(h, "Takings");
        HouseInfo[i][hLevel]                        = cache_get_field_content_int(h, "Level");
        HouseInfo[i][hVirtual]                      = cache_get_field_content_int(h, "Virtual");
	}
	for(new i = 1; i <= housess; i++)
	{
		OnPropTextdrawUpdate(1, i);
	}
	printf("[LOADING] %d houses loaded.", housess);
	printf("[LOADING] %d turfs loaded.", turfsss);
}

public LoadVehicles()
{
	Vehicless = cache_num_rows();
	new str[30];
	for(new i = 0; i < Vehicless; i++)
	{
		new c = i;
		VehicleInfo[i][vehModel]					= cache_get_field_content_int(c, "Model");
		VehicleInfo[i][vehColor1]					= cache_get_field_content_int(c, "Color1");
		VehicleInfo[i][vehColor2]					= cache_get_field_content_int(c, "Color2");
		VehicleInfo[i][vehGroup]					= cache_get_field_content_int(c, "Group");
		VehicleInfo[i][vehJob]						= cache_get_field_content_int(c, "Job");
		VehicleInfo[i][vehRank]						= cache_get_field_content_int(c, "Rank");
		VehicleInfo[i][vehRotation]					= cache_get_field_content_float(c, "Rotation");
		VehicleInfo[i][vehPosX]						= cache_get_field_content_float(c, "PosX");
		VehicleInfo[i][vehPosY]						= cache_get_field_content_float(c, "PosY");
		VehicleInfo[i][vehPosZ]						= cache_get_field_content_float(c, "PosZ");
		VehicleInfo[i][vehCarIDD]					= cache_get_field_content_int(c, "ID");

		if(VehicleInfo[i][vehColor1] < 0)
		{
			VehicleInfo[i][vehColor1] = random(126);
		}
		if(VehicleInfo[i][vehColor2] < 0)
		{
			VehicleInfo[i][vehColor2] = random(126);
		}
		if(VehicleInfo[i][vehGroup] == 8 && VehicleInfo[i][vehModel] == 411 || VehicleInfo[i][vehGroup] == 2 && VehicleInfo[i][vehModel] == 541 || VehicleInfo[i][vehGroup] == 1 && VehicleInfo[i][vehModel] == 411 || VehicleInfo[i][vehGroup] == 8 && VehicleInfo[i][vehModel] == 468 || VehicleInfo[i][vehGroup] == 8 && VehicleInfo[i][vehModel] == 470)
		{
			VehicleInfo[i][vehCarID] = CreateVehicle(VehicleInfo[i][vehModel], VehicleInfo[i][vehPosX], VehicleInfo[i][vehPosY], VehicleInfo[i][vehPosZ], VehicleInfo[i][vehRotation], VehicleInfo[i][vehColor1], VehicleInfo[i][vehColor2], 1800, 1);
		}
		else
		{
			VehicleInfo[i][vehCarID] = CreateVehicle(VehicleInfo[i][vehModel], VehicleInfo[i][vehPosX], VehicleInfo[i][vehPosY], VehicleInfo[i][vehPosZ], VehicleInfo[i][vehRotation], VehicleInfo[i][vehColor1], VehicleInfo[i][vehColor2], 1800);
		}
		if(VehicleInfo[i][vehGroup] == 0)
		{
			format(str,sizeof(str),"BGZ %d",i+1);
			SetVehicleNumberPlate(VehicleInfo[i][vehCarID],str);
		}
		else if(VehicleInfo[i][vehGroup] > 0)
		{
			if(VehicleInfo[i][vehGroup] > 9)
			{
				format(str,sizeof(str),"F%d %d",VehicleInfo[i][vehGroup],i+1);
				SetVehicleNumberPlate(VehicleInfo[i][vehCarID],str);
			}
			else if(VehicleInfo[i][vehGroup] < 10)
			{
				format(str,sizeof(str),"F0%d %d",VehicleInfo[i][vehGroup],i+1);
				SetVehicleNumberPlate(VehicleInfo[i][vehCarID],str);
			}
		}
		if(VehicleInfo[i][vehGroup] == 13)
		{
			if(VehicleInfo[i][vehModel] != 438)
			{
				new taxiobj = CreateObject(19308, 0.00000, 0.00000, 0.00000,0.00000, 0.00000, 0.00000);
				AttachObjectToVehicle(taxiobj, VehicleInfo[i][vehCarID], 0.000000, -0.249999, 0.949999, 0.000000, 0.000001, 90.449951);
			}
		}
		if(VehicleInfo[i][vehGroup] == 8 || VehicleInfo[i][vehGroup] == 2 || VehicleInfo[i][vehGroup] == 1)
		{
			if(VehicleInfo[i][vehModel] == 411)
			{
				object = CreateObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				AttachObjectToVehicle(object, VehicleInfo[i][vehCarID],  0.010000, -0.060000, 0.689999, 0.000000, 0.000000, 0.000000);
				new policecar = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
				SetObjectMaterialText(policecar, "POLICE", 0, OBJECT_MATERIAL_SIZE_256x128, "Arial", 40, 1, -16777216, 0, 1);
				AttachObjectToVehicle(policecar, VehicleInfo[i][vehCarID], 0.000000, -1.984998, 0.229999, -85.424964, 0.000000, 0.000000);
			}
		}
	}
	printf("[LOADING] %d vehicles loaded.", Vehicless);
	return 1;
}

public LoadSystems()
{
	mysql_tquery(SQL, "SELECT * FROM `factions`", "LoadDynamicFactions", "");

	mysql_tquery(SQL, "SELECT * FROM `vehicles`", "LoadVehicles", "");

	mysql_tquery(SQL, "SELECT * FROM `houses`", "LoadProperty", "");

	LoadTurfs();
	for(new i = 0; i < sizeof(TurfInfo); i++)
	{
     	Turfs[i] = GangZoneCreateEx(TurfInfo[i][zMinX],TurfInfo[i][zMinY],TurfInfo[i][zMaxX],TurfInfo[i][zMaxY],TurfInfo[i][zID],1.0);
	}

	mysql_tquery(SQL, "SELECT * FROM `bizz`", "LoadBizz", "");

	mysql_tquery(SQL, "SELECT * FROM `stock`", "LoadStock", "");

	mysql_tquery(SQL, "SELECT * FROM `cars`", "LoadCar", "");

	#if ACTIVE_QUEST == 1
		mysql_tquery(SQL, "SELECT * FROM `eventobjects`", "LoadQuest", "");
	#endif

	mysql_tquery(SQL, "SELECT * FROM `svars`", "LoadSVars", "");

	mysql_tquery(SQL, "SELECT * FROM `users`", "LoadUsers", "");

	mysql_tquery(SQL, "SELECT * FROM `atms`", "LoadAtms", "");

	mysql_tquery(SQL, "UPDATE `users` SET `Status`='0'", "", "");
	mysql_tquery(SQL, "UPDATE `friends` SET `Status`='0'", "", "");
}

public OnPlayerGoto(playerid, interior, virtual)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new car = GetPlayerVehicleID(playerid);
		foreach(new i : Player)
		{
			if(i != playerid)
			{
				if(GetPlayerVehicleID(i) == car || GetPlayerSurfingVehicleID(i) == car)
				{
					SetPlayerInterior(i, interior);
					SetPlayerVirtualWorld(i, virtual);
				}
			}
		}
	}

	return 1;
}

stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
	    new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
	    GetPlayerPos(playerid,PX,PY,PZ);
	    GetVehiclePos(vehicleid, X,Y,Z);
	    new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
	    if(Distance <= radi*radi)
	    {
	        return 1;
	    }
	}
	return 0;
}

// ONGAMEMODEINIT
public OnGameModeInit()
{
	mysql_log(LOG_ERROR | LOG_WARNING, LOG_TYPE_HTML);
	print("---------- SERVER START ----------");
	print("[debug] OnGameModeInit()");
	SQL = mysql_connect("localhost", "root", "bigzone", "");
	printf("mysql_connect: %d",SQL);
	print("----------------------------------------------------");
	SetNameTagDrawDistance(30);
	EnableStuntBonusForAll(0);
	ShowPlayerMarkers(2);
	LimitPlayerMarkerRadius(5.0);
	new hour,mins,sec;
	gettime(hour, mins, sec);
	SetWorldTime(hour);

    countdown = 0;

	for(new c=0;c<MAX_VEHICLES;c++)
	{
		Gas[c] = GasMax;
	}
	LoadTextdraws();
	LoadSystems();
	LoadAllDynamicObjects();
	LoadAllObjects();
	SetGameModeText(SERVER_VERSION);
	SendRconCommand("mapname LS - LV");
	format(objstore, sizeof(objstore), "MOLE: I got nothing, check back with me later.");
	format(cbjstore, sizeof(cbjstore), "HQ: There is nothing in your Vicinity, Out.");

	actor1 = CreateActor(50, -27.4950, 1518.7183, 1000.9155, 175.20);
	actor2 = CreateActor(50, -27.4950, 1518.7183, 1000.9155, 175.20);
	actor3 = CreateActor(172, 180.2778, -1873.0457, 2.7368, 270.8766);

    Create3DTextLabel("Gate 1\nType /opengate 1 to open",0xFFFFFFFF,1767.5348,-1581.2784,1742.5024,5.0, 0, 1);
	Create3DTextLabel("Driving School!\n \nType /exam\nto start the test!",0xFFFF00D1,1219.0502,-1812.7823,16.5938, 15.0, 0, 0);
	CreateStreamed3DTextLabel("SF DealerShip!\n\nType /buycar to buy a car\nor /sellcar to sell an existing car!",0x00B800D1,-1664.1561,1207.6320,7.2546,15.0,0);
    Create3DTextLabel("{3A51FF}Get Drugs\nType /getdrugs to get drugs",0xFFFFFFFF,316.1940,1117.5341,1083.8828,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}6\n{FFFFFF}Job: {950000}Arms Dealer\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,1366.9601,-1292.1105,13.5469,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}2\n{FFFFFF}Job: {950000}Drugs Dealer\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,2129.9590,-1700.0682,15.0784,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}11\n{FFFFFF}Job: {950000}Farmer\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,-366.4417,-1412.7061,25.7266,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}4\n{FFFFFF}Job: {950000}Bus Driver\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,1653.6558,-2238.0095,13.5201,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}7\n{FFFFFF}Job: {950000}Garbage Man\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,2510.2173,2794.8362,10.8203,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}1\n{FFFFFF}Job: {950000}Detective\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,607.8508,-1438.1113,14.0647,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}5\n{FFFFFF}Job: {950000}Mechanic\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,1621.0037,2210.8643,15.1959,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}3\n{FFFFFF}Job: {950000}Pizza Boy\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,-2661.4724,263.0804,4.6328,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}8\n{FFFFFF}Job: {950000}Fisher\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,372.0800,-2086.0505,7.8359,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}9\n{FFFFFF}Job: {950000}Fisher\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,2000.5967,1568.3157,15.3672,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}10\n{FFFFFF}Job: {950000}Trucker\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,-76.8129,-1136.6630,1.0781,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}12\n{FFFFFF}Job: {950000}Car Jacker\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,2849.8909,891.6392,10.7500,20.0, 0, 1);
 	Create3DTextLabel("{0E7BE9}Materials Pickup!\n\nType /getmats as an Arms Dealer\nto collect materials",COLOR_WHITE,597.5396,-1246.9562,18.2512,20.0, 0, 1);
	Create3DTextLabel("{26C4EC}Paramedic Roof | Press F",COLOR_WHITE,1584.8812,1797.7262,10.8280,20.0, 0, 1);
	Create3DTextLabel("{26C4EC}Paramedic Roof | Press F",COLOR_WHITE,1585.8629,1793.7830,30.4688,20.0, 0, 1);
	Create3DTextLabel("{26C4EC}FBI Roof | Press F",COLOR_WHITE,611.1835,-585.6877,17.2266,20.0, 0, 1);
	Create3DTextLabel("{26C4EC}Restricted to faction(Los Santos Police Department)\nLSPD Staff HQ",COLOR_WHITE,242.4025,66.4760,1003.6406,20.0, 0, 1);
	Create3DTextLabel("{26C4EC}Restricted to faction(Las Venturas Police Department)\nLVPD Staff HQ",COLOR_WHITE,242.4025,66.4760,1003.6406,20.0, 3, 1);
	Create3DTextLabel("{26C4EC}/garage",COLOR_WHITE,1292.7828,6.8377,1001.0078,20.0, 0, 1);
	areap = Create3DTextLabel("{FF0000}ForEver RPG Event Area{FFFFFF}\nEvent Area is closed\nPlease wait...",0xFFFFFFFF,1510.3986,-1059.5723,25.0625,5.0, 0, 1);
    Create3DTextLabel("{26C4EC}LSPD | /elevator",0xFFFFFFFF,1564.8662,-1666.4962,28.3956,20.0, 0, 1);
    Create3DTextLabel("{26C4EC}LVPD Roof | /elevator",0xFFFFFFFF,2339.3237,2461.2197,38.6837,20.0, 0, 1);
    Create3DTextLabel("{26C4EC}Restricted to faction(Los Santos Police Department)\nLSPD Roof | /elevator",0xFFFFFFFF,1568.5891,-1690.3262,5.8906,20.0, 0, 1);
    Create3DTextLabel("{26C4EC}Restricted to faction(Las Venturas Police Department)\nLVPD Roof | /elevator",0xFFFFFFFF,2340.2810,2456.5625,14.9688,20.0, 0, 1);
    Create3DTextLabel("{26C4EC}Los Santos Police Department\nProcessing Entrance\n \n(/arrest)",0xFFFFFFFF,1526.3739,-1678.0635,5.8906,20.0, 0, 1);
    Create3DTextLabel("{26C4EC}San Fierro Police Department\nProcessing Entrance\n \n(/arrest)",0xFFFFFFFF,-1606.1118,673.9193,-5.2422,20.0, 0, 1);
    Create3DTextLabel("{26C4EC}Las Venturas Police Department\nProcessing Entrance\n \n(/arrest)",0xFFFFFFFF,2282.1289,2425.7620,3.4692,20.0, 0, 1);
    Create3DTextLabel("Paintball !\n\nType /paint\nto enter the paintball arena!",0xFFFF00CC,-1863.7480,1069.3790,46.0859,10.0, 0, 1);
	Create3DTextLabel("Race Arena !\n\nType /race\nto enter the race arena!",0xFFFF00CC,-2110.6624,-444.3140,38.7344,10.0, 0, 1);
	Create3DTextLabel("Race Arena !\n\nType /leaverace\nto exit the race arena!",0xFFFF00CC,-40.3110,1508.9723,1000.9155,10.0, 1, 1);
	Create3DTextLabel("Race Arena !\n\nType /leaverace\nto exit the race arena!",0xFFFF00CC,-40.3110,1508.9723,1000.9155,10.0, 2, 1);
	Create3DTextLabel("Race Vote !\nType /voterace\nto choose map and car!",0xFFFF00CC,-27.5104,1516.9034,1000.9155,10.0, 1, 1);
	Create3DTextLabel("Race Vote !\nType /voterace\nto choose map and car!",0xFFFF00CC,-27.5104,1516.9034,1000.9155,10.0, 2, 1);
	Create3DTextLabel("{FFFFFF}Job: {950000}Pizza Boy\n{FFFFFF}Use {950000}/work {FFFFFF} to work",0xFFFFFFCC,-2666.4829,271.0853,4.3359,10.0, 0, 0);
//	Create3DTextLabel("Summer Quest!",0xFFFFFFCC,-2666.4829,271.0853,4.3359,10.0, 0, 0); 1089.0179,-1791.5615,13.6610
	Create3DTextLabel("Rent car!\nType /rentcar\nto rent a vehicle",0xFFFFFFCC,1089.0179,-1791.5615,13.6610,10.0, 0, 0);
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	if(!realtime)
	{
		SetWorldTime(wotime);
	}
    DisableInteriorEnterExits();
	AllowInteriorWeapons(1);
	UsePlayerPedAnims();
	paintm[1] = 1;
	paintm[2] = 1;
	paintm[3] = 1;
	paintm[4] = 1;
	paintg[1] = 1;
	paintg[2] = 1;
	PaintBallWinnerKills[1] = 0;
	PaintBallWinnerKills[2] = 0;
	PaintBallWinnerKills[3] = 0;
	PaintBallWinnerKills[4] = 0;
	PaintWinner[1] = -1;
	PaintWinner[2] = -1;
	PaintWinner[3] = -1;
	PaintWinner[4] = -1;
	paintrs[1] = 0;
	paintrs[2] = 0;
	paintrs[3] = 0;
	paintrs[4] = 0;
	paintt[1] = 0;
	paintt[2] = 0;
	paintt[3] = 0;
	paintt[4] = 0;
	mapvoted[1] = 0;
	mapvoted[2] = 0;
	mapvoted[3] = 0;
	mapvoted[4] = 0;
	gunvoted[1] = 0;
	gunvoted[2] = 0;

	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
	}

    ManualVehicleEngineAndLights();

	// Pickups
	AddStaticPickup(1242, 23, 1527.5,-12.1,1002.0); 					// binco armor
	dmvp = CreatePickup(1239, 23, 1219.0502,-1812.7823,16.5938); 		// Driving License
	gslsenter1 = CreatePickup(1318, 23, 305.9341,-141.7895,1004.0547, -1);
	gslsenter2 = CreatePickup(1318, 23, 300.1486,-141.8312,1004.0625, -1);
	gslsenter3 = CreatePickup(1318, 23, 304.0917,-141.7523,1004.0625, -1);
	gslsenter4 = CreatePickup(1318, 23, 298.9318,-141.8459,1004.0547, -1);
	AddStaticPickup(1275, 23, -76.8129,-1136.6630,1.0781);              // Trucker [/getjob]
    AddStaticPickup(1314, 23, 2282.1289,2425.7620,3.4692);				// Lvpd arrest
    AddStaticPickup(1314, 23, 1526.3739,-1678.0635,5.8906);				// Lspd arrest
    AddStaticPickup(1314, 23, -1606.1118,673.9193,-5.2422);				// Lspd arrest
	//govp = CreatePickup(1239, 23, 1481.2347,-1771.1429,18.7958);		// Guvern
	AddStaticPickup(1239, 23, 1756.4181,-1577.8954,1742.5309);			// exit jail
	AddStaticPickup(1239, 23, 1762.0028,-1584.4185,1742.5264);			// mdc jail
	AddStaticPickup(1275, 23, 1366.9601,-1292.1105,13.5469);			// GETJOB ARMS DEALER
    AddStaticPickup(1275, 23, 2129.9590,-1700.0682,15.0784);			// GETJOB DRUGS DEALER
	AddStaticPickup(1275, 23, 2510.2173,2794.8362,10.8203);			    // GETJOB GARBAGE MAN
	AddStaticPickup(1275, 23, 607.8508,-1438.1113,14.0647);				// GETJOB DETECTIVE
	AddStaticPickup(1275, 23, 1621.0037,2210.8643,15.1959); 			// GETJOB MECHANIC
	AddStaticPickup(1275, 23, 2849.8909,891.6392,10.7500); 			// GETJOB CAR JACKER
	AddStaticPickup(1239, 23, 2770.4629,-1628.3237,12.1775); 			// MATSCOLLECT
	AddStaticPickup(1239, 23, 2065.4844,-1584.0730,13.4821); 			// BUYIRON
	AddStaticPickup(1239, 23, 5.7771,-3989.8794,1003.5266); 			// STATION LS BUY
	AddStaticPickup(1275, 23, -2661.4724,263.0804,4.6328); 			// PIZZA BOY
	AddStaticPickup(1275, 23, 372.0800,-2086.0505,7.8359); 				// FISH GETJOB
	AddStaticPickup(1275, 23, 2000.5967,1568.3157,15.3672); 			// FISH GETJOB2
	AddStaticPickup(1275, 23, -44.8344,-1560.9879,2.6009); 				// GETJOB TRUCKER
	AddStaticPickup(1275, 23, 1653.6558,-2238.0095,13.5201); 			// GETJOB BUS DRIVER
	AddStaticPickup(1318, 23, 2139.2612,-1697.9432,15.0784); 			// CRACK HOUSE
	AddStaticPickup(1254, 23, -1863.7480,1069.3790,46.0859);       	    // PAINTBALL SF
	AddStaticPickup(1274, 23, -2110.6624,-444.3140,38.7344);       	    // RACE ARENA LS
	AddStaticPickup(1275, 23, -2666.4829,271.0853,4.3359);               // work pizza

	//CreateDynamicPickup(modelid, type, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 100.0);
	CreateDynamicPickup(1239, 23, -27.5104,1516.9034,1000.9155,-1,-1,-1,100.0); // RACE ARENA LS
	CreateDynamicPickup(1239, 23, -40.3110,1508.9723,1000.9155,-1,-1,-1,100.0); // RACE ARENA LS2
	CreateDynamicPickup(1247, 23, 242.4025,66.4760,1003.6406,-1,-1,-1,100.0); // LSPD STAFF HQ
	CreateDynamicPickup(1279, 23, 316.1940,1117.5341,1083.8828,-1,-1,-1,100.0);
	CreateDynamicPickup(1275, 23, -366.4417,-1412.7061,25.7266,-1,-1,-1,100.0);
	CreateDynamicPickup(1239, 23, 918.6766,-1252.2185,16.2109,-1,-1,-1,100.0);
	dsp = CreateDynamicPickup(1277, 23, -1664.1561,1207.6320,7.2546,-1,-1,-1,100.0);  // DS PiCKUP
	CreateDynamicPickup(1239, 23, 1564.8662,-1666.4962,28.3956,-1,-1,-1,100.0); // LSPD Roff(sus)
	CreateDynamicPickup(1239, 23, 1568.5825,-1690.2802,5.8906,-1,-1,-1,100.0); // LSPD Roff(jos)
	CreateDynamicPickup(1239, 23, 2340.2810,2456.5625,14.9688,-1,-1,-1,100.0); // LVPD Roff(jos)
	CreateDynamicPickup(1239, 23, 2339.3237,2461.2197,38.6837,-1,-1,-1,100.0); // LVPD Roff(sus)
	//CreateDynamicPickup(1239, 23,1449.2723,-1848.4255,13.7721,-1,-1,-1,100.0); 	// buymaterials
	CreateDynamicPickup(1239, 23,1510.3986,-1059.5723,25.0625,-1,-1,-1,100.0); 	// event area enter
	CreateDynamicPickup(1239, 23,-1423.5153,935.8321,1036.4756,-1,-1,-1,100.0); // event area exit
	CreateDynamicPickup(1318, 23, 1584.8812,1797.7262,10.8280, -1, -1,-1,100.0); // PARAMEDIC ELEVATOR
	CreateDynamicPickup(1318, 23, 1585.8629,1793.7830,30.4688, -1, -1,-1,100.0);
	CreateDynamicPickup(1318, 23, 611.1835,-585.6877,17.2266, -1, -1,-1,100.0); // FBI ELEVATOR
	CreateDynamicPickup(1318, 23, 618.1414,-566.7900,26.1432, -1, -1,-1,100.0);
	CreateDynamicPickup(1239, 23, 1089.0179,-1791.5615,13.6610, -1, -1,-1, 100.0);
	// Summer Quest Mapa
	CreateObject(898, 168.35167, -1876.16223, 0.79644,   0.00000, 0.00000, 0.00000);
	CreateObject(898, 169.54503, -1864.94250, 1.93162,   0.00000, 0.00000, 0.00000);
	CreateObject(898, 169.44304, -1855.40955, 1.93162,   0.00000, 0.00000, 0.00000);
	CreateObject(898, 177.11404, -1849.59363, 1.93162,   0.00000, 0.00000, 0.00000);
	CreateObject(898, 184.67702, -1845.59985, 1.93162,   0.00000, 0.00000, 0.00000);
	CreateObject(898, 184.67702, -1845.59985, 1.93162,   0.00000, 0.00000, 0.00000);
	CreateObject(898, 168.67476, -1884.05054, -0.87537,   0.00000, 0.00000, 0.00000);
	CreateObject(1637, 177.37421, -1873.64954, 3.15859,   0.00000, 0.00000, -1.31996);
	CreateObject(1895, 176.09517, -1859.34314, 3.11687,   -11.94000, 1.98000, 41.34000);
	CreateObject(2406, 177.12094, -1858.22522, 3.44898,   0.00000, 0.00000, 0.00000);
	CreateObject(2406, 175.27657, -1860.44434, 3.44898,   0.00000, 0.00000, 89.58000);
	CreateObject(941, 181.39674, -1872.71887, 2.21873,   0.00000, 0.00000, -90.48004);
	CreateObject(1598, 181.47649, -1868.86292, 2.27072,   0.00000, 0.00000, 0.00000);
	CreateObject(1598, 183.40492, -1866.54065, 2.36982,   0.00000, 0.00000, 0.00000);
	CreateObject(1598, 176.84319, -1864.93335, 2.36982,   0.00000, 0.00000, 0.00000);
	CreateObject(1598, 175.43939, -1868.74609, 2.36982,   0.00000, 0.00000, 0.00000);
	CreateObject(1598, 178.73517, -1858.85974, 2.73190,   0.00000, 0.00000, 0.00000);
	CreateObject(902, 183.62111, -1889.39758, 0.22001,   0.00000, 0.00000, 0.00000);
	CreateObject(902, 178.53177, -1862.48108, 2.13251,   0.00000, 0.00000, 0.00000);


    // MAPICON
    CreateDynamicMapIcon(-1664.1561,1207.6320,7.2546,55,0,-1,-1,-1,750.0);	// BuyCar Los Santos
	CreateDynamicMapIcon(1510.3986,-1059.5723,25.0625,35,0,-1,-1,-1,750.0);	// Event Arena
	
	ArataKM = TextDrawCreate(572.000000, 350.311157, "KM/H");
	TextDrawLetterSize(ArataKM, 0.449999, 1.600000);
	TextDrawAlignment(ArataKM, 1);
	TextDrawColor(ArataKM, -1);
	TextDrawSetShadow(ArataKM, 0);
	TextDrawSetOutline(ArataKM, 1);
	TextDrawBackgroundColor(ArataKM, 255);
	TextDrawFont(ArataKM, 1);
	TextDrawSetProportional(ArataKM, 1);
	
	AdminHUD = TextDrawCreate(3.000000, 434.875000, "Tick: ~g~200~w~ / Reports: ~r~10~w~ / Cheaters: ~r~10~w~ / FPS: ~g~101~w~ / Ping: ~r~50~w~ / Anim: ~y~100~w~ / MPS: ~p~20");
	TextDrawLetterSize(AdminHUD, 0.246000, 1.289374);
	TextDrawAlignment(AdminHUD, 1);
	TextDrawColor(AdminHUD, -1);
	TextDrawSetShadow(AdminHUD, 0);
	TextDrawSetOutline(AdminHUD, 1);
	TextDrawBackgroundColor(AdminHUD, 255);
	TextDrawFont(AdminHUD, 2);
	TextDrawSetProportional(AdminHUD, 1);

	//Timer
	if (realtime)
	{
		new tmphour,
			tmpminute,
			tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		new worldt = tmphour;
		SetWorldTime(worldt);
	}
	synctimer = SetTimer("SyncUp", 60000, 1);
	unjailtimer = SetTimer("SetPlayerUnjail", 1000, 1);
	cartimer = SetTimer("CarCheck", 90000, 1);
	twosecondstimer = SetTimer("TwoSecondsTimer", 2000, 1);
	productiontimer = SetTimer("Production", 300000, 1); //5 mins (300000)
	twominutestimer = SetTimer("TwoMinutesTimer", 120000, 1);
	checkgastimer = SetTimer("CheckGas", RunOutTime, 1);
    checkvehinfotimer = SetTimer("Checkvehinfo",1000, 1);
    wantedicatimer = SetTimer("TenSecondsTimer", 10000, 1);
    savedatatimer = SetTimer("SavePlayerData", 600000, 1);
	weathertimer = SetTimer("WeatherChange",1800000,1); // 30 min
	return 1;
}

public LoadAllObjects()
{
    //gratii pd
    new gratie1, gratie2, gratie3, gratie4, gratie5, gratie6;
	gratie1 = CreateObject(19302, 266.32431, 85.70610, 1001.28571,   0.00000, 0.00000, 90.30000);
	gratie2 = CreateObject(19302, 266.31870, 87.46790, 1001.28571,   0.02000, 0.00000, -89.82000);
	gratie3 = CreateObject(19302, 266.32031, 82.94890, 1001.28571,   0.02000, 0.00000, -89.82000);
	gratie4 = CreateObject(19302, 266.33569, 81.20160, 1001.28571,   0.02000, 0.00000, 90.36000);
	gratie5 = CreateObject(19302, 266.29480, 76.71580, 1001.28571,   0.02000, 0.00000, 90.36000);
	gratie6 = CreateObject(19302, 266.29480, 78.45580, 1001.28571,   0.02000, 0.00000, -90.60000);
	SetObjectMaterial(gratie1, 0, 19302, "gratie1", "gratie1", 0xFFFFFFFF);
	SetObjectMaterial(gratie2, 0, 19302, "gratie2", "gratie2", 0xFFFFFFFF);
	SetObjectMaterial(gratie3, 0, 19302, "gratie3", "gratie3", 0xFFFFFFFF);
	SetObjectMaterial(gratie4, 0, 19302, "gratie4", "gratie4", 0xFFFFFFFF);
	SetObjectMaterial(gratie5, 0, 19302, "gratie5", "gratie5", 0xFFFFFFFF);
	SetObjectMaterial(gratie6, 0, 19302, "gratie6", "gratie6", 0xFFFFFFFF);

	//gratii ajail
	new gratia1, gratia2, gratia3, gratia4, gratia5, gratia6, gratia7, gratia8;
	gratia1 = CreateObject(19302, 228.28619, 112.66590, 999.23529,   0.00000, 0.00000, 180.48010);
	gratia2 = CreateObject(19302, 226.50360, 112.64810, 999.23529,   0.00000, 0.00000, 0.90020);
	gratia3 = CreateObject(19302, 222.62360, 112.64810, 999.23529,   0.00000, 0.00000, 359.64001);
	gratia4 = CreateObject(19302, 224.36360, 112.64810, 999.23529,   0.00000, 0.00000, 538.79919);
	gratia5 = CreateObject(19302, 220.38361, 112.64810, 999.23529,   0.00000, 0.00000, 539.69940);
	gratia6 = CreateObject(19302, 218.66360, 112.64810, 999.23529,   0.00000, 0.00000, 359.33963);
	gratia7 = CreateObject(19302, 216.44360, 112.64810, 999.23529,   0.00000, 0.00000, 538.73865);
	gratia8 = CreateObject(19302, 214.72360, 112.64810, 999.23529,   0.00000, 0.00000, 359.45889);
	SetObjectMaterial(gratia1, 0, 19302, "gratia1", "gratia1", 0xFFFFFFFF);
	SetObjectMaterial(gratia2, 0, 19302, "gratia2", "gratia2", 0xFFFFFFFF);
	SetObjectMaterial(gratia3, 0, 19302, "gratia3", "gratia3", 0xFFFFFFFF);
	SetObjectMaterial(gratia4, 0, 19302, "gratia4", "gratia4", 0xFFFFFFFF);
	SetObjectMaterial(gratia5, 0, 19302, "gratia5", "gratia5", 0xFFFFFFFF);
	SetObjectMaterial(gratia6, 0, 19302, "gratia6", "gratia6", 0xFFFFFFFF);
	SetObjectMaterial(gratia7, 0, 19302, "gratia7", "gratia7", 0xFFFFFFFF);
	SetObjectMaterial(gratia8, 0, 19302, "gratia8", "gratia8", 0xFFFFFFFF);

	//gard cnn
    CreateObject(970, 1113.81226, -1415.95642, 12.99760,   0.00000, 0.00000, 1.02000);
	CreateObject(970, 1118.95190, -1415.88806, 12.99760,   0.00000, 0.00000, 0.24000);
	CreateObject(970, 1123.87134, -1415.89172, 13.01760,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1128.84937, -1415.87390, 13.05760,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1133.62927, -1415.89539, 13.05760,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1138.54712, -1415.90955, 13.07760,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1143.48718, -1415.95984, 13.07760,   0.00000, 0.00000, -0.54000);
	CreateObject(970, 1186.10474, -1495.67102, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateObject(970, 1186.14282, -1490.92114, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateObject(970, 1186.13611, -1486.25720, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateObject(970, 1186.10059, -1481.48560, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateObject(970, 1124.00598, -1562.16187, 12.95910,   0.00000, 0.00000, -0.48000);
	CreateObject(970, 1133.22400, -1562.16504, 12.95910,   0.00000, 0.00000, 0.12000);
	CreateObject(970, 1128.58142, -1562.17664, 12.95910,   0.00000, 0.00000, -0.48000);
	CreateObject(970, 1061.49329, -1492.59277, 12.96960,   0.00000, 0.00000, -105.78001);
	CreateObject(970, 1059.12000, -1501.51147, 12.96960,   0.00000, 0.00000, -104.70000);
	CreateObject(970, 1060.26794, -1497.01086, 12.98960,   0.00000, 0.00000, -105.30000);

	//LINII MASINI
    CreateObject(10183, 1267.64600, -1797.14282, 12.43480,   0.00000, 0.00000, 44.64000);
	CreateObject(10183, 1205.08972, -1829.13245, 12.43480,   0.00000, 0.00000, 45.48000);
	CreateObject(10183, 1570.63953, -1606.69458, 12.40590,   0.00000, 0.00000, 45.12000);

	//Garbage
	CreateObject(18862, 2523.44312, 2812.48975, 14.94440,   0.00000, 0.00000, 0.00000);
	CreateObject(18862, 2781.27173, -2531.82104, 17.73810,   0.00000, 0.00000, 0.00000);
	CreateObject(18862, -1899.72314, -1736.72607, 25.87010,   0.00000, 0.00000, 0.00000);
	CreateObject(1265, 810.01349, -1096.77893, 25.18391,   0.00000, 0.00000, 0.00000);
	CreateObject(1265, 810.95319, -1098.27197, 25.30360,   0.00000, 0.00000, 0.00000);
	CreateObject(1264, 810.19092, -1095.63965, 25.09590,   0.00000, 0.00000, 0.00000);
	CreateObject(1343, 414.42014, -1512.11438, 31.33760,   0.00000, 0.00000, 40.00000);
	CreateObject(1264, 945.74243, -1742.89954, 12.96460,   0.00000, 0.00000, 0.00000);
	CreateObject(1265, 945.71002, -1744.06616, 12.98440,   0.00000, 0.00000, 0.00000);
	CreateObject(1343, 1492.38660, -686.40686, 94.50410,   0.00000, 0.00000, 0.00000);
	CreateObject(1344, 1105.63623, -294.48071, 73.77080,   0.00000, 0.00000, 180.00000);
	CreateObject(1264, 1571.64478, 26.26518, 23.44080,   0.00000, 0.00000, 0.00000);
	CreateObject(1227, 2849.60571, 1294.65125, 11.31020,   0.00000, 0.00000, 0.00000);
	CreateObject(1264, 2319.48950, 1801.95605, 10.12020,   0.00000, 0.00000, 0.00000);
	CreateObject(1265, 2317.99609, 1801.94202, 10.20050,   0.00000, 0.00000, 0.00000);
	CreateObject(1343, 2656.42896, 1081.06458, 10.58030,   0.00000, 0.00000, 0.00000);
	CreateObject(1344, 2637.94287, 1834.47986, 10.81900,   0.00000, 0.00000, 180.00000);
	CreateObject(1345, 1977.26697, 2496.17627, 10.63920,   0.00000, 0.00000, 0.00000);
	CreateObject(1344, 1533.06104, 2725.46460, 10.60040,   0.00000, 0.00000, -90.00000);
	CreateObject(1343, 959.18890, 1804.16211, 8.62580,   0.00000, 0.00000, 0.00000);

	//PD Exterior by piMp
	CreateObject(11326, 1605.01282, -1623.63245, 14.78770,   0.00000, 0.00000, 89.46000);
	CreateObject(955, 1553.64233, -1683.42175, 12.92650,   0.00000, 0.00000, -90.00000);
	CreateObject(983, 1542.62939, -1641.17981, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateObject(983, 1545.80750, -1650.77563, 27.68590,   0.00000, 0.00000, -270.12021);
	CreateObject(983, 1542.60828, -1647.55884, 27.70590,   -0.16000, -0.04000, -180.12010);
	CreateObject(983, 1550.38745, -1650.77563, 27.68590,   0.00000, 0.00000, -270.12021);
	CreateObject(983, 1542.62939, -1640.45984, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateObject(983, 1545.85986, -1637.26941, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateObject(983, 1552.21460, -1637.27222, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateObject(983, 1558.61877, -1637.28772, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateObject(983, 1565.02625, -1637.32434, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateObject(983, 1571.40149, -1637.35168, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateObject(983, 1574.66931, -1637.35522, 27.70590,   0.00000, 0.00000, -270.17999);
	CreateObject(983, 1577.83557, -1640.57202, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateObject(983, 1577.77295, -1646.93713, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateObject(983, 1577.78162, -1653.32056, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.78674, -1659.73962, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.77917, -1666.16150, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.75732, -1672.53748, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.72766, -1678.91931, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.73621, -1685.32568, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.72400, -1691.71228, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.71289, -1698.10791, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.72131, -1704.51245, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.69897, -1710.88159, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.69897, -1711.24158, 27.70590,   0.00000, 0.00000, -180.06010);
	CreateObject(983, 1574.44556, -1714.38306, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateObject(983, 1568.07471, -1714.34656, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateObject(983, 1561.66760, -1714.30737, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateObject(983, 1555.31116, -1714.26440, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateObject(983, 1548.95508, -1714.22168, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateObject(983, 1545.76025, -1714.20190, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateObject(983, 1542.57971, -1710.99304, 27.70590,   0.00000, 0.00000, -359.87982);
	CreateObject(983, 1542.54773, -1704.60864, 27.70590,   0.00000, 0.00000, -359.87982);
	CreateObject(983, 1542.54773, -1703.70862, 27.70590,   0.00000, 0.00000, -359.87979);
	CreateObject(983, 1545.74390, -1700.54211, 27.70590,   0.00000, 0.00000, -270.00009);
	CreateObject(983, 1550.38757, -1700.53650, 27.70590,   0.00000, 0.00000, -270.00009);
	CreateObject(983, 1553.58850, -1697.36475, 27.70590,   0.00000, 0.00000, -179.70013);
	CreateObject(983, 1553.56555, -1690.94910, 27.70590,   0.00000, 0.00000, -179.70013);
	CreateObject(983, 1553.56580, -1656.84106, 27.70590,   0.00000, 0.00000, -179.70010);
	CreateObject(983, 1553.55737, -1653.96729, 27.70590,   0.00000, 0.00000, -179.70010);
	CreateObject(3934, 1562.89099, -1700.73755, 27.38710,   0.00000, -0.02000, -0.84000);
	CreateObject(3934, 1560.78516, -1650.95300, 27.38710,   0.00000, -0.02000, 1.02000);

	//Statii autobuz
	CreateObject(1257, 1692.89929, -2200.77808, 13.64870,   0.00000, 0.00000, -90.12000);
	CreateObject(1257, 1941.19080, -2172.63159, 13.76920,   0.00000, 0.00000, -90.36000);
	CreateObject(1257, 1967.80859, -1900.26184, 13.77870,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 1921.87402, -1746.02295, 13.76840,   0.00000, 0.00000, 90.06000);
	CreateObject(1257, 1815.46008, -1815.05981, 13.80990,   0.00000, 0.00000, -179.63989);
	CreateObject(1257, 1695.64038, -1766.75049, 13.78830,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 1392.64221, -1726.04602, 13.65910,   0.00000, 0.00000, 89.46000);
	CreateObject(1257, 1318.69714, -1633.10010, 13.76780,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 1325.55969, -1389.08057, 13.76010,   0.00000, 0.00000, 90.24000);
	CreateObject(1257, 1212.34741, -1326.52954, 13.68430,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 1083.02100, -1274.54492, 13.60720,   0.00000, 0.00000, 90.24000);
	CreateObject(1257, 964.63733, -1214.54919, 17.02340,   0.00000, 0.00000, 89.58000);
	CreateObject(1257, 818.55078, -1134.44849, 23.90680,   0.00000, 0.00000, 88.50000);
	CreateObject(1257, 791.28119, -1301.22681, 13.56870,   0.00000, 0.00000, -179.51990);
	CreateObject(1257, 679.34332, -1388.95630, 13.72830,   0.00000, 0.00000, 90.12000);
	CreateObject(1257, 378.06552, -1489.50562, 32.17630,   0.00000, 0.00000, 128.28003);
	CreateObject(1257, 261.02219, -1539.33704, 32.41950,   0.00000, 0.00000, -34.38000);
	CreateObject(1257, 485.92880, -1361.02576, 18.19000,   -4.00000, 4.00000, -65.24000);
	CreateObject(1257, 589.19830, -1236.84290, 17.97730,   0.00000, 0.00000, -67.92000);
	CreateObject(1257, 775.53870, -1062.00525, 24.75130,   0.00000, 0.00000, -77.69999);
	CreateObject(1257, 1209.70325, -952.07233, 43.01140,   0.00000, 0.00000, -79.26000);
	CreateObject(1257, 1713.93640, -736.80762, 50.49150,   -2.94000, 0.00000, -2.00000);
	CreateObject(1257, 1775.73401, 579.77661, 23.77970,   0.00000, 0.00000, -11.76000);
	CreateObject(1257, 1839.89514, 825.05157, 10.16840,   0.06000, 0.00000, 270.66010);
	CreateObject(1257, 2184.53564, 801.95203, 7.33030,   0.00000, 0.00000, -125.22000);
	CreateObject(1257, 2293.69141, 841.77661, 14.11820,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 2353.69604, 1025.47546, 10.84100,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 2570.79736, 1066.87720, 10.84120,   0.00000, 0.00000, -90.24001);
	CreateObject(1257, 2613.71777, 1319.62097, 10.86020,   0.00000, 0.00000, 90.36000);
	CreateObject(1257, 2476.20508, 1479.59375, 10.86030,   0.00000, 0.00000, 89.94000);
	CreateObject(1257, 2401.10645, 1619.55835, 10.89970,   0.00000, 0.00000, 89.88000);
	CreateObject(1257, 2293.08325, 1779.52710, 10.80020,   0.00000, 0.00000, 89.70000);
	CreateObject(1257, 2158.93481, 1995.43042, 10.87960,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 2231.25317, 2383.93506, 10.86030,   0.00000, 0.00000, -12.60000);
	CreateObject(1257, 2085.77344, 2459.35864, 10.88090,   0.00000, 0.00000, 90.00000);
	CreateObject(1257, 1948.35791, 2399.46997, 10.92060,   0.00000, 0.00000, 89.64000);
	CreateObject(1257, 1920.80237, 2315.90601, 10.88100,   0.00000, 0.00000, -179.69991);
	CreateObject(1257, 1921.41638, 2117.40479, 10.94120,   0.00000, 0.00000, -179.70000);
	CreateObject(1257, 2093.48389, 2015.85571, 10.90140,   0.00000, 0.00000, -90.18000);
	CreateObject(1257, 2035.99133, 1521.35413, 10.90060,   0.00000, 0.00000, -180.05991);
	CreateObject(1257, 2036.35254, 1168.23950, 10.82070,   0.00000, 0.00000, -179.75990);
	CreateObject(1257, 2034.95715, 878.28998, 7.36150,   0.00000, 0.00000, -179.40010);
	CreateObject(1257, 1752.35156, 621.24127, 21.25890,   4.00000, 0.00000, 165.00000);
	CreateObject(1257, 1614.87988, 186.35570, 33.65740,   4.00000, 0.00000, -192.00000);
	CreateObject(1257, 1657.21387, -331.40521, 40.28030,   0.00000, 0.00000, -174.59990);
	CreateObject(1257, 1684.78406, -727.13708, 49.88370,   4.00000, 0.00000, -190.80000);
	CreateObject(1257, 1412.48633, -934.33838, 35.80170,   0.00000, 0.00000, 80.46000);
	CreateObject(1257, 1431.33862, -1040.25464, 23.92800,   0.00000, 0.00000, -89.94000);
	CreateObject(1257, 1571.46692, -1139.13977, 23.71380,   0.00000, 0.00000, -180.60001);
	CreateObject(1257, 1708.46350, -1263.24890, 13.60880,   0.00000, 0.00000, -179.16000);
	CreateObject(1257, 1590.66150, -1434.45093, 13.52840,   0.00000, 0.00000, 90.06000);
	CreateObject(1257, 1423.55896, -1568.12500, 13.62870,   0.00000, 0.00000, 173.27989);
	CreateObject(1257, 1446.39136, -1738.46875, 13.68900,   0.00000, 0.00000, -89.58000);
	CreateObject(1257, 1579.74524, -1878.48059, 13.62880,   0.00000, 0.00000, -90.06000);
	CreateObject(1257, 1815.37183, -1904.30969, 13.65310,   0.00000, 0.00000, -180.65990);
	CreateObject(1257, 1955.44678, -1998.47595, 13.60910,   0.00000, 0.00000, -179.52000);
	CreateObject(1257, 1935.31299, -2160.26001, 13.66810,   0.00000, 0.00000, 89.82000);

	//Pompe de benzina
	CreateObject(1676, 1009.18927, -936.09637, 42.78190,   0.00000, 0.00000, 6.66000);
	CreateObject(1676, 1005.57520, -936.67499, 42.78190,   0.00000, 0.00000, 6.66000);
	CreateObject(1676, 1002.23541, -937.06488, 42.78190,   0.00000, 0.00000, 6.66000);
	CreateObject(1676, 998.64508, -937.57654, 42.78190,   0.00000, 0.00000, 6.66000);

	//Dozatoare
	CreateObject(1977, 316.88760, -140.32410, 998.59998,   0.00000, 0.00000, -90.42000);
	CreateObject(1775, 495.97321, -24.32530, 1000.73621,   0.00000, 0.00000, -180.18030);
	return 1;
}

public LoadAllDynamicObjects()
{
	// RACE ARENA
	CreateDynamicObject(19378, -17.61814, 1515.35327, 999.82953,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -17.61690, 1505.93958, 999.82953,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -27.82080, 1505.96240, 999.82953,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -27.97893, 1515.35266, 999.82953,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -37.94957, 1505.95557, 999.82953,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -37.75200, 1515.47534, 999.82953,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, -12.50300, 1505.84558, 1001.63379,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -12.49360, 1515.46069, 1001.63379,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -17.23149, 1520.22302, 1001.63379,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -26.84494, 1520.23694, 1001.63379,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -36.46837, 1520.24890, 1001.63379,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -41.35551, 1515.37659, 1001.63379,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19450, -41.34680, 1502.56873, 1001.63379,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19450, -36.48660, 1501.06653, 1001.63379,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19450, -27.01140, 1501.06458, 1001.63379,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19450, -17.41460, 1501.05066, 1001.63379,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19388, -41.35370, 1508.98572, 1001.63568,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11737, -41.24654, 1510.69360, 1001.66711,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(11665, -14.17560, 1518.45776, 1000.61230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, -34.93353, 1501.93762, 999.89331,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, -28.37990, 1501.96106, 999.89331,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, -22.28230, 1501.96790, 999.89331,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, -15.80290, 1501.93860, 999.89331,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19172, -20.00270, 1501.13123, 1002.15692,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19174, -26.38020, 1501.14600, 1002.19519,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19175, -32.80420, 1501.15002, 1002.19672,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19173, -41.26360, 1506.83228, 1001.66718,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11711, -41.20200, 1508.98450, 1002.65338,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2173, -27.00228, 1517.95618, 999.91510,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19999, -27.67097, 1519.46545, 999.91260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, -27.11707, 1517.82886, 1000.72461,   0.00000, 0.00000, 210.00000);
	CreateDynamicObject(19835, -28.31532, 1518.23621, 1000.79761,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19825, -27.39310, 1520.12476, 1002.25568,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19376, -36.21130, 1515.57190, 1003.32092,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, -25.83130, 1515.51184, 1003.32092,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, -15.53130, 1515.47192, 1003.32092,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, -36.23130, 1505.93188, 1003.32092,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, -25.83130, 1505.89185, 1003.32092,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, -15.53130, 1505.87195, 1003.32092,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1537, -41.32610, 1509.75952, 999.88843,   0.00000, 0.00000, 90.00000);

	//USA GARAJ FBI
	CreateDynamicObject(10184, 617.60950, -602.30725, 17.29980,   0.00000, 0.00000, 0.00000);

	//USA MAFII
	CreateDynamicObject(1506, 2544.06641, -1306.37781, 1053.63586,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1506, 2544.06641, -1304.89783, 1053.63586,   0.00000, 0.00000, 90.00000);

	//event arena
	CreateDynamicObject(5107, 8131.84424, -7557.77441, 21.31974,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13190, 8092.79590, -7557.67969, 17.86357,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(13190, 8092.77637, -7557.67041, 21.69334,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(13190, 8092.77148, -7557.67383, 25.57404,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(13190, 8092.75781, -7557.68311, 29.43032,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(16287, 8085.43555, -7564.92334, 11.59161,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(16287, 8090.56982, -7569.92725, 11.61662,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(16287, 8085.42822, -7550.02686, 11.59772,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(16287, 8095.47949, -7569.92676, 11.61662,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(16287, 8090.53174, -7544.91895, 11.61663,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(16287, 8095.47852, -7544.91504, 11.61662,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(16287, 8100.60156, -7549.99854, 11.61662,   0.00000, 0.00000, -360.00003);
	CreateDynamicObject(16287, 8100.60010, -7564.91455, 11.61662,   0.00000, 0.00000, -360.00003);
	CreateDynamicObject(8947, 8093.10303, -7560.52051, 18.51939,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8947, 8093.11426, -7560.53613, 24.52295,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8947, 8093.10352, -7560.52686, 26.99291,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8947, 8097.21094, -7561.63770, 12.04439,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8947, 8097.22314, -7553.22217, 12.01940,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8947, 8088.83398, -7561.64404, 12.05525,   0.00000, 0.00000, -359.99997);
	CreateDynamicObject(8947, 8088.81201, -7553.23730, 12.04439,   0.00000, 0.00000, -360.00003);
	CreateDynamicObject(4193, 8111.32910, -7498.31055, 31.44644,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(10041, 8032.82227, -7497.01855, 45.16753,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(4058, 8047.18066, -7595.05029, 33.55188,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(4058, 8108.80957, -7613.34033, 25.23701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4682, 8096.74316, -7600.93604, 18.03067,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(4682, 8186.39941, -7550.15967, 22.69571,   0.00000, 0.00000, -989.99976);
	CreateDynamicObject(4113, 8187.83398, -7481.91797, 36.29269,   0.00000, 0.00000, 101.25001);
	CreateDynamicObject(4570, 7992.76074, -7555.49707, 49.23763,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(4570, 8153.17090, -7617.53174, 48.53752,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4571, 8236.04785, -7480.54053, 51.21596,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(3268, 8155.90918, -7553.35352, 14.36662,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(3268, 8155.92822, -7575.60303, 14.36662,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(3268, 8155.93018, -7573.09180, 18.19459,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(3268, 8155.92139, -7553.29834, 18.19116,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(4570, 8102.35938, -7624.73633, 57.35464,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4682, 8147.48584, -7497.79102, 30.86975,   0.00000, 0.00000, -809.99963);
	CreateDynamicObject(9910, 8157.54199, -7589.48975, 25.39473,   0.00000, 0.00000, -134.99997);
	CreateDynamicObject(9910, 8124.82959, -7589.49951, 25.33860,   0.00000, 0.00000, -134.99997);
	CreateDynamicObject(9910, 8170.17480, -7575.63916, 22.18861,   0.00000, 0.00000, -44.99999);
	CreateDynamicObject(9910, 8182.58154, -7519.66357, 27.21359,   0.00000, 0.00000, -225.00002);
	CreateDynamicObject(9910, 8188.66504, -7538.39795, 47.74644,   0.00000, 0.00000, -225.00002);
	CreateDynamicObject(9910, 8094.52393, -7495.31982, 25.78859,   0.00000, 0.00000, -315.00006);
	CreateDynamicObject(9917, 8215.37402, -7585.08643, 34.32093,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9917, 8081.14697, -7440.34424, 30.99039,   0.00000, 0.00000, 89.99998);
	CreateDynamicObject(18450, 8134.48389, -7523.63770, 19.93480,   0.00000, 0.00000, -179.99997);
	CreateDynamicObject(18450, 8060.39258, -7523.63232, -0.59019,   0.00000, 30.93972, -179.99997);
	CreateDynamicObject(8229, 8096.59375, -7534.57568, 16.94285,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8229, 8108.25488, -7534.63477, 16.84285,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8229, 8120.01416, -7534.65332, 16.86785,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8229, 8172.48779, -7529.99268, 16.91785,   0.00000, 0.00000, -146.25000);
	CreateDynamicObject(3268, 8155.93701, -7553.31885, 15.28433,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(3268, 8155.91846, -7553.30127, 16.15442,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(3268, 8155.92578, -7553.29443, 17.02787,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(3268, 8155.92236, -7553.31152, 17.61886,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(975, 8167.36377, -7533.67383, 16.04131,   0.00000, 0.00000, 33.75002);
	CreateDynamicObject(975, 8155.01758, -7531.88770, 16.04131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 8146.13232, -7531.81982, 16.04131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 8141.76953, -7527.35010, 16.04131,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8137.57275, -7544.12207, 17.79440,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8137.58887, -7544.11523, 21.22811,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8137.59082, -7543.86084, 21.21184,   179.62262, 0.00000, 89.99998);
	CreateDynamicObject(8886, 8112.26953, -7542.10889, 14.34441,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8079.29980, -7586.33008, 14.34440,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(10773, 8105.36377, -7594.32227, 14.02387,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(8886, 8137.96680, -7520.91797, 14.34440,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8158.07275, -7519.39404, 14.24440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8886, 8144.48389, -7548.29395, 17.79440,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8166.40674, -7548.23535, 17.56940,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(8886, 8166.39990, -7553.76074, 17.59440,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(3268, 8155.93018, -7566.93262, 14.36662,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8154.67920, -7556.83936, 14.26940,   0.00000, 0.00000, -269.99994);
	CreateDynamicObject(8886, 8155.95557, -7574.64160, 14.19440,   0.00000, 0.00000, -359.99997);
	CreateDynamicObject(8886, 8169.37842, -7570.28857, 14.19440,   0.00000, 0.00000, -269.99994);
	CreateDynamicObject(8886, 8142.33887, -7570.32471, 14.06940,   0.00000, 0.00000, -269.99994);
	CreateDynamicObject(8886, 8145.82861, -7581.98047, 17.54440,   0.00000, 0.00000, -359.99997);
	CreateDynamicObject(3268, 8155.93213, -7575.58691, 18.18340,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8152.46289, -7582.12988, 14.21941,   0.00000, 0.00000, -359.99997);
	CreateDynamicObject(18260, 8154.32324, -7568.63037, 15.81481,   0.00000, 0.00000, -11.25003);
	CreateDynamicObject(18260, 8162.89551, -7581.72803, 15.81481,   0.00000, 0.00000, -179.99997);
	CreateDynamicObject(18260, 8157.46289, -7550.15869, 15.86481,   0.00000, 0.00000, -449.99997);
	CreateDynamicObject(5428, 8114.52100, -7494.75879, 15.39824,   -0.85944, 0.00000, -539.99988);
	CreateDynamicObject(8229, 8131.81934, -7534.68506, 17.06784,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8229, 8143.81348, -7523.75293, 17.01785,   0.00000, 0.00000, -90.00004);
	CreateDynamicObject(5107, 7986.95850, -7524.04150, 21.34902,   0.00000, 0.00000, -179.99997);
	CreateDynamicObject(1492, 8169.92188, -7585.58643, 14.35846,   0.00000, 0.00000, -179.99997);
	CreateDynamicObject(1497, 8142.04199, -7585.52441, 14.35465,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1497, 8142.01172, -7563.33643, 14.35465,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18260, 8146.63477, -7567.67969, 15.93981,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1497, 8142.00781, -7576.94775, 14.35465,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8135.71875, -7548.68555, 15.62885,   10.31324, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8135.71680, -7548.73438, 20.07629,   10.31324, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8145.01514, -7585.66992, 15.62885,   9.45380, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8145.00586, -7585.61572, 20.79356,   9.45380, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8172.58594, -7531.13623, 22.07913,   10.31324, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8172.57861, -7531.14551, 28.25908,   10.31324, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8172.46777, -7531.09863, 34.39047,   10.31324, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8082.02832, -7568.90479, 16.55498,   10.31324, 0.00000, -89.99998);
	CreateDynamicObject(1437, 8081.99414, -7568.90918, 22.58348,   10.31324, 0.00000, -89.99998);
	CreateDynamicObject(1437, 8082.00537, -7568.91406, 25.83324,   10.31324, 0.00000, -89.99998);
	CreateDynamicObject(1437, 8077.97754, -7593.53369, 15.62885,   10.31324, 0.00000, -179.99997);
	CreateDynamicObject(1437, 8077.99121, -7593.52295, 21.74604,   10.31324, 0.00000, -179.99997);
	CreateDynamicObject(1437, 8077.99316, -7593.50000, 27.75269,   10.31324, 0.00000, -179.99997);
	CreateDynamicObject(1437, 8077.99023, -7593.45850, 32.17966,   10.31324, 0.00000, -179.99997);
	CreateDynamicObject(1635, 8071.80859, -7593.08936, 19.40563,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1635, 8072.61182, -7519.09668, 18.12557,   0.00000, 0.00000, 89.99998);
	CreateDynamicObject(1635, 8067.36768, -7546.94043, 22.60154,   0.00000, 0.00000, 180.00002);
	CreateDynamicObject(1635, 8125.54248, -7590.24365, 18.56382,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1635, 8150.25586, -7590.18408, 18.38124,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1635, 8170.53369, -7536.85400, 20.93207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1635, 8173.98975, -7524.76025, 24.34968,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8087.87109, -7585.62891, 38.60769,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8096.48926, -7589.43408, 38.60769,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 8103.01904, -7585.02002, 38.81908,   0.00000, 0.00000, -269.99994);
	CreateDynamicObject(1688, 8114.15967, -7596.80127, 56.66604,   0.00000, 0.00000, -269.99994);
	CreateDynamicObject(1689, 8104.87305, -7589.12842, 39.00718,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1689, 8095.14209, -7598.22705, 56.85414,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8083.17236, -7596.31250, 56.45465,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1687, 8132.16406, -7592.25244, 39.11093,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8145.69727, -7592.23193, 39.16706,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8173.56494, -7579.02344, 35.96095,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1688, 8174.22949, -7588.15430, 36.17234,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8161.72461, -7562.52148, 26.92328,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1688, 8162.31934, -7571.24707, 26.91760,   0.00000, 0.00000, -359.99997);
	CreateDynamicObject(1688, 8177.56982, -7527.30762, 41.19732,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 8177.08105, -7516.06982, 41.19732,   0.00000, 0.00000, 89.99998);
	CreateDynamicObject(1687, 8175.26465, -7535.66211, 43.27273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8174.27246, -7557.85156, 43.27273,   0.00000, 0.00000, 89.99998);
	CreateDynamicObject(1689, 8175.43945, -7544.75244, 43.67221,   0.00000, 0.00000, 89.99998);
	CreateDynamicObject(1689, 8093.44141, -7492.05273, 39.96041,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8085.01563, -7491.08838, 39.56092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8070.73291, -7596.64941, 33.83205,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 8078.04004, -7492.18604, 19.20200,   0.00000, 0.00000, -179.99997);
	CreateDynamicObject(1635, 8089.43848, -7494.62842, 22.50600,   0.00000, 0.00000, 89.99998);
	CreateDynamicObject(1635, 8091.17627, -7541.89551, 20.57246,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1687, 8090.37109, -7552.17627, 33.17936,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8661, 8087.17920, -7514.84473, 18.07185,   -89.38136, 0.00000, 0.00000);
	CreateDynamicObject(8661, 8129.15234, -7515.66211, 20.90702,   -89.38136, 0.00000, 0.00000);
	CreateDynamicObject(8661, 8157.16064, -7515.38672, 20.07667,   -89.38136, 0.00000, 0.00000);
	CreateDynamicObject(9910, 8170.84912, -7495.96387, 14.76549,   0.00000, 0.00000, -135.00003);
	CreateDynamicObject(9910, 8137.54297, -7500.13428, 17.75253,   0.00000, 0.00000, -135.00003);
	CreateDynamicObject(7921, 8085.90479, -7533.29688, 13.26363,   0.00000, 0.00000, -180.00002);
	// NRG - STUNT
	CreateObject(1655,2942.6001000,-730.5999800,2.1000000,340.0000000,0.0000000,268.0000000); //object(waterjumpx2) (1)
    CreateObject(1655,2950.6001000,-730.9000200,3.9000000,359.2490000,0.0000000,267.9950000); //object(waterjumpx2) (2)
    CreateObject(1655,2957.2000000,-731.2999900,8.2000000,21.9970000,0.0000000,267.9950000); //object(waterjumpx2) (3)
    CreateObject(17533,2998.6001000,-736.0999800,18.0000000,0.0000000,270.0000000,0.0000000); //object(templb1_lae2) (1)
    CreateObject(1634,3013.7000000,-730.5000000,11.5000000,2.4540000,0.0000000,272.3230000); //object(landjump2) (1)
    CreateObject(1634,3019.1001000,-729.7000100,17.5000000,34.2350000,352.7360000,278.4200000); //object(landjump2) (2)
    CreateObject(1634,3020.6001000,-728.0999800,24.4000000,61.0910000,329.9640000,302.6580000); //object(landjump2) (3)
    CreateObject(1634,3018.6001000,-726.2999900,31.6000000,75.9890000,268.2070000,3.6590000); //object(landjump2) (4)
    CreateObject(1634,2984.6001000,-723.5000000,26.8000000,2.4500000,0.0000000,212.3180000); //object(landjump2) (5)
    CreateObject(4199,3000.7000000,-760.7999900,28.5000000,0.0000000,90.0000000,90.0000000); //object(garages1_lan) (1)
    CreateObject(4199,2977.8000000,-760.7000100,28.6000000,0.0000000,90.0000000,90.0000000); //object(garages1_lan) (2)
    CreateObject(4199,2965.0000000,-755.0000000,28.5000000,0.0000000,90.0000000,180.0000000); //object(garages1_lan) (3)
    CreateObject(4199,2965.1001000,-755.0999800,28.5000000,0.0000000,90.0000000,0.0000000); //object(garages1_lan) (4)
    CreateObject(4199,2974.2000000,-741.2999900,28.5000000,0.0000000,90.0000000,90.0000000); //object(garages1_lan) (5)
    CreateObject(5401,2981.1001000,-750.2999900,27.6000000,0.0000000,340.0000000,180.0000000); //object(laegarages1nw) (1)
    CreateObject(4199,2974.1001000,-741.0999800,28.6000000,0.0000000,90.0000000,270.0000000); //object(garages1_lan) (6)
    CreateObject(18452,3022.5000000,-758.9000200,34.1000000,330.0000000,0.0000000,106.0000000); //object(cw_tscanopy01) (1)
    CreateObject(1655,3029.3000000,-703.4000200,40.4000000,0.0000000,0.0000000,0.0000000); //object(waterjumpx2) (4)
    CreateObject(6102,3085.5000000,-651.7999900,54.7000000,0.0000000,0.0000000,180.0000000); //object(gaz4_law) (1)
    CreateObject(8558,3008.3000000,-640.4000200,41.0000000,0.0000000,0.0000000,0.0000000); //object(vgshseing28) (1)
    CreateObject(13638,2982.2000000,-635.4000200,45.6000000,2.4500000,0.0000000,0.0000000); //object(stunt1) (1)
    CreateObject(13648,3000.7000000,-639.0999800,53.4000000,6.0000000,0.0000000,246.0000000); //object(wall2) (1)
    CreateObject(1633,3020.5000000,-649.2000100,60.2000000,26.0000000,0.0000000,234.0000000); //object(landjump) (1)
    CreateObject(1633,3022.1001000,-650.5999800,62.3000000,43.9990000,0.0000000,233.9980000); //object(landjump) (2)
    CreateObject(18450,3132.6001000,-645.7999900,45.0000000,270.0000000,180.0000000,270.0000000); //object(cs_roadbridge04) (1)
    CreateObject(1655,3103.8000000,-630.0999800,65.0000000,7.9990000,0.0000000,267.9950000); //object(waterjumpx2) (5)
    CreateObject(18450,3187.3000000,-630.0999800,41.6000000,0.0000000,0.0000000,0.0000000); //object(cs_roadbridge04) (2)
    CreateObject(6351,3276.8999000,-632.9000200,57.0000000,0.0000000,0.0000000,162.0000000); //object(rodeo05_law2) (1)
    CreateObject(1655,3219.5000000,-629.5999800,43.2000000,10.0000000,0.0000000,270.0000000); //object(waterjumpx2) (6)
    CreateObject(1655,3223.3999000,-629.5000000,46.8000000,29.9980000,0.0000000,270.0000000); //object(waterjumpx2)
    CreateObject(10575,3247.7000000,-624.0999800,50.9000000,0.0000000,114.0000000,0.0000000); //object(modshopdoor1_sfs) (1)
    CreateObject(18367,3238.8000000,-613.4000200,39.5000000,336.0160000,2.1890000,0.8900000); //object(cw2_bikelog) (1)
    CreateObject(18367,3243.1001000,-650.9000200,53.3000000,326.0190000,2.4090000,93.3480000); //object(cw2_bikelog) (2)
    CreateObject(3852,3272.8000000,-647.2000100,74.1000000,0.0000000,0.0000000,106.0000000); //object(sf_jump) (1)
    CreateObject(6052,3269.8999000,-640.9000200,75.7000000,0.0000000,0.0000000,204.0000000); //object(artcurve_law) (1)
    CreateObject(1225,3259.5000000,-631.4000200,50.3000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (1)
    CreateObject(1225,3258.5000000,-628.2000100,50.3000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (2)
    CreateObject(1225,3261.2000000,-620.2000100,50.3000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (3)
    CreateObject(1225,3257.8000000,-623.7999900,50.3000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (4)
    CreateObject(1225,3261.8000000,-627.0999800,50.3000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (5)
    CreateObject(1225,3254.5000000,-627.2999900,50.3000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (6)
    CreateObject(1225,3292.0000000,-641.4000200,72.4000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (7)
    CreateObject(1225,3291.5000000,-638.2000100,72.4000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (8)
    CreateObject(991,3256.6001000,-633.7999900,78.2000000,87.1720000,134.9830000,322.9830000); //object(bar_barriergate1) (1)
    CreateObject(991,3259.8000000,-629.2000100,77.5000000,87.1710000,134.9780000,66.9820000); //object(bar_barriergate1) (2)
    CreateObject(991,3264.8000000,-627.0000000,78.8000000,63.9280000,94.0930000,107.4310000); //object(bar_barriergate1) (3)
    CreateObject(991,3270.3999000,-624.9000200,81.0000000,70.0920000,37.6490000,158.0290000); //object(bar_barriergate1) (4)
    CreateObject(991,3275.8000000,-624.5000000,81.9000000,79.2300000,68.4060000,109.6730000); //object(bar_barriergate1) (5)
    CreateObject(1412,3386.4179700,-638.5205100,50.7414900,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_2) (1)
    CreateObject(7657,3371.2000000,-605.2999900,87.8000000,0.0000000,0.0000000,32.0000000); //object(plasticsgate1) (2)
    CreateObject(8489,3397.2000000,-654.5999800,64.2000000,0.0000000,0.0000000,20.0000000); //object(flamingo01_lvs) (1)
    CreateObject(18367,3316.0000000,-616.5999800,72.0000000,326.0190000,2.4060000,107.3450000); //object(cw2_bikelog) (3)
    CreateObject(7657,3369.2000000,-592.9000200,87.9000000,0.0000000,0.0000000,18.9980000); //object(plasticsgate1) (3)
    CreateObject(7657,3387.5000000,-586.2999900,87.9000000,0.0000000,0.0000000,21.2440000); //object(plasticsgate1) (4)
    CreateObject(7657,3389.0000000,-596.5999800,87.9000000,0.0000000,0.0000000,19.9910000); //object(plasticsgate1) (5)
    CreateObject(7657,3390.5000000,-588.7999900,87.9000000,0.0000000,0.0000000,21.2420000); //object(plasticsgate1) (6)
    CreateObject(7657,3403.5000000,-594.0999800,87.9000000,0.0000000,0.0000000,111.2420000); //object(plasticsgate1) (7)
    CreateObject(7657,3387.6001000,-593.2999900,87.9000000,0.0000000,0.0000000,21.2420000); //object(plasticsgate1) (8)
    CreateObject(7657,3368.7000000,-594.7000100,87.9000000,0.0000000,0.0000000,347.2420000); //object(plasticsgate1) (9)
    CreateObject(1225,3381.8999000,-598.0000000,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (9)
    CreateObject(1225,3384.6001000,-595.5999800,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (10)
    CreateObject(1225,3388.1001000,-595.7999900,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (11)
    CreateObject(1225,3391.2000000,-592.9000200,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (12)
    CreateObject(1225,3394.8000000,-592.7999900,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (13)
    CreateObject(1225,3396.1001000,-587.2999900,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (15)
    CreateObject(1225,3392.8999000,-590.5000000,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (16)
    CreateObject(1225,3389.1001000,-590.2000100,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (17)
    CreateObject(1225,3386.2000000,-592.9000200,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (18)
    CreateObject(1225,3380.6001000,-593.7999900,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (19)
    CreateObject(1225,3377.2000000,-592.0000000,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (20)
    CreateObject(1225,3375.3000000,-594.0999800,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (21)
    CreateObject(1225,3381.5000000,-589.9000200,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (22)
    CreateObject(1225,3386.5000000,-588.5999800,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (23)
    CreateObject(1225,3392.8000000,-585.2000100,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (24)
    CreateObject(1634,3403.3999000,-587.4000200,85.1000000,2.4500000,0.0000000,204.3160000); //object(landjump2) (6)
    CreateObject(7657,3419.5000000,-600.5000000,87.9000000,0.0000000,0.0000000,109.2370000); //object(plasticsgate1) (10)
    CreateObject(7657,3426.0000000,-619.2000100,87.9000000,0.0000000,0.0000000,109.2320000); //object(plasticsgate1) (11)
    CreateObject(7657,3427.6001000,-637.7999900,87.9000000,0.0000000,0.0000000,79.2320000); //object(plasticsgate1) (12)
    CreateObject(7657,3411.3999000,-604.5000000,87.9000000,0.0000000,0.0000000,109.2320000); //object(plasticsgate1) (13)
    CreateObject(7657,3417.3000000,-624.0000000,88.8000000,0.0000000,0.0000000,109.2320000); //object(plasticsgate1) (14)
    CreateObject(7657,3426.0000000,-633.7999900,85.2000000,74.0000000,90.0000000,349.2280000); //object(plasticsgate1) (15)
    CreateObject(1225,3411.8000000,-598.5999800,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (25)
    CreateObject(1225,3415.7000000,-598.2000100,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (26)
    CreateObject(1225,3415.3999000,-603.9000200,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (27)
    CreateObject(1225,3419.1001000,-606.0000000,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (28)
    CreateObject(1225,3415.8999000,-609.0999800,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (29)
    CreateObject(1225,3420.2000000,-613.5999800,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (30)
    CreateObject(1225,3417.2000000,-614.4000200,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (31)
    CreateObject(1225,3422.0000000,-619.2000100,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (32)
    CreateObject(1225,3420.1001000,-624.0999800,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (33)
    CreateObject(1225,3418.7000000,-617.4000200,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (34)
    CreateObject(1225,3424.8999000,-627.0000000,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (35)
    CreateObject(1225,3422.3999000,-630.7000100,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (36)
    CreateObject(1225,3424.8999000,-635.5000000,86.6000000,0.0000000,0.0000000,0.0000000); //object(barrel4) (37)
    CreateObject(7657,3436.5000000,-698.0999800,84.7000000,73.9980000,90.0000000,349.2280000); //object(plasticsgate1) (16)
    CreateObject(10948,3408.8999000,-839.5000000,60.4000000,0.0000000,0.0000000,0.0000000); //object(skyscrapper_sfs) (1)
    CreateObject(18367,3388.2000000,-729.9000200,86.6000000,21.9760000,357.8330000,354.8110000); //object(cw2_bikelog) (4)
    CreateObject(18367,3385.3999000,-757.7000100,78.8000000,21.9730000,357.8300000,354.8090000); //object(cw2_bikelog) (5)
    CreateObject(18367,3382.3999000,-785.9000200,70.8000000,21.9730000,357.8300000,354.8090000); //object(cw2_bikelog) (6)
    CreateObject(7657,3389.8000000,-721.2000100,84.3000000,73.9980000,90.0000000,349.2280000); //object(plasticsgate1) (17)
    CreateObject(1655,3432.3999000,-870.2000100,55.7000000,357.5000000,0.0000000,272.0000000); //object(waterjumpx2) (8)
    CreateObject(1655,3439.2000000,-869.0999800,59.7000000,17.7450000,0.0000000,272.0000000); //object(waterjumpx2) (9)
    CreateObject(1655,3442.8000000,-867.2999900,65.2000000,44.4930000,0.0000000,272.0000000); //object(waterjumpx2) (10)
    CreateObject(1655,3444.0000000,-865.5000000,72.3000000,67.9890000,0.0000000,272.0000000); //object(waterjumpx2) (11)
    CreateObject(1655,3441.8000000,-863.4000200,79.7000000,84.0110000,180.0000000,92.0000000); //object(waterjumpx2) (12)
    CreateObject(1655,3401.6001000,-798.2000100,79.7000000,357.4950000,0.0000000,356.0000000); //object(waterjumpx2) (13)
    CreateObject(1655,3402.6001000,-792.2999900,84.4000000,31.3480000,6.1510000,352.7870000); //object(waterjumpx2) (14)
    CreateObject(1655,3402.6001000,-789.5999800,91.3000000,57.8550000,9.8970000,347.5850000); //object(waterjumpx2) (15)
    CreateObject(1655,3403.3000000,-790.5000000,99.4000000,82.9210000,47.8850000,308.3130000); //object(waterjumpx2) (16)
    CreateObject(1655,3405.1001000,-792.9000200,105.9000000,74.7810000,121.0530000,244.2610000); //object(waterjumpx2) (17)
    CreateObject(4559,3498.5000000,-870.2999900,98.3000000,0.0000000,348.0000000,0.0000000); //object(lacmabase1_lan) (1)
    CreateObject(1655,3529.8999000,-846.0000000,116.9000000,0.2350000,12.4970000,179.1860000); //object(waterjumpx2) (18)
    CreateObject(1655,3512.8000000,-905.7000100,113.3000000,355.4940000,3.2530000,97.4870000); //object(waterjumpx2) (19)
    CreateObject(5735,3449.8000000,-915.5999800,106.6000000,357.5400000,349.7400000,359.5550000); //object(studoff_law) (1)
    CreateObject(5735,3417.6001000,-915.2000100,96.7000000,357.5760000,345.7350000,359.3790000); //object(studoff_law) (2)
    CreateObject(5735,3386.8999000,-915.4000200,85.6000000,357.6110000,342.4820000,359.2370000); //object(studoff_law) (3)
    CreateObject(5735,3360.2000000,-915.4000200,76.8000000,357.5150000,351.7370000,359.1290000); //object(studoff_law) (4)
    CreateObject(5735,3343.1001000,-915.9000200,74.6000000,357.4980000,354.2350000,358.7360000); //object(studoff_law) (5)
    CreateObject(5735,3325.7000000,-915.9000200,74.4000000,357.4890000,4.2420000,359.1700000); //object(studoff_law) (6)
    CreateObject(5735,3314.6001000,-915.5999800,75.0000000,357.5500000,14.2490000,359.5940000); //object(studoff_law) (7)
    CreateObject(6342,3170.2000000,-907.4000200,21.0000000,330.0000000,270.0000000,268.0000000); //object(century01_law2) (1)
    CreateObject(6342,3134.8999000,-906.7000100,21.0000000,305.2460000,270.0000000,267.9950000); //object(century01_law2) (2)
    CreateObject(6342,3101.1001000,-905.7000100,37.7000000,279.2440000,270.0000000,267.9950000); //object(century01_law2) (3)
    CreateObject(1655,3078.2000000,-901.9000200,80.3000000,75.3920000,6.9550000,76.5170000); //object(waterjumpx2) (20)
    CreateObject(18450,3124.0000000,-909.7999900,77.6000000,0.0000000,0.0000000,170.0000000); //object(cs_roadbridge04) (3)
    CreateObject(1655,3080.3000000,-901.7999900,85.8000000,82.5510000,166.3720000,276.2630000); //object(waterjumpx2) (21)
    CreateObject(18450,3123.8000000,-919.7999900,81.3000000,42.0000000,0.0000000,169.9970000); //object(cs_roadbridge04) (4)
    CreateObject(18450,3127.7000000,-902.7999900,80.3000000,314.0000000,0.0000000,169.9970000); //object(cs_roadbridge04) (5)
    CreateObject(18450,3166.0000000,-949.4000200,76.4000000,0.0000000,0.0000000,85.7470000); //object(cs_roadbridge04) (6)
    CreateObject(18450,3130.5000000,-994.7000100,74.9000000,0.0000000,0.0000000,355.7430000); //object(cs_roadbridge04) (7)
    CreateObject(18450,3055.7000000,-989.0000000,56.1000000,0.0000000,332.0000000,355.7430000); //object(cs_roadbridge04) (8)
    CreateObject(18450,2986.7000000,-983.9000200,19.3000000,0.0000000,331.9960000,355.7430000); //object(cs_roadbridge04) (9)
    CreateObject(18450,2986.7000000,-983.9000200,8.8000000,0.0000000,355.9960000,355.7430000); //object(cs_roadbridge04) (11)
    CreateObject(18450,2972.5000000,-982.9000200,3.1000000,0.0000000,15.9950000,355.7430000); //object(cs_roadbridge04) (12)
    CreateObject(18450,2963.0000000,-982.2000100,3.1000000,0.0000000,32.4910000,355.7430000); //object(cs_roadbridge04) (14)
    CreateObject(18450,2986.6001000,-983.9000200,4.2000000,0.0000000,5.9950000,355.7430000); //object(cs_roadbridge04) (18)
// ================================================MASINI STUNT=============================================================
    AddStaticVehicle(522,2911.9365,-731.5128,10.3075,265.3901,7,79); // NRG 1
    AddStaticVehicle(522,2911.8921,-733.5151,10.3878,263.6609,7,79); // NEG 2
    AddStaticVehicle(522,2911.7080,-736.3129,10.5087,264.8600,7,79); //
    AddStaticVehicle(522,2911.3154,-738.5031,10.5876,262.3424,7,79); //
    AddStaticVehicle(522,2910.6445,-741.6308,10.6157,258.5228,7,79); //
    AddStaticVehicle(522,2910.6501,-745.0432,10.6160,267.4220,7,79); //



	// bug house
	CreateDynamicObject(19303, 442.47998, 509.23032, 1001.63678,   0.00000, 0.00000, 90.00000,-1,-1,-1,300.0);
	CreateDynamicObject(19304, 453.06204, 507.98209, 1001.92603,   0.00000, 0.00000, 90.00000,-1,-1,-1,300.0);
	CreateDynamicObject(19304, 453.11362, 509.63824, 1001.92603,   0.00000, 0.00000, 90.00000,-1,-1,-1,300.0);

	//NG BAZA
    gateng = CreateDynamicObject(19313, 135.2833, 1941.3331, 21.6932, 0.0000, 0.0000, 0.0000,-1,-1,-1,300.0);
    CreateDynamicObject(19312, 191.14, 1870.04, 21.48,0.0000, 0.0000, 0.0000,-1,-1,-1,300.0);

     // Hq Bug
    CreateDynamicObject(19357, 968.4691, -53.4128, 1001.8241, 0.0000, 0.0000, 0.0000,-1,-1,-1,300.0);

	//Lspd
	gatelspd = CreateObject(10184, 1592.67676, -1638.05225, 14.95110,   0.00000, 0.00000, -89.70000);

	//Lvpd
	gatelvpd = CreateDynamicObject(10184, 2335.89282, 2444.87451, 7.29770,   0.00000, 0.00000, -30.08000, -1, -1, -1, 300.0);
	gatelvpd2 = CreateDynamicObject(10184, 2294.02222, 2503.16650, 4.70800,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.0);
	CreateDynamicObject(955, 2273.52612, 2429.61206, 10.21940, 0.00000, 0.00000, 0.00000,-1,-1,-1,300.0); //usa
	CreateDynamicObject(1569, 2293.94946, 2492.96411, 2.28980,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.0); //dozatorul
	CreateDynamicObject(19313, 2251.27319, 2498.03394, 5.56540,   0.00000, 0.00000, -90.36000,-1,-1,-1,300.0); //gratii

    //Lspd Object
	CreateDynamicObject(2952, 1581.99524, -1637.93494, 12.36840,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1545.0706787109, -1635.6511230469, 13.237774848938, 0, 0, 0,-1,-1,-1,300.0);
    CreateDynamicObject(983, 1544.4979248047, -1620.7434082031, 13.238116264343, 0, 0, 0,-1,-1,-1,300.0);
    lspdbar = CreateDynamicObject(968, 1544.7007, -1630.7527, 13.2983, 0.0000, 90.0200, 90.0000,-1,-1,-1,300.0);

    //Lvpd Object
    lvpdbar = CreateDynamicObject(968, 2238.22021, 2450.44312, 10.58781, 0.0000, 90.0200, 90.0000,-1,-1,-1,300.0);

	//Garduri Fish
	CreateDynamicObject(970, 382.19919, -2042.00671, 7.32180,   0.00000, 0.00000, 0.00000,-1,-1,-1,500.0);
	CreateDynamicObject(970, 378.70398, -2045.08789, 7.32180,   0.00000, 0.00000, -91.98001,-1,-1,-1,500.0);
	CreateDynamicObject(970, 378.51715, -2050.44434, 7.32180,   0.00000, 0.00000, -92.76000,-1,-1,-1,500.0);
	CreateDynamicObject(970, 352.48499, -2050.70313, 7.29520, 0.00000, 0.00000, 0.00000,-1,-1,-1,500.0);
	
	Timer = SetTimer("HalloweenEvent", 600000, true);
	return 1;
}

stock LoadTextdraws()
{
    Date = TextDrawCreate(577.613342, 8.711090, "--");
	TextDrawLetterSize(Date, 0.334332, 1.463110);
	TextDrawAlignment(Date, 2);
	TextDrawColor(Date, -1);
	TextDrawSetShadow(Date, 0);
	TextDrawSetOutline(Date, 1);
	TextDrawBackgroundColor(Date, 255);
	TextDrawFont(Date, 3);
	TextDrawSetProportional(Date, 1);

    Time = TextDrawCreate(578.226745, 21.570337, "--");
	TextDrawLetterSize(Time, 0.634799, 2.406399);
	TextDrawAlignment(Time, 2);
	TextDrawColor(Time, -1);
	TextDrawSetShadow(Time, 0);
	TextDrawSetOutline(Time, 1);
	TextDrawBackgroundColor(Time, 255);
	TextDrawFont(Time, 3);
	TextDrawSetProportional(Time, 1);
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
   new newcar = GetClosestVehicle2(playerid, 40);
   new veh = GetPlayerVehicleID(playerid);
   new engine,lights,alarm,doors,bonnet,boot,objective;
   if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
   if(newkeys & KEY_FIRE || newkeys & KEY_AIM)
   {
	   new weapon = GetPlayerWeapon(playerid),
           slot = GetWeaponSlot(weapon);
	   if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && WeaponData[playerid][slot] == false && slot != 0 && weapon != 46  && GetPlayerWeapon(playerid) != 9 && curatj[playerid] == 0)
       {
           ResetPlayerWeaponsEx(playerid);
           ResetPlayerWeapons(playerid);
		   new sendername[25],gunname[50],string[256];
		   GetWeaponNameEx(weapon,gunname,sizeof(gunname));
		   GetPlayerName(playerid, sendername, sizeof(sendername));
		   format(string, sizeof(string), "(N) %s (%d, level %d) may be using weapon hack, weapon created: %s.",sendername, playerid, PlayerInfo[playerid][pLevel], gunname);
		   ABroadCast(COLOR_RED,string,1);
		   return 1;
	   }
   }
   if(newkeys & KEY_FIRE) //Anti DM la spawn
   {
		if(!IsPlayerInAnyVehicle(playerid))
		{
			new wep = GetPlayerWeapon(playerid);
			if((wep > 0 && wep < 43) && IsPlayerInRangeOfPoint(playerid, 50,1799.3353,-1857.7065,13.4141) && !IsACop(playerid) && GetPlayerVirtualWorld(playerid) < 1)
			{
	    		SetPlayerArmedWeapon(playerid,0);
				SendClientMessage(playerid, COLOR_RED, "Nu poti folosi armele in zona spawn-ului. Poti petrece 30-90 minute in inchisoare pentru DM!");
			}
   		}
   }
   if(newkeys & KEY_WALK)
   {
		if(Spectate[playerid] != -1)
		{
			TogglePlayerControllable(playerid, 1);
			TogglePlayerSpectating(playerid, 0);
			SetPlayerInterior(playerid,Unspec[playerid][sPint]);
			PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
			PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
			Unspec[playerid][sLocal] = -1;
			gTeam[playerid] = PlayerInfo[playerid][pTeam];
			SetPlayerToTeamColor(playerid);
	        PlayerTextDrawHide(playerid, TextDrawSpec[playerid][1]);
		    PlayerTextDrawHide(playerid, TextDrawSpec[playerid][2]);
			PlayerTextDrawHide(playerid, TextDrawSpec[playerid][3]);
		    PlayerTextDrawHide(playerid, TextDrawSpec[playerid][4]);
		    PlayerTextDrawHide(playerid, TextDrawSpec[playerid][5]);
			Spectate[playerid] = -1;
		}
   }
   if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
   {
   		if(IsABoat(newcar))
		{
		    if(PlayerInfo[playerid][pBoatLic] < 1)
			{
                if(TakingLesson[playerid] == 2) { }
                else {
			    SendClientMessage(playerid,COLOR_GREY, "You don't have a boat license.");
			    ClearAnimations(playerid); }
			}
		}
		if(IsAPlane(newcar))
		{
		    if(PlayerInfo[playerid][pFlyLic] < 1)
			{
			    if(TakingLesson[playerid] == 2) { }
			    else {
			    SendClientMessage(playerid, COLOR_GREY, "You don't have a flying license.");
			    ClearAnimations(playerid); }
			}
		}
		if(GetVehicleModel(newcar) >= 400 && GetVehicleModel(newcar) <= 611)
		{
			if(PlayerInfo[playerid][pCarLic] < 1)
			{
			    if(IsABike(newcar) || IsAPlane(newcar) || GetVehicleModel(newcar) == 462) { }
			    else
			    {
					if(TakingLesson[playerid] == 1) { }
					else {
				 	SendClientMessage(playerid,COLOR_GREY, "You don't have a driving license.");
                    ClearAnimations(playerid);
				  }
				}
			}
		}
		for(new x = 0; x < sizeof(VehicleInfo); x++)
		{
			if(VehicleInfo[x][vehCarID] == newcar)
			{
				if(VehicleInfo[x][vehGroup] != 0 && VehicleInfo[x][vehGroup] != 30 && VehicleInfo[x][vehGroup] != 8 && VehicleInfo[x][vehGroup] != 2 && VehicleInfo[x][vehGroup] != 3 && VehicleInfo[x][vehGroup] != 1)
				{
					new strr[128];
					if(PlayerInfo[playerid][pMember] == VehicleInfo[x][vehGroup]) { }
					else
					{
						if(AdminDuty[playerid] == 1) { }
						else
						{
							ClearAnimations(playerid);
							format(strr,sizeof(strr),"This vehicle is locked to group %s.",DynamicFactions[VehicleInfo[x][vehGroup]][fName]);
							SendClientMessage(playerid, COLOR_WHITE, strr);
						}
					}
				}
				if(VehicleInfo[x][vehJob] != 0)
				{
					if(AdminDuty[playerid] != 1)
					{
						if(VehicleInfo[x][vehJob] == 5 && PlayerInfo[playerid][pJob] != 5)
						{
							ClearAnimations(playerid);
							SendClientMessage(playerid, COLOR_WHITE, "You need to be a pizza boy to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 6 && PlayerInfo[playerid][pJob] != 6)
						{
							ClearAnimations(playerid);
							SendClientMessage(playerid, COLOR_WHITE, "You need to be a farmer to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 7 && PlayerInfo[playerid][pJob] != 7)
						{
							ClearAnimations(playerid);
							SendClientMessage(playerid, COLOR_WHITE, "You need to be a bus driver to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 8 && PlayerInfo[playerid][pJob] != 8)
						{
							ClearAnimations(playerid);
							SendClientMessage(playerid, COLOR_WHITE, "You need to be a mechanic to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 10 && PlayerInfo[playerid][pJob] != 10)
						{
							ClearAnimations(playerid);
							SendClientMessage(playerid, COLOR_WHITE, "You need to be a garbage man to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 14 && PlayerInfo[playerid][pJob] != 14)
						{
							ClearAnimations(playerid);
							SendClientMessage(playerid, COLOR_WHITE, "You need to be a trucker to drive this car.");
						}
					}
				}
			}
		}
		if(IsACopCar(newcar))
		{
		    if(IsACop(playerid)) { }
		    else { ClearAnimations(playerid); SendClientMessage(playerid,COLOR_WHITE, "This vehicle is locked to group Los Santos Police Department."); }
		}
		if(IsAFbiCar(newcar))
		{
		    if(IsACop(playerid)) { }
		    else { ClearAnimations(playerid); SendClientMessage(playerid,COLOR_WHITE, "This vehicle is locked to group Federal Bureau of Investigations."); }
		}
		if(IsALVPDCar(newcar))
		{
		    if(IsACop(playerid)) { }
		    else { ClearAnimations(playerid); SendClientMessage(playerid,COLOR_WHITE, "This vehicle is locked to group Las Venturas Police Department."); }
		}
		if(IsANgCar(newcar))
		{
		    if(IsACop(playerid)) { }
		    else { ClearAnimations(playerid); SendClientMessage(playerid,COLOR_WHITE, "This vehicle is locked to group National Guard."); }
		}
		if(IsAFarmer(newcar))
		{
		    KillTimer(timerfarmm[playerid]);
		    if(AreFaina[playerid] != 0)
			{
			    SS(playerid, COLOR_YELLOW, "Vinde faina inainte de a munci din nou.", "Sell the flour before working again.");
			    ClearAnimations(playerid);
			}
			if(strcmp(PlayerInfo[playerid][pCrime1], "stealing a vehicle from the farm", false) == 0 || strcmp(PlayerInfo[playerid][pCrime2], "stealing a vehicle from the farm", false) == 0 || strcmp(PlayerInfo[playerid][pCrime3], "stealing a vehicle from the farm", false) == 0)
			{
				SS(playerid, COLOR_LIGHTGREEN3, "Nu poti munci aici pentru ca ai furat un vehicul de la ferma.", "You can't work here because you recently stole a vehicle from the farm.");
			    ClearAnimations(playerid);
			}
		}
   }
   if((IsACBUGWeapon(playerid) && RELEASED(KEY_FIRE)) && newkeys != KEY_FIRE && newkeys & KEY_CROUCH)
   {
       ApplyAnimation ( playerid , "PED" , "getup" , 4.1 , 0 , 0 , 0 , 0 , 0 ) ;
       SCM(playerid,COLOR_WHITE,"{AA3333}Pe serverul nostru este interzis c-bug, risti ban 3 zile.");
   }
   if ((newkeys==KEY_CTRL_BACK )&&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
	{
		new stringy[MAX_STRING],strings[500],listen[20];
		for(new x; x < 20; x++)
		{
			foreach(new i : Player)
			{
				if(Listening[i] == x) listen[x]++;
			}
		}
		format(strings, sizeof(strings), "Radio station\tListeners\n{FF2080}Turn Off Radio\t\nPro FM Romania\t%d\nRadio Bandit Romania\t%d\nRadio Taraf Romania\t%d\nRadio Hot Romania\t%d\nRadio Gangsta Dance\t%d\nRadio Gangsta Manele\t%d\n.977 Hitz\t%d\n",listen[0],listen[1],listen[2],listen[3],listen[4],listen[5],listen[6]);
		strcat(stringy, strings);
		format(strings, sizeof(strings), ".977 Mix\t%d\n.977 Alternative\t%d\nRadio BBC One UK\t%d\nDubstep.fm\t%d\nRadio Hit Romania\t%d\nRadio ClubMix Romania\t%d\nKiss FM Romania [Audio Plugin]\t%d\nRadio Zu Romania [Audio Plugin]\t%d\n",listen[7],listen[8],listen[9],listen[10],listen[11],listen[12],listen[13],listen[14]);
		strcat(stringy, strings);
		format(strings, sizeof(strings), "Radio Popular\t%d\nTrap.FM\t%d\nRadio Tequila Hip Hop\nYoutube Music/Custom URL\t%d",listen[15],listen[16],listen[17],listen[18]);
        strcat(stringy, strings);
		ShowPlayerDialog(playerid, DIALOG_RADIO, DIALOG_STYLE_TABLIST_HEADERS, "Vehicle Radio", stringy, "Play", "Cancel");
	}
   if (newkeys & KEY_YES)
    {
		if(GarbageTimer[playerid] == 0)
		{
			if(TrashID[playerid] != -1)
			{
				for(new x; x < sizeof(CHKGarbage); x++)
				{
					if(TrashID[playerid] == x)
					{
						if(IsPlayerInRangeOfPoint(playerid,2,CHKGarbage[x][0], CHKGarbage[x][1], CHKGarbage[x][2]))
						{
							SetPlayerAttachedObject(playerid, 3, 1265, 6, -0.083000, 0.326000, -0.324999, -115.199836, -26.500011, 3.699998, 0.729000, 0.830000, 0.915000);
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
							GarbageTimer[playerid] = 60;
							TrashID[playerid] = -1;
							GameTextForPlayer(playerid, "~w~press ~r~y~w~ behind the garbage vehicle.", 5000, 3);
						}
					}
				}
			}
		}
		else
		{
			new Float:rot,Float:x,Float:y,Float:z,strings[128];
			GetVehicleZAngle(JobCar[playerid], rot);
			rot = 360 - rot;
			GetVehiclePos(JobCar[playerid], x, y, z);
			x = floatsin(rot,degrees) * -4.0 + floatcos(rot,degrees) * 0.0 + x;
			y = floatcos(rot,degrees) * -4.0 - floatsin(rot,degrees) * 0.0 + y;
			z = 0.0 + z;
			if(IsPlayerInRangeOfPoint(playerid,2.0, x, y, z))
			{
				RemovePlayerAttachedObject(playerid, 3);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				GarbageTimer[playerid] = 0;
				new find,Float:distance,maxim;
				if(PlayerInfo[playerid][pGarbageSkill] == 1) maxim = 75;
				else if(PlayerInfo[playerid][pGarbageSkill] == 2) maxim = 125;
				else if(PlayerInfo[playerid][pGarbageSkill] == 3) maxim = 175;
				else if(PlayerInfo[playerid][pGarbageSkill] == 4) maxim = 250;
				else if(PlayerInfo[playerid][pGarbageSkill] == 5) maxim = 350;
				else if(PlayerInfo[playerid][pGarbageSkill] == 6) maxim = 500;
				if((GarbageInCar[JobCar[playerid]] + GarbageCollected[playerid]) >= maxim)
				{
					GarbageInCar[JobCar[playerid]] = maxim;
				}
				else
				{
					GarbageInCar[JobCar[playerid]] += GarbageCollected[playerid];
				}
				format(strings,sizeof(strings),"ai colectat %d kg de gunoi~n~~r~gunoi colectat in masina:~n~~g~%d/%d kg",GarbageCollected[playerid],GarbageInCar[JobCar[playerid]],maxim);
				GameTextForPlayer(playerid, strings, 5000, 3);
				for(new t; t < 1000; t++)
				{
					new rand = random(sizeof(CHKGarbage));
					if(!IsPlayerInRangeOfPoint(playerid,1000.0, CHKGarbage[rand][0], CHKGarbage[rand][1], CHKGarbage[rand][2])) find = 1;
					if(find == 1)
					{
						GetPlayerPos(playerid, x, y, z);
						distance = GetDistanceBetweenPoints(x, y, z, CHKGarbage[rand][0], CHKGarbage[rand][1], CHKGarbage[rand][2]);
						format(strings,sizeof(strings),"Mergi la checkpoint pentru a incepe colectarea gunoiului. Distanta: %.0fm.",distance);
						SendClientMessage(playerid, COLOR_YELLOW, strings);
						SetPlayerCheckpoint(playerid, CHKGarbage[rand][0],CHKGarbage[rand][1],CHKGarbage[rand][2], 2.0);
						if(floatround(distance, floatround_round) >= 1000 && floatround(distance, floatround_round) <= 1500) GarbageCollected[playerid] = 5 + random(5);
						else if(floatround(distance, floatround_round) >= 1501 && floatround(distance, floatround_round) <= 2000) GarbageCollected[playerid] = 7 + random(5);
						else if(floatround(distance, floatround_round) >= 2001 && floatround(distance, floatround_round) <= 2500) GarbageCollected[playerid] = 9 + random(5);
						else if(floatround(distance, floatround_round) >= 2501 && floatround(distance, floatround_round) <= 3000) GarbageCollected[playerid] = 11 + random(5);
						else if(floatround(distance, floatround_round) >= 3001) GarbageCollected[playerid] = 14 + random(5);
						CP[playerid] = 10972;
						TrashID[playerid] = rand;
						break;
					}
				}
			}
			else
			{
				format(strings,sizeof(strings),"Nu esti in spatele masinii tale de gunoi (id %d).",JobCar[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, strings);
			}
		}
	}
   if (newkeys & KEY_NO)
   {
		new string[128];
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
   			if(CheckPlayerDistanceToVehicle(5.0, playerid, PlayerInfo[playerid][pCarID][v]))
			{
	 			if(PlayerInfo[playerid][pCarLock][v] == 1)
		  		{
   					GetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
	  	    		SetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,0,bonnet,boot,objective);
					format(string, sizeof(string), "~h~%s~n~~g~Unlocked",aVehicleNames[PlayerInfo[playerid][pCarModel][v] - 400]);
					GameTextForPlayer(playerid, string, 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCarLock][v] = 0;
					gCarLock[PlayerInfo[playerid][pCarID][v]] = 0;
					cUpdate(playerid, v, cLockx);
					return 1;
				}
				else
				{
 					GetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
	    			SetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,1,bonnet,boot,objective);
					SetVehicleParamsForPlayer(PlayerInfo[playerid][pCarID][v],playerid,0,0);
					format(string, sizeof(string), "~h~%s~n~~r~Locked",aVehicleNames[PlayerInfo[playerid][pCarModel][v] - 400]);
					GameTextForPlayer(playerid, string, 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCarLock][v] = 1;
					gCarLock[PlayerInfo[playerid][pCarID][v]] = 1;
					cUpdate(playerid, v, cLockx);
     				return 1;
				}
			}
			else if(CheckPlayerDistanceToVehicle(5.0, playerid, HireCar[playerid]))
			{
				new carid = HireCar[playerid];
				if(gCarLock[carid] == 0)
		        {
			        new vehicles = GetVehicleModel(carid) - 400;
				    format(string, sizeof(string), "~h~%s~n~~r~Locked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 5000, 3);
		  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 1;
	    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
		            return 1;
			    }
				else if(gCarLock[carid] == 1)
				{
					new vehicles = GetVehicleModel(carid) - 400;
					format(string, sizeof(string), "~h~%s~n~~g~Unlocked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 0;
	    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,0,bonnet,boot,objective);
		            return 1;
				}
			}
			else if(CheckPlayerDistanceToVehicle(5.0, playerid, RentCar[playerid]))
			{
				new carid = RentCar[playerid];
				if(gCarLock[carid] == 0)
		        {
				    GameTextForPlayer(playerid, "~h~rentcar~n~~r~locked", 5000, 3);
		  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 1;
	    			GetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
		            return 1;
			    }
				else if(gCarLock[carid] == 1)
				{
				    GameTextForPlayer(playerid, "~h~rentcar~n~~g~unlocked", 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 0;
	    			GetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,0,bonnet,boot,objective);
		            return 1;
				}
			}
			else if(CheckPlayerDistanceToVehicle(5.0, playerid, JobCar[playerid]))
			{
				new carid = JobCar[playerid];
				if(gCarLock[carid] == 0)
		        {
			        new vehicles = GetVehicleModel(carid) - 400;
				    format(string, sizeof(string), "~h~%s~n~~r~Locked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 5000, 3);
		  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 1;
	    			GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(carid,engine,lights,alarm,1,bonnet,boot,objective);
		            return 1;
			    }
				else if(gCarLock[carid] == 1)
				{
					new vehicles = GetVehicleModel(carid) - 400;
					format(string, sizeof(string), "~h~%s~n~~g~Unlocked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 0;
	    			GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(carid,engine,lights,alarm,0,bonnet,boot,objective);
		            return 1;
				}
			}
		}
	}
   if (newkeys & KEY_HANDBRAKE)
   {
       if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && PlayerInfo[playerid][pAdmin] < 1)
	   {
		   new string[256];
		   format(string, sizeof(string), "(N) %s (%d, level %d) created a jetpack.",GetName(playerid),playerid,PlayerInfo[playerid][pLevel]);
		   ABroadCast(COLOR_RED,string,1);
	   }
   }
   if (newkeys & KEY_CROUCH)
   {
       if(IsACop(playerid))
       {
		   if(PlayerToPoint(15.0, playerid,1588.6552, -1637.9025, 15.0358))
           {
               MoveObject(gatelspd,1592.65674, -1638.05286, 9.89110,2, -1000.0, -1000.0, -1000.0);
               SetTimer("lspdgateclose" ,9000 ,false);
               return 1;
           }
           if(PlayerToPoint(15.0, playerid,2334.8999000, 2444.3999000, 8.3000000))
           {
               MoveDynamicObject(gatelvpd, 2335.89282, 2444.87451, 2.01770,2, -1000.0, -1000.0, -1000.0);
               SetTimer("lvpdgateclose" ,9000 ,false);
               return 1;
           }
           if(PlayerToPoint(15.0, playerid,2295.3000000, 2507.0000000, 5.7000000))
           {
               MoveDynamicObject(gatelvpd2, 2294.02222, 2503.16650, -0.27200,2, -1000.0, -1000.0, -1000.0);
               SetTimer("lvpdgateclose2" ,9000 ,false);
               return 1;
           }
		   if(PlayerToPoint(15.0, playerid,135.2833, 1941.3331, 21.6932))
           {
               MoveDynamicObject(gateng,122.0023, 1941.4100, 21.6932,2, -1000.0, -1000.0, -1000.0);
               SetTimer("nggateclose" ,9000 ,false);
               return 1;
           }
		   if(PlayerToPoint(15.0, playerid,1544.7007, -1630.7527, 13.2983))
           {
               MoveDynamicObject(lspdbar,1544.7007, -1630.7527, 13.2983,1,0.0000, 0.0000, 90.0000);
               SetTimer("lspdbarclose" ,9000 ,false);
               return 1;
           }
           if(PlayerToPoint(15.0, playerid,2238.22021, 2450.44312, 10.58781))
           {
               MoveDynamicObject(lvpdbar,2238.22021, 2450.44312, 10.58781,1,0.0000, 0.0000, 90.0000);
               SetTimer("lvpdbarclose" ,9000 ,false);
               return 1;
           }
	   }
   }
   if(newkeys == KEY_LOOK_BEHIND)
   {
	   if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	   {
		   new idcar = GetPlayerVehicleID(playerid),string[128],sendername[25];
		   if(IsABike(idcar)) return SS(playerid, COLOR_LIGHTGREEN3, "Nu poti folosi comanda /engine pentru biciclete.", "You can't do that for bikes!");
		   if(Refueling[playerid] == 0)
	  	   {
     	       if(vehEngine[idcar] == 0)
        	   {
				   vehEngine[idcar] = 1;
	               GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
	               SetVehicleParamsEx(idcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	               new vehicle;
	               vehicle = GetVehicleModel(idcar) - 400;
	    		   GetPlayerName(playerid, sendername, sizeof(sendername));
	               SetPVarInt(playerid, "Engine", 1);
	               if(Undercover[playerid] != 0)
	               {
	                   format(string,sizeof(string),"* An unknown hitman starts the engine of his %s.",aVehicleNames[vehicle]);
		               ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	               }
	               else
	               {
		               format(string,sizeof(string),"* %s starts the engine of his %s.",sendername,aVehicleNames[vehicle]);
		               ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				   }
        	   }
      	  	   else if(vehEngine[idcar] == 1)
        	   {
    			   vehEngine[idcar] = 0;
    			   GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
      	    	   SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
            	   new vehicle;
            	   vehicle = GetVehicleModel(idcar) - 400;
	        	   GetPlayerName(playerid, sendername, sizeof(sendername));
            	   SetPVarInt(playerid, "Engine", 0);
            	   if(Undercover[playerid] != 0)
            	   {
	                   format(string,sizeof(string),"* An unknown hitman stops the engine of his %s.",aVehicleNames[vehicle]);
	            	   ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	   }
            	   else
            	   {
	            	   format(string,sizeof(string),"* %s stops the engine of his %s.",sendername,aVehicleNames[vehicle]);
	            	   ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				   }
        	   }
	       }
		   else return SendClientMessage(playerid,COLOR_WHITE,"{999999}Please wait, you refill your vehicle.");
	   }
   }
   if (newkeys & KEY_SPRINT)
   {
       if(gPlayerUsingLoopingAnim[playerid] == 1)
       {
	       StopLoopingAnim(playerid);
       }
       if(Spectate[playerid] != -1)
       {
	       new onlineid[MAX_PLAYERS],totalplayers,string[256];
	       foreach(new i : Player)
	       {
	       		if(Spectate[i] != -1 || TutTime[i] > 0 || CanSpectate[i] == 0) continue;
	       		onlineid[totalplayers] = i;
	       		totalplayers++;
	       }
	       if(totalplayers > 0)
	       {
		       new specid = onlineid[random(totalplayers)];
		       Spectate[playerid] = specid;
		       new Float:health,country[50],sendername[30],giveplayer[30];
			   GetPlayerHealth(specid, health);
			   GetPlayerName(specid, giveplayer, sizeof(giveplayer));
			   GetPlayerName(playerid, sendername, sizeof(sendername));
			   GetPlayerCountry(specid, country, sizeof(country));
			   format(string, sizeof(string), "(%d) %s | Level: %d | Health: %.0f | AFK: %d | Duty: %d | Country: %s | Ping: %d",specid,giveplayer,PlayerInfo[specid][pLevel],health,IsPlayerAFK[specid],OnDuty[specid],country,GetPlayerPing(specid));
			   SendSplitMessage(playerid, COLOR_DARKPINK, string);
		   	   TogglePlayerSpectating(playerid, 1);
		   	   if(IsPlayerInAnyVehicle(specid))
			   {
				    new carid = GetPlayerVehicleID(specid);
				    PlayerSpectateVehicle(playerid, carid);
					SpectateState[specid] = 2;
			   }
			   else
			   {
				    PlayerSpectatePlayer(playerid, specid);
					SpectateState[specid] = 1;
			   }
			   PlayerTextDrawSetString(playerid, TextDrawSpec[playerid][1], "LOADING...");
			   PlayerTextDrawShow(playerid, TextDrawSpec[playerid][1]);
		   }
		}
   }
   if (newkeys & KEY_ANALOG_DOWN)
   {
      if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
      {
         if(GetPVarInt(playerid, "Boot") == 0)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
			 SetPVarInt(playerid, "Boot", 1);
         }
         else if(GetPVarInt(playerid, "Boot") == 1)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
			 SetPVarInt(playerid, "Boot", 0);
         }
      }
      return 1;
   }
   if (newkeys & KEY_ACTION)
   {
	  if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
      {
         if(GetPVarInt(playerid, "Lights") == 0)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
			 SetPVarInt(playerid, "Lights", 1);
         }
         else if(GetPVarInt(playerid, "Lights") == 1)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
			 SetPVarInt(playerid, "Lights", 0);
         }
      }
      return 1;
   }
   if (newkeys & KEY_ANALOG_UP)
   {
      if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
      {
         if(GetPVarInt(playerid, "Bonnet") == 0)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
			 SetPVarInt(playerid, "Bonnet", 1);
         }
         else if(GetPVarInt(playerid, "Bonnet") == 1)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
			 SetPVarInt(playerid, "Bonnet", 0);
         }
      }
      return 1;
   }
   if (newkeys & KEY_SECONDARY_ATTACK)
   {
	   new string[300];
	   if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	   {
		   if(IsPlayerConnected(playerid))
		   {
			   if(flymode[playerid] == 1)
			   {
					flymode[playerid] = 0;
					SendClientMessage(playerid, COLOR_DARKPINK, "Fly mode off.");
					StopFly(playerid);
					SetPlayerHealthEx(playerid, 100);
			   }
			   if(BusinessRob[playerid] == 3) return SendClientMessage(playerid, COLOR_ROB, "Trebuie sa astepti 10 secunde pentru a jefui business-ul.");
			   for(new i = 1; i < sizeof(HouseInfo); i++)
			   {
				   if(IsPlayerInRangeOfPoint(playerid,2,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) && GetPlayerVirtualWorld(playerid) == 0)
				   {
					   if(PlayerInfo[playerid][pPhousekey] == i || HouseInfo[i][hLock] == 0)
					   {
						   SetPlayerInterior(playerid,HouseInfo[i][hInterior]);
						   SetPlayerPosEx(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
						   PlayerInfo[playerid][pInt] = HouseInfo[i][hInterior];
						   PlayerInfo[playerid][pLocal] = i;
						   SetPlayerVirtualWorld(playerid,HouseInfo[i][hVirtual]);
						   InHouse[playerid] = i;
						   if(strlen(housestring[InHouse[playerid]]) > 0)
						   {
			   			       StopAudioStreamForPlayer(playerid);
	    				       PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
						   }
					   }
					   else
					   {
						   SendClientMessage(playerid, COLOR_GREY, "This house is locked.");
						   if(IsACop(playerid))
						   {
						   		BreachID[playerid] = i;
			            		ShowPlayerDialog(playerid, DIALOG_RAMHOUSE, DIALOG_STYLE_MSGBOX, "SERVER: Housing", "This house is locked.\nAs a law enforcement officer, you can breach this door and enter. Would you like to do so?", "Yes", "No");
						   }
						   if(PlayerInfo[playerid][pMember] == 11)
						   {
						   		BreachID[playerid] = i;
			            		ShowPlayerDialog(playerid, DIALOG_RAMHOUSE, DIALOG_STYLE_MSGBOX, "SERVER: Housing", "This house is locked.\nAs a hitman, you can breach this door and enter. Would you like to do so?", "Yes", "No");
						   }
					   }
				   }
			   }
			   for(new i = 1; i < sizeof(BizzInfo); i++)
			   {
				   if (IsPlayerInRangeOfPoint(playerid,2,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) && GetPlayerVirtualWorld(playerid) == 0)
				   {
					   if(BizzInfo[i][bSbiz] != 0) return 0;
					   if(GetPlayerCash(playerid) >= BizzInfo[i][bEntranceCost])
					   {
						   if(BizzInfo[i][bLocked] == 1)
						   {
							   SendClientMessage(playerid, COLOR_GREY, "This business is locked.");
							   if(IsACop(playerid))
							   {
							   		BreachID[playerid] = i;
				            		ShowPlayerDialog(playerid, DIALOG_RAMBIZ, DIALOG_STYLE_MSGBOX, "SERVER: Businesses", "This business is locked.\nAs a law enforcement officer, you can breach this door and enter. Would you like to do so?", "Yes", "No");
							   }
							   if(PlayerInfo[playerid][pMember] == 11)
							   {
							   		BreachID[playerid] = i;
				            		ShowPlayerDialog(playerid, DIALOG_RAMBIZ, DIALOG_STYLE_MSGBOX, "SERVER: Businesses", "This business is locked.\nAs a hitman, you can breach this door and enter. Would you like to do so?", "Yes", "No");
							   }
							   return 1;
						   }
						   if(LastBiz[playerid] != i)
						   {
							   GivePlayerCash(playerid,-BizzInfo[i][bEntranceCost]);
							   BizzInfo[i][bTill] += BizzInfo[i][bEntranceCost];
							   format(string,sizeof(string),"~r~-$%d",BizzInfo[i][bEntranceCost]);
							   GameTextForPlayer(playerid, string, 5000, 1);
							   LastBizTime[playerid] = 60;
						   }
						   else
						   {
							   GameTextForPlayer(playerid, "welcome back", 5000, 1);
						   }
						   LastBiz[playerid] = i;
						   if(BizzInfo[i][bType] == 3)
						   {
							   if(strlen(barstring[i][playerid]) > 0)
							   {
									StopAudioStreamForPlayer(playerid);
									PlayAudioStreamForPlayer(playerid, barstring[i]);
							   }
						   }
						   if(BizzInfo[i][bType] == 1)
						   {
                               SS(playerid,COLOR_GREEN3,"Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in getting your account permabanned.");
                               SS(playerid,COLOR_GREEN3,"Imprumuturile de orice fel (inclusiv datoriile) se fac pe proprie raspundere. Nu ai nicio garantie ca ii vei recupera.", "Keep in mind that if you loan money to other players, you have no guarantee that you'll receive them back.");
                               SS(playerid,COLOR_GREEN3,"Afacerile cu bani reali nu sunt permise. Se pedepseste cu ban 7-14 zile la prima abatere si ban permanent la urmatoarea abatere.", "Selling in-game goods/money for real money/goods is not allowed.");
					           SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /deposit, /withdraw, /balance, /transfer");
						   }
						   else if(BizzInfo[i][bType] == 2)
						   {
					           SCM(playerid,COLOR_WHITE,"Welcome to the gun shop! The commands of this business are as follows: /buygun");
						   }
						   else if(BizzInfo[i][bType] == 3)
						   {
					           SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buydrink");
						   }
						   else if(BizzInfo[i][bType] == 4)
						   {
					           SCM(playerid,COLOR_WHITE,"Welcome to the sex shop! The commands of this business are as follows: /buytoys");
						   }
						   else if(BizzInfo[i][bType] == 5)
						   {
					           SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /dice | /blackjack");
						   }
						   else if(BizzInfo[i][bType] == 6)
						   {
								SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buy");
								if(PlayerInfo[playerid][pFishPrice] != 0)
								{
									ShowPlayerDialog(playerid, DIALOG_SELLFISH, DIALOG_STYLE_MSGBOX, "Sell fish", "Do you want to sell the fish you are carying?", "Yes", "No");
								}
						   }
						   else if(BizzInfo[i][bType] == 7 || BizzInfo[i][bType] == 14)
						   {
					           SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyfood");
							   if(AreFaina[playerid] > 0)
						        {
						        	new money,faina = AreFaina[playerid];
		       						if(SvarInfo[2][svValue] == 0) money = faina * 1000 + random(5000);
		       						else money = faina * 1200 + random(5000);
									PlayerInfo[playerid][pFarmTimes]++;
									PlayerInfo[playerid][pFarmRem]--;
									if(PlayerInfo[playerid][pQuest2] == 5)
									{
										if(PlayerInfo[playerid][pQuestNeed2] > PlayerInfo[playerid][pQuestProgress2])
										{
											PlayerInfo[playerid][pQuestProgress2] += faina;
											Update(playerid, pQuestProgress2x);
											if(PlayerInfo[playerid][pQuestProgress2] >= PlayerInfo[playerid][pQuestNeed2])
											{
												FinishQuest2(playerid, 5);
											}
											else
											{
												new str[128];
												if(PlayerInfo[playerid][pLanguage] == 1)
												{
													format(str, sizeof(str),"Quest [Sell %d KG of flour] progress: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
													SendClientMessage(playerid, COLOR_YELLOW, str);
												}
												else
												{
													format(str, sizeof(str),"Progres pentru misiunea [Vinde %d KG de faina]: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
													SendClientMessage(playerid, COLOR_YELLOW, str);
												}
											}
										}
									}
									AreFaina[playerid] = 0;
									GivePlayerCash(playerid, money);
									Update(playerid, pCashx);
									Update(playerid, pFarmTimesx);
									Update(playerid, pFarmRemx);
									new stringe[128];
									if(PlayerInfo[playerid][pFarmSkill] <= 5)
									{
										if(PlayerInfo[playerid][pFarmRem] <= 0)
										{
			    							PlayerInfo[playerid][pFarmSkill]++;
			    							if(PlayerInfo[playerid][pFarmSkill] == 2)
											{
												PlayerInfo[playerid][pFarmRem] = 34;
											}
											else if(PlayerInfo[playerid][pFarmSkill] == 3)
											{
												PlayerInfo[playerid][pFarmRem] = 49;
											}
											else if(PlayerInfo[playerid][pFarmSkill] == 4)
											{
												PlayerInfo[playerid][pFarmRem] = 89;
											}
											else if(PlayerInfo[playerid][pFarmSkill] == 5)
											{
												PlayerInfo[playerid][pFarmRem] = 99;
											}
		    								Update(playerid,pFarmSkillx);
		    								Update(playerid,pFarmRemx);
			    							format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pFarmSkill]);
											format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pFarmSkill]);
			    							SS(playerid, COLOR_YELLOW, string, stringe);
										}
									}
									format(string,sizeof(string),"(+) Ai vandut un sac de faina pentru $%s.", FormatNumber(money));
									format(stringe,sizeof(stringe),"(+) You sold a bag of flour for $%s.", FormatNumber(money));
									SS(playerid, COLOR_GREEN, string, stringe);
								}
						   }
						   else if(BizzInfo[i][bType] == 8)
						   {
					           SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyfightstyle");
						   }
						   else if(BizzInfo[i][bType] == 9)
						   {
					           SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyfood");
						   }
						   else if(BizzInfo[i][bType] == 11)
						   {
					           SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyglasses ($5000), /clothes, /buyhat ($5000)");
						   }
						   SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
						   SetPlayerPosEx(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
						   PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior];
						   PlayerInfo[playerid][pLocal] = i+99;
	                       SetPlayerVirtualWorld(playerid,BizzInfo[i][bVirtual]);
						   InBussines[playerid] = i;
						   Update(playerid, pCashx);
			               new str1[184];
						   mysql_format(SQL,str1,sizeof(str1),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[i][bTill],i);
						   mysql_tquery(SQL,str1,"","");
					   }
					   else
					   {
						   GameTextForPlayer(playerid, "you don't have enough money", 5000, 1);
					   }
				   }
			   }
			   // Sistem dinamic HQ
		   	   for(new fid; fid < sizeof(DynamicFactions); fid++)
		   	   {
				   if(IsPlayerInRangeOfPoint(playerid, 2, DynamicFactions[fid][fceX], DynamicFactions[fid][fceY], DynamicFactions[fid][fceZ]) && GetPlayerVirtualWorld(playerid) == 0)
				   {
				   		if(DynamicFactions[fid][fLocked] == 1 && PlayerInfo[playerid][pMember] == fid)
				   		{
					   		SetPlayerPosEx(playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]);
			                SetPlayerInterior(playerid, DynamicFactions[fid][fInterior]);
			                SetPlayerVirtualWorld(playerid, DynamicFactions[fid][fVirtual]);
			                InHQ[playerid] = fid;
			            }
			            else if(DynamicFactions[fid][fLocked] == 0)
			            {
			            	SetPlayerPosEx(playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]);
			                SetPlayerInterior(playerid, DynamicFactions[fid][fInterior]);
			                SetPlayerVirtualWorld(playerid, DynamicFactions[fid][fVirtual]);
			                InHQ[playerid] = fid;
			            }
			            else
			            {
			            	SendClientMessage(playerid, COLOR_GREY, "This HQ is locked.");
			            	if(IsACop(playerid))
			            	{
			            		BreachID[playerid] = fid;
			            		ShowPlayerDialog(playerid, DIALOG_RAMHQ, DIALOG_STYLE_MSGBOX, "SERVER: Group HQ", "This Group HQ is locked.\nAs a law enforcement officer, you can breach this door and enter. Would you like to do so?", "Yes", "No");
			            	}
			            	if(PlayerInfo[playerid][pMember] == 11)
			            	{
			            		BreachID[playerid] = fid;
			            		ShowPlayerDialog(playerid, DIALOG_RAMHQ, DIALOG_STYLE_MSGBOX, "SERVER: Group HQ", "This Group HQ is locked.\nAs a hitman, you can breach this door and enter. Would you like to do so?", "Yes", "No");
			            	}
			            }
				   }
			   }
			   for(new fid; fid < sizeof(DynamicFactions); fid++)
		   	   {
			   	   if(IsPlayerInRangeOfPoint(playerid, 2, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]) && GetPlayerVirtualWorld(playerid) == DynamicFactions[fid][fVirtual])
				   {
				   		SetPlayerPosEx(playerid, DynamicFactions[fid][fceX], DynamicFactions[fid][fceY], DynamicFactions[fid][fceZ]);
					    SetPlayerInterior(playerid, 0);
					    PlayerInfo[playerid][pInt] = 0;
					    SetPlayerVirtualWorld(playerid, 0);
					    InHQ[playerid] = -1;
					    if(IsAMember(playerid))
					    {
					    	if(InWar[PlayerInfo[playerid][pMember]] == 1)
					    	{
					    		SetPlayerVirtualWorld(playerid, 1024);
					    	}
					    }
				   }
			   }
			   // Sistem dinamic HQ
			   if(IsPlayerInRangeOfPoint(playerid,2,1584.8812, 1797.7262, 10.8280) && PlayerInfo[playerid][pMember] == 14) // paramedic elevator
			   {
				   SetPlayerPosEx(playerid, 1585.8629, 1793.7830, 30.4688);
			   }
			   if(IsPlayerInRangeOfPoint(playerid,2,1585.8629, 1793.7830, 30.4688) && PlayerInfo[playerid][pMember] == 14) // paramedic elevator
			   {
				   SetPlayerPosEx(playerid, 1584.8812, 1797.7262, 10.8280);
			   }
			   if(IsPlayerInRangeOfPoint(playerid,2,611.1835, -585.6877, 17.2266) && IsACop(playerid)) // fbi elevator
			   {
				   SetPlayerPosEx(playerid, 618.1414,-566.7900,26.1432);
			   }
			   if(IsPlayerInRangeOfPoint(playerid,2,618.1414,-566.7900,26.1432) && IsACop(playerid)) // fbi elevator
			   {
				   SetPlayerPosEx(playerid, 611.1835, -585.6877, 17.2266);
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,1,1552.5898,-1683.4698,13.5504) && Vending[playerid] == 0 && GetPlayerVirtualWorld(playerid) == 0) // dozator
			   {
			      	if(GetPlayerCash(playerid) < 200) return 1;
					new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					SetPlayerPos(playerid, 1552.8281,-1683.4645,13.5500);
           			SetPlayerFacingAngle(playerid, 272.63);
        			ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);
           			PlayerPlaySound(playerid, 42600, 0.0, 0.0, 0.0);
              		GameTextForPlayer(playerid, "~r~-200$", 5000, 1);
                	GivePlayerCash(playerid, -200);
					Update(playerid,pCashx);
					Vending[playerid] = 1;
					vendi[playerid] = SetTimerEx("Vendingg", 6000, 0, "i", playerid);
					vendi2[playerid] = SetTimerEx("Vendingg2", 2300, 0, "i", playerid);
					format(string, sizeof(string), "* %s bought a drink from vending machine.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,1,2273.5654,2428.7834,10.8203) && Vending[playerid] == 0) // dozator
			   {
					if(GetPlayerCash(playerid) < 200) return 1;
					new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					SetPlayerPos(playerid, 2273.5645,2428.7981,10.8203);
					SetPlayerFacingAngle(playerid, 3.20);
        			ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);
           			PlayerPlaySound(playerid, 42600, 0.0, 0.0, 0.0);
              		GameTextForPlayer(playerid, "~r~-200$", 5000, 1);
                	GivePlayerCash(playerid, -200);
					Update(playerid,pCashx);
					Vending[playerid] = 1;
					vendi[playerid] = SetTimerEx("Vendingg", 6000, 0, "i", playerid);
					vendi2[playerid] = SetTimerEx("Vendingg2", 2300, 0, "i", playerid);
					format(string, sizeof(string), "* %s bought a drink from vending machine.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,1,495.9684,-23.5361,1000.6797) && Vending[playerid] == 0) // dozator
			   {
					if(GetPlayerCash(playerid) < 200) return 1;
					new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					SetPlayerPos(playerid, 495.9684,-23.5361,1000.6797);
					SetPlayerFacingAngle(playerid, 182.5);
        			ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);
           			PlayerPlaySound(playerid, 42600, 0.0, 0.0, 0.0);
              		GameTextForPlayer(playerid, "~r~-200$", 5000, 1);
                	GivePlayerCash(playerid, -200);
					Update(playerid,pCashx);
					Vending[playerid] = 1;
					vendi[playerid] = SetTimerEx("Vendingg", 6000, 0, "i", playerid);
					vendi2[playerid] = SetTimerEx("Vendingg2", 2300, 0, "i", playerid);
					format(string, sizeof(string), "* %s bought a drink from vending machine.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,1,316.0904,-140.3487,999.6016) && Vending[playerid] == 0) // dozator
			   {
					if(GetPlayerCash(playerid) < 200) return 1;
					new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					SetPlayerPos(playerid, 316.0904,-140.3487,999.6016);
					SetPlayerFacingAngle(playerid, 269.10);
        			ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
           			PlayerPlaySound(playerid, 42601, 0.0, 0.0, 0.0);
              		GameTextForPlayer(playerid, "~r~-200$", 5000, 1);
                	GivePlayerCash(playerid, -200);
					Update(playerid,pCashx);
					Vending[playerid] = 1;
					vendi[playerid] = SetTimerEx("Vendingg", 6000, 0, "i", playerid);
					vendi2[playerid] = SetTimerEx("Vendingg2", 2300, 0, "i", playerid);
					format(string, sizeof(string), "* %s bought a drink from vending machine.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,1090.7542,-1476.3380,22.7465)) //tatto
			   {
			       SetPlayerInterior(playerid,16);
				   SetPlayerPosEx(playerid,-204.439987,-26.453998,1002.273437);
				   GameTextForPlayer(playerid, "~r~Tatto", 5000, 1);
				   PlayerInfo[playerid][pInt] = 16;
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,1765.1732,-1569.0253,1742.4930)) // enter visit
			   {
				   SetPlayerPosEx(playerid,1764.3419,-1567.7599,1742.4967);
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,2139.2612,-1697.9432,15.0784)) // drugs house
			   {
	               SetPlayerInterior(playerid,5);
				   SetPlayerPosEx(playerid,318.5867,1115.4735,1083.8828);
				   PlayerInfo[playerid][pInt] = 5;
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,2307.2935,-1786.0671,13.5557)) // b'dub house
			   {
			       SetPlayerInterior(playerid,3);
				   SetPlayerPosEx(playerid,1527.229980,-11.574499,1002.097106);
			       GameTextForPlayer(playerid, "~w~B'Dub House", 5000, 1);
				   PlayerInfo[playerid][pInt] = 3;
			   }
			   else if (IsPlayerInRangeOfPoint(playerid,2,242.8626,66.2978,1003.6406) && GetPlayerVirtualWorld(playerid) == 0) // lspd armoury
			   {
	               if (!IsACop(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You are not a cop.");
	               {
			           SetPlayerInterior(playerid,3);
			           SetPlayerVirtualWorld(playerid,333);
			    	   SetPlayerPosEx(playerid,288.8405,167.7809,1007.1719);
			    	   PlayerInfo[playerid][pInt] = 3;
			    	   InHQ[playerid] = 1;
		    	   }
		       }
		       else if (IsPlayerInRangeOfPoint(playerid,2,242.8626,66.2978,1003.6406) && GetPlayerVirtualWorld(playerid) == 3) // lvpd armoury
			   {
	               if (!IsACop(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You are not a cop.");
	               {
			           SetPlayerInterior(playerid,3);
			           SetPlayerVirtualWorld(playerid,343);
			    	   SetPlayerPosEx(playerid,288.8405,167.7809,1007.1719);
			    	   PlayerInfo[playerid][pInt] = 3;
			    	   InHQ[playerid] = 1;
		    	   }
		       }
			   else if (IsPlayerInRangeOfPoint(playerid,2,1510.3986,-1059.5723,25.0625))
			   {
				   if(areape == 1)
				   {
				       SetPlayerInterior(playerid,15);
					   SetPlayerPosEx(playerid,-1423.5153,935.8321,1036.4756);
					   PlayerInfo[playerid][pInt] = 15;
				   }
				   else return SCM(playerid,COLOR_WHITE,"Event area is closed.");
			   }
		   }
		   for(new i = 1; i <  sizeof(HouseInfo); i++)
		   {
			   if (PlayerToPoint(2, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]) && HouseInfo[i][hVirtual] == GetPlayerVirtualWorld(playerid))
		       {
				   SetPlayerVirtualWorld(playerid,0);
				   SetPlayerInterior(playerid,0);
				   SetPlayerPosEx(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
				   PlayerInfo[playerid][pInt] = 0;
				   PlayerInfo[playerid][pLocal] = 255;
				   InHouse[playerid] = -1;
				   StopAudioStreamForPlayer(playerid);
			   }
		   }
		   for(new i = 1; i <  sizeof(BizzInfo); i++)
		   {
			   if (PlayerToPoint(2, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]) && BizzInfo[i][bVirtual]==GetPlayerVirtualWorld(playerid) && BizzInfo[i][bSbiz] == 0)
			   {
				   SetPlayerInterior(playerid,0);
				   PlayerInfo[playerid][pInt] = 0;
				   SetPlayerPosEx(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
				   PlayerInfo[playerid][pLocal] = 255;
	               SetPlayerVirtualWorld(playerid,0);
	               InBussines[playerid] = -1;
				   StopAudioStreamForPlayer(playerid);
			   }
		   }
		   if (IsPlayerInRangeOfPoint(playerid,2,1756.4181,-1577.8954,1742.5309) && PlayerInfo[playerid][pJailed] == 0)//jail
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1798.5801,-1578.1804,14.0827);
			   PlayerInfo[playerid][pInt] = 0;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,1764.3419,-1567.7599,1742.4967)) // exit visit
		   {
			   SetPlayerPosEx(playerid,1765.1732,-1569.0253,1742.4930);
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,626.3122,-11.8606,1000.9219) && GetPlayerVirtualWorld(playerid) == 10) //tow
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,918.6766,-1252.2185,16.2109);
			   PlayerInfo[playerid][pInt] = 0;
			   SetPlayerVirtualWorld(playerid, 0);
			   InHQ[playerid] = -1;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,318.5867,1115.4735,1083.8828)) // drugs house
		   {
	           SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,2139.2612,-1697.9432,15.0784);
			   PlayerInfo[playerid][pInt] = 0;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,-204.439987,-26.453998,1002.273437))
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1090.7542,-1476.3380,22.7465);
			   PlayerInfo[playerid][pInt] = 0;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,1527.229980,-11.574499,1002.097106))
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,2307.2935,-1786.0671,13.5557);
			   PlayerInfo[playerid][pInt] = 0;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,288.8405,167.7809,1007.1719) && GetPlayerVirtualWorld(playerid) == 333) // LSPD Armoury
		   {
			   SetPlayerInterior(playerid,6);
			   SetPlayerVirtualWorld(playerid,0);
			   SetPlayerPosEx(playerid,242.8626,66.2978,1003.6406);
			   PlayerInfo[playerid][pInt] = 6;
			   PlayerInfo[playerid][pLocal] = 0;
			   InHQ[playerid] = -1;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,288.8405,167.7809,1007.1719) && GetPlayerVirtualWorld(playerid) == 343) // LVPD Armoury
		   {
			   SetPlayerInterior(playerid,6);
			   SetPlayerVirtualWorld(playerid,3);
			   SetPlayerPosEx(playerid,242.8626,66.2978,1003.6406);
			   PlayerInfo[playerid][pInt] = 6;
			   PlayerInfo[playerid][pLocal] = 0;
			   InHQ[playerid] = -1;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,1,304.5868,-141.9874,1004.0625))//gunshopusa
		   {
			   SetPlayerPosEx(playerid,305.7950,-141.8203,1004.0547);
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,1,298.8386,-141.9191,1004.0547))//gunshopusa
		   {
			   SetPlayerPosEx(playerid,300.1631,-141.8074,1004.0625);
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,1262.1383,-785.3315,1091.9063) && GetPlayerVirtualWorld(playerid) == 3)//Guvern
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1481.1063,-1771.2532,18.7958);
			   PlayerInfo[playerid][pInt] = 0;
			   SetPlayerVirtualWorld(playerid,0);
			   InHQ[playerid] = -1;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,834.1988,7.1422,1004.1870))
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1247.9105,-1560.4454,13.5556);
			   PlayerInfo[playerid][pInt] = 0;
		   }
		   /*else if (PlayerToPoint(5,playerid,387.7978,173.8582,1008.3828))
	       {
		       SetPlayerPosEx(playerid,1481.1063,-1771.2532,18.7958);
		       SetPlayerVirtualWorld(playerid,0);
		       SetPlayerInterior(playerid,0);
		       PlayerInfo[playerid][pInt] = 0;
	           format(string, sizeof(string), "~w~Los Santos");
	           GameTextForPlayer(playerid, string, 1000, 1);
	       }*/
		   else if (IsPlayerInRangeOfPoint(playerid,2,761.412963,1440.191650,1102.703125))
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,387.7978,173.8582,1008.3828);
			   PlayerInfo[playerid][pInt] = 0;
			   PlayerInfo[playerid][pLocal] = 255;
		   }
		   else if (IsPlayerInRangeOfPoint(playerid,2,-1423.5153,935.8321,1036.4756))
		   {
			   if(areape == 1)
			   {
			       SetPlayerInterior(playerid,0);
				   SetPlayerPosEx(playerid,1510.3986,-1059.5723,25.0625);
				   PlayerInfo[playerid][pInt] = 0;
			   }
			   else return SCM(playerid,COLOR_WHITE,"Event area is closed.");
		   }
	   }
	   if(NoFuel[playerid] == 1)
	   {
		   RemovePlayerFromVehicle(playerid);
           TogglePlayerControllable(playerid, 1);
		   NoFuel[playerid] = 0;
	   }
   }
   return 0;
}

public OnVehicleSpawn(vehicleid)
{
    if(!IsAnOwnableCar(vehicleid))
	{
		Gas[vehicleid] = 100;
		if(GarbageInCar[vehicleid] > 0) GarbageInCar[vehicleid] = 0;
		foreach(new i : Player)
		{
			if(JobCar[i] == vehicleid) JobCar[i] = -1;
			if(HireCar[i] == vehicleid) HireCar[i] = -1;
		}
  	}
  	else
  	{
  	    new engine,lights,alarm,doors,bonnet,boot,objective;
		foreach(new i : Player)
		{
			for(new v; v < MAX_PERSONAL_VEHICLES; v++)
			{
				if(PlayerInfo[i][pCarID][v] == vehicleid)
				{
					LoadCar(i);
					if(PlayerInfo[i][pCarLock][v] == 1)
					{
						GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(vehicleid,engine,lights,alarm,1,bonnet,boot,objective);
					}
					else
					{
						GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(vehicleid,engine,lights,alarm,0,bonnet,boot,objective);
					}
					ChangeVehiclePaintjob(vehicleid, PlayerInfo[i][pCarPaintJ][v]);
					for(new d; d < 17; d++)
					{
						if(CarMod[i][v][d] != 0) AddVehicleComponent(PlayerInfo[i][pCarID][v],CarMod[i][v][d]);
					}
					SetVehicleNumberPlate(vehicleid,CarPlate[i][v]);
					cUpdate(i, v, cKMx);
					if(strlen(CarVipName[i][v]) > 0)
					{
						SetVipText(i, v);
					}
				}
			}
		}
  	}
  	vehRadio[vehicleid] = 0;
	return 1;
}

public SyncUp()
{
	new tmphour,
		tmpminute,
		tmpsecond,
		hour,
		minn,
		sec,
		da,
		mo,
		ye;
	gettime(hour,minn,sec);
	gettime(tmphour, tmpminute, tmpsecond);
	getdate(ye, mo, da);
	FixHour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		ghour = tmphour;
		PayDay();
		if(hour == 23)
		{
			new str[256];
			mysql_tquery(SQL,"UPDATE cars SET Inscarprice = Inscarprice+50","","");
			foreach(new i : Player)
		    {
		        for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				{
					if(PlayerInfo[i][pCar][v] != -1)
					{
						PlayerInfo[i][pCarInsPrice][v] += 50;
					}
				}
			}
			mysql_tquery(SQL,"UPDATE `users` SET `OnlineToday` = '0'","","");
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i))
				{
					mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `OnlineToday` = '1' WHERE `name`='%s'",PlayerInfo[i][pNormalName]);
					mysql_tquery(SQL,str,"","");
				}
			}
		}
		if(hour == 7)
		{
			mysql_tquery(SQL,"UPDATE `users` SET `Quest1` = '0', `Quest2` = '0', `QuestProgress1`='0', `QuestProgress2`='0'","","");
			foreach(new playerid : Player)
			{
				new quest1 = 1 + random(5),quest2 = 1 + random(6);
				if(IsACop(playerid) && quest1 == 4) quest1 = 2;
				PlayerInfo[playerid][pQuest1] = quest1;
				PlayerInfo[playerid][pQuest2] = quest2;
				PlayerInfo[playerid][pQuestProgress1] = 0;
				PlayerInfo[playerid][pQuestProgress2] = 0;
				Update(playerid, pQuest1x);
				Update(playerid, pQuest2x);
				if(quest1 == 1 || quest1 == 2 || quest1 == 4)
				{
					PlayerInfo[playerid][pQuestNeed1] = 1;
					Update(playerid, pQuestNeed1x);
				}
				if(quest2 == 6 || quest2 == 7)
				{
					PlayerInfo[playerid][pQuestNeed2] = 1;
					Update(playerid, pQuestNeed2x);
				}
				if(quest1 == 3)
				{
					new randcar = random(12);
					if(randcar == 0) PlayerInfo[playerid][pQuestCar] = 400;
					if(randcar == 1) PlayerInfo[playerid][pQuestCar] = 401;
					if(randcar == 2) PlayerInfo[playerid][pQuestCar] = 404;
					if(randcar == 3) PlayerInfo[playerid][pQuestCar] = 408;
					if(randcar == 4) PlayerInfo[playerid][pQuestCar] = 439;
					if(randcar == 5) PlayerInfo[playerid][pQuestCar] = 462;
					if(randcar == 6) PlayerInfo[playerid][pQuestCar] = 471;
					if(randcar == 7) PlayerInfo[playerid][pQuestCar] = 481;
					if(randcar == 8) PlayerInfo[playerid][pQuestCar] = 496;
					if(randcar == 9) PlayerInfo[playerid][pQuestCar] = 509;
					if(randcar == 10) PlayerInfo[playerid][pQuestCar] = 515;
					if(randcar == 11) PlayerInfo[playerid][pQuestCar] = 522;
					new randkm = 10 + random(25);
					PlayerInfo[playerid][pQuestNeed1] = randkm;
					Update(playerid, pQuestCarx);
					Update(playerid, pQuestNeed1x);
				}
				if(quest1 == 5)
				{
					new randmats = 3000 + random(7000);
					PlayerInfo[playerid][pQuestNeed1] = randmats;
					Update(playerid, pQuestNeed1x);
				}
				if(quest1 == 6)
				{
					new randfish = 5 + random(15);
					PlayerInfo[playerid][pQuestNeed1] = randfish;
					Update(playerid, pQuestNeed1x);
				}
				if(quest2 == 1)
				{
					new randpizza = 5 + random(10);
					PlayerInfo[playerid][pQuestNeed2] = randpizza;
					Update(playerid, pQuestNeed2x);
				}
				if(quest2 == 2)
				{
					new randcops = 2 + random(5);
					PlayerInfo[playerid][pQuestNeed2] = randcops;
					Update(playerid, pQuestNeed2x);
				}
				if(quest2 == 3)
				{
					new rand = 10 + random(15) + random(20);
					PlayerInfo[playerid][pQuestNeed2] = rand;
					Update(playerid, pQuestNeed2x);
				}
				if(quest2 == 4)
				{
					new rand = 25 + random(25) + random(25);
					PlayerInfo[playerid][pQuestNeed2] = rand;
					Update(playerid, pQuestNeed2x);
				}
				if(quest2 == 5)
				{
					new rand = 50 + random(25) + random(25);
					PlayerInfo[playerid][pQuestNeed2] = rand;
					Update(playerid, pQuestNeed2x);
				}
			}
		}
		mysql_tquery(SQL, "UPDATE cars SET Block = Block-1 WHERE Block > 0");
		foreach(new i : Player)
	    {
	        for(new v; v < MAX_PERSONAL_VEHICLES; v++)
			{
				if(PlayerInfo[i][pCar][v] != -1)
				{
					if(PlayerInfo[i][pCarBlock][v] > 0) PlayerInfo[i][pCarBlock][v]--;
				}
			}
		}
		if(da == 1 && hour == 1)
		{
			new strr[128];
			mysql_format(SQL,strr,sizeof(strr),"INSERT INTO `timeonline` (`m`,`y`) VALUES ('%d','%d')",mo,ye);
			mysql_tquery(SQL,strr,"","");
		}
		if(GetWeekDay() == 3 && hour == 1) // SCOATERE LA LICITATIE - TRANSFER ADMBOT - CASA
		{
			new pid[1000],strr[256],house[1000],xd;
			new Cache: housex = mysql_query(SQL, "SELECT * FROM `users` WHERE `House` < '999' AND `Rented`='-1'");
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				pid[xd] = cache_get_field_content_int(i, "id");
				house[xd] = cache_get_field_content_int(i, "House");
				xd++;
			}
			cache_delete(housex);
			for(new p; p < 1000; p++)
			{
				if(pid[p] > 4)
				{
					new time;
					format(strr, sizeof(strr), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", pid[p]);
					new Cache: abhouse = mysql_query(SQL, strr);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						time += cache_get_field_content_int(i, "time");
					}
					cache_delete(abhouse);
					if(time < 36000)
					{
						mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `House`='999' WHERE `id`='%d'", pid[p]);
						mysql_tquery(SQL, strr, "", "");
						mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `House`='%d' WHERE `id`='3'", house[p]);
						mysql_tquery(SQL, strr, "", "");
						mysql_format(SQL, strr, sizeof(strr), "UPDATE `houses` SET `Owner`='AdmBot',`Owned`='1',`Rentabil`='1',`Rent`='5',`Prices`='0' WHERE `ID`='%d'", house[p]);
						mysql_tquery(SQL, strr, "", "");
						HouseInfo[house[p]][hOwned] = 1;
						HouseInfo[house[p]][hRent] = 5;
						HouseInfo[house[p]][hRentabil] = 1;
						HouseInfo[house[p]][hPrice] = 0;
						strmid(HouseInfo[house[p]][hOwner], "AdmBot", 0, 25, 255);
						foreach(new sal : Player)
						{
							if(PlayerInfo[sal][pSQLID] == pid[p])
							{
								PlayerInfo[sal][pPhousekey] = 999;
							}
						}
						OnPropTextdrawUpdate(1, house[p]);
						format(strr, sizeof(strr), "Casa [house:%d] va fi scoasa la licitatie in viitor (proprietar inactiv).", house[p]);
						Log(pid[p], strr, "bidadd");
					}
				}
			}
		}
		if(GetWeekDay() == 3 && hour == 2) // SCOATERE LA LICITATIE - TRANSFER ADMBOT - BIZ
		{
			new pid[1000],strr[256],biz[1000],xd;
			new Cache: bizx = mysql_query(SQL, "SELECT * FROM `users` WHERE `Bizz` < '255'");
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				pid[xd] = cache_get_field_content_int(i, "id");
				biz[xd] = cache_get_field_content_int(i, "Bizz");
				xd++;
			}
			cache_delete(bizx);
			for(new p; p < 1000; p++)
			{
				if(pid[p] > 4)
				{
					new time;
					format(strr, sizeof(strr), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", pid[p]);
					new Cache: abhouse = mysql_query(SQL, strr);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						time += cache_get_field_content_int(i, "time");
					}
					cache_delete(abhouse);
					if(time < 36000)
					{
						mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `Bizz`='255' WHERE `id`='%d'", pid[p]);
						mysql_tquery(SQL, strr, "", "");
						mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `Bizz`='%d' WHERE `id`='3'", biz[p]);
						mysql_tquery(SQL, strr, "", "");
						mysql_format(SQL, strr, sizeof(strr), "UPDATE `bizz` SET `Owner`='AdmBot',`Owned`='1',`EntranceCost`='5',`Locked`='0' WHERE `ID`='%d'", biz[p]);
						mysql_tquery(SQL, strr, "", "");
						BizzInfo[biz[p]][bOwned] = 1;
						BizzInfo[biz[p]][bEntranceCost] = 5;
						BizzInfo[biz[p]][bLocked] = 0;
						BizzInfo[biz[p]][bPrice] = 0;
						strmid(BizzInfo[biz[p]][bOwner], "AdmBot", 0, 25, 255);
						foreach(new sal : Player)
						{
							if(PlayerInfo[sal][pSQLID] == pid[p])
							{
								PlayerInfo[sal][pPbiskey] = 255;
							}
						}
						OnPropTextdrawUpdate(2, biz[p]);
						format(strr, sizeof(strr), "Afacerea [biz:%d] va fi scoasa la licitatie in viitor (proprietar inactiv).", biz[p]);
						Log(pid[p], strr, "bidadd");
					}
				}
			}
		}
		if(GetWeekDay() == 2 && hour == 23)
		{
			new str[256];
			mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `OnlineLastWeek` = '1', `OnlineThisWeek` = '0' WHERE `OnlineThisWeek`='1'");
			mysql_tquery(SQL,str,"","");
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i))
				{
					mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `OnlineThisWeek` = '1' WHERE `name`='%s'",PlayerInfo[i][pNormalName]);
					mysql_tquery(SQL,str,"","");
				}
			}
		}
		if(hour == 19 || hour == 20 || hour == 21 || hour == 22)
		{
			SetWorldTime(23);
		}
		else
		{
			SetWorldTime(hour);
		}
	}
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pReportMuted] > 0)
		{
			PlayerInfo[i][pReportMuted]--;
			Update(i, pReportMutedx);
			if(PlayerInfo[i][pReportMuted] == 0) SendClientMessage(i, COLOR_YELLOW, "Your mute on /report has expired.");
		}
	}
	new minute, second;
	gettime(hour, minute, second);
	if(GetWeekDay() == 1 || GetWeekDay() == 2)
	{
		if(hour == 20 || hour == 21 || hour == 22 || hour == 23)
		{
			if(IsABid == 0)
			{
				new biz, house, strr[256], strr2[128];
				new Cache: ab1 = mysql_query(SQL, "SELECT * FROM `bizz` WHERE `Owner`='AdmBot'");
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					biz = cache_get_field_content_int(i, "ID");
					break;
				}
				cache_delete(ab1);
				if(biz == 0)
				{
					new Cache: ab2 = mysql_query(SQL, "SELECT * FROM `houses` WHERE `Owner`='AdmBot'");
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						house = cache_get_field_content_int(0, "ID");
						break;
					}
					cache_delete(ab2);
					if(house != 0)
					{
						IsABid = 1;
						TopBidder = -1;
						BidAmount = 1000000;
						BidAmount2 = 1;
						IsAtBid = house;
						format(strr, sizeof(strr), "[BID] Acum se poate licita pentru casa (house) cu ID-ul %d.", IsAtBid);
						format(strr2, sizeof(strr2), "[BID] You can now bid for the casa (house) with the ID %d.", IsAtBid);
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pLanguage] == 2) SendClientMessage(x, COLOR_BID, strr);
							else SendClientMessage(x, COLOR_BID, strr2);
							SS(x, COLOR_RADIOCHAT, "[BID] Poti folosi /togbid pentru a afisa/ascunde sumele licitate de alti playeri.", "[BID] You can use /togbid to show or hide bids placed by other players.");
							SS(x, COLOR_RADIOCHAT, "[BID] Poti folosi /bid pentru a licita. O data ce licitezi, iti vor fi retrasi banii din cont. Daca un alt player liciteaza mai mult, iti vei primi banii inapoi.", "[BID] You can use /bid to bid. Once you placed a bid, the money will be taken out of your account. If someone wants to bid more than you for a property, you will get your money back.");
						}
					}
				}
				else
				{
					IsABid = 2;
					TopBidder = -1;
					BidAmount = 2000000;
					BidAmount2 = 2;
					IsAtBid = biz;
					format(strr, sizeof(strr), "[BID] Acum se poate licita pentru BIZ cu ID-ul %d.", IsAtBid);
					format(strr2, sizeof(strr2), "[BID] You can now bid for the BIZ with the ID %d.", IsAtBid);
					foreach(new x : Player)
					{
						if(PlayerInfo[x][pLanguage] == 2) SendClientMessage(x, COLOR_BID, strr);
						else SendClientMessage(x, COLOR_BID, strr2);
						SS(x, COLOR_RADIOCHAT, "[BID] Poti folosi /togbid pentru a afisa/ascunde sumele licitate de alti playeri.", "[BID] You can use /togbid to show or hide bids placed by other players.");
						SS(x, COLOR_RADIOCHAT, "[BID] Poti folosi /bid pentru a licita. O data ce licitezi, iti vor fi retrasi banii din cont. Daca un alt player liciteaza mai mult, iti vei primi banii inapoi.", "[BID] You can use /bid to bid. Once you placed a bid, the money will be taken out of your account. If someone wants to bid more than you for a property, you will get your money back.");
					}
				}
			}
		}
	}
	if(GetWeekDay() == 1 || GetWeekDay() == 2) // LICITATII AUTOMATE
	{
		if(hour == 20 || hour == 21 || hour == 22 || hour == 23)
		{
			if(IsABid != 0 && IsAtBid != 0)
			{
				if(TopBidder != -1)
				{
					if(BidTime > 0)
					{
						BidTime--;
						new strr[256], strr2[128], name[30], house, biz;
						if(BidTime != 0)
						{
							format(strr, sizeof(strr), "SELECT * FROM `users` WHERE `id`='%d'", TopBidder);
							new Cache: abc = mysql_query(SQL, strr);
							cache_get_field_content(0, "name", name);
							cache_delete(abc);
							foreach(new xd : Player)
							{
								if(PlayerInfo[xd][pSQLID] == TopBidder) GetPlayerName(xd, name, sizeof(name));
							}
							if(IsABid == 1)
							{
								format(strr, sizeof(strr), "> %s a licitat cea mai mare suma ($%s) pentru casa (house) %d.", name, FormatNumber(BidAmount), IsAtBid);
								format(strr2, sizeof(strr2), "> %s has the highest bid ($%s) for casa (house) %d.", name, FormatNumber(BidAmount), IsAtBid);
							}
							else if(IsABid == 2)
							{
								format(strr, sizeof(strr), "> %s a licitat cea mai mare suma ($%s) pentru BIZ %d.", name, FormatNumber(BidAmount), IsAtBid);
								format(strr2, sizeof(strr2), "> %s has the highest bid ($%s) for BIZ %d.", name, FormatNumber(BidAmount), IsAtBid);
							}
							foreach(new x : Player)
							{
								if(TogBid[x] == 1)
								{
									if(PlayerInfo[x][pLanguage] == 2) SendClientMessage(x, COLOR_BID, strr);
									else SendClientMessage(x, COLOR_BID, strr2);
								}
							}
							format(strr, sizeof(strr), "> Daca nimeni nu liciteaza mai mult, playerul ce a licitat cel mai mult va castiga proprietatea peste %d minute.", BidTime);
							format(strr2, sizeof(strr2), "> If no one places a higher bid, the highest bidder will win the property in %d minutes.", BidTime);
							foreach(new x : Player)
							{
								if(TogBid[x] == 1)
								{
									if(PlayerInfo[x][pLanguage] == 2) SendClientMessage(x, COLOR_BID, strr);
									else SendClientMessage(x, COLOR_BID, strr2);
								}
							}
						}
						else
						{
							format(strr, sizeof(strr), "SELECT * FROM `users` WHERE `id`='%d'", TopBidder);
							new Cache: abx = mysql_query(SQL, strr);
							cache_get_field_content(0, "name", name);
							house = cache_get_field_content_int(0, "House");
							biz = cache_get_field_content_int(0, "Bizz");
							cache_delete(abx);
							if(IsABid == 1)
							{
								if(house != 999)
								{
									mysql_format(SQL, strr, sizeof(strr), "UPDATE `houses` SET `Owner`='AdmBot',`Owned`='1',`Rentabil`='1',`Rent`='5',`Prices`='0' WHERE `Owner`='%s'", name);
									mysql_tquery(SQL, strr, "", "");
									mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `House`='%d' WHERE `name`='AdmBot'", house);
									mysql_tquery(SQL, strr, "", "");
									HouseInfo[house][hOwned] = 1;
									HouseInfo[house][hRent] = 5;
									HouseInfo[house][hRentabil] = 1;
									HouseInfo[house][hPrice] = 0;
									strmid(HouseInfo[house][hOwner], "AdmBot", 0, 25, 255);
									OnPropTextdrawUpdate(1, house);
								}
								mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `House`='%d' WHERE `id`='%d'", IsAtBid, TopBidder);
								mysql_tquery(SQL, strr, "", "");
								mysql_format(SQL, strr, sizeof(strr), "UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'", name, IsAtBid);
								mysql_tquery(SQL, strr, "", "");
								HouseInfo[IsAtBid][hOwned] = 1;
								strmid(HouseInfo[IsAtBid][hOwner], name, 0, 25, 255);
								foreach(new d : Player)
								{
									if(PlayerInfo[d][pSQLID] == TopBidder)
									{
										PlayerInfo[d][pPhousekey] = IsAtBid;
										GetPlayerName(d, name, sizeof(name));
									}
								}
								format(strr, sizeof(strr), "> %s a licitat cea mai mare suma ($%s) si a castigat casa (house) %d.", name, FormatNumber(BidAmount), IsAtBid);
								format(strr2, sizeof(strr2), "> %s had the highest bid ($%s) and won [casa (house) %d].", name, FormatNumber(BidAmount), IsAtBid);
								foreach(new xd : Player)
								{
									SS(xd, COLOR_BID, "[LICITATIE TERMINATA]", "[BID OVER]");
									if(PlayerInfo[xd][pLanguage] == 2) SendClientMessage(xd, COLOR_BID, strr);
									else SendClientMessage(xd, COLOR_BID, strr2);
									SendClientMessage(xd, COLOR_BID, "---");
								}
								OnPropTextdrawUpdate(1, IsAtBid);
								IsABid = 0;
								TopBidder = -1;
								BidAmount = 1000000;
								BidAmount2 = 1;
								IsAtBid = 0;
							}
							else if(IsABid == 2)
							{
								if(biz != 255)
								{
									mysql_format(SQL, strr, sizeof(strr), "UPDATE `bizz` SET `Owner`='AdmBot',`Owned`='1',`EntranceCost`='5',`Locked`='0' WHERE `Owner`='%s'", name);
									mysql_tquery(SQL, strr, "", "");
									mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `Bizz`='%d' WHERE `name`='AdmBot'", biz);
									mysql_tquery(SQL, strr, "", "");
									BizzInfo[biz][bOwned] = 1;
									BizzInfo[biz][bEntranceCost] = 5;
									BizzInfo[biz][bLocked] = 0;
									BizzInfo[biz][bPrice] = 0;
									strmid(BizzInfo[biz][bOwner], "AdmBot", 0, 25, 255);
									OnPropTextdrawUpdate(2, biz);
								}
								mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `Bizz`='%d' WHERE `id`='%d'", IsAtBid, TopBidder);
								mysql_tquery(SQL, strr, "", "");
								mysql_format(SQL, strr, sizeof(strr), "UPDATE `bizz` SET `Owner`='%s' WHERE `ID`='%d'", name, IsAtBid);
								mysql_tquery(SQL, strr, "", "");
								BizzInfo[IsAtBid][bOwned] = 1;
								strmid(BizzInfo[IsAtBid][bOwner], name, 0, 25, 255);
								foreach(new d : Player)
								{
									if(PlayerInfo[d][pSQLID] == TopBidder)
									{
										PlayerInfo[d][pPbiskey] = IsAtBid;
										GetPlayerName(d, name, sizeof(name));
									}
								}
								format(strr, sizeof(strr), "> %s a licitat cea mai mare suma ($%s) si a castigat BIZ %d.", name, FormatNumber(BidAmount), IsAtBid);
								format(strr2, sizeof(strr2), "> %s had the highest bid ($%s) and won BIZ %d.", name, FormatNumber(BidAmount), IsAtBid);
								foreach(new xd : Player)
								{
									SS(xd, COLOR_BID, "[LICITATIE TERMINATA]", "[BID OVER]");
									if(PlayerInfo[xd][pLanguage] == 2) SendClientMessage(xd, COLOR_BID, strr);
									else SendClientMessage(xd, COLOR_BID, strr2);
									SendClientMessage(xd, COLOR_BID, "---");
								}
								OnPropTextdrawUpdate(2, IsAtBid);
								IsABid = 0;
								TopBidder = -1;
								BidAmount = 1000000;
								BidAmount2 = 1;
								IsAtBid = 0;
							}
						}
					}
				}
			}
		}
	}
	if(GetWeekDay() == 2 || GetWeekDay() == 3) // IN CAZ CA NU LICITEAZA NIMENI
	{
		if(hour == 1 && minute == 30 && IsABid != 0 && BidTime == 0)
		{
			IsABid = 0;
			TopBidder = -1;
			BidAmount = 1000000;
			BidAmount2 = 1;
			IsAtBid = 0;
			BidTime = 0;
		}
	}
	return 1;
}

public WeatherChange()
{
    new var = random(17);
    switch (var)
    {
        case 0: SendRconCommand("weather 0");
        case 1: SendRconCommand("weather 1");
        case 2: SendRconCommand("weather 2");
        case 3: SendRconCommand("weather 3");
		case 4: SendRconCommand("weather 4");
		case 5: SendRconCommand("weather 5");
        case 6: SendRconCommand("weather 6");
        case 7: SendRconCommand("weather 7");
		case 8: SendRconCommand("weather 10");
		case 9: SendRconCommand("weather 11");
		case 10: SendRconCommand("weather 12");
		case 11: SendRconCommand("weather 13");
		case 12: SendRconCommand("weather 14");
		case 13: SendRconCommand("weather 15");
		case 14: SendRconCommand("weather 17");
		case 15: SendRconCommand("weather 18");
		case 16: SendRconCommand("weather 20");
	}
	foreach(new i : Player)
	{
		SendMSG(i);
	}
	return 1;
}
public SendMSG(playerid)
{
	if(PlayerInfo[playerid][pLanguage] == 2)
	{
    	new randMSG = random(sizeof(RandomMSG));
    	SendClientMessage(playerid, COLOR_GREEN3, RandomMSG[randMSG]);
	}
	else if(PlayerInfo[playerid][pLanguage] == 1)
	{
    	new randMSGENG = random(sizeof(RandomMSGENG));
    	SendClientMessage(playerid, COLOR_GREEN3, RandomMSGENG[randMSGENG]);
	}
}

public PlaceAD(playerid)
{
	new string[256],sendername[30];
	KillTimer(AdvTimer[playerid]);
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string,sizeof(string),"Ad by %s (phone: {FFFFFF}%d{00FF00}): %s",sendername,PlayerInfo[playerid][pPnumber],AdvMSG[playerid]);
	foreach(new i : Player)
	{
		if(i != playerid && PlayerInfo[i][pAdmin] == 0 && PlayerInfo[i][pHelper] == 0)
		{
			SendSplitMessage(i, COLOR_ADV, string);
		}
	}
	SendClientMessage(playerid, COLOR_GREEN, "Ad-ul tau:");
	format(string,sizeof(string),"Ad by %s (phone: {FFFFFF}%d{33AA33}): %s",sendername,PlayerInfo[playerid][pPnumber],AdvMSG[playerid]);
	SendClientMessage(playerid, COLOR_GREEN, string);
	SendClientMessage(playerid, COLOR_DARKPINK, "Acum poti plasa un nou /ad.");
	AdvPlayer[playerid] = 0;
	format(AdvMSG[playerid], 256, "");
	return 1;
}

public IsPlayerInArea(playerid, Float:minx, Float:miny, Float:maxx, Float:maxy)
{
   new Float:x, Float:y, Float:z;
   GetPlayerPos(playerid, x, y, z);
   if (x > minx && x < maxx && y > miny && y < maxy) return 1;
   return 0;
}

public IsPlayerInTurf(playerid, turfid)
{
	if(IsPlayerConnected(playerid))
	{
		if(turfid == -1)
		{
			return 0;
		}
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		if(x >= TurfInfo[turfid][zMinX] && x < TurfInfo[turfid][zMaxX] && y >= TurfInfo[turfid][zMinY] && y < TurfInfo[turfid][zMaxY])
		{
	 		return 1;
		}
	}
	return 0;
}

public GetPlayerTurf(playerid)
{
    for(new i = 1; i < sizeof(Turfs); i++)
    {
        if(IsPlayerInTurf(playerid, i))
        {
            return i;
        }
    }
    return -1;
}

public Production()
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerDrunk[i] > 0)
			{
			    PlayerDrunk[i] = 0;
		     	PlayerDrunkTime[i] = 0;
	    		GameTextForPlayer(i, "~p~Drunk effect~n~~w~Gone", 3500, 1);
	    		SetPlayerDrunkLevel(i, 0);
			}
		}
	}
	if(RestartTimer == 1)
	{
		SendClientMessageToAll(COLOR_GENANNOUNCE, "SERVER: Serverul va fi restartat dupa payday.");
		SendClientMessageToAll(COLOR_GENANNOUNCE, "SERVER: Daca s-a adaugat ceva nou, o sa fie postat pe ForEver RPG.ro/update. Daca nu se posteaza nimic, probabil doar s-au rezolvat unele buguri.");
	}
	return 1;
}

public TwoMinutesTimer()
{
	if(kickafk == 1)
	{
		new name[30],string[128];
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(IsBot[i] == 0)
				{
					if(PlayerInfo[i][pSleeping] == 0)
					{
						if(IsPlayerAFK[i] >= 1680)
						{
							SS(i, COLOR_LIGHTRED, "Daca nu te misti vei primi kick in 2 minute.", "If you don't move you will be kicked in 2 minutes.");
						}
						if(IsPlayerAFK[i] >= 1800)
						{
							SS(i, COLOR_WHITE, "Ai primit kick pentru ca ai fost AFK mai mult de 30 de minute.", "You were kicked for being AFK (away from keyboard) for more than 30 minutes.");
							SS(i, COLOR_WHITE, "Pentru a-ti lasa caracterul AFK mai mult de 30 de minute, foloseste /sleep intr-o casa.", "To leave your character AFK for longer than 30 minutes, use /sleep in a house.");
							SendClientMessage(i, COLOR_GENANNOUNCE, "You have been kicked for being AFK.");
							GetPlayerName(i, name, sizeof(name));
							format(string, sizeof(string),"%s was kicked by AdmBot for being AFK for more than 30 minutes.",name);
							SendClientMessageToAll(COLOR_LIGHTRED, string);
							new var100[300];
							mysql_format(SQL, var100, sizeof(var100), "INSERT INTO kicklogs (`playerid`,`giverid`,`playername`,`givername`,`reason`) VALUES ('%d','3','%s','AdmBot','AFK for more than 30 minutes')", PlayerInfo[i][pSQLID],PlayerInfo[i][pNormalName]);
							mysql_tquery(SQL,var100,"","");
							KickEx(i);
						}
					}
				}
			}
		}
	}
	new test[256],questions,helpers,string[128];
	mysql_format(SQL, test, sizeof(test), "DELETE FROM `timeplayed` WHERE `unixtime` < '%d'", (gettime() - 86400*60));
	mysql_tquery(SQL, test, "", "");
	mysql_format(SQL, test, sizeof(test), "DELETE FROM `antifraudaraport` WHERE `time` < '%d'", gettime());
	mysql_tquery(SQL, test, "", "");
	mysql_format(SQL, test, sizeof(test), "UPDATE `blockedaccounts` SET `unblock`='0',`key`='',`linkexpire`='0' WHERE `unblock` < '%d'", (gettime() - 86400*3));
	mysql_tquery(SQL, test, "", "");
	mysql_format(SQL, test, sizeof(test), "UPDATE `blockedaccounts` SET `linkexpire`='0',`key`='' WHERE `linkexpire` < '%d'", gettime());
	mysql_tquery(SQL, test, "", "");
	foreach(new j : Player)
	{
		if(strcmp(PlayerInfo[j][pNewbieQuestion], "NULL", true)) questions++;
		if(PlayerInfo[j][pHelper] > 0 && HelperDuty[j] == 1) helpers++;
	}
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pHelper] > 0 || PlayerInfo[i][pAdmin] > 0)
		{
			if(questions > helpers)
			{
				format(string, sizeof(string),"{FF6200}** {FFFF00}There are %d questions and %d helpers on duty. {FF6200}**", questions, helpers);
				SendClientMessage(i, COLOR_YELLOW, string);
			}
		}
	}
	return 1;
}

public PayDay()
{
	new string[128],
		str[256],
		string3[128],
		interest,
		account[MAX_PLAYERS],
		hour,
		minn,
		sec,
		ye,
		mo,
		da,
		rent[MAX_PLAYERS],
		hourscount;
	gettime(hour,minn,sec);
	getdate(ye, mo, da);
	if(RestartTimer == 1)
	{
		SendClientMessageToAll(COLOR_YELLOW, "---- SERVER RESTART ----");
		SendClientMessageToAll(COLOR_RED2, "The server will be restarted in 60 seconds.");
		foreach(new x : Player)
		{
			OnPlayerDateUpdateX2(x);
			Update(x, pPayDayx);
			Update(x, pPayCheckx);
			Update(x, pFpunishx);
			Update(x, pConnectTimex);
			Update(x, pBank);
			Update(x, pCashx);
			Update(x, pRP);
			Update(x, pJailTimex);
			Update(x, pLevelx);
		}
		iGMXTick = 60;
		iGMXTimer = SetTimer("restartTimer", 1000, true);
		RestartTimer = 0;
	}
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLevel] >= 0)
		    {
            	new wakaname[25];
                GetPlayerName(i,wakaname,sizeof(wakaname));
			    if(MoneyMessage[i]==1)
				{
				    SendClientMessage(i, COLOR_LIGHTRED, "You failed to pay your debt, Jail time.");
                    new rand;
					rand = random(sizeof(gRandomJailSpawns));
					SetPlayerInterior(i, 6);
					SetPlayerPosEx(i,gRandomJailSpawns[rand][0],gRandomJailSpawns[rand][1],gRandomJailSpawns[rand][2]);
		            PlayerInfo[i][pJailed] = 1;
		            ResetPlayerWeaponsEx(i);
		            ResetPlayerWeapons(i);
					WantedPoints[i] = 0;
					PlayerInfo[i][pJailTime] = 240;
					format(string, sizeof(string), "You are jailed for %d seconds.   Bail: Unable", PlayerInfo[i][pJailTime]);
					SendClientMessage(i, COLOR_LIGHTBLUE, string);
					Update(i,pJailedx);
					Update(i,pJailTimex);
					TogglePlayerControllable(i, 0);
					SetTimerEx("UnFreezeStation", 1000, false, "i", i);
				}
				new key = PlayerInfo[i][pPhousekey];
				if(key != 999)
				{
					rent[i] = HouseInfo[key][hRent];
					if(rent[i] > GetPlayerCash(i) && strcmp(PlayerInfo[i][pNormalName], HouseInfo[key][hOwner], false) == 0)
					{
						PlayerInfo[i][pPhousekey] = 999;
						Update(i,pPhousekeyx);
					}
					HouseInfo[key][hTakings] += rent[i];
				    mysql_format(SQL,str,sizeof(str),"UPDATE `houses` SET `Takings`='%d' WHERE `ID`='%d'",HouseInfo[key][hTakings],key);
				    mysql_tquery(SQL,str,"","");
				}
				new tmpintrate;
				if(PlayerInfo[i][pPremiumAccount] > 0)
				{
					tmpintrate = 2;
	    			new bonus = PlayerInfo[i][pPayCheck] / 2;
				    PlayerInfo[i][pPayCheck] += bonus;
				}
				else
				{
					tmpintrate = 1;
				}
				account[i] = PlayerInfo[i][pAccount];
				Tax += TaxValue;
    			PlayerInfo[i][pAccount] -= TaxValue;
				new checks = PlayerInfo[i][pPayCheck];
    			PlayerInfo[i][pAccount] += checks;
				interest = (PlayerInfo[i][pAccount]/1000)*(tmpintrate);
				new finalinterest,stringore[128];
				new Float:timee,Float:timee2;
				SendClientMessage(i, COLOR_TEAL, "----------------------------------------------------------------------------");
				SendClientMessage(i, COLOR_WHITE, "Your paycheck has arrived; please visit the bank to withdraw your money.");
				PlayerInfo[i][pConnectTime] += PlayerInfo[i][pPayDay] / 3600.0;
				timee = PlayerInfo[i][pPayDay] / 3600.0;
				timee2 = PlayerInfo[i][pPayDay] / 60.0;
				finalinterest = interest;
				if(PlayerInfo[i][pPayDay] >= 1801)
				{
					if(PlayerInfo[i][pGiftTime] > 0)
					{
							PlayerInfo[i][pGiftTime] -= 1;
							Update(i, pGiftTimex);
					}
					if(PlayerInfo[i][pMember] != 0)
					{
						PlayerInfo[i][pPaydayON]++;
						Update(i, pPaydayONx);
					}
					if(PlayerInfo[i][pLeader] > 0)
					{
						GivePlayerCash(i, 50000);
						format(string, sizeof(string), "Ai primit salariul de leader ($50000).");
						SendClientMessage(i, COLOR_WHITE, string);
					}
					if(PlayerInfo[i][pHelper] > 0)
					{
						GivePlayerCash(i, 50000);
						format(string, sizeof(string), "Ai primit salariul de helper ($50000).");
						SendClientMessage(i, COLOR_WHITE, string);
					}
					Update(i, pCashx);
				}
				PlayerInfo[i][pPayDay] = 0;
				hourscount++;
				if(PlayerInfo[i][pLanguage] == 1)
				{
					format(stringore, sizeof(stringore), "You received %.2f hours played (%d minutes).",timee,floatround(timee2));
				}
				else
				{
					format(stringore, sizeof(stringore), "Ai primit %.2f ore jucate (%d minute).",timee,floatround(timee2));
				}
				SendClientMessage(i, COLOR_WHITE, stringore);
				if(PlayerInfo[i][pRob] < 20)
    			{
       				PlayerInfo[i][pRob]++;
           		}
           		else
           		{
           		    SS(i, COLOR_WHITE, "Nu ai primit niciun rob/free point pentru ca ai deja 20 rob/free points.", "No rob points for you! You have too many rob/free points. You can't store more than 20 rob/free points.");
				}
				PlayerInfo[i][pExp] += 1;
				PlayerInfo[i][pAccount] += finalinterest;
				format(string, sizeof(string), "Paycheck: $%s | Bank balance: $%s | Bank interest: $%s | Tax: $%s (10 percent)", FormatNumber(checks), FormatNumber(PlayerInfo[i][pAccount]), FormatNumber(finalinterest), FormatNumber(TaxValue));
				SendClientMessage(i, COLOR_GREY, string);
				format(string3, sizeof(string3), "Rent: $%s | Total earnings: $%d", FormatNumber(rent[i]), checks-TaxValue);
				SendClientMessage(i, COLOR_GREY, string3);
				SendClientMessage(i, COLOR_TEAL, "----------------------------------------------------------------------------");
				format(string, sizeof(string), "~g~payday");
				GameTextForPlayer(i, string, 5000, 1);
				if(PlayerInfo[i][pCarLicT] > 0)
				{
					PlayerInfo[i][pCarLicT] -= 1;
					if(PlayerInfo[i][pCarLicT] == 0) SendClientMessage(i, COLOR_YELLOW, "Licenta ta de condus a expirat. Pentru a o reinnoi, mergi la DMV.");
				}
				if(PlayerInfo[i][pFlyLicT] > 0)
				{
					PlayerInfo[i][pFlyLicT] -= 1;
					if(PlayerInfo[i][pFlyLicT] == 0) SendClientMessage(i, COLOR_YELLOW, "Licenta ta de zburat a expirat. Pentru a o reinnoi, contacteaza un instructor. /instructors");
				}
				if(PlayerInfo[i][pBoatLicT] > 0)
				{
					PlayerInfo[i][pBoatLicT] -= 1;
					if(PlayerInfo[i][pBoatLicT] == 0) SendClientMessage(i, COLOR_YELLOW, "Licenta ta de barci a expirat. Pentru a o reinnoi, contacteaza un instructor. /instructors");
				}
				if(PlayerInfo[i][pGunLicT] > 0)
				{
					PlayerInfo[i][pGunLicT] -= 1;
					if(PlayerInfo[i][pGunLicT] == 0) SendClientMessage(i, COLOR_YELLOW, "Licenta ta de arme a expirat. Pentru a o reinnoi, contacteaza un instructor. /instructors");
				}
				if(PlayerInfo[i][pFpunish] > 0)
				{
					PlayerInfo[i][pFpunish]--;
		 		}
		 		if(PlayerInfo[i][pFpunish] < 0)
		 		{
	    			PlayerInfo[i][pFpunish] = 0;
				}
				if(PlayerInfo[i][pCarLicSuspend] > 0)
				{
					PlayerInfo[i][pCarLicSuspend]--;
					Update(i, pCarLicSuspendx);
					if(PlayerInfo[i][pCarLicSuspend] == 0) SendClientMessage(i, COLOR_YELLOW, "* Licenta ta de condus a fost confiscata recent. Acum poti merge din nou la scoala de soferi pentru a lua licenta din nou.");
				}
				if(PlayerInfo[i][pGunLicSuspend] > 0)
				{
					PlayerInfo[i][pGunLicSuspend]--;
					Update(i, pGunLicSuspendx);
					if(PlayerInfo[i][pGunLicSuspend] == 0) SendClientMessage(i, COLOR_YELLOW, "* Licenta ta de arme a fost confiscata recent. Acum poti da din nou testul cu un instructor pentru a lua licenta din nou.");
				}
				PlayerInfo[i][pPayCheck] = 0;
				new month, day, inserted, dx;
				format(str, sizeof(str), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", PlayerInfo[i][pSQLID]);
				new Cache: xd = mysql_query(SQL, str);
				if(cache_get_row_count() > 0)
				{
					for(new d, js = cache_get_row_count (); d != js; ++d)
					{
						month = cache_get_field_content_int(d, "month");
						day = cache_get_field_content_int(d, "day");
						if(day == da && month == mo)
						{
							inserted = 1;
						}
					}
				}
				else
				{
					mysql_format(SQL, str, sizeof(str), "INSERT INTO `timeplayed` (`pid`,`time`,`month`,`day`,`year`,`unixtime`) VALUES ('%d','%d','%s%d','%s%d','%d','%d')", PlayerInfo[i][pSQLID], OnlineTimeToday[i], ((mo < 10) ? ("0") : ("")), mo, ((da < 10) ? ("0") : ("")), da, ye, gettime());
					mysql_tquery(SQL, str, "", "");
					dx = 1;
					OnlineTimeToday[i] = 0;
					Update(i, pOnlineTimeTodayx);
				}
				cache_delete(xd);
				if(dx == 0)
				{
					if(inserted == 1)
					{
						mysql_format(SQL, str, sizeof(str), "UPDATE timeplayed SET time = time+%d WHERE month = %d AND day = %d AND pid = %d", OnlineTimeToday[i], mo, da, PlayerInfo[i][pSQLID]);
						mysql_tquery(SQL, str, "", "");
						OnlineTimeToday[i] = 0;
						Update(i, pOnlineTimeTodayx);
					}
					else
					{
						mysql_format(SQL, str, sizeof(str), "INSERT INTO `timeplayed` (`pid`,`time`,`month`,`day`,`year`,`unixtime`) VALUES ('%d','%d','%s%d','%s%d','%d','%d')", PlayerInfo[i][pSQLID], OnlineTimeToday[i], ((mo < 10) ? ("0") : ("")), mo, ((da < 10) ? ("0") : ("")), da, ye, gettime());
						mysql_tquery(SQL, str, "", "");
						OnlineTimeToday[i] = 0;
						Update(i, pOnlineTimeTodayx);
					}
				}
			}
		}
	}
	format(str, sizeof(str), "INSERT INTO `toph` (`ponline`,`hour`) VALUES ('%d','%s%d:00')", GetOnLinePlayers(), ((hour < 10) ? ("0") : ("")), hour);
	mysql_query(SQL, str);
	mysql_query(SQL, "DELETE FROM `toph` ORDER BY `id` ASC limit 1");
	format(str, sizeof(str), "SELECT * FROM `timeonline` WHERE m = %d AND y = %d",mo,ye);
	new Cache: result = mysql_query(SQL, str);
	if(cache_get_row_count() >= 1)
	{
		mysql_format(SQL,str,sizeof(str),"UPDATE timeonline SET hoursplayed = hoursplayed+%d WHERE m = %d AND y = %d",hourscount,mo,ye);
		mysql_tquery(SQL,str,"","");
	}
	cache_delete(result);
	return 1;
}

stock GetWeaponSlot (weaponid)
{
	switch (weaponid)
	{
		case 0, 1:
			return 0;

		case 2 .. 9:
			return 1;
		case 10 .. 15:
			return 10;
		case 16 .. 19, 39:
			return 8;
		case 22 .. 24:
			return 2;
		case 25 .. 27:
			return 3;
		case 28, 29, 32:
			return 4;
		case 30, 31:
			return 5;
		case 33, 34:
			return 6;
		case 35 .. 38:
			return 7;
		case 40:
			return 12;
		case 41 .. 43:
			return 9;

		case 44 .. 46:
			return 11;
	}
	return 0;
}

stock GivePlayerWeaponEx(playerid,weapon,ammo)
{
	WeaponData[playerid][GetWeaponSlot(weapon)] = true;
	return GivePlayerWeapon(playerid,weapon,ammo);
}

stock ResetPlayerWeaponsEx(playerid)
{
	WeaponData[playerid][0] = false; WeaponData[playerid][1] = false; WeaponData[playerid][2] = false; WeaponData[playerid][3] = false;
	WeaponData[playerid][4] = false; WeaponData[playerid][5] = false; WeaponData[playerid][6] = false; WeaponData[playerid][7] = false;
	WeaponData[playerid][8] = false; WeaponData[playerid][9] = false; WeaponData[playerid][10] = false; WeaponData[playerid][11] = false;
	WeaponData[playerid][12] = false;
	return ResetPlayerWeapons(playerid);
}

stock GetWeaponNameEx(id, name[], len) return format(name,len, "%s", GunNames[id]);

stock RemovePlayerWeapon(playerid, weaponid);
public RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12] = 0,
		plyAmmo[12] = 0;
	for(new sslot = 0; sslot != 12; sslot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, sslot, wep, ammo);
		if(wep != weaponid && ammo != 0) GetPlayerWeaponData(playerid, sslot, plyWeapons[sslot], plyAmmo[sslot]);
	}
	ResetPlayerWeaponsEx(playerid);
	ResetPlayerWeapons(playerid);
	for(new sslot = 0; sslot != 12; sslot++)
	{
	    if(plyAmmo[sslot] != 0) GivePlayerWeaponEx(playerid, plyWeapons[sslot], plyAmmo[sslot]);
	}
	return 1;
}

public split(const strsrc[], strdest[][], delimiter)
{
	new i,
		li,
		aNum,
		len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

public OnPlayerRegister(playerid, password[])
{
	if(IsPlayerConnected(playerid))
	{
		new playername3[MAX_PLAYER_NAME]; //,textmeg[512];
		GetPlayerName(playerid, playername3, sizeof(playername3));
		new Str[200];
		mysql_format(SQL,Str,sizeof(Str),"INSERT INTO `users` (`name`,`password`) VALUES ('%s','%s')",playername3,password);
		mysql_tquery(SQL,Str,"","");
		strmid(PlayerInfo[playerid][pKey], password, 0, strlen(password), 255);
		PlayerInfo[playerid][pCash] = GetPlayerCash(playerid);
		if ((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0))
		{
     	    PlayerInfo[playerid][pPos_x] = 2246.6;
     	    PlayerInfo[playerid][pPos_y] = -1161.9;
     	    PlayerInfo[playerid][pPos_z] = 1029.7;
		}
		if(Spectate[playerid] != -1)
		{
			PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
			PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
			PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
			PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
			PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
		}
		ShowPlayerDialog(playerid,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"SERVER: Login","Welcome to the ForEver RPG Server.\n\nPlease enter your password below!","Login","Cancel");
		return 1;
	}
	return 1;
}

public OnPlayerLogin(playerid,password[])
{
	new playername2[MAX_PLAYER_NAME],playerip[16];
    GetPlayerName(playerid, playername2, sizeof(playername2));
    GameTextForPlayer(playerid, "~w~LOADING...~n~~y~CHECKING THE PASSWORD", 700, 3);
	GetPlayerIp(playerid,playerip,sizeof(playerip));
	if(NumIp(playerip, playerid) >= 3 && !IsBotOnIP(playerip))
	{
 		SendClientMessage(playerid, COLOR_LIGHTRED, "There are already 2 players connected with same IP.");
 		KickEx(playerid);
 		return 1;
	}
    new qstr[256];
    format(qstr,sizeof(qstr),"SELECT * FROM users WHERE `name`='%s' AND `password`='%s'",playername2,password);
    new Cache: pass = mysql_query(SQL,qstr);
    if(cache_get_row_count() > 0)
    {
		cache_get_field_content(0, "password", PlayerInfo[playerid][pKey], SQL, 130);
    	cache_get_field_content(0, "name", PlayerInfo[playerid][pNormalName], SQL, 130);
    	PlayerInfo[playerid][pLevel]                    = cache_get_field_content_int(0, "Level");
    	PlayerInfo[playerid][pAdmin]                    = cache_get_field_content_int(0, "Admin");
    	PlayerInfo[playerid][pHelper]                   = cache_get_field_content_int(0, "Helper");
    	PlayerInfo[playerid][pPremiumAccount]           = cache_get_field_content_int(0, "Premium");
    	PlayerInfo[playerid][pPremiumPoints]            = cache_get_field_content_int(0, "PremiumPoints");
    	PlayerInfo[playerid][pTreasurePoints]            = cache_get_field_content_int(0, "TreasurePoints");
    	PlayerInfo[playerid][pConnectTime]              = cache_get_field_content_float(0, "ConnectedTime");
    	PlayerInfo[playerid][pReg]                      = cache_get_field_content_int(0, "Registered");
    	PlayerInfo[playerid][pSex]                      = cache_get_field_content_int(0, "Sex");
    	PlayerInfo[playerid][pAge]                      = cache_get_field_content_int(0, "Age");
		PlayerInfo[playerid][pGasCan]                   = cache_get_field_content_int(0, "GasCan");
    	PlayerInfo[playerid][pOrigin]                   = cache_get_field_content_int(0, "Origin");
    	PlayerInfo[playerid][pMuted]                    = cache_get_field_content_int(0, "Muted");
	 	PlayerInfo[playerid][pMuteTime]                 = cache_get_field_content_int(0, "MuteTime");
    	PlayerInfo[playerid][pExp]                      = cache_get_field_content_int(0, "Respect");
    	PlayerInfo[playerid][pCash]                     = cache_get_field_content_int(0, "Money");
    	PlayerInfo[playerid][pAccount]                  = cache_get_field_content_int(0, "Bank");
    	PlayerInfo[playerid][pCrimes]                   = cache_get_field_content_int(0, "Crimes");
    	PlayerInfo[playerid][pKills]                    = cache_get_field_content_int(0, "Kills");
    	PlayerInfo[playerid][pDeaths]                   = cache_get_field_content_int(0, "Deaths");
    	PlayerInfo[playerid][pArrested]                 = cache_get_field_content_int(0, "Arrested");
    	PlayerInfo[playerid][pWantedDeaths]             = cache_get_field_content_int(0, "WantedDeaths");
    	PlayerInfo[playerid][pPhoneBook]                = cache_get_field_content_int(0, "Phonebook");
    	PlayerInfo[playerid][pWantedLevel]              = cache_get_field_content_int(0, "WantedLevel");
    	PlayerInfo[playerid][pFishes]                   = cache_get_field_content_int(0, "Fishes");
    	PlayerInfo[playerid][pJob]                      = cache_get_field_content_int(0, "Job");
    	PlayerInfo[playerid][pPayCheck]                 = cache_get_field_content_int(0, "Paycheck");
    	PlayerInfo[playerid][pHeadValue]                = cache_get_field_content_int(0, "HeadValue");
    	PlayerInfo[playerid][pJailed]                   = cache_get_field_content_int(0, "Jailed");
    	PlayerInfo[playerid][pJailTime]                 = cache_get_field_content_int(0, "JailTime");
    	PlayerInfo[playerid][pMats]                     = cache_get_field_content_int(0, "Materials");
    	PlayerInfo[playerid][pDrugs]                    = cache_get_field_content_int(0, "Drugs");
    	PlayerInfo[playerid][pLeader]                   = cache_get_field_content_int(0, "Leader");
    	PlayerInfo[playerid][pMember]                   = cache_get_field_content_int(0, "Member");
    	PlayerInfo[playerid][pRank]                     = cache_get_field_content_int(0, "Rank");
    	PlayerInfo[playerid][pFACWarns]                 = cache_get_field_content_int(0, "FWarn");
    	PlayerInfo[playerid][pFpunish]                  = cache_get_field_content_int(0, "FPunish");
    	PlayerInfo[playerid][pFishSkill]                = cache_get_field_content_int(0, "FishSkill");
    	PlayerInfo[playerid][pSpawnChange]              = cache_get_field_content_int(0, "SpawnChange");
		PlayerInfo[playerid][pReportMuted]              = cache_get_field_content_int(0, "ReportMuted");
 		PlayerInfo[playerid][pRobSkill]                 = cache_get_field_content_int(0, "RobSkill");
    	PlayerInfo[playerid][pTruckSkill]               = cache_get_field_content_int(0, "TruckSkill");
    	PlayerInfo[playerid][pTruckTimes]               = cache_get_field_content_int(0, "TruckTimes");
    	PlayerInfo[playerid][pTruckRem]                 = cache_get_field_content_int(0, "TruckRem");
    	PlayerInfo[playerid][pFarmSkill]                = cache_get_field_content_int(0, "FarmSkill");
    	PlayerInfo[playerid][pFarmTimes]                = cache_get_field_content_int(0, "FarmTimes");
    	PlayerInfo[playerid][pFarmRem]                  = cache_get_field_content_int(0, "FarmRem");
		PlayerInfo[playerid][pPizzaSkill]               = cache_get_field_content_int(0, "PizzaSkill");
    	PlayerInfo[playerid][pPizzaTimes]               = cache_get_field_content_int(0, "PizzaTimes");
    	PlayerInfo[playerid][pPizzaRem]                 = cache_get_field_content_int(0, "PizzaRem");
		PlayerInfo[playerid][pArmsSkill]                = cache_get_field_content_int(0, "ArmsSkill");
		PlayerInfo[playerid][pArmsTimes]                = cache_get_field_content_int(0, "ArmsTimes");
		PlayerInfo[playerid][pArmsRem]                	= cache_get_field_content_int(0, "ArmsRem");
		PlayerInfo[playerid][pBusSkill]                	= cache_get_field_content_int(0, "BusSkill");
		PlayerInfo[playerid][pBusTimes]                	= cache_get_field_content_int(0, "BusTimes");
		PlayerInfo[playerid][pBusRem]                	= cache_get_field_content_int(0, "BusRem");
    	PlayerInfo[playerid][pFishTimes]                = cache_get_field_content_int(0, "FishTimes");
    	PlayerInfo[playerid][pFishRem]                  = cache_get_field_content_int(0, "FishRem");
    	PlayerInfo[playerid][pRobRem]                   = cache_get_field_content_int(0, "RobRem");
    	PlayerInfo[playerid][pRobTimes]                 = cache_get_field_content_int(0, "RobTimes");
		PlayerInfo[playerid][pGarbageSkill]             = cache_get_field_content_int(0, "GarbageSkill");
		PlayerInfo[playerid][pGarbageTimes]             = cache_get_field_content_int(0, "GarbageTimes");
		PlayerInfo[playerid][pGarbageRem]             	= cache_get_field_content_int(0, "GarbageRem");
    	PlayerInfo[playerid][pInt]                      = cache_get_field_content_int(0, "Inter");
    	PlayerInfo[playerid][pLocal]                    = cache_get_field_content_int(0, "Local");
    	PlayerInfo[playerid][pTeam]                     = cache_get_field_content_int(0, "Team");
    	PlayerInfo[playerid][pModel]                    = cache_get_field_content_int(0, "Model");
    	PlayerInfo[playerid][pPnumber]                  = cache_get_field_content_int(0, "PhoneNr");
    	PlayerInfo[playerid][pPhousekey]                = cache_get_field_content_int(0, "House");
    	PlayerInfo[playerid][pPbiskey]                  = cache_get_field_content_int(0, "Bizz");
    	PlayerInfo[playerid][pPos_x]                    = cache_get_field_content_float(0, "Pos_x");
    	PlayerInfo[playerid][pPos_y]                    = cache_get_field_content_float(0, "Pos_y");
    	PlayerInfo[playerid][pPos_z]                    = cache_get_field_content_float(0, "Pos_z");
    	PlayerInfo[playerid][pRob]                      = cache_get_field_content_int(0, "Rob");
    	PlayerInfo[playerid][pCarLicT]                  = cache_get_field_content_int(0, "CarLicT");
    	PlayerInfo[playerid][pCarLic]                   = cache_get_field_content_int(0, "CarLic");
		PlayerInfo[playerid][pCarLicSuspend]            = cache_get_field_content_int(0, "CarLicSuspend");
		PlayerInfo[playerid][pGunLicSuspend]            = cache_get_field_content_int(0, "GunLicSuspend");
    	PlayerInfo[playerid][pFlyLicT]                  = cache_get_field_content_int(0, "FlyLicT");
    	PlayerInfo[playerid][pFlyLic]                   = cache_get_field_content_int(0, "FlyLic");
    	PlayerInfo[playerid][pBoatLicT]                 = cache_get_field_content_int(0, "BoatLicT");
    	PlayerInfo[playerid][pBoatLic]                  = cache_get_field_content_int(0, "BoatLic");
    	PlayerInfo[playerid][pGunLicT]                  = cache_get_field_content_int(0, "GunLicT");
    	PlayerInfo[playerid][pGunLic]                   = cache_get_field_content_int(0, "GunLic");
    	PlayerInfo[playerid][pPayDay]                   = cache_get_field_content_int(0, "PayDay");
    	PlayerInfo[playerid][pTut]                      = cache_get_field_content_int(0, "Tutorial");
    	PlayerInfo[playerid][pWarns]                    = cache_get_field_content_int(0, "Warnings");
    	PlayerInfo[playerid][pRented]                   = cache_get_field_content_int(0, "Rented");
    	PlayerInfo[playerid][pFuel]                     = cache_get_field_content_int(0, "Fuel");
		PlayerInfo[playerid][pColors]                    = cache_get_field_content_int(0, "Color");
    	PlayerInfo[playerid][pWTalkie]                  = cache_get_field_content_int(0, "WTalkie");
    	cache_get_field_content(0, "Email", PlayerInfo[playerid][pEmail], SQL, 255);
    	PlayerInfo[playerid][pClan]                     = cache_get_field_content_int(0, "Clan");
    	PlayerInfo[playerid][pHitT]                     = cache_get_field_content_int(0, "HitT");
    	PlayerInfo[playerid][pCRank]                    = cache_get_field_content_int(0, "CRank");
		PlayerInfo[playerid][pCWarns]                   = cache_get_field_content_int(0, "ClanWarns");
    	PlayerInfo[playerid][pPhone]                    = cache_get_field_content_int(0, "Phone");
    	PlayerInfo[playerid][pSQLID]                    = cache_get_field_content_int(0, "id");
    	cache_get_field_content(0, "Victim", PlayerInfo[playerid][pVictim], SQL, 255);
    	cache_get_field_content(0, "Accused", PlayerInfo[playerid][pAccused], SQL, 255);
    	cache_get_field_content(0, "Crime1", PlayerInfo[playerid][pCrime1], SQL, 255);
    	cache_get_field_content(0, "Crime2", PlayerInfo[playerid][pCrime2], SQL, 255);
    	cache_get_field_content(0, "Crime3", PlayerInfo[playerid][pCrime3], SQL, 255);
		cache_get_field_content(0, "gpci", PlayerInfo[playerid][pSerial], SQL, 128);
    	PlayerInfo[playerid][pStatus]                   = cache_get_field_content_int(0, "Status");
    	PlayerInfo[playerid][pLanguage]                 = cache_get_field_content_int(0, "Language");
    	PlayerInfo[playerid][pClanTag]                  = cache_get_field_content_int(0, "ClanTag");
    	PlayerInfo[playerid][pFWorks]                   = cache_get_field_content_int(0, "FWorks");
    	PlayerInfo[playerid][pVirtualPD]                = cache_get_field_content_int(0, "VirtualPD");
    	PlayerInfo[playerid][pGlasses]                  = cache_get_field_content_int(0, "Glasses");
    	PlayerInfo[playerid][pFactionJoin]              = cache_get_field_content_int(0, "FactionJoin");
    	PlayerInfo[playerid][pCredits]                  = cache_get_field_content_int(0, "CreditsF");
    	PlayerInfo[playerid][pNMuted]                   = cache_get_field_content_int(0, "NMuted");
    	PlayerInfo[playerid][pHost]            			= cache_get_field_content_int(0, "Host");
    	PlayerInfo[playerid][pHiddenColor]            	= cache_get_field_content_int(0, "HiddenColor");
    	PlayerInfo[playerid][pGiftTime]            		= cache_get_field_content_int(0, "GiftTime");
    	PlayerInfo[playerid][pHats]                     = cache_get_field_content_int(0, "Hats");
    	PlayerInfo[playerid][pFightStyle]               = cache_get_field_content_int(0, "FightStyle");
    	PlayerInfo[playerid][pHUD1]               		= cache_get_field_content_int(0, "HUD1");
    	PlayerInfo[playerid][pHUD2]               		= cache_get_field_content_int(0, "HUD2");
    	PlayerInfo[playerid][pHUD3]              	 	= cache_get_field_content_int(0, "HUD3");
    	PlayerInfo[playerid][pHUD3]              	 	= cache_get_field_content_int(0, "HUD4");
		PlayerInfo[playerid][pCarSlots]              	= cache_get_field_content_int(0, "CarSlots");
		PlayerInfo[playerid][pSession]              	= cache_get_field_content_int(0, "Session");
		PlayerInfo[playerid][pPaydayON]              	= cache_get_field_content_int(0, "PaydayON");
		PlayerInfo[playerid][pQuest1]              		= cache_get_field_content_int(0, "Quest1");
		PlayerInfo[playerid][pQuest2]              		= cache_get_field_content_int(0, "Quest2");
		PlayerInfo[playerid][pQuestNeed1]              	= cache_get_field_content_int(0, "QuestNeed1");
		PlayerInfo[playerid][pQuestNeed2]              	= cache_get_field_content_int(0, "QuestNeed2");
		PlayerInfo[playerid][pQuestProgress1]           = cache_get_field_content_int(0, "QuestProgress1");
		PlayerInfo[playerid][pQuestProgress2]           = cache_get_field_content_int(0, "QuestProgress2");
		PlayerInfo[playerid][pQuestCar]           		= cache_get_field_content_int(0, "QuestCar");
		WTChannel[playerid] 							= cache_get_field_content_int(0, "WTChannel");
		PlayerInfo[playerid][pSupport] 					= cache_get_field_content_int(0, "Support");
		OnlineTimeToday[playerid]						= cache_get_field_content_int(0, "OnlineTimeToday");
		#if ACTIVE_QUEST == 1
			for(new o; o < questobjectss; o++)
			{
				new strs[10],ox = o + 1;
				format(strs, sizeof(strs), "Object%d", ox);
				PlayerInfo[playerid][pFoundObject][ox] = cache_get_field_content_int(0, strs);
			}
		#endif
	}
	else
	{
		new stringyy[320],
			loginname[64];
		GetPlayerName(playerid,loginname,sizeof(loginname));
		gPlayerLogTries[playerid] -= 1;
		if(gPlayerLogTries[playerid] == 1 || gPlayerLogTries[playerid] == 0)
		{
			format(stringyy,sizeof(stringyy),"Incorrect password. You have %d remaining login attempts left.", gPlayerLogTries[playerid]);
			SendClientMessage(playerid, COLOR_RED2, stringyy);
		}
		ShowPlayerDialog(playerid,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"SERVER: Login","Welcome to the ForEver RPG Server.\n\nPlease enter your password below!","Login","Cancel");
        if(gPlayerLogTries[playerid] == -1)
		{
		    new stringkick[256];
		    format(stringkick, sizeof(stringkick), "AdmWarn: {FFFFFF}%s has been kicked for entering the wrong password 2 times.",loginname);
		   	ABroadCast(COLOR_RED2,stringkick,1);
		   	SendClientMessage(playerid, COLOR_RED2, "You have used all available login attempts.");
			KickEx(playerid);
		}
        return 1;
	}
	cache_delete(pass);
	ResetPlayerCash(playerid);
	GivePlayerCash(playerid,PlayerInfo[playerid][pCash]);
	CurrentMoney[playerid] = PlayerInfo[playerid][pCash];

	new name2[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name2,sizeof(name2));

	/*if(PlayerInfo[playerid][pOneHost] == 0)
	{
		PlayerInfo[playerid][pOneHost] = 1;

		new var[256];
		mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Host`='%s' WHERE `name`='%s'",GetPlayerHost(playerid),name2);
		mysql_tquery(SQL, var,"","");
	}
	if(PlayerInfo[playerid][pHost] != GetPlayerHost(playerid)) {
		SCM(playerid, COLOR_RED, "TEST: asdasd!");
	//	KickEx(playerid);
	}*/

	if(PlayerInfo[playerid][pReg] == 0)
	{
		PlayerInfo[playerid][pLevel] = 1;
 	    PlayerInfo[playerid][pPos_x] = 2246.6;
 	    PlayerInfo[playerid][pPos_y] = -1161.9;
 	    PlayerInfo[playerid][pPos_z] = 1029.7;
		PlayerInfo[playerid][pInt] = 0;
		PlayerInfo[playerid][pLocal] = 255;
		PlayerInfo[playerid][pTeam] = 3;
		PlayerInfo[playerid][pModel] = 250;
		PlayerInfo[playerid][pPnumber] = 0;
		PlayerInfo[playerid][pPhousekey] = 999;
		PlayerInfo[playerid][pPbiskey] = 255;
		PlayerInfo[playerid][pAccount] = 1000;
		PlayerInfo[playerid][pReg] = 1;
		PlayerInfo[playerid][pCarSlots] = 2; // Adaugat de DrooM! Acum la inregistrare iti da 2 sloturi, inainte iti dadea 0!
		SetPlayerInterior(playerid,0);
		new str[256];
		gpci(playerid, PlayerInfo[playerid][pSerial], 128);
		mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Team`='3',`Model`='250',`IP`='%s',`gpci`='%s' WHERE `name`='%s'",playerip,PlayerInfo[playerid][pSerial],PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,str,"","");
		Update(playerid,pCashx);
		Update(playerid,pLevelx);
		Update(playerid,pPhousekeyx);
		Update(playerid,pPbiskeyx);
		Update(playerid,pPnumberx);
		Update(playerid,pRegx);
	}
	if(PlayerInfo[playerid][pFightStyle] > 0)
	{
	    if(PlayerInfo[playerid][pFightStyle] == 1)
	    {
	        SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
		}
		else if(PlayerInfo[playerid][pFightStyle] == 2)
	    {
	        SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
		}
		else if(PlayerInfo[playerid][pFightStyle] == 3)
	    {
	        SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		}
		else if(PlayerInfo[playerid][pFightStyle] == 4)
	    {
	        SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
		}
		else if(PlayerInfo[playerid][pFightStyle] == 5)
	    {
	        SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
		}
	}
	else if(PlayerInfo[playerid][pFightStyle] == 0)
	{
		SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
	}
    StopAudioStreamForPlayer(playerid);
    new string2[128];
    if(PlayerInfo[playerid][pTut] == 1)
    {
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
	}
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	new adminss=0, adminsafk=0, helperss=0, helpersafk=0;
	foreach(new ids2 : Player)
	{
		if(PlayerInfo[ids2][pAdmin] > 0)
		{
			adminss++;
			if(IsPlayerAFK[ids2] > 0)
			{
				adminsafk++;
			}
		}
		if(PlayerInfo[ids2][pHelper] > 0)
		{
			helperss++;
			if(IsPlayerAFK[ids2] > 0)
			{
				helpersafk++;
			}
		}
	}
	new var100[256];
	mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','> Player-ul s-a logat in joc')", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL,var100,"","");
	new query[256],playeriddd,strings[128],namee[30];
	GetPlayerName(playerid, namee, sizeof(namee));
	HudProgress[playerid][0] = CreatePlayerProgressBar(playerid, 511.00, 181.00, 99.00, 3.19, 16737095, 100.0, 0);
	if (PlayerInfo[playerid][pPremiumAccount] == 1)
	{
		SendClientMessage(playerid, COLOR_WHITE,"You are a Premium Account user!");
	}
	if (PlayerInfo[playerid][pPremiumAccount] == 2)
	{
		SendClientMessage(playerid, COLOR_WHITE,"You are a VIP user!");
	}
	if (PlayerInfo[playerid][pAdmin] > 0)
	{
		format(string2, sizeof(string2), "You are a level %d admin. There are %d admins online (%d not afk).",PlayerInfo[playerid][pAdmin],adminss,(adminss-adminsafk));
		SendClientMessage(playerid, COLOR_WHITE,string2);
		format(string2, sizeof(string2), "(B) HelloBot: %s has just logged in.",namee);
		ABroadCast(COLOR_ADMCHAT, string2,1);
	}
	if (PlayerInfo[playerid][pHelper] > 0)
	{
	    format(string2,sizeof(string2), "You are a level %d helper. There are %d helpers online (%d not afk).", PlayerInfo[playerid][pHelper],helperss,(helperss-helpersafk));
		SendClientMessage(playerid, COLOR_WHITE,string2);
		format(string2, sizeof(string2), "(B) HelloBot: %s has just logged in.",namee);
		ABroadCast(COLOR_ADMCHAT, string2,1);
	}
	format(query,sizeof(query),"SELECT PlayerID FROM `friends` WHERE `FriendID`='%d'", PlayerInfo[playerid][pSQLID]);
	new Cache: resultt = mysql_query(SQL,query);
	if(cache_get_row_count() > 0)
	{
		for(new iddd, jddd = cache_get_row_count (); iddd != jddd; ++iddd)
		{
			playeriddd = cache_get_field_content_int(iddd, "PlayerID");
			foreach(new ids : Player)
			{
				if(PlayerInfo[ids][pSQLID] == playeriddd)
				{
					if(PlayerInfo[ids][pLanguage] == 2) format(strings,sizeof(strings),"{FFC266}** {FFFF00}Prietenul tau, %s, s-a logat pe server. {FFC266}**", namee);
					else format(strings,sizeof(strings),"{FFC266}** {FFFF00}Your friend %s is now online. {FFC266}**", namee);
					SendClientMessage(ids, COLOR_YELLOW, strings);
				}
			}
		}
	}
	cache_delete(resultt);
	if (PlayerInfo[playerid][pWantedLevel] > 0)
	{
		SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
		PlayerTextDrawShow(playerid, WantedText[playerid]);
		new str1[256];
        if(PlayerInfo[playerid][pLanguage] == 2) format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[playerid]/60+1);
		else format(str1,sizeof(str1),"WANTED DECREASES IN: ~r~%d MINUTES",wantedlost[playerid]/60+1);
		PlayerTextDrawSetString(playerid, WantedText[playerid], str1);
		SS(playerid, COLOR_RED2, "Esti inca urmarit de politie. Nivelul de wanted ti-a fost restaurat.", "You're still a wanted man! Your criminal record was reinstated.");
		wantedlost[playerid] = 900;
		WantedPoints[playerid] = PlayerInfo[playerid][pWantedLevel]*2;
	}
	SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel], -1973.7002,137.7904,27.6875, 1.0, -1, -1, -1, -1, -1, -1);
    if(PlayerInfo[playerid][pClan] > 0)
    {
        new szName[25];
        if(PlayerInfo[playerid][pClanTag] == 1)
        {
            format(szName, sizeof(szName), "%s%s", ClanInfo[PlayerInfo[playerid][pClan]][cClanTag], PlayerInfo[playerid][pNormalName]);
            SetPlayerName(playerid, szName);
		}
		else if(PlayerInfo[playerid][pClanTag] == 2)
		{
            format(szName, sizeof(szName), "%s%s", PlayerInfo[playerid][pNormalName], ClanInfo[PlayerInfo[playerid][pClan]][cClanTag]);
            SetPlayerName(playerid, szName);
		}
	}
	if(gTeam[playerid] == 0)
	{
		gTeam[playerid] = 3;
	}
	else
	{
		gTeam[playerid] = PlayerInfo[playerid][pTeam];
	}
	if(PlayerInfo[playerid][pMember] != 0)
	{
	    new namex[25],disc[84];
	    GetPlayerName(playerid,namex,sizeof(namex));
	    format(disc,sizeof(disc),"(Group) {FFFFFF}%s from your group has just logged in.",namex);
	    SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, disc);
	    SCM(playerid,COLOR_GENANNOUNCE,disc);
	}
	if(PlayerInfo[playerid][pMember] != 0)
	{
		if(strlen(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]) > 0)
		{
		    new factioninfo[128];
			format(factioninfo, sizeof(factioninfo), "Group MOTD: {FFFFFF}%s", DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
			SendClientMessage(playerid, COLOR_GENANNOUNCE, factioninfo);
		}
	}
	if(PlayerInfo[playerid][pClan] != 0)
	{
		if(strlen(ClanInfo[PlayerInfo[playerid][pClan]][cClanMOTD]) > 0)
		{
			new claninfo[128];
			format(claninfo, sizeof(claninfo), "Clan MOTD: %s", ClanInfo[PlayerInfo[playerid][pClan]][cClanMOTD]);
			SendClientMessage(playerid, COLOR_CLAN, claninfo);
		}
	}
	if(PlayerInfo[playerid][pQuest1] == 0)
	{
		new quest1 = 1 + random(5),quest2 = 1 + random(6);
		if(IsACop(playerid) && quest1 == 4) quest1 = 2;
		PlayerInfo[playerid][pQuest1] = quest1;
		PlayerInfo[playerid][pQuest2] = quest2;
		Update(playerid, pQuest1x);
		Update(playerid, pQuest2x);
		if(quest1 == 1 || quest1 == 2 || quest1 == 4)
		{
			PlayerInfo[playerid][pQuestNeed1] = 1;
			Update(playerid, pQuestNeed1x);
		}
		if(quest2 == 6 || quest2 == 7)
		{
			PlayerInfo[playerid][pQuestNeed2] = 1;
			Update(playerid, pQuestNeed2x);
		}
		if(quest1 == 3)
		{
			new randcar = random(12);
			if(randcar == 0) PlayerInfo[playerid][pQuestCar] = 400;
			if(randcar == 1) PlayerInfo[playerid][pQuestCar] = 401;
			if(randcar == 2) PlayerInfo[playerid][pQuestCar] = 404;
			if(randcar == 3) PlayerInfo[playerid][pQuestCar] = 408;
			if(randcar == 4) PlayerInfo[playerid][pQuestCar] = 439;
			if(randcar == 5) PlayerInfo[playerid][pQuestCar] = 462;
			if(randcar == 6) PlayerInfo[playerid][pQuestCar] = 471;
			if(randcar == 7) PlayerInfo[playerid][pQuestCar] = 481;
			if(randcar == 8) PlayerInfo[playerid][pQuestCar] = 496;
			if(randcar == 9) PlayerInfo[playerid][pQuestCar] = 509;
			if(randcar == 10) PlayerInfo[playerid][pQuestCar] = 515;
			if(randcar == 11) PlayerInfo[playerid][pQuestCar] = 522;
			new randkm = 10 + random(25);
			PlayerInfo[playerid][pQuestNeed1] = randkm;
			Update(playerid, pQuestCarx);
			Update(playerid, pQuestNeed1x);
		}
		if(quest1 == 5)
		{
			new randmats = 3000 + random(7000);
			PlayerInfo[playerid][pQuestNeed1] = randmats;
			Update(playerid, pQuestNeed1x);
		}
		if(quest1 == 6)
		{
			new randfish = 5 + random(15);
			PlayerInfo[playerid][pQuestNeed1] = randfish;
			Update(playerid, pQuestNeed1x);
		}
		if(quest2 == 1)
		{
			new randpizza = 5 + random(10);
			PlayerInfo[playerid][pQuestNeed2] = randpizza;
			Update(playerid, pQuestNeed2x);
		}
		if(quest2 == 2)
		{
			new randcops = 2 + random(5);
			PlayerInfo[playerid][pQuestNeed2] = randcops;
			Update(playerid, pQuestNeed2x);
		}
		if(quest2 == 3)
		{
			new rand = 10 + random(15) + random(20);
			PlayerInfo[playerid][pQuestNeed2] = rand;
			Update(playerid, pQuestNeed2x);
		}
		if(quest2 == 4)
		{
			new rand = 25 + random(25) + random(25);
			PlayerInfo[playerid][pQuestNeed2] = rand;
			Update(playerid, pQuestNeed2x);
		}
		if(quest2 == 5)
		{
			new rand = 50 + random(25) + random(25);
			PlayerInfo[playerid][pQuestNeed2] = rand;
			Update(playerid, pQuestNeed2x);
		}
		new questt1[128],questt2[128],questt11[256],questt22[256];
		if(PlayerInfo[playerid][pLanguage] == 1)
		{
			if(PlayerInfo[playerid][pQuest1] == 1)  format(questt1,sizeof(questt1),"Go to the baseball stadium located in Las Venturas");
			else if(PlayerInfo[playerid][pQuest1] == 2)  format(questt1,sizeof(questt1),"Climb mount Chiliad");
			else if(PlayerInfo[playerid][pQuest1] == 3)  format(questt1,sizeof(questt1),"Travel %d KM with vehicle %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
			else if(PlayerInfo[playerid][pQuest1] == 4)  format(questt1,sizeof(questt1),"Rob a business");
			else if(PlayerInfo[playerid][pQuest1] == 5)  format(questt1,sizeof(questt1),"Collect %d materials",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 6)  format(questt1,sizeof(questt1),"Catch and sell %d fish",PlayerInfo[playerid][pQuestNeed1]);

			if(PlayerInfo[playerid][pQuest2] == 1)  format(questt2,sizeof(questt2),"Deliver %d pizza",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 2)
			{
				if(!IsACop(playerid))
				{
					format(questt2,sizeof(questt2),"Kill %d cops",PlayerInfo[playerid][pQuestNeed2]);
				}
				else
				{
					format(questt2,sizeof(questt2),"Arrest %d suspects",PlayerInfo[playerid][pQuestNeed2]);
				}
			}
			else if(PlayerInfo[playerid][pQuest2] == 3)  format(questt2,sizeof(questt2),"Kill %d players at paintball",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 4)  format(questt2,sizeof(questt2),"Collect and unload %d KG of garbage",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 5)  format(questt2,sizeof(questt2),"Sell %d KG of flour",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 6)  format(questt2,sizeof(questt2),"Buy drugs and use them");
			else if(PlayerInfo[playerid][pQuest2] == 7)  format(questt2,sizeof(questt2),"Go in a bar and get drunk");

			format(questt11,sizeof(questt11),"Quest: %s | Progress: %d/%d",questt1,PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
			format(questt22,sizeof(questt22),"Quest: %s | Progress: %d/%d",questt2,PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
		}
		else
		{
			if(PlayerInfo[playerid][pQuest1] == 1)  format(questt1,sizeof(questt1),"Mergi pe stadionul de baseball din Las Venturas");
			else if(PlayerInfo[playerid][pQuest1] == 2)  format(questt1,sizeof(questt1),"Urca pe muntele Chiliad");
			else if(PlayerInfo[playerid][pQuest1] == 3)  format(questt1,sizeof(questt1),"Parcurge distanta de %d KM cu un vehicul de tipul %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
			else if(PlayerInfo[playerid][pQuest1] == 4)  format(questt1,sizeof(questt1),"Jefuieste o afacere");
			else if(PlayerInfo[playerid][pQuest1] == 5)  format(questt1,sizeof(questt1),"Colecteaza %d materiale",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 6)  format(questt1,sizeof(questt1),"Vinde %d pesti",PlayerInfo[playerid][pQuestNeed1]);

			if(PlayerInfo[playerid][pQuest2] == 1)  format(questt2,sizeof(questt2),"Livreaza %d pizza",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 2)
			{
				if(!IsACop(playerid))
				{
					format(questt2,sizeof(questt2),"Omoara %d politisti",PlayerInfo[playerid][pQuestNeed2]);
				}
				else
				{
					format(questt2,sizeof(questt2),"Aresteaza %d suspecti",PlayerInfo[playerid][pQuestNeed2]);
				}
			}
			else if(PlayerInfo[playerid][pQuest2] == 3)  format(questt2,sizeof(questt2),"Omoara %d playeri la Paintball",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 4)  format(questt2,sizeof(questt2),"Colecteaza si descarca %d KG de gunoi",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 5)  format(questt2,sizeof(questt2),"Vinde %d KG de faina",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 6)  format(questt2,sizeof(questt2),"Cumpara droguri si foloseste-le");
			else if(PlayerInfo[playerid][pQuest2] == 7)  format(questt2,sizeof(questt2),"Du-te intr-un bar si imbata-te");

			format(questt11,sizeof(questt11),"Misiune: %s | Progres: %d/%d",questt1,PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
			format(questt22,sizeof(questt22),"Misiune: %s | Progres: %d/%d",questt2,PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
		}

		SendClientMessage(playerid, COLOR_YELLOW, questt11);
		SendClientMessage(playerid, COLOR_YELLOW, questt22);
	}
	else
	{
		new questt1[128],questt2[128],questt11[256],questt22[256];
		if(PlayerInfo[playerid][pLanguage] == 1)
		{
			if(PlayerInfo[playerid][pQuest1] == 1)  format(questt1,sizeof(questt1),"Go to the baseball stadium located in Las Venturas");
			else if(PlayerInfo[playerid][pQuest1] == 2)  format(questt1,sizeof(questt1),"Climb mount Chiliad");
			else if(PlayerInfo[playerid][pQuest1] == 3)  format(questt1,sizeof(questt1),"Travel %d KM with vehicle %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
			else if(PlayerInfo[playerid][pQuest1] == 4)  format(questt1,sizeof(questt1),"Rob a business");
			else if(PlayerInfo[playerid][pQuest1] == 5)  format(questt1,sizeof(questt1),"Collect %d materials",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 6)  format(questt1,sizeof(questt1),"Catch and sell %d fish",PlayerInfo[playerid][pQuestNeed1]);

			if(PlayerInfo[playerid][pQuest2] == 1)  format(questt2,sizeof(questt2),"Deliver %d pizza",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 2)
			{
				if(!IsACop(playerid))
				{
					format(questt2,sizeof(questt2),"Kill %d cops",PlayerInfo[playerid][pQuestNeed2]);
				}
				else
				{
					format(questt2,sizeof(questt2),"Arrest %d suspects",PlayerInfo[playerid][pQuestNeed2]);
				}
			}
			else if(PlayerInfo[playerid][pQuest2] == 3)  format(questt2,sizeof(questt2),"Kill %d players at paintball",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 4)  format(questt2,sizeof(questt2),"Collect and unload %d KG of garbage",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 5)  format(questt2,sizeof(questt2),"Sell %d KG of flour",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 6)  format(questt2,sizeof(questt2),"Buy drugs and use them");
			else if(PlayerInfo[playerid][pQuest2] == 7)  format(questt2,sizeof(questt2),"Go in a bar and get drunk");

			format(questt11,sizeof(questt11),"Quest: %s | Progress: %d/%d",questt1,PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
			format(questt22,sizeof(questt22),"Quest: %s | Progress: %d/%d",questt2,PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
		}
		else
		{
			if(PlayerInfo[playerid][pQuest1] == 1)  format(questt1,sizeof(questt1),"Mergi pe stadionul de baseball din Las Venturas");
			else if(PlayerInfo[playerid][pQuest1] == 2)  format(questt1,sizeof(questt1),"Urca pe muntele Chiliad");
			else if(PlayerInfo[playerid][pQuest1] == 3)  format(questt1,sizeof(questt1),"Parcurge distanta de %d KM cu un vehicul de tipul %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
			else if(PlayerInfo[playerid][pQuest1] == 4)  format(questt1,sizeof(questt1),"Jefuieste o afacere");
			else if(PlayerInfo[playerid][pQuest1] == 5)  format(questt1,sizeof(questt1),"Colecteaza %d materiale",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 6)  format(questt1,sizeof(questt1),"Vinde %d pesti",PlayerInfo[playerid][pQuestNeed1]);

			if(PlayerInfo[playerid][pQuest2] == 1)  format(questt2,sizeof(questt2),"Livreaza %d pizza",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 2)
			{
				if(!IsACop(playerid))
				{
					format(questt2,sizeof(questt2),"Omoara %d politisti",PlayerInfo[playerid][pQuestNeed2]);
				}
				else
				{
					format(questt2,sizeof(questt2),"Aresteaza %d suspecti",PlayerInfo[playerid][pQuestNeed2]);
				}
			}
			else if(PlayerInfo[playerid][pQuest2] == 3)  format(questt2,sizeof(questt2),"Omoara %d playeri la Paintball",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 4)  format(questt2,sizeof(questt2),"Colecteaza si descarca %d KG de gunoi",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 5)  format(questt2,sizeof(questt2),"Vinde %d KG de faina",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 6)  format(questt2,sizeof(questt2),"Cumpara droguri si foloseste-le");
			else if(PlayerInfo[playerid][pQuest2] == 7)  format(questt2,sizeof(questt2),"Du-te intr-un bar si imbata-te");

			format(questt11,sizeof(questt11),"Misiune: %s | Progres: %d/%d",questt1,PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
			format(questt22,sizeof(questt22),"Misiune: %s | Progres: %d/%d",questt2,PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
		}

		SendClientMessage(playerid, COLOR_YELLOW, questt11);
		SendClientMessage(playerid, COLOR_YELLOW, questt22);
	}
	#if ACTIVE_QUEST == 1
		new questtext[128],questtext2[128],countobj;
		for(new obj = 1; obj <= questobjectss; obj++)
		{
			if(PlayerInfo[playerid][pFoundObject][obj] == 1) countobj++;
		}
		SendClientMessage(playerid, COLOR_YELLOW, "");
		format(questtext, sizeof(questtext), "Misiune Speciala: Gaseste toate cadourile ascunse. Progres: %d/%d.", countobj, questobjectss);
		format(questtext2, sizeof(questtext2), "Special Quest: Find all the hidden gifts. Progress: %d/%d.", countobj, questobjectss);
		SS(playerid, COLOR_YELLOW, questtext, questtext2);
		SS(playerid, COLOR_YELLOW, "Misiunea speciala va fi dezactivata pe xx/xx/xxxx.", "The special quest will be disabled on 03.01.2017.");
		SS(playerid, COLOR_YELLOW, "Premiu: 20x bani castigati la payday, 20RP, 20 puncte rob, 1 slot pt vehicule (daca nu ai 1 liber), 1 Monster Truck TEMPORAR.", "Reward: 20x money earned from payday, 20RP, 20 rob points, 1 vehicle slot (if you don't have 1 free), 1 TEMPORARY Monster Truck.");
	#endif
	new sendername[30],
		playersip[64],
		qqerry[500],
		stringname[128],
		serial[128];
	GetPlayerName(playerid,sendername,sizeof(sendername));
	GetPlayerIp(playerid,playersip,sizeof(playersip));
	gpci(playerid, serial, sizeof(serial));
	mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `playerconnections` (`playerid`,`ip`,`gpci`,`time`) VALUES ('%d','%s','%s','%d')", PlayerInfo[playerid][pSQLID], playersip, serial, gettime());
	mysql_tquery(SQL, qqerry, "", "");
	gPlayerLogged[playerid] = 1;
	SpawnPlayer(playerid);
	new y, m, d, h, mi, s;
	getdate(y,m,d);
	gettime(h,mi,s);
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `users` SET `Status`='1',`OnlineToday`='1',`OnlineThisWeek`='1',`LastIP`='%s',`lastOn`='%d-%02d-%02d %02d:%02d:%02d' WHERE `id` = '%d'", playersip, y, m, d, h, mi, s, PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL,qqerry,"","");
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `friends` SET `Status` = '1' WHERE `FriendID` = '%d'", PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL,qqerry,"","");
	printf("%s has been connected to the server (IP: %s).",sendername,playersip);
 	format(stringname,sizeof(stringname),"%s / %s", PlayerInfo[playerid][pNormalName]);
	PlayerTextDrawSetString(playerid, logo[playerid], stringname);
	PlayerTextDrawShow(playerid, logo[playerid]);
	if(PlayerInfo[playerid][pLevel] > 4)
	{
		if(strcmp(PlayerInfo[playerid][pSerial], serial, true))
		{
			new str2[500],unblocked;
			format(str2, sizeof(str2), "SELECT * FROM `blockedaccounts` WHERE `pid`='%d' AND `gpci`='%s'", PlayerInfo[playerid][pSQLID], serial);
			new Cache: abbb = mysql_query(SQL, str2);
			if(cache_get_row_count() > 0)
			{
				unblocked = cache_get_field_content_int(0, "unblock");
			}
			else
			{
				unblocked = 1;
			}
			cache_delete(abbb);
			if(unblocked > 0)
			{
				SS(playerid, COLOR_RED2, "Te-ai logat dintr-o locatie diferita decat locatia din care te loghezi de obicei.", "You logged in from a different location.");
				SS(playerid, COLOR_RED2, "Contul tau este blocat temporar. Nu poti transfera bani unui alt player si nu poti vinde bunuri personale.", "Your account is limited. You can't sell/buy money or goods.");
				SS(playerid, COLOR_RED2, "Nu trebuie sa faci nimic pentru deblocarea contului. Contul tau va fi deblocat automat peste 72 ore.", "You don't need to do anything in order to unblock your account. Your account will be unlocked in 72 hours.");
				SS(playerid, COLOR_RED2, "Timpul pana la deblocarea contului trece si daca nu esti online.", "Your account will be unblocked even if you're not online.");
				PlayerInfo[playerid][pBlockedAcc] = 1;
				format(str2, sizeof(str2), "SELECT * FROM `blockedaccounts` WHERE `pid`='%d' AND `gpci`='%s'", PlayerInfo[playerid][pSQLID], serial);
				new Cache: ab = mysql_query(SQL, str2);
				if(cache_get_row_count() == 0)
				{
					new text[256], text2[256], year, month, day, hour, minute, second;
					getdate(year, month, day);
					gettime(hour, minute, second);
					if(PlayerInfo[playerid][pLanguage] == 2) format(text, sizeof(text), "SECURITATE: Cineva a incercat sa se logheze pe contul tau de pe IP-ul %s pe data de %d.%d.%d, %s%d:%s%d. Daca nu ai fost tu, schimba-ti parola (/changepass).", playersip, day, month, year, ((hour < 10) ? ("0") : ("")), hour, ((minute < 10) ? ("0") : ("")), minute);
					else format(text, sizeof(text), "SECURITY: Someone tried loggin in on your account using IP %s on %d.%d.%d, %s%d:%s%d. If it wasn't you, please change your password. Use /changepass to change your password.", playersip, day, month, year, ((hour < 10) ? ("0") : ("")), hour, ((minute < 10) ? ("0") : ("")), minute);
					mysql_real_escape_string(text, text2);
					mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", PlayerInfo[playerid][pSQLID], text2);
					mysql_tquery(SQL, qqerry, "", "");
				}
				cache_delete(ab);
				if(strcmp(PlayerInfo[playerid][pEmail], "email@yahoo.com", true))
				{
					new emails[500],key[64],key2[65];
					randomString(key, 64);
					format(key2, sizeof(key2), key);
					format(str2, sizeof(str2), "SELECT * FROM `blockedaccounts` WHERE `pid`='%d' AND `gpci`='%s'", PlayerInfo[playerid][pSQLID], serial);
					new Cache: xdd = mysql_query(SQL, str2);
					if(cache_get_row_count() > 0)
					{
						mysql_format(SQL, emails, sizeof(emails), "UPDATE `blockedaccounts` SET `key`='%s',`linkexpire`='%d' WHERE `pid`='%d' AND `gpci`='%s'", key, (gettime() + 3600*2), PlayerInfo[playerid][pSQLID], serial);
						mysql_tquery(SQL, emails, "", "");
					}
					else
					{
						mysql_format(SQL, emails, sizeof(emails), "INSERT INTO `blockedaccounts` (`pid`,`gpci`,`key`,`unblock`,`linkexpire`) VALUES ('%d','%s','%s','%d','%d')", PlayerInfo[playerid][pSQLID], serial, key, (gettime() + 3*86400), (gettime() + 2*3600));
						mysql_tquery(SQL, emails, "", "");
					}
					cache_delete(xdd);
					format(emails, sizeof(emails), "bigzone.ro/drrt.php?code=778231&name=%s&de=%s&id=%d&key=%s", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pEmail], PlayerInfo[playerid][pSQLID], key2);
					HTTP(playerid, HTTP_GET, emails, "", "EmailDelivered");
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "-- -- --");
					SendClientMessage(playerid, COLOR_YELLOW, "Email couldn't send because you don't have an valid email.");
					SendClientMessage(playerid, COLOR_WHITE, "-- -- --");
				}
			}
		}
	}
	login[playerid] = 0;
	LoadCarID(playerid);
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if(pickupid == dsp)
	{
	    PlayerTextDrawShow(playerid, TextJos[playerid]);
		PlayerTextDrawSetString(playerid, TextJos[playerid], "Type ~r~/buycar ~w~if you want to buy a vehicle. You can have maximum of 2 vehicles as a regular user or 4 if you have a premium account (~r~/premium~w~)");
	}
	#if ACTIVE_QUEST == 1
		for(new o = 1; o <= questobjectss; o++)
		{
			if(pickupid == PlayerInfo[playerid][pObject][o])
			{
				if(PlayerInfo[playerid][pFoundObject][o] == 0)
				{
					new string[128],string2[128];
					if(QuestWait[playerid] == 0)
					{
						DestroyDynamicPickup(PlayerInfo[playerid][pObject][o]);
						PlayerInfo[playerid][pObject][o] = 0;
						PlayerInfo[playerid][pFoundObject][o] = 1;
						new objectsfound,query[256];
						mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `Object%d`='1' WHERE `name`='%s'", o, PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL, query, "", "");
						for(new x; x <= questobjectss; x++)
						{
							if(PlayerInfo[playerid][pFoundObject][x] == 1) objectsfound++;
						}
						format(string, sizeof(string), "Quest special actualizat. Ai gasit %d/%d obiecte.", objectsfound, questobjectss);
						format(string2, sizeof(string2), "Special quest updated. You found %d/%d hidden objects.", objectsfound, questobjectss);
						SS(playerid, COLOR_YELLOW, string, string2);
						if(objectsfound == questobjectss)
						{
							new name[30];
							GetPlayerName(playerid, name, sizeof(name));
							format(string, sizeof(string), "** MISIUNE SPECIALA: %s a gasit toate cele %d de obiecte ascunse! Felicitari! **", name, questobjectss);
							format(string2, sizeof(string2), "** SPECIAL QUEST: %s found all the hidden objects! **", name);
							foreach(new p: Player)
							{
								SS(p, COLOR_GENANNOUNCE, string, string2);
							}
							new money = 20*(PlayerInfo[playerid][pLevel] * (3000 + random(2000)));
							PlayerInfo[playerid][pAccount] += money;
							PlayerInfo[playerid][pExp] += 20;
							PlayerInfo[playerid][pRob] += 20;
							Update(playerid,pRP);
							Update(playerid,pRob);
							Update(playerid,pCashx);
							format(string, sizeof(string), "Ai primit $%s.", FormatNumber(money));
							format(string2, sizeof(string2), "You received $%s.", FormatNumber(money));
							SS(playerid, COLOR_YELLOW, string, string2);
							SS(playerid, COLOR_YELLOW, "Ai primit 20 Respect Points.", "You received 20 Respect Points.");
							SS(playerid, COLOR_YELLOW, "Ai primit 20 puncte rob.", "You received 20 rob points.");
							new total,str2[256],masina=1;
							for(new v; v < MAX_PERSONAL_VEHICLES; v++)
							{
								if(PlayerInfo[playerid][pCar][v] != -1) total++;
							}
							if(total+1 > PlayerInfo[playerid][pCarSlots])
							{
								if(PlayerInfo[playerid][pCarSlots] < MAX_PERSONAL_VEHICLES)
								{
									PlayerInfo[playerid][pCarSlots] += 1;
									mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `CarSlots`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarSlots],PlayerInfo[playerid][pNormalName]);
									mysql_tquery(SQL,str2,"","");
									SS(playerid, COLOR_YELLOW, "Ai primit un slot pentru vehicule.", "You received a vehicle slot.");
								}
								else
								{
									masina = 0;
								}
							}
							if(masina == 1)
							{
								InsertCar(playerid,105,3);
								SS(playerid, COLOR_YELLOW, "Ai primit un monster truck temporar. Va disparea pe 03.01.2017.", "You received a monster truck. He will disappear on 30.01.2017.");
							}
							else SendClientMessage(playerid, COLOR_COOLRED, "ERROR: Maximum vehicle slots reached.");
						}
						QuestWait[playerid] = 30;
					}
					else
					{
						format(string, sizeof(string), "Trebuie sa astepti %d secunde inainte sa iei un alt obiect ascuns.", QuestWait[playerid]);
						format(string2, sizeof(string2), "You need to wait %d seconds before collecting another hidden object.", QuestWait[playerid]);
						SS(playerid, COLOR_LIGHTGREEN3, string, string2);
					}
				}
				else
				{
					DestroyDynamicPickup(PlayerInfo[playerid][pObject][o]);
				}
			}
		}
	#endif
    return 1;
}

public LeaderChat(color,const string[])
{
	foreach(new i : Player)
 	{
		if(gPlayerLogged[i] == 1)
		{
			if (PlayerInfo[i][pLeader] >= 1 || PlayerInfo[i][pAdmin] >= 1)
			{
			    if(toglc[i] == 0)
				{
					SendClientMessage(i, color, string);
				}
			}
		}
	}
	return 1;
}

public ABroadCast(color,const string[],level)
{
	foreach(new i : Player)
	{
	    if(IsPlayerConnected(i))
	    {
			if(gPlayerLogged[i] == 1)
			{
				if (PlayerInfo[i][pAdmin] >= level)
				{
					SendClientMessage(i, color, string);
				}
			}
		}
	}
	return 1;
}

public HLChat(color,const string[])
{
	foreach(new i : Player)
	{
		if(gPlayerLogged[i] == 1)
		{
			if (PlayerInfo[i][pHelper] >= 1)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

stock SendSplitMessage(playerid, color, final[])
{
    new len = strlen(final),
		_iL = len / EX_SPLITLENGTHH;
	if( ( len % EX_SPLITLENGTHH ) ) _iL++;
	new _Line[EX_SPLITLENGTHH+5];
	new _:_i@Index;
	while( _i@Index < _iL )
	{
		if( _i@Index == 0 )
			strmid( _Line, final, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );
		else
			strmid( _Line, final, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );

		if( _iL > 1 )
		{
			if( _i@Index > 0 )
			{
				format( _Line, sizeof _Line, "... %s", _Line );
			}
		}
		SendClientMessage(playerid, color, _Line);
		_i@Index++;
	}
    return 1;
}

stock randomString(strDest[], strLen = 10)
{
	while(strLen--)
		strDest[strLen] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');
}

public OOCNews(color,string[])
{
	foreach(new i : Player)
	{
	    if(!gNews[i])
	    {
			SendSplitMessage(i, color, string);
		}
	}
	return 1;
}

public OOCNews2(color,const string[])
{
	foreach(new i : Player)
	{
		SendClientMessage(i, color, string);
	}
	return 1;
}

public SendRadioMessage(member, color, string[])
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member)
	    {
			SendClientMessage(i, color, string);
		}
	}
	return 1;
}

public SendTeamMessage(member, color, string[])
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member)
	    {
			SendClientMessage(i, color, string);
		}
		if(FactionSpec[i] == member && PlayerInfo[i][pAdmin] >= 1)
		{
			SendClientMessage(i, COLOR_RADIOCHAT, string);
		}
	}
	return 1;
}

public SendFamilyMessage(family, color, string[])
{
	foreach(new i : Player)
	{
        if(gPlayerLogged[i] == 1)
        {
		    if(PlayerInfo[i][pMember] == family || PlayerInfo[i][pLeader] == family)
		    {
	            if(!gFam[i])
	            {
					SendClientMessage(i, color, string);
				}
			}
			if(FactionSpec[i] == family && PlayerInfo[i][pAdmin] >= 1)
			{
				SendClientMessage(i, COLOR_RADIOCHAT, string);
			}
		}
	}
	return 1;
}

stock nearByMessage(playerid, color, string[], Float: Distance3 = 12.0) {
	new
	    Float: nbCoords[3];

	GetPlayerPos(playerid, nbCoords[0], nbCoords[1], nbCoords[2]);

	foreach(new i : Player) {
	        if(IsPlayerInRangeOfPoint(i, Distance3, nbCoords[0], nbCoords[1], nbCoords[2]) && (GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))) {
				SendClientMessage(i, color, string);
	    }
	}

	return 1;
}

stock CalculateBestScore(turfid)
{
    new bestid;
    if(WarInfo[turfid][wAttacker] != 0 && WarInfo[turfid][wFaction] != 0)
    {
        new bestscore,
            group1 = WarInfo[turfid][wAttacker],
            group2 = WarInfo[turfid][wFaction];
        foreach(new i : Player)
        {
            if(group1 == PlayerInfo[i][pMember] || group2 == PlayerInfo[i][pMember])
            {
                new score;
                score = ucideri[i][turfid] - decese[i][turfid];
                if(score >= bestscore)
                {
                    bestscore = score;
                    bestid = i;
                }
            }
        }
    }
	return bestid;
}

stock CalculateWorstScore(turfid)
{
    new bestid;
    if(WarInfo[turfid][wAttacker] != 0 && WarInfo[turfid][wFaction] != 0)
    {
        new bestscore,
            group1 = WarInfo[turfid][wAttacker],
            group2 = WarInfo[turfid][wFaction];
        foreach(new i : Player)
        {
            if(group1 == PlayerInfo[i][pMember] || group2 == PlayerInfo[i][pMember])
            {
                new score;
                score = ucideri[i][turfid] - decese[i][turfid];
                if(score <= bestscore)
                {
                    bestscore = score;
                    bestid = i;
                }
            }
        }
    }
    return bestid;
}

OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	if(eventobjects > 0)
	{
		if(PlayerInfo[playerid][pAdmin] < 1)
	    {
		    for(new obj; obj < 11; obj++)
		    {
		    	if(pickupid == objectevent[obj])
		    	{
		    	    eventobjects--;
		    	    new string[128],name[30];
		    	    GetPlayerName(playerid, name, sizeof(name));
		    	    GivePlayerCash(playerid, eventprizeobj[obj]);
		    	    Update(playerid,pCashx);
		    	    DestroyPickup(objectevent[obj]);
		    	    format(string,sizeof(string),"NR AdmBot: Un obiect din event a fost gasit de %s. Acesta a castigat un premiu de $%s!",name,FormatNumber(eventprizeobj[obj]));
	                OOCNews(COLOR_ORANGE,string);
	                if(eventobjects > 0)
	                {
	                    format(string,sizeof(string),"NR AdmBot: Eventul continua. Mai sunt %d obiecte de gasit!",eventobjects);
	                }
	                else
	                {
						format(string,sizeof(string),"NR AdmBot: Eventul a luat sfarsit. Multumim pentru participare!");
					}
	               	OOCNews(COLOR_ORANGE,string);
					objectevent[obj] = 0;
		    	    eventprizeobj[obj] = 0;
				}
			}
		}
	}
	else if(pickupid == dmvp)
	{
	    PlayerTextDrawShow(playerid, TextJos[playerid]);
		PlayerTextDrawSetString(playerid, TextJos[playerid], "Type ~r~/exam ~w~to start the test");
	}
	else if(pickupid == gslsenter1)
	{
		SetPlayerPosEx(playerid, 302.3855,-142.1355,1004.0625);
	}
	else if(pickupid == gslsenter2)
	{
		SetPlayerPosEx(playerid, 296.4399,-141.7991,1004.0625);
	}
	else if(pickupid == gslsenter3)
	{
		SetPlayerPosEx(playerid, 308.8968,-141.8929,1004.0625);
	}
	else if(pickupid == gslsenter4)
	{
		SetPlayerPosEx(playerid, 302.3855,-142.1355,1004.0625);
    }
	if(pickupid == Obiect)
	{
		DestroyPickup(Obiect);

		new
			string[256],
			randpoints = 50 + random(20),
			name[MAX_PLAYER_NAME],
			Hour, Minute, Second;

		Winner = 1;
		GetPlayerName(playerid, name, sizeof(name));
		format(string, sizeof(string), "({33CCFF}Treasure Hunt{FFFFFF}) {FFA500}Obiectul a fost gasit de %s!", name);
		SendClientMessageToAll(COLOR_WHITE, string);
		gettime(Hour, Minute, Second);
		format(string, sizeof(string), "{FFA500}Un nou obiect v-a fi ascuns in 10 minute", Minutes-Minute+10);
		SendClientMessageToAll(COLOR_WHITE, string);
		format(string, sizeof(string), "Ai primit %d treasure points", randpoints);
		SendClientMessage(playerid, 0x2C8522FF, string);
		PlayerInfo[playerid][pTreasurePoints] += randpoints;
		Update(playerid, pTreasurePoints);
	}
	return 1;
}
forward CheckHall();
public CheckHall()
{
	Timer = SetTimer("HalloweenEvent", 600000, true);
	KillTimer(Timer);
	return 1;
}

forward HalloweenEvent();
public HalloweenEvent()
{
	new
		string[256],
		rand = random(sizeof(gRandomPositions));

	if(Winner == 0)
	{
		DestroyPickup(Obiect);
		SendClientMessageToAll(-1, "Nobody has found the Obiect.");
	}

	Winner = 0;
	Number = rand;
	Obiect = CreatePickup(19320, 21, gRandomPositions[rand][0], gRandomPositions[rand][1], gRandomPositions[rand][2]);

	SendClientMessageToAll(COLOR_LIGHTBLUE, "({33CCFF}Treasure Hunt{FFFFFF}):");
	format(string, sizeof(string), "{FFA500}Atentie! Un obiect a fost ascuns in {FFA500}%s, ai 10 minute la dispozitie sa-l gasesti!", LocationsName[rand]);
	SendClientMessageToAll(COLOR_WHITE, string);

	new Hour, Minute, Second;
	gettime(Hour, Minute, Second);
	Minutes = Minute;
	return 1;
}

forward ValidTuningCar(carid);
public	ValidTuningCar(carid)
{
	if(GetVehicleModel(carid) == 558 || GetVehicleModel(carid) == 565 || GetVehicleModel(carid) == 561 || GetVehicleModel(carid) == 562 || GetVehicleModel(carid) == 559 || GetVehicleModel(carid) == 560)
	{
	    return 1;
	}
	return 0;
}
CMD:blackjack(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(BJDeactivated[playerid] == -1) return SendClientMessage(playerid, COLOR_NEWBIE, "E dezactivat");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1963.4786, 1009.7115, 993.4035) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1959.3018, 1009.7852, 993.4035) && !IsPlayerInRangeOfPoint(playerid, 10.0, 1961.3555, 1016.0435, 992.4688) && !IsPlayerInRangeOfPoint(playerid, 10.0, 1961.3580, 1019.7963, 992.4688) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1959.2462, 1025.4403, 993.4035)
	&& !IsPlayerInRangeOfPoint(playerid, 5.0, 1963.5283, 1025.4406, 993.4035)) return SS(playerid, COLOR_WHITE, "Nu esti la o masa de Black Jack.", "You are not at a Black Jack table.");
	new text[128];
	BJMatch[playerid] = 0;
	CloseBMatch[playerid] = 0;
	BDeal[playerid] = 0;
	BDealerScore[playerid] = 0;
	BlackJackPlayerScore[playerid] = 0;
	BDealerCards[playerid] = 0;
	BlackJackPlayerCards[playerid] = 0;
	for(new x; x < 5; x++)
	{
		BDealerCard[playerid][x] = 0;
		BlackJackPlayerCard[playerid][x] = 0;
	}
	PlayerTextDrawShow(playerid, BJusebox1[playerid]);
	PlayerTextDrawShow(playerid, BJusebox2[playerid]);
	PlayerTextDrawShow(playerid, BJusebox3[playerid]);
	PlayerTextDrawShow(playerid, BJDealerText[playerid]);
	PlayerTextDrawShow(playerid, BJPlayerText[playerid]);
	PlayerTextDrawShow(playerid, BJBlackJackText[playerid]);
	PlayerTextDrawShow(playerid, BJScoreText[playerid]);
	PlayerTextDrawShow(playerid, BJDealText[playerid]);
	PlayerTextDrawShow(playerid, BJDealAmountText[playerid]);
	PlayerTextDrawShow(playerid, BJBalanceText[playerid]);
	PlayerTextDrawShow(playerid, BJBalanceAmountText[playerid]);
	PlayerTextDrawShow(playerid, BJDealButtonText[playerid]);
	PlayerTextDrawShow(playerid, BJEnterBetText[playerid]);
	PlayerTextDrawShow(playerid, BJDealerScoreText[playerid]);
	PlayerTextDrawShow(playerid, BJPlayerScoreText[playerid]);
	PlayerTextDrawShow(playerid, BJOpenActionText[playerid]);
	PlayerTextDrawShow(playerid, BJDealerCard1[playerid]);
	PlayerTextDrawShow(playerid, BJDealerCard2[playerid]);
	PlayerTextDrawShow(playerid, BJDealerCard3[playerid]);
	PlayerTextDrawShow(playerid, BJDealerCard4[playerid]);
	PlayerTextDrawShow(playerid, BJDealerCard5[playerid]);
	PlayerTextDrawShow(playerid, BJPlayerCard1[playerid]);
	PlayerTextDrawShow(playerid, BJPlayerCard2[playerid]);
	PlayerTextDrawShow(playerid, BJPlayerCard3[playerid]);
	PlayerTextDrawShow(playerid, BJPlayerCard4[playerid]);
	PlayerTextDrawShow(playerid, BJPlayerCard5[playerid]);
	format(text, sizeof(text), "%s$", FormatNumber(GetPlayerCash(playerid)));
	PlayerTextDrawSetString(playerid, BJBalanceAmountText[playerid], text);
	PlayerTextDrawSetString(playerid, BJDealAmountText[playerid], "0$");
	PlayerTextDrawSetString(playerid, BJDealerCard1[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJDealerCard2[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJDealerCard3[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJDealerCard4[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJDealerCard5[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJPlayerCard1[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJPlayerCard2[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJPlayerCard3[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJPlayerCard4[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJPlayerCard5[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJDealerScoreText[playerid], "DEALER: 0");
	PlayerTextDrawSetString(playerid, BJPlayerScoreText[playerid], "PLAYER: 0");

	TogglePlayerControllable(playerid, false);
	SelectTextDraw(playerid, 0xFF0000FF);
	return 1;
}
CMD:pcolor(playerid, params[])
{
	if(PlayerInfo[playerid][pPremiumAccount] > 0)
	{
		new string[700],string2[1000];
		format(string,sizeof(string),"{CECECE}White\n{0087FE}Blue\n{4700C2}Dark purple\n{EBFF00}Yellow\n{EF00FF}Purple\n{40FF00}Green\n{9CFF29}Lime green\n{0E7F03}Dark green\n{FF9A00}Orange\n{6E6E6E}Black\n{FF4C9D}Pink\n{F4FA58}Yellow 2\n{00BFFF}Blue 2\n{819FF7}Blue 3\n{FE9A2E}Orange 2\n{FA8258}Orange 3\n{00FF40}Green 2\n{D358F7}Purple 2");
		format(string2,sizeof(string2),"%s\n{4169E1}Royan Blue\n{9ACD32}YellowGreen\n{F0E68C}Khaki\n{BDB76B}DarkKhaki\n{FF1493}DeepPink\n{9966CC}Amethyst\n{F0B2B2}PinkOrange\n{DB7093}PaleVioletRed",string);
		ShowPlayerDialog(playerid, 6267, DIALOG_STYLE_LIST, "Nickname color", string2, "Choose", "Cancel");
	}
	else return SendClientMessage(playerid,COLOR_WHITE,"You are not a premium user.");
	return 1;
}
CMD:acolor(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
	{
		ShowPlayerDialog(playerid, 6268, DIALOG_STYLE_LIST, "Nickname color", "White\nCool Red\nDark Red\nLight Red", "Choose", "Cancel");
	}
	return 1;
}
CMD:raport(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to login first.");
    new coordsstring[256];
    new commands = PlayerInfo[playerid][pMember];
	new raportnews = PlayerInfo[playerid][pSession];
	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pMember] == 8)
	{
	format(coordsstring, sizeof(coordsstring), "Raport factiune [aresteaza 25 de suspecti]. Progres: %d/25.",commands);
	SendClientMessage(playerid, COLOR_YELLOW,coordsstring);
	}
	if(PlayerInfo[playerid][pMember] == 13)
	{
	format(coordsstring, sizeof(coordsstring), "Raport factiune [transporta 15 pasageri]. Progres: %d/15.",commands);
	SendClientMessage(playerid, COLOR_YELLOW,coordsstring);
	}
	if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	{
	format(coordsstring, sizeof(coordsstring), "Raport factiune [ofera 15 news-uri]. Progres: %d/15.",raportnews);
	SendClientMessage(playerid, COLOR_YELLOW,coordsstring);
	}
	if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
	{
	format(coordsstring, sizeof(coordsstring), "Raport factiune [completeaza 10 contracte]. Progres: %d/10.",commands);
	SendClientMessage(playerid, COLOR_YELLOW,coordsstring);
	}
	if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
	{
	format(coordsstring, sizeof(coordsstring), "Raport factiune [ofera 5 license]. Progres: %d/5.",commands);
	SendClientMessage(playerid, COLOR_YELLOW,coordsstring);
	}
	if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
	{
	format(coordsstring, sizeof(coordsstring), "Raport factiune [ofera 30 de heal-uri]. Progres: %d/30.",commands);
	SendClientMessage(playerid, COLOR_YELLOW,coordsstring);
	}
	return 1;
}

CMD:flip(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You're not in a vehicle.");

        new Float:angle,
    		currentveh = GetPlayerVehicleID(playerid);
    	GetVehicleZAngle(currentveh, angle);
    	SetVehicleZAngle(currentveh, angle);
        SendClientMessage(playerid, COLOR_WHITE, "Your vehicle has been flipped back over.");
    }
	return 1;
}
CMD:angle(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
        new Float:Angle, string[26];
		GetPlayerFacingAngle(playerid, Angle);
		format(string, sizeof(string), "Your facing angle: %0.2f", Angle);
		SendClientMessage(playerid, COLOR_WHITE, string);
    }
	return 1;
}
CMD:showmotd(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 0) return SCM(playerid,COLOR_GREY,"You are not in a group.");
	if(strlen(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]) > 0)
	{
	    new factioninfo[128];
		format(factioninfo,sizeof(factioninfo), "Group MOTD: {FFFFFF}%s",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
		SCM(playerid,COLOR_GENANNOUNCE,factioninfo);
	}
	return 1;
}
CMD:gmotd(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 0) return 1;
	if(PlayerInfo[playerid][pRank] < 6) return 1;
	new newsf[128],string[256],name[30],newsfe[128];
	if(sscanf(params, "s[128]",newsf)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gmotd [message]");
	GetPlayerName(playerid, name, sizeof(name));
	mysql_real_escape_string(newsf, newsfe);
	strmid(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn], newsfe, 0, strlen(newsfe), 255);
	format(string,sizeof(string),"You have changed the group MOTD to %s.",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(playerid, COLOR_WHITE, "{58FAAC}Foloseste gmotd doar pentru anunturi importante. Folosirea /gmotd pentru glume, spam va fi sanctionata.");
	format(string,sizeof(string),"%s has changed the group MOTD to '%s'.",name,DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
	SendFamilyMessage(PlayerInfo[playerid][pMember],COLOR_GENANNOUNCE,string);
	mysql_format(SQL,string, sizeof(string), "UPDATE `factions` SET `Anunt`='%s' WHERE `ID`='%d'",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn], PlayerInfo[playerid][pMember]);
	mysql_tquery(SQL,string,"","");
	return 1;
}
CMD:gsafepos(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(PlayerInfo[playerid][pMember] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You need to be a member of a group.");
		GetPlayerPos(playerid, DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][0], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][1], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][2]);

		DestroyDynamicPickup(DynamicFactions[PlayerInfo[playerid][pMember]][fSafePickupID]);
		DestroyDynamic3DTextLabel(DynamicFactions[PlayerInfo[playerid][pMember]][fSafeLabelID]);

		new string[256];
		format(string, sizeof(string), "%s\nGroup Safe", DynamicFactions[PlayerInfo[playerid][pMember]][fName]);

		DynamicFactions[PlayerInfo[playerid][pMember]][fSafePickupID] = CreateDynamicPickup(1274, 23, DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][0], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][1], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][2], DynamicFactions[PlayerInfo[playerid][pMember]][fVirtual], DynamicFactions[PlayerInfo[playerid][pMember]][fInterior], -1, 50);
		DynamicFactions[PlayerInfo[playerid][pMember]][fSafeLabelID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][0], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][1], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DynamicFactions[PlayerInfo[playerid][pMember]][fVirtual], DynamicFactions[PlayerInfo[playerid][pMember]][fInterior], -1, 20.0);

		mysql_format(SQL, string, sizeof(string), "UPDATE `factions` SET `SafePos1`='%f', `SafePos2`='%f', `SafePos3`='%f' WHERE `ID`='%d'", DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][0], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][1], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][2], PlayerInfo[playerid][pMember]);
		mysql_tquery(SQL, string, "", "");

		SendClientMessage(playerid, COLOR_WHITE, "You have adjusted the position of your group's safe.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:cmotd(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new string[128],mesaj[128],sendername[30],str[256],string2[128];
		if(PlayerInfo[playerid][pClan] == 0) return 1;
		if(sscanf(params, "s[128]",mesaj))
		{
			format(string, sizeof(string), "Clan MOTD: %s", ClanInfo[PlayerInfo[playerid][pClan]][cClanMOTD]);
			SendClientMessage(playerid, COLOR_CLAN, string);
			return 1;
		}
		if(PlayerInfo[playerid][pCRank] >= 6)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(ClanInfo[PlayerInfo[playerid][pClan]][cClanMOTD], 128, mesaj);
			format(string, sizeof(string), "{%s}The clan MOTD was modified by %s:", ClanInfo[PlayerInfo[playerid][pClan]][cClanColor], sendername);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "{%s}%s", ClanInfo[PlayerInfo[playerid][pClan]][cClanColor], ClanInfo[PlayerInfo[playerid][pClan]][cClanMOTD]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			mysql_real_escape_string(mesaj, string2);
			mysql_format(SQL, str, sizeof(str), "UPDATE `clans` SET `clanMOTD` = '%s' WHERE `clanName` = '%s'", string2, ClanInfo[PlayerInfo[playerid][pClan]][cClanName]);
			mysql_tquery(SQL, str, "", "");
		}
		else return SS(playerid, COLOR_LIGHTGREEN3, "Doar playerii cu rank 6 sau 7 pot folosi /cmotd.", "Only players that have rank 6 or rank 7 can use /cmotd.");
	}
	return 1;
}
CMD:managearea(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new x_nr[10];
    if(sscanf(params, "s[10]",x_nr)) SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /managearea [close/open]");
    if(strcmp(x_nr,"open",true) == 0)
 	{
		Update3DTextLabelText(areap, 0xFFFFFFFF, "{FF0000}ForEver RPG Event Area{FFFFFF}\nEvent Area is open\nPress enter to enter");
		SCM(playerid, COLOR_WHITE, "Event Area is open!");
		areape = 1;
	}
    if(strcmp(x_nr,"close",true) == 0)
 	{
		Update3DTextLabelText(areap, 0xFFFFFFFF, "Event Area is closed\nPlease wait...");
		SCM(playerid, COLOR_WHITE, "Event Area is closed!");
		areape = 0;
 	}
	return 1;
}
CMD:top(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new p=0,t=0,s=0,r=0,x=0, string[184];
    for(new i = 1; i < sizeof(Turfs); i++)
	{
		if(TurfInfo[i][zOwned] == 4)
		{
		    t++;
		}
		if(TurfInfo[i][zOwned] == 5)
		{
		    p++;
		}
		if(TurfInfo[i][zOwned] == 6)
		{
		    s++;
		}
		if(TurfInfo[i][zOwned] == 10)
		{
		    r++;
		}
		if(TurfInfo[i][zOwned] == 15)
		{
		    x++;
		}
	}
	SCM(playerid,COLOR_WHITE,"----- TOP GANGS -----");
	format(string,sizeof(string),"Los Aztecas - %d turfs",t);
	SCM(playerid,COLOR_WHITE,string);
	format(string,sizeof(string),"Grove Street - %d turfs",p);
	SCM(playerid,COLOR_WHITE,string);
	format(string,sizeof(string),"Los Vagos - %d turfs",s);
	SCM(playerid,COLOR_WHITE,string);
	format(string,sizeof(string),"Ballas - %d turfs",r);
	SCM(playerid,COLOR_WHITE,string);
	format(string,sizeof(string),"The Rifa - %d turfs",x);
	SCM(playerid,COLOR_WHITE,string);
	return 1;
}
CMD:oplace(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	if(eventobjects > 9) return SendClientMessage(playerid, COLOR_WHITE, "All objects are being used. Max hidden objects: 10.");
	new objectid,prize,sendername[30],Float:pX,Float:pY,Float:pZ,string[128];
	if(sscanf(params, "dd",objectid,prize))
	{
		SendClientMessage(playerid, COLOR_GREY,"Syntax:{FFFFFF} /oplace [object] [prize]");
		SendClientMessage(playerid, COLOR_WHITE,"[OBJECTS] Cadou: 19054 - 19058 | Glob craciun: 19059 - 19063 | Oua paste: 19341 - 19345");
		return 1;
	}
	if(prize < 50000 || prize > 10000000) return SendClientMessage(playerid, COLOR_WHITE, "Prize must be between $50,000 and $10,000,000.");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerPos(playerid,pX,pY,pZ);
	eventobjects++;
	objectevent[eventobjects] = CreatePickup(objectid, 1, pX,pY,pZ, -1);
	eventprizeobj[eventobjects] = prize;
	format(string,sizeof(string),"Admin %s[admin:%d] started an event. Object: %d, prize: $%s.",sendername,PlayerInfo[playerid][pSQLID],objectid,FormatNumber(prize));
	ABroadCast(COLOR_COOLRED, string, 1);
	Log(PlayerInfo[playerid][pSQLID], string, "oplace");
	return 1;
}
CMD:ostop(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new string[128], sendername[30], count;
	for(new obj; obj <= 10; obj++)
	{
		if(objectevent[obj] != 0)
		{
			DestroyPickup(objectevent[obj]);
			objectevent[obj] = 0;
			eventprizeobj[obj] = 0;
			count++;
		}
	}
	if(count != 0)
	{
		eventobjects = 0;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "Admin %s stopped the event.", sendername);
		ABroadCast(COLOR_COOLRED, string, 1);
		Log(PlayerInfo[playerid][pSQLID], string, "ostop");
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "There is not an object placed on the map.");
	return 1;
}
CMD:checkv(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new id,string[256],count;
	if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /checkv [name/playerid]");
	if(IsPlayerConnected(id))
	{
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
			if(PlayerInfo[id][pCarID][v] != 0)
			{
				format(string,sizeof(string),"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",PlayerInfo[id][pCarID][v],aVehicleNames[PlayerInfo[id][pCarModel][v] - 400],GetDaysFromTimestamp(PlayerInfo[id][pCarBuyTime][v]),PlayerInfo[id][pCarKM][v],PlayerInfo[id][pCarColor1][v],PlayerInfo[id][pCarColor2][v]);
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
				count++;
			}
		}
		if(count == 0) return SendClientMessage(playerid, COLOR_WHITE, "This player don't have a vehicle spawned.");
	}
	return 1;
}
CMD:removetuning(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new count,carid = GetPlayerVehicleID(playerid),Float:PosX,Float:PosY,Float:PosZ;
	if(IsPlayerConnected(playerid))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your vehicle.");
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
			if(PlayerInfo[playerid][pCarID][v] == carid)
			{
				PlayerInfo[playerid][pCarPaintJ][v] = 6;
				for(new s; s < 17; s++)
				{
					CarMod[playerid][v][s] = 0;
				}
				cUpdate(playerid, v, cModsx);
				cUpdate(playerid, v, cPaintJx);
				GetVehiclePos(PlayerInfo[playerid][pCarID][v], PosX, PosY, PosZ);
				SetVehicleToRespawnEx2(PlayerInfo[playerid][pCarID][v]);
				SetVehiclePos(PlayerInfo[playerid][pCarID][v], PosX, PosY, PosZ);
				count++;
			}
		}
		if(count == 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your vehicle.");
	}
	return 1;
}
CMD:givekey(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
        new id,giveplayer[30],sendername[30],string[128],idcar=-1;
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /givekey [name/playerid]");
		for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
		{
			if(PlayerInfo[playerid][pCarID][vv] == GetPlayerVehicleID(playerid))
			{
				idcar = vv;
			}
		}
		if(idcar == -1) return SendClientMessage(playerid, COLOR_WHITE, "You need to be inside your car to change its lock.");
		if (IsPlayerConnected(id))
		{
			if(id != INVALID_PLAYER_ID)
			{
				if(ProxDetectorS(5.0, playerid, id))
				{
					HireCar[id] = GetPlayerVehicleID(playerid);
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* %s takes out a set of keys, and tosses them to %s.", sendername ,giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetVehicleParamsForPlayer(HireCar[id],id,0,0);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:changelock(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new idcar=-1;
		for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
		{
			if(PlayerInfo[playerid][pCarID][vv] == GetPlayerVehicleID(playerid))
			{
				idcar = vv;
			}
		}
		if(idcar == -1) return SendClientMessage(playerid, COLOR_WHITE, "You need to be inside your car to change its lock.");
    	foreach(new i : Player)
		{
			if(PlayerInfo[playerid][pCarID][idcar] == HireCar[i])
			{
				SetVehicleParamsForPlayer(HireCar[i],i,0,1);
				HireCar[i] = -1;
				SendClientMessage(i, COLOR_WHITE, "The lock of the car you had the keys for have been changed.");
			}
		}
		SendClientMessage(playerid, COLOR_WHITE, "The lock of the car you had the keys for have been changed.");
		SendClientMessage(playerid, COLOR_DARKPINK, "The locks of the car where changed. No one has keys to your car now.");
	}
	return 1;
}
CMD:buycar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_GREY,"You need to be on foot.");
	if(IsPlayerInRangeOfPoint(playerid, 7.0, -1664.1561,1207.6320,7.2546))
	{
		if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "You need level 3 to buy a vehicle.");
		BuyCar[playerid] = -1;
		ShowPlayerDialog(playerid,DIALOG_CARBUY, DIALOG_STYLE_LIST, "Buy a car", "Cheap cars\nRegular cars\nExpensive cars\nPremium cars", "Select", "Close");
	}
	else return SCM(playerid,COLOR_WHITE,"You are not at the DealerShip.");
  	return 1;
}
CMD:dsprice(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		new model,price,stocks,string[300],id,name[30];
		if(sscanf(params, "ddd",model,price,stocks)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dsprice [model] [price] [stock]");
		format(string, sizeof(string), "SELECT * FROM `stock` WHERE `vid`='%d'",model);
		new Cache: result = mysql_query(SQL, string);
		if(cache_get_row_count() > 0)
		{
			for(new i, j = cache_get_row_count(); j != i; ++i)
			{
				id = cache_get_field_content_int(i, "ID") + 1;
			}
			mysql_format(SQL, string, sizeof(string), "UPDATE `stock` SET `Price`='%d',`Stock`='%d' WHERE `vid`='%d'",price,stocks,model);
			mysql_tquery(SQL, string, "", "");
			Stock[id][vPrice] = price;
			Stock[id][vStock] = stocks;
			GetPlayerName(playerid, name, sizeof(name));
			format(string, sizeof(string), "/dsprice: Admin %s[admin:%d] changed data for car %d (%s) | Price: $%s | Stock: %d",name,PlayerInfo[playerid][pSQLID],model,aVehicleNames[model - 400],FormatNumber(price),stocks);
			ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "This model doesn't exist in dealership.");
			cache_delete(result);
			return 1;
		}
		cache_delete(result);
 	}
 	return 1;
}
CMD:v(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(BlockVehUse[playerid] != 0) return SS(playerid, COLOR_RED2, "Ai prea multe masini, foloseste /sellcar si vinde una.", "You have to many vehicles, use /sellcar and sell one.");
	new masina1[256],masina[1000],count;
	for(new id; id < PlayerInfo[playerid][pCarSlots]; id++)
	{
		if(PlayerInfo[playerid][pCar][id] != -1)
		{
			if(PlayerInfo[playerid][pCarID][id] != 0)
			{
				format(masina1, sizeof(masina1), "{0C370A}(spawned) {FFFFFF}%s\n",aVehicleNames[PlayerInfo[playerid][pCarModel][id] - 400]);
				strcat(masina, masina1);
			}
			else
			{
				format(masina1, sizeof(masina1), "{FB0404}(despawned) {FFFFFF}%s\n",aVehicleNames[PlayerInfo[playerid][pCarModel][id] - 400]);
				strcat(masina, masina1);
			}
			count++;
		}
		else
		{
			format(masina1, sizeof(masina1), "{F3FF73}[ empty ]\n");
			strcat(masina, masina1);
		}
	}
	if(count != 0)
	{
		if(PlayerInfo[playerid][pCarSlots] < 10)
		{
			format(masina1, sizeof(masina1), "{E99B5F}[+] Add vehicle slot - 20 premium points\n");
			strcat(masina, masina1);
		}
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "You don't own any cars.");
	ShowPlayerDialog(playerid,DIALOG_VEHSPAWN,DIALOG_STYLE_LIST,"Manage your vehicles",masina,"Select","Exit");
	return 1;
}
CMD:sellhidden(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	new id,price,sendername[30],giveplayer[30],string[500],other[128];
	if(sscanf(params, "uiS(NULL)[128]", id,price,other)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellhidden [name/playerid] [price]");
	if(PlayerInfo[playerid][pPremiumPoints] <= 19)
	{
 		ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
   		return 1;
	}
	if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_LIGHTGREEN3, "Nu folosi spatii in pret.", "Don't use spaces in the price.");
	if(playerid == id) return SS(playerid, COLOR_LIGHTGREEN3, "Nu iti poti vinde hidden singur.", "You can't sell a hidden color to yourself.");
	if(SellTradeTimer[playerid] != 0) return SendClientMessage(playerid, COLOR_WHITE, "You already have sent an offer. The offer will expire in 2 minutes.");
	if(price < 1 || price > 500000000) return SendClientMessage(playerid, COLOR_GREY, "Price must be between 1 and 10.000.000.");
	if(GetPlayerCash(id) < price) return SCM(playerid, COLOR_GREY, "This player don't have enough money.");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	if(IsPlayerConnected(id))
	{
	    if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
	    {
	    	SellHiddenID[playerid] = id;
	    	SellHiddenPrice[playerid] = price;
	    	if(PlayerInfo[playerid][pLanguage] == 2)
	    	{
				format(string, sizeof(string), "Esti sigur ca vrei sa platesti 20 de puncte premium pentru a-i vinde un hidden lui %s?\nVei primi suma de $%s, iar %s va primi o culoare hidden.", giveplayer, FormatNumber(price), giveplayer);
				ShowPlayerDialog(playerid, DIALOG_SELLHIDDEN, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
			}
			else
			{
				format(string, sizeof(string), "Are you sure you want to pay 20 premium points to sell a hidden color to %s?\nYou will receive $%s and %s will receive a hidden color.", giveplayer, FormatNumber(price), giveplayer);
				ShowPlayerDialog(playerid, DIALOG_SELLHIDDEN, DIALOG_STYLE_MSGBOX, "Are you sure?", string, "Yes", "No");
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "This player is not near you.");
	}
	return 1;
}
CMD:tradecar(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	new id,price,other[128],idcar1=-1,idcar2=-1;
	if(sscanf(params, "uiS(NULL)[128]", id,price,other)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /tradecar [name/playerid] [difference] - You will pay the difference.");
    if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_LIGHTGREEN3, "Nu folosi spatii in pret.", "Don't use spaces in the price.");
	if(id == playerid) return SS(playerid, COLOR_LIGHTGREEN3, "Nu iti poti schimba masina singur.", "You can't trade your car to yourself.");
	if(SellTradeTimer[playerid] != 0) return SendClientMessage(playerid, COLOR_WHITE, "You already have sent an offer. The offer will expire in 2 minutes.");
	new sendername[30],giveplayer[30];
	if(price < 1 || price > 500000000) return SendClientMessage(playerid, COLOR_GREY, "Price not lower than 1 and not higher than $500,000,000.");
    new vid = GetPlayerVehicleID(playerid),vid2 = GetPlayerVehicleID(id);
	if(!IsPlayerInAnyVehicle(playerid)) return SS(playerid, COLOR_WHITE, "Nu esti in masina personala.", "You need to be in your personal car.");
	if(!IsPlayerInAnyVehicle(id)) return SS(playerid, COLOR_WHITE, "Acel jucator nu este in masina personala.", "That player needs to be in his personal car.");
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(vid == PlayerInfo[playerid][pCarID][vv])
		{
			idcar1 = vv;
		}
	}
	if(idcar1 == -1) return SS(playerid, COLOR_WHITE, "Nu esti in masina personala.", "You need to be in your personal car.");
    for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(vid2 == PlayerInfo[id][pCarID][vv])
		{
			idcar2 = vv;
		}
	}
	if(idcar2 == -1) return SS(playerid, COLOR_WHITE, "Acel jucator nu este in masina personala.", "That player needs to be in his personal car.");
	if(PlayerInfo[playerid][pCarBlock][idcar1] > 0)
	{
		format(other, sizeof(other), "Your vehicle is blocked for %d hours.", PlayerInfo[playerid][pCarBlock][idcar1]);
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, other);
		return 1;
	}
	if(PlayerInfo[id][pCarBlock][idcar2] > 0)
	{
		format(other, sizeof(other), "That player have his vehicle blocked for %d hours.", PlayerInfo[id][pCarBlock][idcar2]);
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, other);
		return 1;
	}
	if(GetPlayerCash(playerid) < price) return SCM(playerid, COLOR_GREY, "You don't have enough money.");
	if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_WHITE, "You don't have level 3.");
	if(PlayerInfo[id][pLevel] < 3) return SendClientMessage(playerid, COLOR_WHITE, "That player doesn't have level 3.");
    GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	if(IsPlayerConnected(id))
	{
	    if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
	    {
			new string[500],hidden[128];
			SelectedCar[playerid] = idcar1;
			SelectedCar[id] = idcar2;
			SellTradeID[playerid] = id;
			SellTradePrice[playerid] = price;
			if(PlayerInfo[id][pCarColor1][idcar2] >= 128 || PlayerInfo[id][pCarColor2][idcar2] >= 128)
			{
				format(hidden, sizeof(hidden),"hidden colors: %d, %d",PlayerInfo[id][pCarColor1][idcar2],PlayerInfo[id][pCarColor2][idcar2]);
			}
			else
			{
				format(hidden, sizeof(hidden),"no hidden colors");
			}
			if(PlayerInfo[playerid][pLanguage] == 2)
			{
				format(string,sizeof(string),"Vrei sa oferi masina ta (%s) + $%s pentru masina lui %s (%s[age: %d, distance: %.0fKM, %s])?",aVehicleNames[PlayerInfo[playerid][pCarModel][idcar1] - 400],FormatNumber(price),giveplayer,aVehicleNames[PlayerInfo[id][pCarModel][idcar2] - 400],GetDaysFromTimestamp(PlayerInfo[id][pCarBuyTime][idcar2]),PlayerInfo[id][pCarKM][idcar2],hidden);
				format(string,sizeof(string),"%s\n\nAtentie! Este INTERZIS sa vindeti masina cuiva pentru a va pune hidden pe masina.\nEste interzis sa vindeti bunuri din joc (masini, bani, case) pentru bani reali sau bunuri ce nu tin de joc (itemuri metin, bani pe alt server, conturi steam).",string);
				ShowPlayerDialog(playerid, DIALOG_TRADECAR, DIALOG_STYLE_MSGBOX, "Schimb de masini", string, "Da", "Nu");
			}
			else
			{
				format(string,sizeof(string),"You want to trade your car (%s) + $%s for %s's car (%s[age: %d, distance: %.0fKM, %s])?",aVehicleNames[PlayerInfo[playerid][pCarModel][idcar1] - 400],FormatNumber(price),giveplayer,aVehicleNames[PlayerInfo[id][pCarModel][idcar2] - 400],GetDaysFromTimestamp(PlayerInfo[id][pCarBuyTime][idcar2]),PlayerInfo[id][pCarKM][idcar2],hidden);
				format(string,sizeof(string),"%s\n\nWarning! It's FORBIDDEN to sell your car to someone to put a hidden color on your car.\nIt's forbidden to sell in game goods (cars, money, houses) for real money or goods that doesn't belong to game (metin items, money on other server, steam accounts).",string);
				ShowPlayerDialog(playerid, DIALOG_TRADECAR, DIALOG_STYLE_MSGBOX, "Trade car", string, "Yes", "No");
			}
   		}
		else return SendClientMessage(playerid, COLOR_GREY, "This player is not near you.");
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	return 1;
}
CMD:tradehouse(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	SendClientMessage(playerid, COLOR_LIGHTGREEN3, "/tradehouseforcar - trade house for car");
	SendClientMessage(playerid, COLOR_LIGHTGREEN3, "/tradehouseforhouse - trade house for house");
	return 1;
}
CMD:tradehouseforcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	if(PlayerInfo[playerid][pPhousekey] == 999) return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
	if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
	{
		new id, price, other[128], string[300], giveplayer[30], idcar=-1, hidden[128];
		if(sscanf(params, "uiS(NULL)[128]", id,price,other)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /tradehouseforcar [name/playerid] [difference] - You will pay the difference.");
		if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_LIGHTGREEN3, "Nu folosi spatii in pret.", "Don't use spaces in the price.");
		if(id == playerid) return SS(playerid, COLOR_LIGHTGREEN3, "Nu iti poti schimba casa singur.", "You can't trade your house to yourself.");
		if(SellTradeTimer[playerid] != 0) return SendClientMessage(playerid, COLOR_WHITE, "You already have sent an offer. The offer will expire in 2 minutes.");
		if(price < 1 || price > 500000000) return SendClientMessage(playerid, COLOR_GREY, "Price not lower than 1 and not higher than $500,000,000.");
		if(GetPlayerCash(playerid) < price) return SCM(playerid, COLOR_GREY, "You don't have enough money.");
		if(!IsPlayerInAnyVehicle(id)) return SS(playerid, COLOR_WHITE, "Acel jucator nu este in masina personala.", "That player needs to be in his personal car.");
		for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
		{
			if(GetPlayerVehicleID(id) == PlayerInfo[id][pCarID][vv])
			{
				idcar = vv;
			}
		}
		if(idcar == -1) return SS(playerid, COLOR_WHITE, "Acel jucator nu este in masina personala.", "That player needs to be in his personal car.");
		if(PlayerInfo[id][pCarBlock][idcar] > 0)
		{
			format(other, sizeof(other), "That player have his vehicle blocked for %d hours.", PlayerInfo[id][pCarBlock][idcar]);
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, other);
			return 1;
		}
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
		if(IsPlayerConnected(id))
		{
		    if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
		   	{
		   		SelectedCar[playerid] = idcar;
				SellTradeID[playerid] = id;
				SellTradePrice[playerid] = price;
				if(PlayerInfo[id][pCarColor1][idcar] >= 128 || PlayerInfo[id][pCarColor2][idcar] >= 128)
				{
					format(hidden, sizeof(hidden),"hidden colors: %d, %d",PlayerInfo[id][pCarColor1][idcar],PlayerInfo[id][pCarColor2][idcar]);
				}
				else
				{
					format(hidden, sizeof(hidden),"no hidden colors");
				}
				if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(string,sizeof(string),"Vrei sa oferi casa ta (%d) + $%s pentru masina lui %s (%s[age: %d, distance: %.0fKM, %s])?", PlayerInfo[playerid][pPhousekey], FormatNumber(price), giveplayer, aVehicleNames[PlayerInfo[id][pCarModel][idcar] - 400], GetDaysFromTimestamp(PlayerInfo[id][pCarBuyTime][idcar]), PlayerInfo[id][pCarKM][idcar], hidden);
					format(string,sizeof(string),"%s\n\nAtentie! Este interzis sa vindeti bunuri din joc (masini, bani, case) pentru bani reali sau bunuri ce nu tin de joc (itemuri metin, bani pe alt server, conturi steam).",string);
					ShowPlayerDialog(playerid, DIALOG_TRADEHOUSECAR, DIALOG_STYLE_MSGBOX, "Schimb de casa cu masina", string, "Da", "Nu");
				}
				else
				{
					format(string,sizeof(string),"You want to trade your house (%s) + $%s for %s's car (%s[age: %d, distance: %.0fKM, %s])?", PlayerInfo[playerid][pPhousekey], FormatNumber(price), giveplayer, aVehicleNames[PlayerInfo[id][pCarModel][idcar] - 400], GetDaysFromTimestamp(PlayerInfo[id][pCarBuyTime][idcar]), PlayerInfo[id][pCarKM][idcar], hidden);
					format(string,sizeof(string),"%s\n\nWarning! It's forbidden to sell in game goods (cars, money, houses) for real money or goods that doesn't belong to game (metin items, money on other server, steam accounts).",string);
					ShowPlayerDialog(playerid, DIALOG_TRADEHOUSECAR, DIALOG_STYLE_MSGBOX, "Trade house for car", string, "Yes", "No");
				}
		   	}
		   	else return SendClientMessage(playerid, COLOR_GREY, "This player is not near you.");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
	return 1;
}
CMD:tradehouseforhouse(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	if(PlayerInfo[playerid][pPhousekey] == 999) return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
	if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
	{
		new id, price, other[128], string[300], giveplayer[30];
		if(sscanf(params, "uiS(NULL)[128]", id,price,other)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /tradehouseforhouse [name/playerid] [difference] - You will pay the difference.");
	    if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_LIGHTGREEN3, "Nu folosi spatii in pret.", "Don't use spaces in the price.");
	    if(id == playerid) return SS(playerid, COLOR_LIGHTGREEN3, "Nu iti poti schimba casa singur.", "You can't trade your house to yourself.");
	    if(SellTradeTimer[playerid] != 0) return SendClientMessage(playerid, COLOR_WHITE, "You already have sent an offer. The offer will expire in 2 minutes.");
	    if(PlayerInfo[id][pPhousekey] == 999) return SendClientMessage(playerid, COLOR_WHITE, "This player don't own a house.");
	    if(PlayerInfo[id][pPhousekey] != 999 && strcmp(PlayerInfo[id][pNormalName], HouseInfo[PlayerInfo[id][pPhousekey]][hOwner], true) == 0)
		{
		    if(price < 1 || price > 500000000) return SendClientMessage(playerid, COLOR_GREY, "Price not lower than 1 and not higher than $500,000,000.");
		    if(GetPlayerCash(playerid) < price) return SCM(playerid, COLOR_GREY, "You don't have enough money.");
		    if(IsPlayerConnected(id))
			{
			    if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
			    {
			    	SellTradeID[playerid] = id;
			    	SellTradePrice[playerid] = price;
			    	GetPlayerName(id, giveplayer, sizeof(giveplayer));
			    	if(PlayerInfo[playerid][pLanguage] == 2)
					{
				    	format(string,sizeof(string),"Vrei sa oferi casa ta (id: %d) + $%s pentru casa lui %s (id: %d)?\n\nAtentie! Este interzis sa vindeti bunuri din joc (masini, bani, case) pentru bani reali sau bunuri ce nu tin de joc (itemuri metin, bani pe alt server, conturi steam).", PlayerInfo[playerid][pPhousekey], FormatNumber(price), giveplayer, PlayerInfo[id][pPhousekey]);
						ShowPlayerDialog(playerid, DIALOG_TRADEHOUSEHOUSE, DIALOG_STYLE_MSGBOX, "Schimb de case", string, "Da", "Nu");
				    }
				    else
				    {
				    	format(string,sizeof(string),"You want to trade your house (id: %d) + $%s for %s's house (id: %d)?\n\nWarning! It's forbidden to sell in game goods (cars, money, houses) for real money or goods that doesn't belong to game (metin items, money on other server, steam accounts).", PlayerInfo[playerid][pPhousekey], FormatNumber(price), giveplayer, PlayerInfo[id][pPhousekey]);
						ShowPlayerDialog(playerid, DIALOG_TRADEHOUSEHOUSE, DIALOG_STYLE_MSGBOX, "Trade house", string, "Yes", "No");
				    }
				}
			    else return SendClientMessage(playerid, COLOR_GREY, "This player is not near you.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "This player don't own a house.");
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
	return 1;
}
CMD:sellcarto(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	new id,price,giveplayer[30],other[128];
	if(sscanf(params, "uiS(NULL)[128]", id,price,other)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellcarto [name/playerid] [price]");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_LIGHTGREEN3, "Nu folosi spatii in pret.", "Don't use spaces in the price.");
	if(id == playerid) return SS(playerid, COLOR_LIGHTGREEN3, "Nu iti poti vinde masina singur.", "You can't sell your car to yourself.");
	if(SellTradeTimer[playerid] != 0) return SendClientMessage(playerid, COLOR_WHITE, "You already have sent an offer. The offer will expire in 2 minutes.");
	if(price < 1 || price > 500000000) return SendClientMessage(playerid, COLOR_GREY, "Price not lower then 1 and not higher then $500,000,000.");
	new vid = GetPlayerVehicleID(playerid),idcar=-1;
    if(!IsPlayerInAnyVehicle(playerid)) return SS(playerid, COLOR_WHITE, "Nu esti in masina personala.", "You are not in your personal car.");
	if(GetPlayerCash(id) < price) return SCM(playerid, COLOR_WHITE, "This player don't have money needed.");
	if(PlayerInfo[playerid][pLevel] < 4) return SendClientMessage(playerid, COLOR_WHITE, "You don't have level 4.");
	if(PlayerInfo[id][pLevel] < 4) return SendClientMessage(playerid, COLOR_WHITE, "That player doesn't have level 4.");
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(vid == PlayerInfo[playerid][pCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SS(playerid, COLOR_WHITE, "Nu esti in masina personala.", "You are not in your personal car.");
	if(PlayerInfo[playerid][pCarBlock][idcar] > 0)
	{
		format(other, sizeof(other), "Your vehicle is blocked for %d hours.", PlayerInfo[playerid][pCarBlock][idcar]);
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, other);
		return 1;
	}
	if(IsPlayerConnected(id))
	{
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
	    if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
	    {
			new string[500];
			SelectedCar[playerid] = idcar;
			SellTradeID[playerid] = id;
			SellTradePrice[playerid] = price;
			if(PlayerInfo[playerid][pLanguage] == 2)
			{
				format(string,sizeof(string),"Esti sigur ca vrei sa vinzi masina ta lui %s pentru %s$?\n\nAtentie! Este INTERZIS sa vindeti masina cuiva pentru a va pune hidden sau a va da clear KM.\nEste interzis sa vindeti bunuri din joc (masini, bani, case) pentru bani reali sau bunuri ce nu tin de joc (itemuri metin, bani pe alt server, conturi steam).\nDaca imprumuti cuiva masina, o faci pe proprie raspundere. Nu te astepta ca adminii sa te ajute sa o recuperezi.",giveplayer,FormatNumber(price));
				ShowPlayerDialog(playerid, DIALOG_SELLCARTO, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
			}
			else
			{
				format(string,sizeof(string),"Are you sure you want to sell your car to %s for %s$?\n\nWarning! It's FORBIDDEN to sell your car to someone to put a hidden color on your car.\nIt's forbidden to sell in game goods (cars, money, houses) for real money or goods that doesn't belong to game (metin items, money on other server, steam accounts).\nIf you borrow your car to someone, you'll do this on your own. Admins will not help you to recover your car.",giveplayer,FormatNumber(price));
				ShowPlayerDialog(playerid, DIALOG_SELLCARTO, DIALOG_STYLE_MSGBOX, "Are you sure?", string, "Yes", "No");
			}
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "The player you are trying to sell a car to needs to be near you.");
	}
	return 1;
}

CMD:sellcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	if(IsPlayerConnected(playerid))
	{
		new query[256],model,masina1[128],masina[1000];
		if(BlockVehUse[playerid] == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 10.0, -1664.1561,1207.6320,7.2546)) return SCM(playerid,COLOR_WHITE,"You are not at the DealerShip.");
			new vehh = GetPlayerVehicleID(playerid),value,found;
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not in your car.");
			for(new v; v < MAX_PERSONAL_VEHICLES; v++)
			{
				if(PlayerInfo[playerid][pCarID][v] == vehh)
				{
					if(PlayerInfo[playerid][pCarBlock][v] > 0)
					{
						format(query, sizeof(query), "Your vehicle is blocked for %d hours.", PlayerInfo[playerid][pCarBlock][v]);
						SendClientMessage(playerid, COLOR_LIGHTGREEN3, query);
						return 1;
					}
					format(query, sizeof(query), "SELECT * FROM `stock` WHERE `vid`='%d'", PlayerInfo[playerid][pCarModel][v]);
					new Cache: result = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						value = cache_get_field_content_int(i, "Price");
					}
					cache_delete(result);
					if(PlayerInfo[playerid][pCarModel][v] == 539 || PlayerInfo[playerid][pCarModel][v] == 502 || PlayerInfo[playerid][pCarModel][v] == 503 || PlayerInfo[playerid][pCarModel][v] == 494 || PlayerInfo[playerid][pCarModel][v] == 487 || PlayerInfo[playerid][pCarModel][v] == 447 || PlayerInfo[playerid][pCarModel][v] == 409) return SendClientMessage(playerid, COLOR_WHITE, "This car can't be sold to the DealerShip.");
					new cashveh,string[80];
					CarID[playerid] = PlayerInfo[playerid][pCarID][v];
					cashveh = floatround(floatmul(value,0.60),floatround_ceil);
					format(string,sizeof(string),"Do you want to sell your car to the Dealership for $%s?",FormatNumber(cashveh));
					ShowPlayerDialog(playerid, DIALOG_CARSELL, DIALOG_STYLE_MSGBOX, "/sellcar", string, "Yes", "No");
					found = 1;
				}
			}
			if(found == 0) return SendClientMessage(playerid, COLOR_GREY, "You are not in your car.");
		}
		else
		{
			format(query, sizeof(query), "SELECT * FROM `cars` WHERE `Owner`='%s'", PlayerInfo[playerid][pNormalName]);
			new Cache: xd = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				model = cache_get_field_content_int(i, "Model");
				format(masina1, sizeof(masina1), "{FFFFFF}%s\n",aVehicleNames[model - 400]);
				strcat(masina, masina1);
			}
			cache_delete(xd);
			ShowPlayerDialog(playerid, DIALOG_SELLCARX, DIALOG_STYLE_LIST, "Sell your vehicle", masina, "Sell", "Exit");
		}
	}
	return 1;
}
CMD:vehicles(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_v(playerid, params);
}
CMD:cars(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_v(playerid, params);
}
CMD:findhouse(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    new houseID,string[128];
		if(sscanf(params, "d", houseID)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /findhouse [house id]");
  		new i = sizeof(HouseInfo) - 1;
		if(houseID > i || houseID < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid House ID.");
		if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_WHITE,"You can't use this while robbing the bank.");
        if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1)
		{
			SetPlayerCheckpoint(playerid, HouseInfo[houseID][hEntrancex], HouseInfo[houseID][hEntrancey], HouseInfo[houseID][hEntrancez], 4.0);
			CP[playerid] = 43;
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Mergi la checkpoint-ul de pe minimap pentru a ajunge la casa %d.", houseID);
			else format(string, sizeof(string), "Follow the checkpoint to reach the house %d.", houseID);
			SendClientMessage(playerid, COLOR_YELLOW, string);
        }
        else
        {
            ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Anulare Checkpoint", "Esti sigur ca vrei sa anulezi checkpoint-ul curent?", "Da", "Nu");
		}
	}
	return 1;
}
CMD:findbiz(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{

		new houseID, string[128];
		if(sscanf(params, "d", houseID)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /findbiz [biz id]");
	    new i = sizeof(BizzInfo) - 1;
		if(houseID > i || houseID < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid bizz ID.");
		if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_WHITE,"You can't use this while robbing the bank.");
        if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1)
		{
			SetPlayerCheckpoint(playerid, BizzInfo[houseID][bEntranceX], BizzInfo[houseID][bEntranceY], BizzInfo[houseID][bEntranceZ], 4.0);
			CP[playerid] = 43;
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Mergi la checkpoint-ul de pe minimap pentru a ajunge la biz-ul %d.", houseID);
			else format(string, sizeof(string), "Follow the checkpoint to reach the business %d.", houseID);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Anulare Checkpoint", "Esti sigur ca vrei sa anulezi checkpoint-ul curent?", "Da", "Nu");
		}
	}
	return 1;
}
CMD:carplate(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new idcar=-1;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your car.");
	new Float:health2;
	GetVehicleHealth(GetPlayerVehicleID(playerid), health2);
	if(health2 < 500.0 || vehEngine[GetPlayerVehicleID(playerid)] == 1) return SCM(playerid,COLOR_GREY,"You need to stop the engine first. Also, your car needs to be reapaired first (more than 500 car health).");
	if(GetPlayerCash(playerid) >= 5000)
 	{
		if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pCarID][idcar])
		{
	   		ShowPlayerDialog(playerid, DIALOG_PLATE, DIALOG_STYLE_INPUT, "License plate registration", "{FFFFFF}Please enter a license plate for your vehicle.\n\nThere is only two conditions:\n- The license plate must be unique\n- The license can be alphanumerical, but it must consist of only 10 characters.", "Select", "");
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
	return 1;
}
CMD:carcolor(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE,"You are not in your car.");
	new colorpart,colorid,VehI = GetPlayerVehicleID(playerid),idcar=-1,strx[128];
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(VehI == PlayerInfo[playerid][pCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your car.");
    if(IsPlayerConnected(playerid))
    {
		if(VehI == PlayerInfo[playerid][pCarID][idcar])
		{
			new car = GetPlayerVehicleID(playerid);
			if(sscanf(params, "ii", colorpart, colorid))
			{
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /carcolor [1/2] [color]");
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} Use /colors for a list of colors.");
				return 1;
			}
			if(colorpart==1)
			{
				if(colorid < 0 || colorid > 255)
				{
					SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /carcolor [1/2] [color]");
					SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} Use /colors for a list of colors.");
					return 1;
				}
				if(GetPlayerCash(playerid) < 5000 && colorid <= 127) return SendClientMessage(playerid, COLOR_GREY,"You don't have enough money.");
				if(PlayerInfo[playerid][pHiddenColor] <= 0 && colorid > 127 && PlayerInfo[playerid][pCarColor1][idcar] < 128) return SS(playerid, COLOR_WHITE, "Nu ai suficiente puncte premium. Ai nevoie de 20 puncte premium pentru a folosi un hidden (127-256) pe masina.", "You don't have enough premium points. You need 20 premium points to use a hidden on your car.");
 				if(colorid > 127 && PlayerInfo[playerid][pCarColor1][idcar] < 128)
  				{
  					if(PlayerInfo[playerid][pLanguage] == 2)
  					{
  						format(strx, sizeof(strx), "Esti sigur ca vrei sa pui culoarea %d pe aceasta masina?\nVei pierde 20 puncte premium.", colorid);
   						ShowPlayerDialog(playerid, DIALOG_HIDDEN, DIALOG_STYLE_MSGBOX, "Esti sigur?", strx, "Da", "Nu");
   					}
   					else
   					{
   						format(strx, sizeof(strx), "Do you want to put color %d on this car?\nYou will lose 20 premium points.", colorid);
   						ShowPlayerDialog(playerid, DIALOG_HIDDEN, DIALOG_STYLE_MSGBOX, "Are you sure?", strx, "Yes", "No");
   					}
   					SelectedCar[playerid] = idcar;
   					SellTradeID[playerid] = colorid;
   					SellTradePrice[playerid] = 1;
   					return 1;
				}
				if(PlayerInfo[playerid][pCarColor1][idcar] > 127)
				{
					if(colorid <= 127)
					{
						if(PlayerInfo[playerid][pLanguage] == 2)
	  					{
	   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca doresti sa scoti hidden-ul de pe masina? Nu il vei mai putea recupera.", "Da", "Nu");
	   					}
	   					else
	   					{
	   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Are you sure?", "Are you sure you want to remove your car hidden? You can't recover it.", "Yes", "No");
	   					}
	   				}
	   				else
	   				{
	   					if(PlayerInfo[playerid][pPremiumPoints] >= 5 || SvarInfo[1][svValue] == 1)
	   					{
	   						if(SvarInfo[1][svValue] == 0)
	   						{
			   					if(PlayerInfo[playerid][pLanguage] == 2)
			  					{
			  						format(strx, sizeof(strx), "Esti sigur ca vrei sa schimbi culoare de pe masina cu culoarea %d?\nVei pierde 5 puncte premium.", colorid);
			   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Esti sigur?", strx, "Da", "Nu");
			   					}
			   					else
			   					{
			   						format(strx, sizeof(strx), "Do you want to change your car color with color %d?\nYou will lose 5 premium points.", colorid);
			   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Are you sure?", strx, "Yes", "No");
			   					}
			   				}
			   				else
			   				{
			   					if(PlayerInfo[playerid][pLanguage] == 2)
			  					{
			  						format(strx, sizeof(strx), "Esti sigur ca vrei sa schimbi culoare de pe masina cu culoarea %d?\nNu vei pierde niciun punct premium.", colorid);
			   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Esti sigur?", strx, "Da", "Nu");
			   					}
			   					else
			   					{
			   						format(strx, sizeof(strx), "Do you want to change your car color with color %d?\nYou will not lose any premium points.", colorid);
			   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Are you sure?", strx, "Yes", "No");
			   					}
			   				}
		   				}
		   				else return SS(playerid, COLOR_WHITE, "Nu ai suficiente punte premium. Ai nevoie de 5 puncte premium pentru a schimba un hidden (127-256) pe masina.", "You don't have enough premium points. You need 5 premium points to change a hidden on your car.");
	   				}
   					SelectedCar[playerid] = idcar;
   					SellTradeID[playerid] = colorid;
   					SellTradePrice[playerid] = 1;
   					return 1;
				}
 				PlayerInfo[playerid][pCarColor1][idcar] = colorid;
  				GivePlayerCash(playerid, -5000);
   				ChangeVehicleColor(car, colorid, PlayerInfo[playerid][pCarColor2][idcar]);
				Update(playerid, pCashx);
				cUpdate(playerid, idcar, cColorOnex);
  				SendClientMessage(playerid,COLOR_WHITE, "Vehicle color changed!");
  				GameTextForPlayer(playerid, "~r~-$5.000", 5000, 1);
				return 1;
			}
			if(colorpart==2)
			{
				if(colorid < 0 || colorid > 255)
				{
					SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /carcolor [1/2] [color]");
					SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} Use /colors for a list of colors.");
					return 1;
				}
				if(GetPlayerCash(playerid) < 5000 && colorid <= 127) return SendClientMessage(playerid, COLOR_GREY,"You don't have enough money.");
				if(PlayerInfo[playerid][pHiddenColor] <= 0 && colorid > 127 && PlayerInfo[playerid][pCarColor2][idcar] < 128) return SS(playerid, COLOR_WHITE, "Nu ai suficiente puncte premium. Ai nevoie de 20 puncte premium pentru a folosi un hidden (127-256) pe masina.", "You don't have enough premium points. You need 20 premium points to use a hidden on your car.");
 				if(colorid > 127 && PlayerInfo[playerid][pCarColor2][idcar] < 128)
  				{
   					if(PlayerInfo[playerid][pLanguage] == 2)
  					{
  						format(strx, sizeof(strx), "Esti sigur ca vrei sa pui culoarea %d pe aceasta masina?\nVei pierde 20 puncte premium.", colorid);
   						ShowPlayerDialog(playerid, DIALOG_HIDDEN, DIALOG_STYLE_MSGBOX, "Esti sigur?", strx, "Da", "Nu");
   					}
   					else
   					{
   						format(strx, sizeof(strx), "Do you want to put color %d on this car?\nYou will lose 20 premium points.", colorid);
   						ShowPlayerDialog(playerid, DIALOG_HIDDEN, DIALOG_STYLE_MSGBOX, "Are you sure?", strx, "Yes", "No");
   					}
   					SelectedCar[playerid] = idcar;
   					SellTradeID[playerid] = colorid;
   					SellTradePrice[playerid] = 2;
   					return 1;
				}
				if(PlayerInfo[playerid][pCarColor2][idcar] > 127)
				{
					if(colorid <= 127)
					{
						if(PlayerInfo[playerid][pLanguage] == 2)
	  					{
	   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca doresti sa scoti hidden-ul de pe masina? Nu il vei mai putea recupera.", "Da", "Nu");
	   					}
	   					else
	   					{
	   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Are you sure?", "Are you sure you want to remove your car hidden? You can't recover it.", "Yes", "No");
	   					}
	   				}
	   				else
	   				{
	   					if(PlayerInfo[playerid][pPremiumPoints] >= 5 || SvarInfo[1][svValue] == 1)
	   					{
	   						if(SvarInfo[1][svValue] == 0)
	   						{
			   					if(PlayerInfo[playerid][pLanguage] == 2)
			  					{
			  						format(strx, sizeof(strx), "Esti sigur ca vrei sa schimbi culoare de pe masina cu culoarea %d?\nVei pierde 5 puncte premium.", colorid);
			   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Esti sigur?", strx, "Da", "Nu");
			   					}
			   					else
			   					{
			   						format(strx, sizeof(strx), "Do you want to change your car color with color %d?\nYou will lose 5 premium points.", colorid);
			   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Are you sure?", strx, "Yes", "No");
			   					}
			   				}
			   				else
			   				{
			   					if(PlayerInfo[playerid][pLanguage] == 2)
			  					{
			  						format(strx, sizeof(strx), "Esti sigur ca vrei sa schimbi culoare de pe masina cu culoarea %d?\nNu vei pierde niciun punct premium.", colorid);
			   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Esti sigur?", strx, "Da", "Nu");
			   					}
			   					else
			   					{
			   						format(strx, sizeof(strx), "Do you want to change your car color with color %d?\nYou will not lose any premium points.", colorid);
			   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Are you sure?", strx, "Yes", "No");
			   					}
			   				}
		   				}
		   				else return SS(playerid, COLOR_WHITE, "Nu ai suficiente punte premium. Ai nevoie de 5 puncte premium pentru a schimba un hidden (127-256) pe masina.", "You don't have enough premium points. You need 5 premium points to change a hidden on your car.");
	   				}
   					SelectedCar[playerid] = idcar;
   					SellTradeID[playerid] = colorid;
   					SellTradePrice[playerid] = 2;
   					return 1;
				}
 				PlayerInfo[playerid][pCarColor2][idcar] = colorid;
  				GivePlayerCash(playerid, -5000);
   				ChangeVehicleColor(car, PlayerInfo[playerid][pCarColor1][idcar], colorid);
				Update(playerid, pCashx);
				cUpdate(playerid, idcar, cColorTwox);
				SendClientMessage(playerid,COLOR_WHITE, "Vehicle color changed!");
				GameTextForPlayer(playerid, "~r~-$5.000", 5000, 1);
				return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You are not in your car.");
	}
	return 1;
}
CMD:swapColorss(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid, COLOR_GREY,"You don't have enough money.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE,"You are not in your car.");
		new VehI = GetPlayerVehicleID(playerid),idcar=-1;
		for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
		{
			if(VehI == PlayerInfo[playerid][pCarID][vv])
			{
				idcar = vv;
			}
		}
		if(idcar == -1) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your car.");
		if(VehI == PlayerInfo[playerid][pCarID][idcar])
		{
			new color1 = PlayerInfo[playerid][pCarColor1][idcar], color2 = PlayerInfo[playerid][pCarColor2][idcar];
			PlayerInfo[playerid][pCarColor1][idcar] = color2;
			PlayerInfo[playerid][pCarColor2][idcar] = color1;
			ChangeVehicleColor(VehI, PlayerInfo[playerid][pCarColor1][idcar], PlayerInfo[playerid][pCarColor2][idcar]);
			GivePlayerCash(playerid, -5000);
			Update(playerid, pCashx);
			cUpdate(playerid, idcar, cColorOnex);
			cUpdate(playerid, idcar, cColorTwox);
			SendClientMessage(playerid,COLOR_WHITE, "Culorile masinii au fost schimbate!");
			GameTextForPlayer(playerid, "~r~-$5.000", 5000, 1);
		}
	}
	return 1;
}
CMD:vipwheels(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(!IsPlayerInAnyVehicle(playerid)) return SS(playerid, COLOR_LIGHTGREEN3, "Nu esti intr-un vehicul!", "You are not in a vehicle!");
	new carid = GetPlayerVehicleID(playerid),idcar=-1;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(carid == PlayerInfo[playerid][pCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.", "You can add custom wheels on VIP vehicles.");
	if(IsPlayerConnected(playerid))
	{
		if(carid == PlayerInfo[playerid][pCarID][idcar])
		{
			if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
			{
				ShowPlayerDialog(playerid, DIALOG_VIPWHEELS, DIALOG_STYLE_LIST, "VIP Wheels", "Gold Wheels\nDollar Wheels\nShadow Wheels", "Set", "Exit");
			}
			else return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.", "You can add custom wheels on VIP vehicles.");
		}
		else return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.", "You can add custom wheels on VIP vehicles.");
	}
	return 1;
}
CMD:vipname(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(!IsPlayerInAnyVehicle(playerid)) return SS(playerid, COLOR_LIGHTGREEN3, "Nu esti intr-un vehicul!", "You are not in a vehicle!");
	new carid = GetPlayerVehicleID(playerid),idcar=-1;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(carid == PlayerInfo[playerid][pCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.", "You can add custom wheels on VIP vehicles.");
	if(IsPlayerConnected(playerid))
	{
		if(carid == PlayerInfo[playerid][pCarID][idcar])
		{
			if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
			{
				new query[256],text[20],test[20];
				if(sscanf(params, "s[20]", text)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vipname [text]");
				if(strlen(text) > 20) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Maximum 20 characters are allowed.");
				if(strlen(text) == 0) return 1;
				format(CarVipName[playerid][idcar], 20, text);
				SetVipText(playerid, idcar);
				mysql_real_escape_string(text, test);
				mysql_format(SQL, query, sizeof(query), "UPDATE `cars` SET `VipText`='%s' WHERE `ID`='%d'", test, PlayerInfo[playerid][pCar][idcar]);
				mysql_tquery(SQL, query, "", "");
				format(query, sizeof(query), "Text pentru vehicul setat: %s", text);
				SendClientMessage(playerid, COLOR_ADMCOMMANDS, query);
			}
			else return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.", "You can add custom text on VIP vehicles.");
		}
		else return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.", "You can add custom text on VIP vehicles.");
	}
	return 1;
}
CMD:vipnamecolor(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(!IsPlayerInAnyVehicle(playerid)) return SS(playerid, COLOR_LIGHTGREEN3, "Nu esti intr-un vehicul!", "You are not in a vehicle!");
	new carid = GetPlayerVehicleID(playerid),idcar=-1;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(carid == PlayerInfo[playerid][pCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.", "You can add custom wheels on VIP vehicles.");
	if(IsPlayerConnected(playerid))
	{
		if(carid == PlayerInfo[playerid][pCarID][idcar])
		{
			if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
			{
				ShowPlayerDialog(playerid, DIALOG_VIPNAMECOLOR, DIALOG_STYLE_LIST, "VIP Car Name Color", "{FFFFFF}White\n{FF0000}Red\n{640000}Dark Red\n{00FF00}Green\n{004B01}Dark Green\n{008DFF}Blue\n{001AFF}Dark Blue\n{FFFF00}Yellow\n{FF6B00}Orange\n{EB00FF}Purple\n{590056}Dark Purple\n{8A8A8A}Gray\n{000000}Black\n{28B2E0}Aqua\n{F20C9A}Roz", "Choose", "Cancel");
			}
			else return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.", "You can add custom text on VIP vehicles.");
		}
		else return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.", "You can add custom text on VIP vehicles.");
	}
	return 1;
}
CMD:park(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your car.");
	new engine,lights,alarm,doors,bonnet,boot,objective;
	new Float:x,Float:y,Float:z,Float:a,getcarid,idcar=-1;
	getcarid = GetPlayerVehicleID(playerid);
	new interiorr = GetPlayerInterior(playerid),
	virtuall = GetPlayerVirtualWorld(playerid);
	GetVehiclePos(getcarid, x, y, z);
	GetVehicleZAngle(getcarid, a);
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(getcarid == PlayerInfo[playerid][pCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your car.");
	if(IsPlayerConnected(playerid))
	{
		if(getcarid == PlayerInfo[playerid][pCarID][idcar])
		{
			new Float:health2;
			GetVehicleHealth(getcarid, health2);
			if(health2 < 500.0 || (vehEngine[getcarid] == 1 && !IsABike(getcarid))) return SCM(playerid,COLOR_GREY,"You need to stop the engine first. Also, your car needs to be reapaired first (more than 500 car health).");
			cUpdate(playerid, idcar, cModsx);
			cUpdate(playerid, idcar, cPaintJx);
			LoadCar(playerid);
			PlayerInfo[playerid][pCarLocX][idcar] = x;
			PlayerInfo[playerid][pCarLocY][idcar] = y;
			PlayerInfo[playerid][pCarLocZ][idcar] = z;
			PlayerInfo[playerid][pCarAngle][idcar] = a;
			DestroyVehicle(PlayerInfo[playerid][pCarID][idcar]);
			PlayerInfo[playerid][pCarID][idcar] = CreateVehicle(PlayerInfo[playerid][pCarModel][idcar],PlayerInfo[playerid][pCarLocX][idcar],PlayerInfo[playerid][pCarLocY][idcar],PlayerInfo[playerid][pCarLocZ][idcar]+1.0,PlayerInfo[playerid][pCarAngle][idcar],PlayerInfo[playerid][pCarColor1][idcar],PlayerInfo[playerid][pCarColor2][idcar],-1);
			UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarID][idcar], PlayerInfo[playerid][pCarDamage1][idcar], PlayerInfo[playerid][pCarDamage2][idcar], PlayerInfo[playerid][pCarDamage3][idcar], PlayerInfo[playerid][pCarDamage4][idcar]);
			Gas[PlayerInfo[playerid][pCarID][idcar]] = PlayerInfo[playerid][pCarGas][idcar];
			SetVehicleNumberPlate(PlayerInfo[playerid][pCarID][idcar], CarPlate[playerid][idcar]);
			SetVehicleHealth(PlayerInfo[playerid][pCarID][idcar], health2);
			LinkVehicleToInterior(PlayerInfo[playerid][pCarID][idcar], interiorr);
			SetVehicleVirtualWorld(PlayerInfo[playerid][pCarID][idcar], virtuall);
			vehEngine[PlayerInfo[playerid][pCarID][idcar]] = 0;
			GetVehicleParamsEx(PlayerInfo[playerid][pCarID][idcar],engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(PlayerInfo[playerid][pCarID][idcar],VEHICLE_PARAMS_OFF,lights,alarm,PlayerInfo[playerid][pCarLock][idcar],bonnet,boot,objective);
			SetPVarInt(playerid, "Engine", 0);
			cUpdate(playerid, idcar, cLocationxx);
			cUpdate(playerid, idcar, cLocationyx);
			cUpdate(playerid, idcar, cLocationzx);
			cUpdate(playerid, idcar, cAnglex);
			SetTimerEx("ModPVehicle", 500, false, "id", playerid, idcar);
			if(strlen(CarVipName[playerid][idcar]) > 0)
			{
				SetVipText(playerid, idcar);
			}
			SendClientMessage(playerid, COLOR_DARKPINK, "Masina parcata. Pentru a respawna masina aici, foloseste /v.");
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You need to be in your vehicle.");
	}
	return 1;
}
CMD:lock(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new engine,lights,alarm,doors,bonnet,boot,objective;
		new string[128];
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
		    if(CheckPlayerDistanceToVehicle(5.0, playerid, PlayerInfo[playerid][pCarID][v]))
			{
				if(PlayerInfo[playerid][pCarLock][v] == 1)
				{
		    		GetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
		      	    SetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,0,bonnet,boot,objective);
					format(string, sizeof(string), "~h~%s~n~~g~Unlocked",aVehicleNames[PlayerInfo[playerid][pCarModel][v] - 400]);
					GameTextForPlayer(playerid, string, 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCarLock][v] = 0;
					gCarLock[PlayerInfo[playerid][pCarID][v]] = 0;
					cUpdate(playerid, v, cLockx);
					return 1;
				}
				else
				{
		    		GetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
		      	    SetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,1,bonnet,boot,objective);
					SetVehicleParamsForPlayer(PlayerInfo[playerid][pCarID][v],playerid,0,0);
					format(string, sizeof(string), "~h~%s~n~~r~Locked",aVehicleNames[PlayerInfo[playerid][pCarModel][v] - 400]);
					GameTextForPlayer(playerid, string, 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCarLock][v] = 1;
					gCarLock[PlayerInfo[playerid][pCarID][v]] = 1;
					cUpdate(playerid, v, cLockx);
				    return 1;
				}
			}
			else if(CheckPlayerDistanceToVehicle(5.0, playerid, HireCar[playerid]))
			{
				new carid = HireCar[playerid];
				if(gCarLock[carid] == 0)
		        {
			        new vehicles = GetVehicleModel(carid) - 400;
				    format(string, sizeof(string), "~h~%s~n~~r~Locked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 5000, 3);
		  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 1;
	    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
		            return 1;
			    }
				else if(gCarLock[carid] == 1)
				{
					new vehicles = GetVehicleModel(carid) - 400;
					format(string, sizeof(string), "~h~%s~n~~g~Unlocked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 0;
	    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,0,bonnet,boot,objective);
		            return 1;
				}
			}
			else if(CheckPlayerDistanceToVehicle(5.0, playerid, RentCar[playerid]))
			{
				new carid = RentCar[playerid];
				if(gCarLock[carid] == 0)
		        {
				    GameTextForPlayer(playerid, "~h~rentcar~n~~r~locked", 5000, 3);
		  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 1;
	    			GetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
		            return 1;
			    }
				else if(gCarLock[carid] == 1)
				{
				    GameTextForPlayer(playerid, "~h~rentcar~n~~g~unlocked", 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 0;
	    			GetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,0,bonnet,boot,objective);
		            return 1;
				}
			}
			else if(CheckPlayerDistanceToVehicle(5.0, playerid, JobCar[playerid]))
			{
				new carid = JobCar[playerid];
				if(gCarLock[carid] == 0)
		        {
			        new vehicles = GetVehicleModel(carid) - 400;
				    format(string, sizeof(string), "~h~%s~n~~r~Locked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 5000, 3);
		  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 1;
	    			GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(carid,engine,lights,alarm,1,bonnet,boot,objective);
		            return 1;
			    }
				else if(gCarLock[carid] == 1)
				{
					new vehicles = GetVehicleModel(carid) - 400;
					format(string, sizeof(string), "~h~%s~n~~g~Unlocked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 0;
	    			GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(carid,engine,lights,alarm,0,bonnet,boot,objective);
		            return 1;
				}
			}
		}
	}
    return 1;
}
CMD:premium(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
        new string[556];
        format(string,sizeof(string),"{ffffff}Avantaje cont premium:\n- vei primi 4 sloturi de masina.\n- vei avea interesul 0.2.\n- vei primi 2 respect points la 5 ore pe server.\n- poti sa iti blochezi whisper-url [/togwhisper].\n- poate cumpara casetofon(boombox) din 24/7.\n- acces la comanda /pColors.\n- se poate pune culoare hidden pe masina.\n \nContul premium se primeste prin donatie de 10 euro. Mai multe detalii pe forum.");
		ShowPlayerDialog(playerid, DIALOG_PREMIUM, DIALOG_STYLE_MSGBOX, "Premium account:", string, "Close", "");
	}
	return 1;
}
CMD:dice(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(!IsPlayerInRangeOfPoint(playerid,50.0,1977.7538,1017.7076,994.4688)) return SCM(playerid,COLOR_WHITE,"You can use this command only in casinos.");
	if(PlayerInfo[playerid][pLevel] < 4) return SendClientMessage(playerid, COLOR_WHITE, "You don't have level 4.");
    if(IsPlayerConnected(playerid))
    {
		new id,money,sendername[25],string[184];
		if(sscanf(params, "ud",id,money)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dice [name/playerid] [money]");
		if(id == INVALID_PLAYER_ID) return SCM(playerid, COLOR_GREY, "Player not connected.");
		if(money < 1 || money > PlayerInfo[playerid][pLevel]*100000)
		{
			format(string, sizeof(string), "You can bet maximum $%s.", FormatNumber(PlayerInfo[playerid][pLevel]*100000));
			SendClientMessage(playerid, COLOR_GREY, string);
			return 1;
		}
		if(IsPlayerConnected(id))
		{
			if(GetPlayerCash(playerid) < money) return SCM(playerid,COLOR_WHITE,"Tu sau adversarul tau nu aveti suficienti bani pentru a juca barbut.");
		    if(GetPlayerCash(id) < money) return SCM(playerid,COLOR_WHITE,"Tu sau adversarul tau nu aveti suficienti bani pentru a juca barbut.");
		    if(id == playerid) return SendClientMessage(playerid, COLOR_WHITE, "Nu te poti invita singur sa joci barbut.");
			if(ProxDetectorS(10.0, playerid, id))
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				SendClientMessage(playerid, COLOR_DARKPINK, "Cerere de barbut trimisa.");
				format(string, sizeof(string), "%s te-a invitat sa joci barbut cu el pe $%s. Scrie /accept dice %d pentru a juca.",sendername,FormatNumber(money),playerid);
				SendClientMessage(id, COLOR_DARKPINK, string);
				Diceid[id] = playerid;
				Dicem[id] = money;
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "You need to be near your opponent.");
		}
    }
	return 1;
}
CMD:c(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pClan] < 1) return SendClientMessage(playerid, COLOR_GREY, "Your are not in a clan.");
	new msj[100],string[150],sendername[25];
    if(PlayerInfo[playerid][pMuted] == 1)
    {
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 1;
	}
	if(sscanf(params, "s[100]",msj)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /c [message]");
	GetPlayerName(playerid,sendername,sizeof(sendername));
	if(PlayerInfo[playerid][pClan] != 0)
	{
		if(PlayerInfo[playerid][pClan] >= 1)
		{
			if(PlayerInfo[playerid][pCRank] == 1)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName1],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] == 2)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName2],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] == 3)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName3],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] == 4)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName4],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] == 5)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName5],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] == 6)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName6],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] >= 7)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName7],sendername,msj);
			}
		}
		SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, string);
		new var100[300],resulttt[300],strr[300];
		format(strr, sizeof(strr),"[CLAN] %s: %s", sendername, msj);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','c')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
	}
	return 1;
}
CMD:quitclan(playerid, params[])
{
	if(PlayerInfo[playerid][pClan] != 0)
	{
		if(PlayerInfo[playerid][pCRank] != 7)
		{
		    ShowPlayerDialog(playerid,DIALOG_QUITCLAN,DIALOG_STYLE_MSGBOX,"Esti sigur?","Vrei sa parasesti clanul curent?","Da","Nu");
		}
		else SendClientMessage(playerid, COLOR_GREY, "You can't leave your clan because you are the leader.");
   	}
   	else return SendClientMessage(playerid, COLOR_WHITE, "You don't have a clan to quit.");
	return 1;
}
CMD:cinvite(playerid, params[])
{
    if(PlayerInfo[playerid][pCRank] < 6) return SendClientMessage(playerid, COLOR_WHITE, "Doar playerii cu rank 6 si 7 pot invita membri in clan.");
    new userID,giveplayer[25],sendername[25],szMessage[119];
    if(sscanf(params, "u", userID)) return SendClientMessage(playerid, COLOR_WHITE, "Usage: /cinvite [id]");
	{
        if(GetClanMembers(PlayerInfo[playerid][pClan]) >= ClanInfo[PlayerInfo[playerid][pClan]][cClanSlots]) return SendClientMessage(playerid, COLOR_WHITE, "You have reached maximum members.");
		if(userID == playerid) return SendClientMessage(playerid, COLOR_WHITE, "Nu poti sa te inviti singur in clan.");
		if(ClanInfo[PlayerInfo[playerid][pClan]][cClanActive] < 1) return SS(playerid, COLOR_WHITE, "Nu poti invita membri deoarece clanul a expirat (pentru prelungire intra pe panel).", "You can't invite members because the clan has expired (for extending go to panel).");
		if(IsPlayerConnected(userID))
		{
			if(PlayerInfo[userID][pClan] == 0)
			{
				GetPlayerName(userID,giveplayer,sizeof(giveplayer));
				format(szMessage, sizeof(szMessage), "You have invited %s to join your clan.", giveplayer);
				SendClientMessage(playerid, COLOR_WHITE, szMessage);

				GetPlayerName(playerid,sendername,sizeof(sendername));
				if(PlayerInfo[userID][pLanguage] == 2) format(szMessage, sizeof(szMessage), "%s te-a invitat in clanul %s. Foloseste /accept cinvite %d pentru a accepta.", sendername, ClanInfo[PlayerInfo[playerid][pClan]][cClanName], playerid);
				else format(szMessage, sizeof(szMessage), "%s has invited you in the clan %s. Type /accept cinvite %d to accept.", sendername, ClanInfo[PlayerInfo[playerid][pClan]][cClanName], playerid);
				SS(userID, COLOR_BLUE, "Invitatie noua in clan:", "New invite in clan:");
				SendClientMessage(userID, COLOR_BLUE, szMessage);

				SetPVarInt(userID, "cinvID", PlayerInfo[playerid][pClan]);
				SetPVarInt(userID, "cinvIDD", playerid);
			}
		}
	}
    return 1;
}
CMD:clan(playerid, params[])
{
	if(PlayerInfo[playerid][pClan] >= 1)
	{
		ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	return 1;
}
CMD:friends(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new online[1000],offline[1000],query[300],result[30],name[30],idd,mid=1,aim2[2000];
		format(query, sizeof(query), "SELECT * FROM `friends` WHERE `PlayerID` = '%d' AND `Status`='1'",PlayerInfo[playerid][pSQLID]);
		new Cache: membresult = mysql_query(SQL,query);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			idd = cache_get_field_content_int(i, "FriendID");
			cache_get_field_content(i, "FriendName", result); format(name, 30, result);
			Selected[playerid][mid] = idd;
			format(online, sizeof(online), "%s{228404}[online]{FFFFFF} %s\n",online,name);
			mid++;
		}
		cache_delete(membresult);
		format(query, sizeof(query), "SELECT * FROM `friends` WHERE `PlayerID` = '%d' AND `Status`='0'",PlayerInfo[playerid][pSQLID]);
		new Cache: membresult1 = mysql_query(SQL,query);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			idd = cache_get_field_content_int(i, "FriendID");
			cache_get_field_content(i, "FriendName", result); format(name, 30, result);
			Selected[playerid][mid] = idd;
			format(offline, sizeof(offline), "%s{BB172D}[offline]{FFFFFF} %s\n",offline,name);
			mid++;
		}
		cache_delete(membresult1);
		format(aim2,sizeof(aim2),"{F89B0E}[+] Add Friend\n%s%s",online, offline);
		ShowPlayerDialog(playerid, DIALOG_FRIENDS, DIALOG_STYLE_LIST, "Friends", aim2, "Select", "Exit");
	}
	return 1;
}
CMD:aplicatii(playerid, params[])
{
	new checkmysql[1200],idaplicant,stringapps[1000],doarodata = 0,levelaplicant,numeaplicant[60],oreaplicant,result[500],idlistitem = 0;
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "Nu esti logat.");
	new Cache: verificare3;
	if(PlayerInfo[playerid][pLeader] < 1) return SCM(playerid, COLOR_ERROR, "Nu esti lider la o factiune");
	mysql_format(SQL, checkmysql, sizeof(checkmysql), "SELECT * FROM `aplicatii` WHERE `factionid`='%d'",PlayerInfo[playerid][pLeader]);
	new Cache: verificare = mysql_query(SQL, checkmysql);
	if(cache_get_row_count() > 0)
	{
		for(new i, c = cache_get_row_count(); i != c; i++)
		{
	        idaplicant = cache_get_field_content_int(i, "playerid");
       		mysql_format(SQL, checkmysql, sizeof(checkmysql), "SELECT * FROM `users` WHERE `id`='%d'",idaplicant);
			new Cache: verificare2 = mysql_query(SQL, checkmysql);
			for(new x, ca = cache_get_row_count(); x != ca; x++)
			{
		  	  	cache_get_field_content(x, "name", result); format(numeaplicant, 30, result);
				levelaplicant = cache_get_field_content_int(x, "Level");
				oreaplicant = cache_get_field_content_int(x, "ConnectedTime");
				Selected[playerid][idlistitem] = idaplicant;
				idlistitem += 1;
				cache_delete(verificare2);
				if(doarodata == 0)
				{
		  			format(stringapps, sizeof(stringapps), "Nume\tLevel\tOre jucate\n");
					doarodata = 1;
				}
    			format(stringapps, sizeof(stringapps), "%s%s\t%d\t%d\n",stringapps,numeaplicant,levelaplicant,oreaplicant);
			}
			mysql_format(SQL, checkmysql, sizeof(checkmysql), "SELECT * FROM `aplicatii` WHERE `factionid`='%d'",PlayerInfo[playerid][pLeader]);
			verificare3 = mysql_query(SQL, checkmysql);

		}
		ShowPlayerDialog(playerid, DIALOG_APLICATII, DIALOG_STYLE_TABLIST_HEADERS, "Aplicatile jucatorilor...", stringapps , "Selecteaza", "Anuleaza");
	}
	else
	{
	    SCM(playerid, COLOR_ERROR, "Nu exista aplicatii");
	}
	cache_delete(verificare3);
	cache_delete(verificare);
	return 1;
}
CMD:aplica(playerid, params[])
{
	new stringz2[MAX_STRING],checkmysql[512];
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "Nu esti logat.");
	if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0) return SCM(playerid, COLOR_ERROR, "Nu poti accesa aceasta comanda deoarece faci parte dintr-o factiune");
	mysql_format(SQL, checkmysql, sizeof(checkmysql), "SELECT * FROM `users` WHERE `id`='%d' AND `aplicatie`='0'",PlayerInfo[playerid][pSQLID]);
	new Cache: verificare = mysql_query(SQL, checkmysql);
	if(cache_get_row_count() < 1) return ShowPlayerDialog(playerid, DIALOG_AIAPLICATIE, DIALOG_STYLE_MSGBOX, "Server: Aplicatie", "Ai deja o aplicatie la o factiune, pentru a putea continua este nevoie sa o stergi.", "Sterge", "Anuleaza");
	cache_delete(verificare);
	if(DynamicFactions[1][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", DynamicFactions[1][fName],GetFactionMembers(1), DynamicFactions[1][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", DynamicFactions[1][fName],GetFactionMembers(1), DynamicFactions[1][fMaxMembers]);
	}
 	if(DynamicFactions[2][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[2][fName],GetFactionMembers(2), DynamicFactions[2][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2, DynamicFactions[2][fName],GetFactionMembers(2), DynamicFactions[2][fMaxMembers]);
	}
	if(DynamicFactions[3][fApplication] > 0)
	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[3][fName],GetFactionMembers(3), DynamicFactions[3][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2, DynamicFactions[3][fName],GetFactionMembers(3), DynamicFactions[3][fMaxMembers]);
	}
 	if(DynamicFactions[4][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[4][fName],GetFactionMembers(4), DynamicFactions[4][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2, DynamicFactions[4][fName],GetFactionMembers(4), DynamicFactions[4][fMaxMembers]);
	}
 	if(DynamicFactions[5][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[5][fName],GetFactionMembers(5), DynamicFactions[5][fMaxMembers]);
	}
	else
	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2, DynamicFactions[5][fName],GetFactionMembers(5), DynamicFactions[5][fMaxMembers]);
	}
 	if(DynamicFactions[6][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[6][fName],GetFactionMembers(6), DynamicFactions[6][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2, DynamicFactions[6][fName],GetFactionMembers(6), DynamicFactions[6][fMaxMembers]);
	}
 	if(DynamicFactions[8][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[8][fName],GetFactionMembers(8), DynamicFactions[8][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2, DynamicFactions[8][fName],GetFactionMembers(8), DynamicFactions[8][fMaxMembers]);
	}
 	if(DynamicFactions[9][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[9][fName],GetFactionMembers(9), DynamicFactions[9][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2,  DynamicFactions[9][fName],GetFactionMembers(9), DynamicFactions[9][fMaxMembers]);
	}
 	if(DynamicFactions[10][fApplication] > 0)
   	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[10][fName],GetFactionMembers(10), DynamicFactions[10][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2, DynamicFactions[10][fName],GetFactionMembers(10), DynamicFactions[10][fMaxMembers]);
	}
 	if(DynamicFactions[11][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[11][fName],GetFactionMembers(11), DynamicFactions[11][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2, DynamicFactions[11][fName],GetFactionMembers(11), DynamicFactions[11][fMaxMembers]);
	}
 	if(DynamicFactions[12][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[12][fName],GetFactionMembers(12), DynamicFactions[12][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2, DynamicFactions[12][fName],GetFactionMembers(12), DynamicFactions[12][fMaxMembers]);
	}
 	if(DynamicFactions[13][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[13][fName],GetFactionMembers(13), DynamicFactions[13][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2, DynamicFactions[13][fName],GetFactionMembers(13), DynamicFactions[13][fMaxMembers]);
	}
 	if(DynamicFactions[14][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[14][fName],GetFactionMembers(14), DynamicFactions[14][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2, DynamicFactions[14][fName],GetFactionMembers(14), DynamicFactions[14][fMaxMembers]);
	}
	if(DynamicFactions[15][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[15][fName],GetFactionMembers(15), DynamicFactions[15][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2, DynamicFactions[15][fName],GetFactionMembers(15), DynamicFactions[1][fMaxMembers]);
	}
	if(DynamicFactions[16][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[16][fName],GetFactionMembers(16), DynamicFactions[16][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2, DynamicFactions[16][fName],GetFactionMembers(16), DynamicFactions[16][fMaxMembers]);
	}
	if(DynamicFactions[17][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[17][fName],GetFactionMembers(17), DynamicFactions[17][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2, DynamicFactions[17][fName],GetFactionMembers(17), DynamicFactions[17][fMaxMembers]);
	}
	if(DynamicFactions[18][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{00FF00}aplica\n", stringz2, DynamicFactions[18][fName],GetFactionMembers(18), DynamicFactions[18][fMaxMembers]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%s\t[%d/%d] \t{ff0000}aplicatii inchise\n", stringz2, DynamicFactions[18][fName],GetFactionMembers(18), DynamicFactions[18][fMaxMembers]);
	}
	format(MGLOBAL, sizeof(MGLOBAL), "Factiune\tMembrii\tStatus aplicatii\n%s",stringz2);
	ShowPlayerDialog(playerid, DIALOG_APLICA, DIALOG_STYLE_TABLIST_HEADERS, "Aplica pentru o factiune.",MGLOBAL,"Aplica", "Anuleaza");
	return 1;
}
CMD:togkickafk(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	if(kickafk == 1)
	{
	    kickafk = 0;
	    SCM(playerid,COLOR_WHITE,"You disable afk kick.");
	    return 1;
	}
	else
	{
	    SCM(playerid,COLOR_WHITE,"You enable afk kick.");
	    kickafk = 1;
	}
	return 1;
}
CMD:serverpass(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new pass[64],string[128];
		if(sscanf(params, "s[64]", pass)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /serverpass [password]");
		{
			format(string,sizeof(string),"password %s",pass);
			SendRconCommand(string);
			format(string,sizeof(string), "You changed the server password in: %s.",pass);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:servername(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new name[64],string[128];
		if(sscanf(params, "s[64]", name)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /servername [name]");
		{
			format(string,sizeof(string),"hostname %s",name);
			SendRconCommand(string);
			format(string,sizeof(string), "You changed the server name in: %s.",name);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:hmusic(playerid, params[])
{
	if(InHouse[playerid] > -1)
	{
	    if(strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[InHouse[playerid]][hOwner]) == 0)
	    {
	    	if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hMusic] == 0) return SendClientMessage(playerid, COLOR_GREY, "You don't have this house upgrade, use /hupgrade.");
	    	new strings[500];
			format(strings, sizeof(strings), "Turn Off Radio\nPro FM Romania\nRadio Bandit Romania\nRadio Taraf Romania\nRadio Hot Romania\nRadio Gangsta Dance\nRadio Gangsta Manele\n.977 Hitz\n.977 Mix\n.977 Alternative\nRadio BBC One UK\nDubstep.fm\nRadio Hit Romania\nRadio ClubMix Romania\nKiss FM Romania [Audio Plugin]\nRadio Zu Romania [Audio Plugin]\nRadio Popular\nTrap.FM\nRadio Tequila Hip Hop\nYoutube Music/Custom URL");
			ShowPlayerDialog(playerid, DIALOG_HMUSIC, DIALOG_STYLE_LIST, "House music", strings, "Play", "Cancel");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have the key to this house.");
	}
	else return SS(playerid, COLOR_WHITE, "Nu esti intr-o casa.", "You are not in a house.");
	return 1;
}
CMD:bmusic(playerid, params[])
{
	if(InBussines[playerid] > -1)
	{
		if(BizzInfo[InBussines[playerid]][bType] != 3) return SCM(playerid,COLOR_WHITE,"You are not in a bar.");
		new link[358];
		if(strcmp(PlayerInfo[playerid][pNormalName], BizzInfo[InBussines[playerid]][bOwner]) == 0 || PlayerInfo[playerid][pAdmin] > 0)
		{
			if(sscanf(params, "s[358]",link)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bmusic [link]");
			format(barstring[InBussines[playerid]], 256, "%s", link);
			foreach(new i : Player)
			{
			    if(InBussines[playerid] == InBussines[i])
			    {
			        StopAudioStreamForPlayer(i);
					PlayAudioStreamForPlayer(i, link);
				}
			}
		}
		else return SCM(playerid,COLOR_WHITE,"This is not your business.");
	}
	else return SCM(playerid,COLOR_WHITE,"You are not in a bar.");
	return 1;
}
CMD:carradio(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        new stringy[MAX_STRING],strings[500],listen[20];
		for(new x; x < 20; x++)
		{
			foreach(new i : Player)
			{
				if(Listening[i] == x) listen[x]++;
			}
		}
		format(strings, sizeof(strings), "Radio station\tListeners\n{FF2080}Turn Off Radio\t\nPro FM Romania\t%d\nRadio Bandit Romania\t%d\nRadio Taraf Romania\t%d\nRadio Hot Romania\t%d\nRadio Gangsta Dance\t%d\nRadio Gangsta Manele\t%d\n.977 Hitz\t%d\n",listen[0],listen[1],listen[2],listen[3],listen[4],listen[5],listen[6]);
		strcat(stringy, strings);
		format(strings, sizeof(strings), ".977 Mix\t%d\n.977 Alternative\t%d\nRadio BBC One UK\t%d\nDubstep.fm\t%d\nRadio Hit Romania\t%d\nRadio ClubMix Romania\t%d\nKiss FM Romania [Audio Plugin]\t%d\nRadio Zu Romania [Audio Plugin]\t%d\n",listen[7],listen[8],listen[9],listen[10],listen[11],listen[12],listen[13],listen[14]);
		strcat(stringy, strings);
		format(strings, sizeof(strings), "Radio Popular\t%d\nTrap.FM\t%d\nRadio Tequila Hip Hop\t%d\nYoutube Music/Custom URL\t%d",listen[15],listen[16],listen[17],listen[18]);
        strcat(stringy, strings);
		ShowPlayerDialog(playerid, DIALOG_RADIO, DIALOG_STYLE_TABLIST_HEADERS, "Vehicle Radio", stringy, "Play", "Cancel");
    }
    return 1;
}
CMD:carmusic(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_carradio(playerid, params);
}
CMD:jobs(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1)
	{
   	 	ShowPlayerDialog(playerid, DIALOG_JOBS, DIALOG_STYLE_LIST,"Jobs:", "Detective\nDrugs Dealer\nPizza Boy\nBus Driver\nMechanic\nArms Dealer\nGarbage\nFisherman\nTrucker\nFarmer\nCar Jacker","Select", "Close");
		return 1;
	}
	else
	{
	    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Anulare Checkpoint", "Esti sigur ca vrei sa anulezi checkpoint-ul curent?", "Da", "Nu");
	}
	return 1;
}
CMD:work(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
//    if(PlayerInfo[playerid][pAsteapta] > 0) return SendClientMessage(playerid, COLOR_NEWS, "Asteapta 2 minute pentru a putea folosi din nou /work");
	{
        if(PlayerInfo[playerid][pJob] == 5)
        {
            if(IsPlayerInRangeOfPoint(playerid, 10, -2666.4829,271.0853,4.3359))
            {
	            if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	            {
		            if(Asteapta[playerid] > 0)
                    {
		                new strr[256];
			            format(strr,sizeof(strr),"You can deliver another pizza in %d seconds.",pizzatime[playerid]);
			            SendClientMessage(playerid, COLOR_GREY, strr);
                    }
		            if(PlayerInfo[playerid][pJob] == 5 && IsPlayerInRangeOfPoint(playerid, 10, -2666.4829,271.0853,4.3359))
		            {
                        new Float:x,Float:y,Float:z;
		                GetPlayerPos(playerid, x, y, z);
		                pizzacar[playerid] = AddStaticVehicle(448, x,y+1,z, 0.0,  1, 1);
		                PutPlayerInVehicleEx(playerid, pizzacar[playerid], 0);
		                Gas[pizzacar[playerid]] = 100;
		                workdeja[playerid] = 1;
		                SetTimerEx("Livrarepizza1", 20000, 0, "i", playerid);
		                SCM(playerid, COLOR_NEWS, "Ai 20 de secunde pentru a tasta comanza [/pizza]");
	//	                PlayerInfo[playerid][pAsteapta] = 1;
					}
				}
				else return SCM(playerid, -1, "Nu poti incepe jobul daca te afli intr-un vehicul.");
			}
			else
			{
				SCM(playerid, -1, "Nu te afli in locul de unde poti incepe job-ul.");
				if(PlayerInfo[playerid][pJob] == 5) SetPlayerCheckpoint(playerid, -2666.4829,271.0853,4.3359, 5.0);
			}
        }
	}
	return 1;
}
CMD:event(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(activeevent == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFF45}There is currently no active event running.");
   	new string[300],name[MAX_PLAYER_NAME];
   	foreach(new i : Player)
   	{
   		if(eventorganizer[i] == 1)
    	{
    		GetPlayerName(i, name, sizeof(name));
    	}
   	}
   	format(string, sizeof(string), "{FFFF00}Event: Title: %s Prize: $%s Location: %s Time: %s",eventtitle,FormatNumber(eventprize), eventlocation, eventtime);
   	SendClientMessage(playerid, 0xFFFFFFFF, string);
   	format(string, sizeof(string), "{FFFF00}Event: Organizer: %s Description: %s",name,eventdescription);
   	SendClientMessage(playerid, 0xFFFFFFFF, string);
   	return 1;
}
CMD:ev(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(eventorganizer[playerid] == 0) return SendClientMessage(playerid, 0xFFFFFFFF, "{FFFF00}You're not the organizer of the event.");
	new string[300],text[250];
	if(sscanf(params, "s[250]", text)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /ev [message]");
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	format(string, sizeof(string), "{7094DB}Event Organizer %s: %s", name, text);
	SendClientMessageToAll(0xFFFFFFFF, string);
	new var100[300],resulttt[300];
	mysql_real_escape_string(text, resulttt);
	mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','ev')", PlayerInfo[playerid][pSQLID], resulttt);
	mysql_tquery(SQL,var100,"","");
	return 1;
}
CMD:stopevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(activeevent == 0 && PlayerInfo[playerid][pAdmin] >= 1) return SendClientMessage(playerid, COLOR_GREY, "There isn't any events active to stop.");
	if(eventorganizer[playerid] == 0 && PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not the organizer of the event.");
	foreach(new i : Player)
	{
		eventorganizer[i] = 0;
	}
	SendClientMessageToAll(COLOR_YELLOW, "Event over.");
	activeevent = 0;
	return 1;
}
CMD:acceptevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	if(activeevent == 1) return SendClientMessage(playerid, COLOR_GREY, "There is already an active event.");
	new eventid;
	if(sscanf(params, "d", eventid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /acceptevent [event id]");
	if(requestingevent[eventid] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid event ID.");
	strmid(eventtitle, requestingtitle[eventid], 0, strlen(requestingtitle[eventid]));
	strmid(eventlocation, requestinglocation[eventid], 0, strlen(requestinglocation[eventid]));
	strmid(eventdescription, requestingdescription[eventid], 0, strlen(requestingdescription[eventid]));
	eventprize = requestingprize[eventid];
	strmid(eventtime, requestingtime[eventid], 0, strlen(requestingtime[eventid]));
	new string[300],name[MAX_PLAYER_NAME];
	GetPlayerName(eventid, name, sizeof(name));
 	format(string, sizeof(string), "Event: Title: %s Prize: $%s Location: %s Time: %s",eventtitle,FormatNumber(eventprize), eventlocation, eventtime);
   	SendClientMessageToAll(COLOR_YELLOW, string);
   	format(string, sizeof(string), "Event: Organizer: %s Description: %s",name,eventdescription);
	SendClientMessageToAll(COLOR_YELLOW, string);
	eventorganizer[eventid] = 1;
	requestingevent[eventid] = 0;
	activeevent = 1;
	new sendername[25];
	GetPlayerName(playerid,sendername,sizeof(sendername));
	format(string, sizeof(string), "Admin %s accepted %s event request.",sendername,name);
	ABroadCast(COLOR_YELLOW,string,1);
	return 1;
}
CMD:requestevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pWantedLevel] > 0) return SCM(playerid,COLOR_GREY,"You can't request an event while you have wanted.");
	if(activeevent == 1) return SendClientMessage(playerid, COLOR_GREY, "There is already an active event.");
	if(requestingevent[playerid] == 1) return SendClientMessage(playerid, COLOR_GREY, "You have already requested an event.");
	new title[50], location[50], description[100], prize, time[50];
	if(sscanf(params, "p<|>s[50]s[50]s[50]s[100]d", title, location, time, description, prize)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /requestevent [title|location|time|description|prize]");
	if(strlen(title) < 1 || strlen(title) > 50) return SendClientMessage(playerid, COLOR_GREY, "Title characters must be between 1 and 50.");
	if(strlen(location) < 1 || strlen(location) > 50) return SendClientMessage(playerid, COLOR_GREY, "Location characters must be between 1 and 50.");
	if(strlen(time) < 1 || strlen(time) > 50) return SendClientMessage(playerid, COLOR_GREY, "Time characters must be between 1 and 50.");
	if(strlen(description) < 1 || strlen(description) > 100) return SendClientMessage(playerid, COLOR_GREY, "Description characters must be between 1 and 50.");
	if(prize < 1 || prize > 5000000) return SendClientMessage(playerid, COLOR_GREY, "Prize must be between 50.000 and 5.000.000.");
	new string[1000],name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	requestingevent[playerid] = 1;
	strmid(requestingtitle[playerid], title, 0, strlen(title));
	strmid(requestinglocation[playerid], location, 0, strlen(location));
	strmid(requestingdescription[playerid], description, 0, strlen(description));
	requestingprize[playerid] = prize;
	strmid(requestingtime[playerid], time, 0, strlen(time));
	format(string, sizeof(string), "Event %d has been requested, details are below.", playerid);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	format(string, sizeof(string), "Event: Title: %s Prize: $%s Location: %s Time: %s",title,FormatNumber(prize), location, time);
   	SendClientMessage(playerid, COLOR_YELLOW, string);
   	format(string, sizeof(string), "Event: Organizer: %s Description: %s",name,description);
   	SendClientMessage(playerid, COLOR_YELLOW, string);
	SendClientMessage(playerid, COLOR_YELLOW, "Your event is pending approval from an admin, please wait.");
	format(string, sizeof(string), "Event %d has been requested, details are below.", playerid);
	ABroadCast(COLOR_YELLOW,string,1);
	format(string, sizeof(string), "Event %d: Title: %s Prize: $%s Location: %s Time: %s",playerid,title,FormatNumber(prize), location, time);
   	ABroadCast(COLOR_YELLOW,string,1);
	format(string, sizeof(string), "Event %d: Organizer: %s Description: %s",playerid,name,description);
	ABroadCast(COLOR_YELLOW,string,1);
	format(string, sizeof(string), "Use [/acceptevent %d] to accept this event.", playerid);
	ABroadCast(COLOR_YELLOW,string,1);
	return 1;
}
CMD:rejectevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new id, reason[100],string[300];
	if(sscanf(params, "us[100]", id, reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /rejectevent [event id] [reason]");
	if(requestingevent[id] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid event ID.");
	new receivername[MAX_PLAYER_NAME],sendername[MAX_PLAYER_NAME];
	requestingevent[id] = 0;
	GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerName(id, receivername, sizeof(receivername));
	format(string, sizeof(string), "{FFFF00}Admin %s has rejected your event, reason: %s", sendername, reason);
	SendClientMessage(id, 0xFFFFFFFF, string);
	format(string, sizeof(string), "{FFFF00}You rejected %s's event, reason: %s", receivername, reason);
	SendClientMessage(playerid, 0xFFFFFFFF, string);
	return 1;
}
CMD:events(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
    new string[300],tmpstring[100], titlestring[100], count = 0, name[MAX_PLAYER_NAME];
	foreach(new i : Player)
	{
		if(requestingevent[i] == 1)
 		{
  			GetPlayerName(i, name, sizeof(name));
    		format(tmpstring, sizeof(tmpstring), "Name: %s | ID: %d | Title: %s", name, i, requestingtitle[i]);
     		strcat(string, tmpstring);
      		count ++;
       	}
   	}
   	if(count == 0) return ShowPlayerDialog(playerid, DIALOG_PENDEVENT, DIALOG_STYLE_MSGBOX, "Pending Requests: 0", "There are no pending requests.", "Done", "");
   	format(titlestring, sizeof(titlestring), "Pending Requests: %d", count);
   	ShowPlayerDialog(playerid, 5345, DIALOG_STYLE_LIST, titlestring, string, "Close", "");
   	SendClientMessage(playerid, 0xFFFFFFFF, "{FFFF00}Use the command /cevent to check the pending event information.");
   	return 1;
}
CMD:cevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new eventid,string[300];
	if(sscanf(params, "u", eventid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /checkevent [event id]");
	if(requestingevent[eventid] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid event ID.");
	new name[MAX_PLAYER_NAME];
	GetPlayerName(eventid, name, sizeof(name));
	format(string, sizeof(string), "{FFFF00}Event %d: Title: %s Prize: $%s Location: %s Time: %s",eventid,requestingtitle[eventid],FormatNumber(requestingprize[eventid]), requestinglocation[eventid], requestingtime[eventid]);
   	SendClientMessage(playerid, 0xFFFFFFFF, string);
	format(string, sizeof(string), "{FFFF00}Event %d: Organizer: %s Description: %s",eventid,name,requestingdescription[eventid]);
	SendClientMessage(playerid, 0xFFFFFFFF, string);
	format(string, sizeof(string), "{FFFF00}Use [/acceptevent %d] to accept this event.", eventid);
    SendClientMessage(playerid, 0xFFFFFFFF, string);
   	return 1;
}
CMD:attack(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new hour,minn,sec,y,m,d;
	gettime(hour,minn,sec);
	getdate(y,m,d);
	if(IsPlayerConnected(playerid))
	{
		if(!IsAMember(playerid)) return SCM(playerid,COLOR_WHITE,"You are not a member of a mafia.");
		if(PlayerInfo[playerid][pRank] < 4) return SCM(playerid,COLOR_WHITE,"You don't have rank 4.");
		if(m == 12 && d == 25 || m == 12 && d == 26) return SendClientMessage(playerid, COLOR_WHITE, "Nu poti folosi aceasta comanda pe 25 sau 26 decembrie.");
		if(m == 1 && d == 1 || m == 1 && d == 2) return SendClientMessage(playerid, COLOR_WHITE, "Nu poti folosi aceasta comanda pe 1 sau pe 2 ianuarie.");
		if(GetWeekDay() == 1 || GetWeekDay() == 4 || GetWeekDay() == 6) return SendClientMessage(playerid, COLOR_WHITE, "War-ul este permis doar Luni, Miercuri, Vineri si Duminica.");
		if(hour == 20 || hour == 21)
		{
			new turf,faction,string[128],sendername[MAX_PLAYER_NAME];
			for(new i = 1; i <= sizeof(TurfInfo); i++)
			{
				if(IsPlayerInTurf(playerid, i) == 1)
				{
					turf = i;
					break;
				}
    		}
    		GetPlayerName(playerid, sendername, sizeof(sendername));
    		if(turf == 0) return SCM(playerid, COLOR_WHITE, "You are not on a turf.");
			if(DeelayWar[PlayerInfo[playerid][pMember]] > 0)
			{
				format(string,sizeof(string),"Your mafia can attack another turf in %d seconds.",DeelayWar[PlayerInfo[playerid][pMember]]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
    		faction = PlayerInfo[playerid][pMember];
    		if(TurfInfo[turf][zOwned] == faction) return SCM(playerid, COLOR_WHITE, "You can't attack your own turf.");
			if(WarInfo[turf][wAttacker] != 0) return SCM(playerid, COLOR_WHITE, "Turf is already attacked.");
			if(InWar[faction] == 1) return SCM(playerid, COLOR_WHITE, "You have an active war.");
			if(InWar[TurfInfo[turf][zOwned]] == 1) return SCM(playerid, COLOR_WHITE, "This mafia have active war.");
			new memberss;
			foreach(new i : Player)
			{
	    		if(IsPlayerConnected(i))
	    		{
	        		if(PlayerInfo[i][pMember] == TurfInfo[turf][zOwned])
					{
			    		memberss ++;
					}
				}
			}
			if(memberss < 1) return SCM(playerid, COLOR_WHITE, "This mafia don't have members online.");
			WarInfo[turf][wTime] = 1200;
			WarInfo[turf][wAttacker] = faction;
			WarInfo[turf][wFaction] = TurfInfo[turf][zOwned];
			format(string,sizeof(string),"[TURF] %s from your group attacked turf %d (owned by %s).",sendername,turf,NumeFactiune(TurfInfo[turf][zOwned]));
			SendFamilyMessage(faction,COLOR_GREEN,string);
			format(string,sizeof(string),"[TURF] %s from %s attacked turf %d owned by you.",sendername,NumeFactiune(WarInfo[turf][wAttacker]),turf);
			SendFamilyMessage(TurfInfo[turf][zOwned],COLOR_GREEN,string);
			new Cache: abs = mysql_query(SQL, "SELECT * FROM wars");
			new warid = cache_get_row_count() + 1;
			cache_delete(abs);
			format(string, sizeof(string),"[WAR] %s started a war with %s (war id: %d).",NumeFactiune(WarInfo[turf][wAttacker]),NumeFactiune(TurfInfo[turf][zOwned]),warid);
			ABroadCast(COLOR_ADMCOMMANDS,string,1);
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pMember] == TurfInfo[turf][zOwned] || PlayerInfo[i][pMember] == WarInfo[turf][wAttacker])
				{
					SetPlayerVirtualWorld(i, 1024);
					SendClientMessage(i, COLOR_YELLOW, "Ai fost teleportat intr-un Virtual World unde sunt prezenti doar jucatorii ce participa la war.");
				}
			}
			if(WarInfo[turf][wAttacker] == 4 || TurfInfo[turf][zOwned] == 4)
			{
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 4)
					{
						SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 1024);
					}
				}
			}
			if(WarInfo[turf][wAttacker] == 5 || TurfInfo[turf][zOwned] == 5)
			{
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 5)
					{
						SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 1024);
					}
				}
			}
			if(WarInfo[turf][wAttacker] == 6 || TurfInfo[turf][zOwned] == 6)
			{
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 6)
					{
						SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 1024);
					}
				}
			}
			if(WarInfo[turf][wAttacker] == 10 || TurfInfo[turf][zOwned] == 10)
			{
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 10)
					{
						SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 1024);
					}
				}
			}
			worstscoreat[turf] = 0;
			worstmemberat[turf] = 999;
			bestscoreat[turf] = 0;
			bestmemberat[turf] = 999;
			worstscoredf[turf] = 0;
			worstmemberdf[turf] = 999;
			bestscoredf[turf] = 0;
			bestmemberdf[turf] = 999;
			InWar[TurfInfo[turf][zOwned]] = 1;
			InWar[faction] = 1;
			waitwar[faction] = 60;
		}
		else return SCM(playerid,COLOR_WHITE,"War must be between 20:00 and 22:00.");
	}
	return 1;
}
CMD:turfs(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(TurfsDisp[playerid] == 0)
	{
		TurfsDisp[playerid] = 1;
		for(new i = 0; i < sizeof(Turfs); i++)
 		{
			if(TurfInfo[i][zOwned] == 4)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0x18EBD6C8); //Los Aztecas
			}
			if(TurfInfo[i][zOwned] == 5)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0x40863CAA); //Grove Street
			}
			if(TurfInfo[i][zOwned] == 6)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0xFFAE00C8); //Los Vagos
			}
			if(TurfInfo[i][zOwned] == 10)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0xBD1CDEC8); //Ballas
			}
			if(TurfInfo[i][zOwned] == 15)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0x46210EFF); //Ballas
			}
		}
	}
	else
	{
		TurfsDisp[playerid] = 0;
		for(new i = 0; i < sizeof(Turfs); i++)
		{
			GangZoneHideForPlayerEx(playerid, Turfs[i]);
		}
	}
	return 1;
}
CMD:gdeposit(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new x = PlayerInfo[playerid][pMember], string[128], cashdeposit, item[30], name[30];
		if(x <= 0) return 1;
		if(sscanf(params, "s[30]d", item, cashdeposit))
		{
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gdeposit [money, materials or drugs] [amount]");
			format(string, sizeof(string), "Safe balance: $%d, %d materials, %d grams of drugs", DynamicFactions[x][fBank], DynamicFactions[x][fMats], DynamicFactions[x][fDrugs]);
			SendClientMessage(playerid, COLOR_GREY, string);
			return 1;
		}
		if(cashdeposit < 1 || cashdeposit > 2147483646) return 1;
		GetPlayerName(playerid, name, sizeof(name));
		if(IsPlayerInRangeOfPoint(playerid, 5.0, DynamicFactions[x][fSafePos][0], DynamicFactions[x][fSafePos][1], DynamicFactions[x][fSafePos][2]))
		{
			if(strcmp(item, "money", true) == 0)
			{
				if(GetPlayerCash(playerid) >= cashdeposit)
				{
					DynamicFactions[x][fBank] += cashdeposit;
					GivePlayerCash(playerid, -cashdeposit);
					Update(playerid,pCashx);
					format(string, sizeof(string), "You have deposited $%d in your group safe.", cashdeposit);
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "%s deposits $%d in their group safe.", name, cashdeposit);
					ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					new str[184];
					mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[x][fBank], x);
					mysql_tquery(SQL,str,"","");
					new varxx[256];
					mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport6 = Raport6+%d WHERE name = '%s'", cashdeposit, PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,varxx,"","");
				 	return 1;
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "You don't have that amount of money.");
			}
			else if(strcmp(item, "materials", true) == 0)
			{
				if(cashdeposit <= PlayerInfo[playerid][pMats])
				{
					PlayerInfo[playerid][pMats] = PlayerInfo[playerid][pMats]-cashdeposit;
					DynamicFactions[x][fMats] += cashdeposit;
	                format(string, sizeof(string), "You have deposited %d materials in your group safe.", cashdeposit);
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "%s deposits %d materials in their group safe.", name, cashdeposit);
					ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					new str[256];
					mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Mats`='%d' WHERE `ID`='%d'", DynamicFactions[x][fMats], x);
					mysql_tquery(SQL,str,"","");
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Materials`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pMats], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					new varxx[256];
					mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport4 = Raport4+%d WHERE name = '%s'", cashdeposit, PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,varxx,"","");
					return 1;
				}
		 		else return SendClientMessage(playerid, COLOR_WHITE, "You don't have that amount of materials.");
			}
			else if(strcmp(item, "drugs", true) == 0)
			{
				if(cashdeposit <= PlayerInfo[playerid][pDrugs])
				{
					PlayerInfo[playerid][pDrugs] = PlayerInfo[playerid][pDrugs]-cashdeposit;
					DynamicFactions[x][fDrugs] += cashdeposit;
					format(string, sizeof(string), "You have deposited %d drugs in your group safe.", cashdeposit);
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "%s deposits %d drugs in their group safe.", name, cashdeposit);
					ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					new str[184];
					mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Drugs`='%d' WHERE `ID`='%d'", DynamicFactions[x][fDrugs], x);
					mysql_tquery(SQL,str,"","");
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Drugs`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pDrugs], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					new varxx[256];
					mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport3 = Raport3+%d WHERE name = '%s'", cashdeposit, PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,varxx,"","");
					return 1;
				}
		 		else return SendClientMessage(playerid, COLOR_WHITE, "You don't have that amount of drugs.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gdeposit [money, materials or drugs] [amount]");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You must be at your group safe to do this.");
	}
	return 1;
}
CMD:gwithdraw(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pMember] >= 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Command removed. Use /givesalary, /givebonus and /clearsalaries.");
		}
	}
	return 1;
}
CMD:givesalary(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pMember] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not in a group.");
		if(PlayerInfo[playerid][pRank] < 6) return SendClientMessage(playerid, COLOR_WHITE, "You don't have rank 6.");
		new id,string[128],sendername[30],giveplayer[30];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /givesalary [name/playerid]");
		if(PlayerInfo[id][pMember] != PlayerInfo[playerid][pMember]) return SendClientMessage(playerid, COLOR_WHITE, "This player is not your member.");
		if(PlayerInfo[id][pPaydayON] == 0) return SendClientMessage(playerid, COLOR_WHITE, "This player don't have an online payday.");
		if(IsPlayerConnected(id))
		{
			new suma = PlayerInfo[id][pPaydayON] * PlayerInfo[id][pLevel] * 1000;
			GivePlayerCash(id, suma);
			Update(id, pCashx);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			format(string,sizeof(string),"Faction manager %s paid a salary of $%s to %s (%d paydays online).",sendername,FormatNumber(suma),giveplayer,PlayerInfo[id][pPaydayON]);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
			PlayerInfo[id][pPaydayON] = 0;
			Update(id, pPaydayONx);
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:clearsalaries(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pMember] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not in a group.");
		if(PlayerInfo[playerid][pRank] < 6) return SendClientMessage(playerid, COLOR_WHITE, "You don't have rank 6.");
		ShowPlayerDialog(playerid,DIALOG_CLEARSALARIES,DIALOG_STYLE_MSGBOX,"Esti sigur?","Esti sigur ca vrei sa stergi toate salariile si sa adaugi banii in seiful grupului?\nFoloseste aceasta actiune doar daca toti membrii si-au primit salariile.","Da","Nu");
	}
	return 1;
}
CMD:givebonus(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pMember] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not in a group.");
		if(PlayerInfo[playerid][pRank] < 6) return SendClientMessage(playerid, COLOR_WHITE, "You don't have rank 6.");
		new id,string[128],sendername[30],giveplayer[30],suma;
		if(sscanf(params, "ud", id, suma)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /givebonus [name/playerid] [money]");
		if(PlayerInfo[id][pMember] != PlayerInfo[playerid][pMember]) return SendClientMessage(playerid, COLOR_WHITE, "This player is not your member.");
		if(DynamicFactions[PlayerInfo[playerid][pMember]][fBank] >= suma)
		{
			if(IsPlayerConnected(id))
			{
				GivePlayerCash(id, suma);
				Update(id, pCashx);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string,sizeof(string),"Faction manager %s paid a bonus of $%s to %s.",sendername,FormatNumber(suma),giveplayer);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
				DynamicFactions[PlayerInfo[playerid][pMember]][fBank] -= suma;
				new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'",DynamicFactions[PlayerInfo[playerid][pMember]][fBank],PlayerInfo[playerid][pMember]);
				mysql_tquery(SQL,str,"","");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "Not enough money in faction safe.");
	}
	return 1;
}
CMD:gov(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pMember] == 14)
		{
    		if(PlayerInfo[playerid][pRank] < 6) return SendClientMessage(playerid, COLOR_WHITE, "You need rank 6 to use this command.");
			new string[300],textgov[250],sendername[MAX_PLAYER_NAME];
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			if(sscanf(params, "s[250]", textgov)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gov [message]");
	    	format(string, sizeof(string), "------ Government Announcement (%s) ------", DynamicFactions[PlayerInfo[playerid][pMember]][fName]);
	        SendClientMessageToAll(COLOR_TEAL, string);
			if(PlayerInfo[playerid][pRank] == 7)
			{
		    	format(string, sizeof(string), "* %s %s: %s", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, textgov);
			}
			if(PlayerInfo[playerid][pRank] == 6)
			{
		    	format(string, sizeof(string), "* %s %s: %s", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, textgov);
			}
	    	SendClientMessageToAll(COLOR_BLUE, string);
		}
        else return SendClientMessage(playerid, COLOR_WHITE, "You are not a cop or a paramedic.");
 	}
	return 1;
}
CMD:order(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
        if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5 ||
		PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10 || PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
        {
			if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3,"You don't have gun license.");
			if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3,"You are not in your faction HQ.");
			new fid = PlayerInfo[playerid][pMember];
		    if(IsPlayerInRangeOfPoint(playerid, 50.0, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]) && GetPlayerVirtualWorld(playerid) == DynamicFactions[fid][fVirtual])
            {
	    	    new x_nr[50],
	    	    	x = PlayerInfo[playerid][pMember];
		        if(sscanf(params, "s[50]",x_nr))
		        {
	    	  	    SendClientMessage(playerid, COLOR_WHITE, "Usage: /order [1-7]");
		        	SendClientMessage(playerid, COLOR_WHITE, "(1) Deagle | (2) Shotgun | (3) M4 | (4) AK47");
		        	SendClientMessage(playerid, COLOR_WHITE, "(5) MP5 | (6) Rifle | (7) Katana");
		        	return 1;
	        	}
                if(strcmp(x_nr,"1",true) == 0)
             	{
                    if(DynamicFactions[x][fMats] <= 119) return SendClientMessage(playerid, COLOR_WHITE,"Mafia ta nu detine 120 de materiale pentru a creea aceasta arma.");
     	        	if(GetPlayerCash(playerid) <= 1199) return SendClientMessage(playerid, COLOR_WHITE,"Nu ai $1200.");
					GivePlayerWeaponEx(playerid, 24, 200);
					DynamicFactions[x][fMats] -= 120;
					DynamicFactions[x][fBank] += 1200;
					GivePlayerCash(playerid, -1200);
					Update(playerid, pCashx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_WHITE,"Ai cumparat un Deagle pentru $1,200. 120 materiale luate din seiful factiunii.");
					new varxx[256];
					mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport5 = Raport5+120 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,varxx,"","");
		           	return 1;
      	        }
                if(strcmp(x_nr,"2",true) == 0)
             	{
					if(DynamicFactions[x][fMats] <= 149) return SendClientMessage(playerid, COLOR_WHITE,"Mafia ta nu detine 150 de materiale pentru a creea aceasta arma.");
     	        	if(GetPlayerCash(playerid) <= 1499) return SendClientMessage(playerid, COLOR_WHITE,"Nu ai $1500.");
          	        GivePlayerWeaponEx(playerid, 25, 200);
					DynamicFactions[x][fMats] -= 150;
					DynamicFactions[x][fBank] += 1500;
					GivePlayerCash(playerid, -1500);
					Update(playerid, pCashx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_WHITE,"Ai cumparat un Shotgun pentru $1,500. 150 materiale luate din seiful factiunii.");
					new varxx[256];
					mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport5 = Raport5+150 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,varxx,"","");
         			return 1;
        		}
        		if(strcmp(x_nr,"3",true) == 0)
              	{
					if(DynamicFactions[x][fMats] <= 199) return SendClientMessage(playerid, COLOR_WHITE,"Mafia ta nu detine 200 de materiale pentru a creea aceasta arma.");
     	        	if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_WHITE,"Nu ai $2000.");
        			GivePlayerWeaponEx(playerid, 31, 200);
					DynamicFactions[x][fMats] -= 200;
					DynamicFactions[x][fBank] += 2000;
					GivePlayerCash(playerid, -2000);
					Update(playerid, pCashx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_WHITE,"Ai cumparat un M4 pentru $2,000. 200 materiale luate din seiful factiunii.");
					new varxx[256];
					mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport5 = Raport5+200 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,varxx,"","");
			        return 1;
		        }
	        	if(strcmp(x_nr,"4",true) == 0)
             	{
					if(DynamicFactions[x][fMats] <= 199) return SendClientMessage(playerid, COLOR_WHITE,"Mafia ta nu detine 200 de materiale pentru a creea aceasta arma.");
     	        	if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_WHITE,"Nu ai $2000.");
              		GivePlayerWeaponEx(playerid, 30, 200);
					DynamicFactions[x][fMats] -= 200;
					DynamicFactions[x][fBank] += 2000;
					GivePlayerCash(playerid, -2000);
					Update(playerid, pCashx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_WHITE,"Ai cumparat un AK47 pentru $2,000. 200 materiale luate din seiful factiunii.");
					new varxx[256];
					mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport5 = Raport5+200 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,varxx,"","");
		         	return 1;
		        }
         		if(strcmp(x_nr,"5",true) == 0)
              	{
					if(DynamicFactions[x][fMats] <= 149) return SendClientMessage(playerid, COLOR_WHITE,"Mafia ta nu detine 150 de materiale pentru a creea aceasta arma.");
     	        	if(GetPlayerCash(playerid) <= 1499) return SendClientMessage(playerid, COLOR_WHITE,"Nu ai $1500.");
                    GivePlayerWeaponEx(playerid, 29, 200);
					DynamicFactions[x][fMats] -= 150;
					DynamicFactions[x][fBank] += 1500;
					GivePlayerCash(playerid, -1500);
					Update(playerid, pCashx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_WHITE,"Ai cumparat un MP5 pentru $1,500. 150 materiale luate din seiful factiunii.");
					new varxx[256];
					mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport5 = Raport5+150 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,varxx,"","");
		         	return 1;
		        }
		        if(strcmp(x_nr,"6",true) == 0)
              	{
					if(DynamicFactions[x][fMats] <= 149) return SendClientMessage(playerid, COLOR_WHITE,"Mafia ta nu detine 150 de materiale pentru a creea aceasta arma.");
     	        	if(GetPlayerCash(playerid) <= 1499) return SendClientMessage(playerid, COLOR_WHITE,"Nu ai $1500.");
                    GivePlayerWeaponEx(playerid, 33, 200);
					DynamicFactions[x][fMats] -= 150;
					DynamicFactions[x][fBank] += 1500;
					GivePlayerCash(playerid, -1500);
					Update(playerid, pCashx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_WHITE,"Ai cumparat un Rifle pentru $1,500. 150 materiale luate din seiful factiunii.");
					new varxx[256];
					mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport5 = Raport5+150 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,varxx,"","");
		         	return 1;
		        }
		        if(strcmp(x_nr,"7",true) == 0)
              	{
					if(DynamicFactions[x][fMats] <= 99) return SendClientMessage(playerid, COLOR_WHITE,"Mafia ta nu detine 100 de materiale pentru a creea aceasta arma.");
     	        	if(GetPlayerCash(playerid) <= 999) return SendClientMessage(playerid, COLOR_WHITE,"Nu ai $1000.");
                    GivePlayerWeaponEx(playerid, 8, 1);
					DynamicFactions[x][fMats] -= 100;
					DynamicFactions[x][fBank] += 1000;
					GivePlayerCash(playerid, -1000);
					Update(playerid, pCashx);
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
					mysql_tquery(SQL,str2,"","");
					SendClientMessage(playerid, COLOR_WHITE,"Ai cumparat un Katana pentru $1,000. 100 materiale luate din seiful factiunii.");
					new varxx[256];
					mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport5 = Raport5+100 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,varxx,"","");
		         	return 1;
		        }
            }
	        else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not in your faction HQ.");
        }
	    else if(PlayerInfo[playerid][pMember] == 11)
	    {
	        if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3,"You don't have gun license.");
			if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3,"You are not in your faction HQ.");
		    if(IsPlayerInRangeOfPoint(playerid, 50.0, DynamicFactions[11][fcX], DynamicFactions[11][fcY], DynamicFactions[11][fcZ]) && GetPlayerVirtualWorld(playerid) == DynamicFactions[11][fVirtual])
            {
                new x_nr[50],
	    	    	x = PlayerInfo[playerid][pMember];
		        if(sscanf(params, "s[50]",x_nr))
		        {
	    	  	    SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /order [item]");
		        	SendClientMessage(playerid, COLOR_WHITE, "1 - sniper, 2 - rifle. price: $1000");
		        	return 1;
	        	}
	        	if(strcmp(x_nr,"1",true) == 0)
             	{
                    if(GetPlayerMoney(playerid) >= 1000)
                    {
                        GivePlayerWeaponEx(playerid, 4, 1);
     	        		GivePlayerWeaponEx(playerid, 23, 50);
     	        		GivePlayerWeaponEx(playerid, 34, 50);
     	        		GivePlayerCash(playerid, -1000);
						DynamicFactions[x][fBank] += 1000;
     	        		Update(playerid, pCashx);
						new str2[184];
						mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],x);
						mysql_tquery(SQL,str2,"","");
		        	}
	        		else
	        		{
		        		SCM(playerid, COLOR_WHITE,"Nu ai $1000.");
                    }
		           	return 1;
      	        }
      	        if(strcmp(x_nr,"2",true) == 0)
             	{
                    if(GetPlayerMoney(playerid) >= 1000)
                    {
                        GivePlayerWeaponEx(playerid, 4, 1);
     	        		GivePlayerWeaponEx(playerid, 23, 50);
     	        		GivePlayerWeaponEx(playerid, 33, 50);
     	        		GivePlayerCash(playerid, -1000);
						DynamicFactions[x][fBank] += 1000;
     	        		Update(playerid, pCashx);
						new str2[184];
						mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],x);
						mysql_tquery(SQL,str2,"","");
		        	}
	        		else
	        		{
		        		SCM(playerid, COLOR_WHITE,"Nu ai $1000.");
                    }
		           	return 1;
      	        }
			}
			else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not in your faction HQ.");
		}
	}
    return 1;
}
CMD:megaphone(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new tmpcar = GetPlayerVehicleID(playerid),textmeg[250],sendername[MAX_PLAYER_NAME],string[200];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerInfo[playerid][pMuted] == 1)
	    {
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
			else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
			return 1;
		}
		if(sscanf(params, "s[250]", textmeg)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /m [message]");
		if(IsACop(playerid))
		{
			if(!Copcar2(tmpcar)) return SendClientMessage(playerid, COLOR_WHITE, "You are not in a police car.");
			if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
			{
				format(string, sizeof(string), "(megaphone) Politist %s: %s", sendername, textmeg);
				ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			}
			else if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
			{
				format(string, sizeof(string), "(megaphone) Agent %s: %s", sendername, textmeg);
				ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			}
			else if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3)
			{
				format(string, sizeof(string), "(megaphone) Soldat %s: %s", sendername, textmeg);
				ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			}
			else if(PlayerInfo[playerid][pMember] == 8||PlayerInfo[playerid][pLeader] == 8)
			{
				format(string, sizeof(string), "(megaphone) Politist %s: %s", sendername, textmeg);
				ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			}
			new var100[300],resulttt[300],strr[300];
			format(strr, sizeof(strr),"(megaphone) %s: %s", sendername, textmeg);
			mysql_real_escape_string(strr, resulttt);
			mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','m')", PlayerInfo[playerid][pSQLID], resulttt);
			mysql_tquery(SQL,var100,"","");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You are not a cop.");
			return 1;
		}
	}
	return 1;
}
CMD:m(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_megaphone(playerid, params);
}
CMD:radio(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new radiomsj[250],sendername[MAX_PLAYER_NAME],string[256],member = PlayerInfo[playerid][pMember],leader = PlayerInfo[playerid][pLeader];
	    if(PlayerInfo[playerid][pMuted] == 1)
	    {
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
			else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[250]", radiomsj)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /r [message]");
		if(member == 1 || leader == 1 || member == 2 || leader == 2 || member == 3 || leader == 3 || member == 8 || leader == 8 || member == 14 || leader == 14 || member == 16 || leader == 16 || member == 18 || leader == 18)
		{
			if(gFam[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You have disabled radio chat, use /togf to enable.");
			if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, radiomsj); }
			else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, radiomsj); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, radiomsj); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, radiomsj); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, radiomsj); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, radiomsj); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, radiomsj); }
			else
			{
				format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, radiomsj);
			}
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pMember] == member && !gFam[i]) SendSplitMessage(i, COLOR_RADIOCHAT, string);
			}
			format(string, sizeof(string), "(radio) ''%s''",params);
    		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
			new var100[300],resulttt[300],strr[300];
			format(strr, sizeof(strr),"(radio) %s: %s", sendername, radiomsj);
			mysql_real_escape_string(strr, resulttt);
			mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','r')", PlayerInfo[playerid][pSQLID], resulttt);
			mysql_tquery(SQL,var100,"","");
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Your group data is invalid.");
			return 1;
		}
	}
	return 1;
}
CMD:r(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_radio(playerid, params);
}
CMD:duty(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
        if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You don't have gun license.");
		new string[200],sendername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsACop(playerid))
		{
			if(InHouse[playerid] > 0 || IsPlayerInRangeOfPoint(playerid, 100.0, DynamicFactions[1][fcX], DynamicFactions[1][fcY], DynamicFactions[1][fcZ]) || IsPlayerInRangeOfPoint(playerid, 100.0, DynamicFactions[2][fcX], DynamicFactions[2][fcY], DynamicFactions[2][fcZ]) || IsPlayerInRangeOfPoint(playerid, 100.0, DynamicFactions[3][fcX], DynamicFactions[3][fcY], DynamicFactions[3][fcZ])
			|| IsPlayerInRangeOfPoint(playerid, 100.0, DynamicFactions[8][fcX], DynamicFactions[8][fcY], DynamicFactions[8][fcZ]))
			{
				if(OnDuty[playerid] == 0)
		        {
               		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
	             	{
			      		format(string, sizeof(string), "* Officer %s took a Badge and a Gun from his locker.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GivePlayerWeaponEx(playerid, 24, 500);
						GivePlayerWeaponEx(playerid, 3, 1);
						GivePlayerWeaponEx(playerid, 41, 500);
						GivePlayerWeaponEx(playerid, 29, 1000);
						GivePlayerWeaponEx(playerid, 31, 1000);
						SetPlayerArmourEx(playerid, 100);
   						SetPlayerHealthEx(playerid, 100);
						OnDuty[playerid] = 1;
					}
					if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
	            	{
			      		format(string, sizeof(string), "* Officer %s took a Badge and a Gun from his locker.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GivePlayerWeaponEx(playerid, 24, 500);
						GivePlayerWeaponEx(playerid, 3, 1);
						GivePlayerWeaponEx(playerid, 41, 500);
						GivePlayerWeaponEx(playerid, 29, 1000);
						GivePlayerWeaponEx(playerid, 31, 1000);
						SetPlayerArmourEx(playerid, 100);
						SetPlayerHealthEx(playerid, 100);
						OnDuty[playerid] = 1;
					}
					if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	            	{
			      		format(string, sizeof(string), "* Officer %s took a Badge and a Gun from his locker.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GivePlayerWeaponEx(playerid, 24, 500);
						GivePlayerWeaponEx(playerid, 41, 500);
						GivePlayerWeaponEx(playerid, 29, 1000);
						GivePlayerWeaponEx(playerid, 31, 1000);
						SetPlayerArmourEx(playerid, 100);
						SetPlayerHealthEx(playerid, 100);
						OnDuty[playerid] = 1;
					}
					if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	            	{
			      		format(string, sizeof(string), "* Officer %s took a Badge and a Gun from his locker.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GivePlayerWeaponEx(playerid, 24, 500);
						GivePlayerWeaponEx(playerid, 3, 1);
						GivePlayerWeaponEx(playerid, 41, 500);
						GivePlayerWeaponEx(playerid, 29, 1000);
						GivePlayerWeaponEx(playerid, 31, 1000);
						SetPlayerArmourEx(playerid, 100);
   						SetPlayerHealthEx(playerid, 100);
						OnDuty[playerid] = 1;
					}
					if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
	            	{
			      		format(string, sizeof(string), "* Officer %s took a Badge and a Gun from his locker.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GivePlayerWeaponEx(playerid, 24, 500);
						GivePlayerWeaponEx(playerid, 3, 1);
						GivePlayerWeaponEx(playerid, 41, 500);
						GivePlayerWeaponEx(playerid, 29, 1000);
						GivePlayerWeaponEx(playerid, 31, 1000);
						SetPlayerArmourEx(playerid, 100);
   						SetPlayerHealthEx(playerid, 100);
						OnDuty[playerid] = 1;
					}
				}
				else if(OnDuty[playerid]==1)
				{
					format(string, sizeof(string), "* Officer %s places his Badge and Gun in his locker.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0);
					ResetPlayerWeaponsEx(playerid);
					ResetPlayerWeapons(playerid);

				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "You are not in a locker room or a house.");
		}
	}
	return 1;
}
CMD:departments(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new string[256],sendername[MAX_PLAYER_NAME],depmsj[250],member = PlayerInfo[playerid][pMember],leader = PlayerInfo[playerid][pLeader];
	    if(PlayerInfo[playerid][pMuted] == 1)
	    {
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
			else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[250]", depmsj)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /d [message]");
		if(member == 2 || leader == 2 || member == 3 || leader == 3)
		{
			if(gFam[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You have disabled radio chat, use /togf to enable.");
  			if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, depmsj); }
	  		else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj); }
			else
			{
				format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj);
			}
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pMember] == 8)
				{
					if(!gFam[i]) SendSplitMessage(i, COLOR_ALLDEPT, string);
				}
			}
			format(string, sizeof(string), "(radio) ''%s''",params);
    		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
    		new var100[300],resulttt[300],strr[300];
			format(strr, sizeof(strr),"(radio) %s: %s", sendername, depmsj);
			mysql_real_escape_string(strr, resulttt);
			mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','d')", PlayerInfo[playerid][pSQLID], resulttt);
			mysql_tquery(SQL,var100,"","");
			return 1;
		}
		if(member == 1 || leader == 1)
		{
			if(gFam[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You have disabled radio chat, use /togf to enable.");
			if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, depmsj); }
	  		else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj); }
			else
			{
				format(string, sizeof(string), "* LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj);
			}
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pMember] == 8)
				{
					if(!gFam[i]) SendSplitMessage(i, COLOR_ALLDEPT, string);
				}
			}
			format(string, sizeof(string), "(radio) ''%s''",params);
    		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
    		new var100[300],resulttt[300],strr[300];
			format(strr, sizeof(strr),"(radio) %s: %s", sendername, depmsj);
			mysql_real_escape_string(strr, resulttt);
			mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','d')", PlayerInfo[playerid][pSQLID], resulttt);
			mysql_tquery(SQL,var100,"","");
			return 1;
		}
		if(member == 8 || leader == 8)
		{
			if(gFam[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You have disabled radio chat, use /togf to enable.");
			if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, depmsj); }
	  		else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj); }
			else
			{
				format(string, sizeof(string), "* LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj);
			}
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pMember] == 8)
				{
					if(!gFam[i]) SendSplitMessage(i, COLOR_ALLDEPT, string);
				}
			}
			format(string, sizeof(string), "(radio) ''%s''",params);
    		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
    		new var100[300],resulttt[300],strr[300];
			format(strr, sizeof(strr),"(radio) %s: %s", sendername, depmsj);
			mysql_real_escape_string(strr, resulttt);
			mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','d')", PlayerInfo[playerid][pSQLID], resulttt);
			mysql_tquery(SQL,var100,"","");
			return 1;
		}
		if(member == 16 || leader == 16)
        {
			if(gFam[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You have disabled radio chat, use /togf to enable.");
			if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, depmsj); }
	  		else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj); }
			else
			{
				format(string, sizeof(string), "* SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj);
			}
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pMember] == 8 || PlayerInfo[i][pMember] == 16)
				{
					if(!gFam[i]) SendSplitMessage(i, COLOR_ALLDEPT, string);
				}
			}
			format(string, sizeof(string), "(radio) ''%s''",params);
    		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
			new var100[300],resulttt[300],strr[300];
			format(strr, sizeof(strr),"(radio) %s: %s", sendername, depmsj);
			mysql_real_escape_string(strr, resulttt);
			mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','d')", PlayerInfo[playerid][pSQLID], resulttt);
			mysql_tquery(SQL,var100,"","");
			return 1;
		}
		if(member == 18 || leader == 18)
        {
			if(gFam[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You have disabled radio chat, use /togf to enable.");
			if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, depmsj); }
	  		else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj); }
			else
			{
				format(string, sizeof(string), "* SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj);
			}
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pMember] == 8 || PlayerInfo[i][pMember] == 16 || PlayerInfo[i][pMember] == 18)
				{
					if(!gFam[i]) SendSplitMessage(i, COLOR_ALLDEPT, string);
				}
			}
			format(string, sizeof(string), "(radio) ''%s''",params);
    		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
			new var100[300],resulttt[300],strr[300];
			format(strr, sizeof(strr),"(radio) %s: %s", sendername, depmsj);
			mysql_real_escape_string(strr, resulttt);
			mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','d')", PlayerInfo[playerid][pSQLID], resulttt);
			mysql_tquery(SQL,var100,"","");
			return 1;
		}
		if(member == 14 || leader == 14)
        {
			if(gFam[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You have disabled radio chat, use /togf to enable.");
			if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, depmsj); }
	  		else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, depmsj); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj); }
			else
			{
				format(string, sizeof(string), "* SF %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj);
			}
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pMember] == 8 || PlayerInfo[i][pMember] == 16 || PlayerInfo[i][pMember] == 18)
				{
					if(!gFam[i]) SendSplitMessage(i, COLOR_ALLDEPT, string);
				}
			}
			format(string, sizeof(string), "(radio) ''%s''",params);
    		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
			new var100[300],resulttt[300],strr[300];
			format(strr, sizeof(strr),"(radio) %s: %s", sendername, depmsj);
			mysql_real_escape_string(strr, resulttt);
			mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','d')", PlayerInfo[playerid][pSQLID], resulttt);
			mysql_tquery(SQL,var100,"","");
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_GREY, "This group does not have an official radio frequency.");
	}
	return 1;
}
CMD:d(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_departments(playerid, params);
}
CMD:confiscate(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
        if(IsACop(playerid))
        {
            if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty.");
	        new x_nr[15],giveplayerid,string[256],giveplayer[25],sendername[25];
			if(sscanf(params, "us[15]",giveplayerid,x_nr))
			{
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /confiscate [name/playerid] [item]");
		  		SendClientMessage(playerid, COLOR_WHITE, "Items: Licence, Drugs, Materials, Weapons.");
				return 1;
			}
			GetPlayerName(playerid,sendername,sizeof(sendername));
			GetPlayerName(giveplayerid,giveplayer,sizeof(giveplayer));
		    if(strcmp(x_nr,"licence",true) == 0)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
							if(PlayerInfo[giveplayerid][pCarLic] == 0) return SendClientMessage(playerid, COLOR_WHITE, "This player don't have a driving licence.");
							format(string, sizeof(string), "* %s has confiscated %s's driving license.", sendername, giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SendTeamMessage(8, COLOR_LIGHTBLUE, string);
							SendTeamMessage(3, COLOR_LIGHTBLUE, string);
							SendTeamMessage(2, COLOR_LIGHTBLUE, string);
							SendTeamMessage(1, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "You have confiscated %s's driving license.", giveplayer);
					        SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s has confiscated your driving license.", sendername);
					        SendClientMessage(giveplayerid, COLOR_WHITE, string);
							PlayerInfo[giveplayerid][pCarLicSuspend] = 2;
					        PlayerInfo[giveplayerid][pCarLic] = 0;
					        PlayerInfo[giveplayerid][pCarLicT] = 0;
							Update(giveplayerid, pCarLicSuspendx);
							new str[128];
							mysql_format(SQL,str,sizeof(str),"UPDATE users SET `CarLic`='0',`CarLicT`='0' WHERE `name`='%s'",PlayerInfo[giveplayerid][pNormalName]);
							mysql_tquery(SQL,str,"","");
							new varxx[256];
							mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport4 = Raport4+1 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
							mysql_tquery(SQL,varxx,"","");
						}
						else return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}This player is not near you.");
				    }
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
			else if(strcmp(x_nr,"weapons",true) == 0)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
							format(string, sizeof(string), "* %s has confiscated %s's weapons.", sendername, giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SendTeamMessage(8, COLOR_LIGHTBLUE, string);
							SendTeamMessage(3, COLOR_LIGHTBLUE, string);
							SendTeamMessage(2, COLOR_LIGHTBLUE, string);
							SendTeamMessage(1, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "You have confiscated %s's weapons.", giveplayer);
					        SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s has confiscated your weapons.", sendername);
					        SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        ResetPlayerWeaponsEx(giveplayerid);
					        ResetPlayerWeapons(giveplayerid);
						}
						else return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}This player is not near you.");
				    }
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
			else if(strcmp(x_nr,"materials",true) == 0)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    format(string, sizeof(string), "* %s has confiscated %s's materials.", sendername, giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SendTeamMessage(8, COLOR_LIGHTBLUE, string);
							SendTeamMessage(3, COLOR_LIGHTBLUE, string);
							SendTeamMessage(2, COLOR_LIGHTBLUE, string);
							SendTeamMessage(1, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "You have confiscated %s's materials.", giveplayer);
					        SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s has confiscated your materials.", sendername);
					        SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        PlayerInfo[giveplayerid][pMats] = 0;
							new str[128];
							mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Materials`='0' WHERE `name`='%s'",PlayerInfo[giveplayerid][pNormalName]);
							mysql_tquery(SQL,str,"","");
						}
						else return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}This player is not near you.");
				    }
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
			else if(strcmp(x_nr,"drugs",true) == 0)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
							if(PlayerInfo[giveplayerid][pDrugs] == 0) return SendClientMessage(playerid, COLOR_WHITE, "This player don't have drugs.");
						    format(string, sizeof(string), "* %s has confiscated %s's drugs.", sendername, giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SendTeamMessage(8, COLOR_LIGHTBLUE, string);
							SendTeamMessage(3, COLOR_LIGHTBLUE, string);
							SendTeamMessage(2, COLOR_LIGHTBLUE, string);
							SendTeamMessage(1, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "You have confiscated %s's drugs.", giveplayer);
					        SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s has confiscated your drugs.", sendername);
					        SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        PlayerInfo[giveplayerid][pDrugs] = 0;
							new str[128];
							mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Drugs`='0' WHERE `name`='%s'",PlayerInfo[giveplayerid][pNormalName]);
							mysql_tquery(SQL,str,"","");
							new varxx[256];
							mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport5 = Raport5+1 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
							mysql_tquery(SQL,varxx,"","");
						}
						else return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}This player is not near you.");
				    }
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
			else return SendClientMessage(playerid, COLOR_GRAD1, "Unknown take name.");
        }
        else return SendClientMessage(playerid,  COLOR_WHITE, "You are not a cop.");
    }
    return 1;
}
CMD:mdc(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
  		if(IsACop(playerid) || PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id,string[256],sendername[MAX_PLAYER_NAME];
			if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /mdc [name/playerid]");
			{
				if(IsPlayerConnected(id))
				{
					GetPlayerName(id, sendername, sizeof(sendername));
					if(PlayerInfo[id][pWantedLevel] > 0)
					{
						format(string, sizeof(string), "-- MDC [ID %d - %s][{FFFF00}W:%d{FFFFFF}][Chased by %d cops][Wanted expires in %d mins]",id, sendername, PlayerInfo[id][pWantedLevel], cased[id], wantedlost[id]/60+1);
					}
					else if(PlayerInfo[id][pWantedLevel] < 1)
					{
						format(string, sizeof(string), "-- MDC [ID %d - %s][not wanted]",id, sendername);
					}
					SendClientMessage(playerid, COLOR_WHITE,string);
					if(strcmp(PlayerInfo[id][pCrime1],  "Fara Crima", false) == 0 || strcmp(PlayerInfo[id][pCrime1],  "Fara", false) == 0) { }
					else
					{
						format(string, sizeof(string), "%s", PlayerInfo[id][pCrime1]);
						SendClientMessage(playerid,COLOR_WHITE,string);
					}
					if(strcmp(PlayerInfo[id][pCrime2],  "Fara Crima", false) == 0 || strcmp(PlayerInfo[id][pCrime1],  "Fara", false) == 0) { }
					else
					{
						format(string, sizeof(string), "%s", PlayerInfo[id][pCrime2]);
						SendClientMessage(playerid, COLOR_WHITE,string);
					}
					if(strcmp(PlayerInfo[id][pCrime3], "Fara Crima", false) == 0 || strcmp(PlayerInfo[id][pCrime1],  "Fara", false) == 0) { }
					else
					{
						format(string, sizeof(string), "%s", PlayerInfo[id][pCrime3]);
						SendClientMessage(playerid, COLOR_WHITE,string);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
					return 1;
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You are not a cop.");
  	}
	return 1;
}
CMD:su(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new id,level,reason[64],reason2[64],giveplayer[30],sendername[25],string[256],ini,escape[256];
	if(IsACop(playerid))
	{
		if(sscanf(params, "uis[64]", id,level,reason)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /su [name/playerid] [level] [reason]");
		mysql_real_escape_string(reason, reason2);
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
  		GetPlayerName(playerid, sendername, sizeof(sendername));
		{
			if(id != INVALID_PLAYER_ID)
			{
				if(level < 7 && level > 0)
				{
					if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
					if(IsACop(id)) return SendClientMessage(playerid, COLOR_GREY, "You can't suspect a cop.");
					ini = PlayerInfo[id][pWantedLevel];
					if(PlayerInfo[id][pJailTime] > 0) return SCM(playerid, COLOR_GREY, "You can't suspect an arrested player.");
					if(level + PlayerInfo[id][pWantedLevel] > 6)
					{
						PlayerInfo[id][pWantedLevel] = 6;
					}
					else
					{
						PlayerInfo[id][pWantedLevel] = level+PlayerInfo[id][pWantedLevel];
					}
					format(string, sizeof(string), "Unknown");
					strmid(PlayerInfo[id][pVictim], string, 0, strlen(string), 255);
					Update(id,pVictimx);
					strmid(PlayerInfo[id][pAccused], PlayerInfo[playerid][pNormalName], 0, 25, 255);
					Update(id,pAccusedx);
					new y,m,d,h,mi,s;
					getdate(y,m,d);
					gettime(h,mi,s);
					if(strcmp(PlayerInfo[id][pCrime1], "Fara Crima", true) == 0)
					{
		    			format(string,sizeof(string),"%s",reason2);
						strmid(PlayerInfo[id][pCrime1], string, 0, strlen(string), 255);
						Update(id,pCrime1x);
					}
					else if(strcmp(PlayerInfo[id][pCrime2], "Fara Crima", true) == 0)
					{
		    			format(string,sizeof(string),"%s",reason2);
						strmid(PlayerInfo[id][pCrime2], string, 0, strlen(string), 255);
						Update(id,pCrime2x);
					}
					else if(strcmp(PlayerInfo[id][pCrime3], "Fara Crima", true) == 0)
					{
		    			format(string,sizeof(string),"%s",reason2);
					    strmid(PlayerInfo[id][pCrime3], string, 0, strlen(string), 255);
						Update(id,pCrime3x);
					}
					else if(strcmp(PlayerInfo[id][pCrime1],  "Fara Crima", true) == 0 && strcmp(PlayerInfo[id][pCrime2], "Fara Crima", true) == 0 && strcmp(PlayerInfo[id][pCrime3], "Fara Crima", true) == 0) { }
					else
					{
						format(string,sizeof(string),"%s",reason2);
					    strmid(PlayerInfo[id][pCrime1], string, 0, strlen(string), 255);
						Update(id,pCrime1x);
						format(string, sizeof(string), "Fara Crima");
						strmid(PlayerInfo[id][pCrime2], string, 0, strlen(string), 255);
						strmid(PlayerInfo[id][pCrime3], string, 0, strlen(string), 255);
						Update(id,pCrime2x);
						Update(id,pCrime3x);
					}
					SetPlayerWantedLevel(id,PlayerInfo[id][pWantedLevel]);
					ini = PlayerInfo[id][pWantedLevel]-ini;
					if(PlayerInfo[id][pLanguage] == 2) format(string, sizeof(string), "Ai comis o infractiune: %s, raportat de: %s. W: +%d. Nivel de urmarire nou: %d.",reason2,sendername,level,PlayerInfo[id][pWantedLevel]);
					else format(string, sizeof(string), "You committed a crime: %s, reported by: %s. W: +%d. New wanted level: %d.",reason2,sendername,level,PlayerInfo[id][pWantedLevel]);
					SendClientMessage(id, COLOR_RED2, string);
					format(string, sizeof(string), "Dispatch: %s [%d] has committed a crime: %s. Reporter: %s. W: +%d. New wanted level: %d.",giveplayer,id,reason2,sendername,level,PlayerInfo[id][pWantedLevel]);
                    SendTeamMessage(8, COLOR_DBLUE, string);
					SendTeamMessage(3, COLOR_DBLUE, string);
					SendTeamMessage(2, COLOR_DBLUE, string);
					SendTeamMessage(1, COLOR_DBLUE, string);
					wantedlost[id] = 900;
					Update(id,pWantedLevelx);
					WantedPoints[id] = PlayerInfo[id][pWantedLevel]*2;
					PlayerTextDrawShow(id, WantedText[id]);
					new var100[256],string2[256];
					format(string2,sizeof(string2),"[%02d-%02d-%d %02d:%02d:%02d] %s[user:%d] gave %d wanted points to %s[user:%d], reason: %s.",d,m,y,h,mi,s,sendername,PlayerInfo[playerid][pSQLID],level,giveplayer,PlayerInfo[id][pSQLID],reason2);
					mysql_real_escape_string(string2, escape);
	    			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO su_logs (`playerid`,`giverid`,`reason`,`sumessage`,`time`) VALUES ('%d','%d','%s','%s','%02d-%02d-%d %02d:%02d:%02d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],reason2,escape,d,m,y,h,mi,s);
					mysql_tquery(SQL,var100,"","");
					if(IsPlayerAFK[id] > 0)
					{
						format(string, sizeof(string), "Politistul %s ti-a acordat wanted %d, motiv: %s.",sendername,ini,reason2);
						mysql_real_escape_string(string, escape);
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[id][pSQLID],escape);
						mysql_tquery(SQL,var100,"","");
					}
					new str1[256];
        			if(PlayerInfo[id][pLanguage] == 2) format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[id]/60+1);
					else format(str1,sizeof(str1),"WANTED DECREASES IN: ~r~%d MINUTES",wantedlost[id]/60+1);
					PlayerTextDrawSetString(id, WantedText[id], str1);
					foreach(new i : Player)
					{
						if(IsACop(i))
						{
							SetPlayerMarkerForPlayer( i, id, ( 0xFF2B5D72 & 0xFFFFFF00 ) );
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Invalid wanted level (1-6).");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY, "You are not a cop.");
	return 1;
}
CMD:members(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] >= 1 && PlayerInfo[playerid][pRank] >= 6)
	{
		new aim[5000],
			query[300],
			test[300],
			test1[300],
			test2[300],
			test3[300],
			test4,
			aimtotal[5000],
			result[300],
			idd,
			mid=0;
		format(query, sizeof(query), "SELECT * FROM `users` WHERE `users`.`Member` = '%d' ORDER BY `users`.`Rank` DESC LIMIT 50", PlayerInfo[playerid][pMember]);
		new Cache: membresult = mysql_query(SQL, query);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			cache_get_field_content(i, "name", result); format(test, 300, result);
			cache_get_field_content(i, "Rank", result); format(test1, 300, result);
			cache_get_field_content(i, "lastOn", result); format(test2, 300, result);
			cache_get_field_content(i, "FWarn", result); format(test3, 300, result);
			test4 = cache_get_field_content_int(i, "FactionJoin");
			idd = cache_get_field_content_int(i, "id");
			Selected[playerid][mid] = idd;
			new id = GetPlayerID(test);
			if(id != INVALID_PLAYER_ID)
			{
				format(aim, sizeof(aim), "%s%s - %s\tonline right now\t%s/3 fw\t%d days\n", aim, test1, test, test3, GetDaysFromTimestamp(test4));
			}
			else
			{
				format(aim, sizeof(aim), "%s%s - %s\t%s\t%s/3 fw\t%d days\n", aim, test1, test, test2, test3, GetDaysFromTimestamp(test4));
			}
			mid++;
		}
		cache_delete(membresult);
		format(aimtotal, sizeof(aimtotal), "Rank - Name\tLast Login\tFW\tDays in faction\n%s",aim);
		if(PlayerInfo[playerid][pRank] >= 6)
		{
			ShowPlayerDialog(playerid,DIALOG_MEMBERS,DIALOG_STYLE_TABLIST_HEADERS,"Faction members",aimtotal,"Select","Exit");
		}
		else
		{
			ShowPlayerDialog(playerid,DIALOG_MEMBERS,DIALOG_STYLE_TABLIST_HEADERS,"Faction members",aimtotal,"Exit","");
		}
	}
	return 1;
}
CMD:fmembers(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
	    new idd;
	    if(sscanf(params, "i", idd)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fmembers [faction id]");
		new aim[5000],
			query[300],
			test[300],
			test1[300],
			test2[300],
			test3[300],
			test4,
			aimtotal[5000],
			result[300];
		format(query, sizeof(query), "SELECT * FROM `users` WHERE `users`.`Member` = '%d' ORDER BY `users`.`Rank` DESC LIMIT 50", idd);
		new Cache: membresult = mysql_query(SQL, query);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			cache_get_field_content(i, "name", result); format(test, 300, result);
			cache_get_field_content(i, "Rank", result); format(test1, 300, result);
			cache_get_field_content(i, "lastOn", result); format(test2, 300, result);
			cache_get_field_content(i, "FWarn", result); format(test3, 300, result);
			test4 = cache_get_field_content_int(i, "FactionJoin");
			new id = GetPlayerID(test);
			if(id != INVALID_PLAYER_ID)
			{
				format(aim, sizeof(aim), "%s%s - %s\tonline right now\t%s/3 fw\t%d days\n", aim, test1, test, test3, GetDaysFromTimestamp(test4));
			}
			else
			{
				format(aim, sizeof(aim), "%s%s - %s\t%s\t%s/3 fw\t%d days\n", aim, test1, test, test2, test3, GetDaysFromTimestamp(test4));
			}
		}
		cache_delete(membresult);
		format(aimtotal, sizeof(aimtotal), "Rank - Name\tLast Login\tFW\tDays in faction\n%s",aim);
		ShowPlayerDialog(playerid,DIALOG_MEMBERS3,DIALOG_STYLE_LIST,"Faction members",aimtotal,"Exit","");
	}
	return 1;
}
CMD:wanted(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsACop(playerid) || PlayerInfo[playerid][pAdmin] >= 1)
	{
		new iString[512], sendername[MAX_PLAYER_NAME],count,online[50], string[128];
		if(IsPlayerConnected(playerid))
		{
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pWantedLevel] >= 1)
				{
					GetPlayerName(i, sendername, sizeof(sendername));
					string[0] = 0;
					Selectat[count][playerid] = i;
					if(PlayerInfo[i][pSleeping] > 0)
					{
						format(string, sizeof(string), "[W:%d] [%d] [%d] %s (AFK)\n",PlayerInfo[i][pWantedLevel],wantedlost[i]/60,cased[i],sendername);
						count++;
					}
					else if(PlayerInfo[i][pSleeping] == 0)
					{
						format(string, sizeof(string), "[W:%d] [%d] [%d] %s\n",PlayerInfo[i][pWantedLevel],wantedlost[i]/60,cased[i],sendername);
						count++;
					}
					strcat(iString, string);
				}
			}
			format(online, sizeof(online),"Wanted online: %d",count);
			if(count == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "There are no wanted criminals!");
			ShowPlayerDialog(playerid, DIALOG_WANTEDON, DIALOG_STYLE_LIST, online, iString , "Select", "Close");
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY, "You are not a cop.");
	return 1;
}
CMD:mechanics(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[200],sendername[30];
	if(IsPlayerConnected(playerid))
	{
		SendClientMessage(playerid, COLOR_WHITE, "---- Mecanici online ----");
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pJob] == 8)
			{
				GetPlayerName(i, sendername, sizeof(sendername));
				format(string, sizeof(string), "(%d) %s - numar de telefon: %d",i,sendername,PlayerInfo[i][pPnumber]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		SendClientMessage(playerid, COLOR_WHITE, "---------------------");
	}
	return 1;
}
CMD:instructors(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[200],sendername[30];
	if(IsPlayerConnected(playerid))
	{
		SendClientMessage(playerid, COLOR_WHITE, "---- Instructori online ----");
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pMember] == 12)
			{
				GetPlayerName(i, sendername, sizeof(sendername));
				format(string, sizeof(string), "(%d) %s - numar de telefon: %d",i,sendername,PlayerInfo[i][pPnumber]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		SendClientMessage(playerid, COLOR_WHITE, "---------------------");
	}
	return 1;
}
CMD:reporters(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[200],sendername[30];
	if(IsPlayerConnected(playerid))
	{
		SendClientMessage(playerid, COLOR_WHITE, "---- Reporteri online ----");
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pMember] == 9)
			{
				GetPlayerName(i, sendername, sizeof(sendername));
				format(string, sizeof(string), "(%d) %s - numar de telefon: %d",i,sendername,PlayerInfo[i][pPnumber]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		SendClientMessage(playerid, COLOR_WHITE, "---------------------");
	}
	return 1;
}
CMD:collecttrash(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pJob] != 10) return SendClientMessage(playerid, COLOR_WHITE, "You are not a garbage man.");
		if(CP[playerid] > 0 ||IsATruck(GetPlayerVehicleID(playerid)) || CheckBus[playerid] > 0 || IsAPizza(GetPlayerVehicleID(playerid)) && CarJacker[playerid] < 1)
		{
		    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Anulare Checkpoint", "Esti sigur ca vrei sa anulezi checkpoint-ul curent?", "Da", "Nu");
		    return 1;
		}
		new find,string[128],Float:distance,Float:x,Float:y,Float:z;
		if(IsAGarbageTruck(GetPlayerVehicleID(playerid)))
  		{
			if(TrashID[playerid] == -1)
			{
				for(new t; t < 1000; t++)
				{
					new rand = random(sizeof(CHKGarbage));
					if(!IsPlayerInRangeOfPoint(playerid,1000.0, CHKGarbage[rand][0], CHKGarbage[rand][1], CHKGarbage[rand][2])) find = 1;
					if(find == 1)
					{
						GetPlayerPos(playerid, x, y, z);
						distance = GetDistanceBetweenPoints(x, y, z, CHKGarbage[rand][0], CHKGarbage[rand][1], CHKGarbage[rand][2]);
						format(string,sizeof(string),"Mergi la checkpoint pentru a incepe colectarea gunoiului. Distanta: %.0fm.",distance);
						if(floatround(distance, floatround_round) >= 1000 && floatround(distance, floatround_round) <= 1500) GarbageCollected[playerid] = 5 + random(5);
						else if(floatround(distance, floatround_round) >= 1501 && floatround(distance, floatround_round) <= 2000) GarbageCollected[playerid] = 7 + random(5);
						else if(floatround(distance, floatround_round) >= 2001 && floatround(distance, floatround_round) <= 2500) GarbageCollected[playerid] = 9 + random(5);
						else if(floatround(distance, floatround_round) >= 2501 && floatround(distance, floatround_round) <= 3000) GarbageCollected[playerid] = 11 + random(5);
						else if(floatround(distance, floatround_round) >= 3001) GarbageCollected[playerid] = 14 + random(5);
						SendClientMessage(playerid, COLOR_YELLOW, string);
						SetPlayerCheckpoint(playerid, CHKGarbage[rand][0],CHKGarbage[rand][1],CHKGarbage[rand][2], 2.0);
						CP[playerid] = 10972;
						TrashID[playerid] = rand;
						break;
					}
				}
			}
			else
			{
				new r = TrashID[playerid];
				GetPlayerPos(playerid, x, y, z);
				distance = GetDistanceBetweenPoints(x, y, z, CHKGarbage[r][0], CHKGarbage[r][1], CHKGarbage[r][2]);
				format(string,sizeof(string),"Mergi la checkpoint pentru a incepe colectarea gunoiului. Distanta: %.0fm.",distance);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				SetPlayerCheckpoint(playerid, CHKGarbage[r][0],CHKGarbage[r][1],CHKGarbage[r][2], 2.0);
				CP[playerid] = 10972;
			}
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "Trebuie sa fi intr-o masina de gunoi pentru a folosi aceasta comanda.");
	}
	return 1;
}
CMD:unloadtrash(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pJob] != 10) return SendClientMessage(playerid, COLOR_WHITE, "You are not a garbage man.");
		if(CP[playerid] > 0 ||IsATruck(GetPlayerVehicleID(playerid)) || CheckBus[playerid] > 0 || IsAPizza(GetPlayerVehicleID(playerid)) && CarJacker[playerid] < 1)
		{
		    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Anulare Checkpoint", "Esti sigur ca vrei sa anulezi checkpoint-ul curent?", "Da", "Nu");
		    return 1;
		}
		if(IsAGarbageTruck(GetPlayerVehicleID(playerid)))
		{
			ShowPlayerDialog(playerid, DIALOG_UNLOADTRASH, DIALOG_STYLE_LIST, "Unload trash", "Los Santos Point\nLas Venturas Point\nSan Fierro Point", "Select", "Exit");
		}
		else return SS(playerid, COLOR_LIGHTGREEN3, "Nu esti intr-o masina de gunoi.", "You are not in a garbage truck.");
	}
	return 1;
}
CMD:bid(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
 		if(IsABid == 0) return SS(playerid, COLOR_LIGHTGREEN3, "Nicio proprietate nu este pusa la licitatie acum.", "No property is available for bid at this time.");
 		new suma, string[256], pid=-1, name[30], suma2, strr[256], time, count;
 		if(sscanf(params, "d", suma))
 		{
 			if(IsABid == 1)
 			{
 				if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Licitatie activa: casa (house) %d", IsAtBid);
 				else format(string, sizeof(string), "Active bid: casa (house) %d", IsAtBid);
 			}
 			else if(IsABid == 2)
 			{
 				if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Licitatie activa: BIZ %d", IsAtBid);
 				else format(string, sizeof(string), "Active bid: BIZ %d", IsAtBid);
 			}
 			SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
 			if(TopBidder != -1)
 			{
	 			foreach(new i : Player)
	 			{
	 				if(PlayerInfo[i][pSQLID] == TopBidder) strmid(name, PlayerInfo[i][pNormalName], 0, 30, 255);
	 			}
	 			if(pid == -1)
	 			{
	 				format(string, sizeof(string), "SELECT * FROM `users` WHERE `id`='%d'", TopBidder);
	 				new Cache: test = mysql_query(SQL, string);
	 				cache_get_field_content(0, "name", name);
	 				cache_delete(test);
	 			}
	 		}
	 		else strmid(name, "No one", 0, 30, 255);
 			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Playerul ce a licitat cel mai mult: %s | Suma licitata: $%s", name, FormatNumber(BidAmount));
 			else format(string, sizeof(string), "Top bidder: %s | Bid: $%s", name, FormatNumber(BidAmount));
 			SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
 			SS(playerid, COLOR_LIGHTGREEN3, "Licitatia se va termina in 3 minute daca nimeni nu liciteaza mai mult.", "The bid will be over in 3 minutes if no one places a higher bid.");
 			SS(playerid, COLOR_LIGHTGREEN3, "De cate ori liciteaza cineva, timpul pana la sfarsitul licitatiei este setat la 3 minute.", "When someone bids, the bid becomes active for 3 more minutes.");
 			SS(playerid, COLOR_LIGHTGREEN3, "Foloseste /bid <suma in milioane> pentru a licita. Pentru a activa/dezactiva chatul poti folosi /togbid.", "Use [/bid <millions>] to place a bid. Use /togbid to enable/disable the bid chat.");
 		}
 		if(IsABid == 1 && PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) return SendClientMessage(playerid, COLOR_WHITE, "You already own a house, type /sellhouse if you want to buy this one.");
 		if(IsABid == 2 && PlayerInfo[playerid][pPbiskey] != 255) return SendClientMessage(playerid, COLOR_GREY, "You already own a business, type /sellbiztostate if you want to buy this one.");
 		if(suma <= 0) return 1;
 		if(IsABid == 1 && HouseInfo[IsAtBid][hLevel] > PlayerInfo[playerid][pLevel])
 		{
 			format(string, sizeof(string), "You don't have level %d.", HouseInfo[IsAtBid][hLevel]);
 			SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
 			return 1;
 		}
 		if(IsABid == 2 && BizzInfo[IsAtBid][bLevelNeeded] > PlayerInfo[playerid][pLevel])
 		{
 			format(string, sizeof(string), "You don't have level %d.", BizzInfo[IsAtBid][bLevelNeeded]);
 			SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
 			return 1;
 		}
 		format(strr, sizeof(strr), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", PlayerInfo[playerid][pSQLID]);
		new Cache: salut = mysql_query(SQL, strr);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			if(count < 30)
			{
				time += cache_get_field_content_int(i, "time");
				count++;
			}
		}
		cache_delete(salut);
		if(time < 36000) return SS(playerid, COLOR_LIGHTGREEN3, "Trebuie sa ai 10 ore jucate in ultimele 30 de zile (fara AFK/sleep) pentru a putea cumpara o proprietate.", "You need 10 played hours in last 30 days (without AFK/sleep) to buy a property.");
		if(PlayerInfo[playerid][pSQLID] == TopBidder) return SS(playerid, COLOR_LIGHTGREEN3, "Trebuie sa astepti sa liciteze altcineva.", "You need to wait for another player to bid.");
		format(string, sizeof(string), "%d000000", suma);
 		suma2 = strval(string);
 		if(suma2 <= BidAmount)
 		{
 			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Trebuie sa licitezi minim %d milioane.", (BidAmount2+1));
 			else format(string, sizeof(string), "You need to bid a minimum of %d millions.", (BidAmount2+1));
 			SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
 			return 1;
 		}
 		if(PlayerInfo[playerid][pAccount] >= suma2)
 		{
 			WantToBid[playerid] = suma2;
 			WantToBid2[playerid] = suma;
 			if(PlayerInfo[playerid][pLanguage] == 2)
 			{
 				if(IsABid == 1)
 				{
 					format(string, sizeof(string), "Esti sigur ca vrei sa licitezi $%s pentru casa (house) %d?", FormatNumber(suma2), IsAtBid);
 					ShowPlayerDialog(playerid, DIALOG_BID, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
 				}
 				else if(IsABid == 2)
 				{
 					format(string, sizeof(string), "Esti sigur ca vrei sa licitezi $%s pentru BIZ %d?", FormatNumber(suma2), IsAtBid);
 					ShowPlayerDialog(playerid, DIALOG_BID, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
 				}
 			}
 			else
 			{
 				if(IsABid == 1)
 				{
 					format(string, sizeof(string), "Are you sure you want to bid $%s for casa (house) %d?", FormatNumber(suma2), IsAtBid);
 					ShowPlayerDialog(playerid, DIALOG_BID, DIALOG_STYLE_MSGBOX, "Are you sure?", string, "Yes", "No");
 				}
 				else if(IsABid == 2)
 				{
 					format(string, sizeof(string), "Are you sure you want to bid $%s for BIZ %d?", FormatNumber(suma2), IsAtBid);
 					ShowPlayerDialog(playerid, DIALOG_BID, DIALOG_STYLE_MSGBOX, "Are you sure?", string, "Yes", "No");
 				}
 			}
 		}
 		else SS(playerid, COLOR_LIGHTGREEN3, "Nu ai suficienti bani in banca pentru a licita.", "You don't have enough money in bank to bid.");
 	}
 	return 1;
}
CMD:togbid(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
 		if(TogBid[playerid] == 0)
 		{
 			TogBid[playerid] = 1;
 			SS(playerid, COLOR_DARKPINK, "Chat /bid activat.", "Bid chat enabled.");
 		}
 		else
 		{
 			TogBid[playerid] = 0;
 			SS(playerid, COLOR_DARKPINK, "Chat /bid dezactivat.", "Bid chat disabled.");
 		}
 	}
 	return 1;
}
CMD:buybusiness(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		new string[128],sendername[25],stringcasa[128],strr[256],time,count;
		if(PlayerInfo[playerid][pPbiskey] != 255) return SendClientMessage(playerid, COLOR_GREY, "You already own a business, type /sellbiztostate if you want to buy this one.");
		for(new b = 1; b < sizeof(BizzInfo); b++)
		{
			if(PlayerToPoint(2.0, playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]))
			{
				if(PlayerInfo[playerid][pLevel] < BizzInfo[b][bLevelNeeded])
				{
					format(string, sizeof(string), "You must be level %d to purchase this business.",BizzInfo[b][bLevelNeeded]);
					SendClientMessage(playerid, COLOR_WHITE, string);
					return 1;
				}
				format(strr, sizeof(strr), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", PlayerInfo[playerid][pSQLID]);
				new Cache: salut = mysql_query(SQL, strr);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					if(count < 30)
					{
						time += cache_get_field_content_int(i, "time");
						count++;
					}
				}
				cache_delete(salut);
				if(time < 36000) return SS(playerid, COLOR_LIGHTGREEN3, "Trebuie sa ai 10 ore jucate in ultimele 30 de zile (fara AFK/sleep) pentru a putea cumpara o proprietate.", "You need 10 played hours in last 30 days (without AFK/sleep) to buy a property.");
				if(BizzInfo[b][bOwned] == 0)
				{
					if(GetPlayerCash(playerid) >= BizzInfo[b][bBuyPrice])
					{
						PlayerInfo[playerid][pPbiskey] = b;
						BizzInfo[b][bOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(BizzInfo[b][bOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
						GivePlayerCash(playerid,-BizzInfo[b][bBuyPrice]);
						if(BizzInfo[b][bSbiz] == 0)
						{
							PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
							PlayerInfo[playerid][pLocal] = b ;
							InBussines[playerid] = b;
							SetPlayerInterior(playerid,BizzInfo[b][bInterior]);
							SetPlayerVirtualWorld(playerid, BizzInfo[b][bVirtual]);
							PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
							SetPlayerPosEx(playerid,BizzInfo[b][bExitX],BizzInfo[b][bExitY],BizzInfo[b][bExitZ]);
						}
						SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your purchase!");
						format(stringcasa, sizeof(stringcasa), "%s [user:%d] a cumparat bizz-ul [bizz:%d] de la Stat pentru $%s.",sendername,PlayerInfo[playerid][pSQLID],b,FormatNumber(BizzInfo[b][bBuyPrice]));
	                    ABroadCast(COLOR_YELLOW, stringcasa, 1);
	                    new var100[256],string2[256];
	 					mysql_real_escape_string(stringcasa, string2);
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string2);
						mysql_tquery(SQL,var100,"","");
						new str1[256];
						mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `Money`='%d',`Bizz`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pPbiskey],PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str1,"","");
						mysql_format(SQL,str1,sizeof(str1),"UPDATE `bizz` SET `Owned`='1',`Owner`='%s' WHERE `ID`='%d'",BizzInfo[b][bOwner],b);
						mysql_tquery(SQL,str1,"","");
						OnPropTextdrawUpdate(2,b);
						return 1;
					}
					else return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				}
				else if(BizzInfo[b][bOwned] == 1 && BizzInfo[b][bPrice] > 0)
				{
					if(GetPlayerCash(playerid) < BizzInfo[b][bPrice]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
					new ownerid, query[256];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					PlayerInfo[playerid][pPbiskey] = b;
					BizzInfo[b][bOwned] = 1;
					format(query, sizeof(query), "SELECT * FROM `users` WHERE `name`='%s'", BizzInfo[b][bOwner]);
					new Cache: result = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						ownerid = cache_get_field_content_int(i, "id");
					}
					cache_delete(result);
					format(stringcasa, sizeof(stringcasa), "%s [user:%d] a cumparat bizz-ul [bizz:%d] de la %s [user:%d] pentru $%s.",sendername,PlayerInfo[playerid][pSQLID],b,BizzInfo[b][bOwner],ownerid,FormatNumber(BizzInfo[b][bPrice]));
	                ABroadCast(COLOR_YELLOW, stringcasa, 1);
	                strmid(BizzInfo[b][bOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
					GivePlayerCash(playerid,-BizzInfo[b][bPrice]);
					if(BizzInfo[b][bSbiz] == 0)
					{
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
						PlayerInfo[playerid][pLocal] = b ;
						InBussines[playerid] = b;
						SetPlayerInterior(playerid,BizzInfo[b][bInterior]);
						SetPlayerVirtualWorld(playerid, BizzInfo[b][bVirtual]);
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
						SetPlayerPosEx(playerid,BizzInfo[b][bExitX],BizzInfo[b][bExitY],BizzInfo[b][bExitZ]);
					}
					SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your purchase!");
					new var100[256],string2[256];
					mysql_real_escape_string(stringcasa, string2);
 					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID], ownerid, string2);
					mysql_tquery(SQL,var100,"","");
					new str1[256];
					mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `Money`='%d',`Bizz`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pPbiskey],PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str1,"","");
					mysql_format(SQL,str1,sizeof(str1),"UPDATE `bizz` SET `Owned`='1',`Owner`='%s',`Prices`='0' WHERE `ID`='%d'", BizzInfo[b][bOwner], b);
					mysql_tquery(SQL,str1,"","");
					mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET Bizz=255, Money=Money+%d WHERE id=%d", BizzInfo[b][bPrice], ownerid);
					mysql_tquery(SQL,str1,"","");
					foreach(new i : Player)
					{
						if(PlayerInfo[i][pSQLID] == ownerid)
						{
							PlayerInfo[i][pPbiskey] = 255;
							GivePlayerCash(i, BizzInfo[b][bPrice]);
							Update(i, pCashx);
						}
					}
					new name[30];
					GetPlayerName(playerid, name, sizeof(name));
					format(string2, sizeof(string2), "%s has bought your business for $%s.", name, FormatNumber(BizzInfo[b][bPrice]));
					mysql_real_escape_string(string2, var100);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", ownerid, var100);
					mysql_tquery(SQL,var100,"","");
					BizzInfo[b][bPrice] = 0;
					OnPropTextdrawUpdate(2,b);
				}
			}
		}
	}
	return 1;
}
CMD:buyhouse(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		new Float:oldposx, Float:oldposy, Float:oldposz,string[100],playername[MAX_PLAYER_NAME],stringcasa[128],time,count,strr[256];
		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new h = 1; h < sizeof(HouseInfo); h++)
		{
			if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
			{
				if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel])
				{
					format(string, sizeof(string), "You must be Level %d to purchase this.", HouseInfo[h][hLevel]);
					SendClientMessage(playerid, COLOR_WHITE, string);
					return 1;
				}
				format(strr, sizeof(strr), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", PlayerInfo[playerid][pSQLID]);
				new Cache: salut = mysql_query(SQL, strr);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					if(count < 30)
					{
						time += cache_get_field_content_int(i, "time");
						count++;
					}
				}
				cache_delete(salut);
				if(time < 36000) return SS(playerid, COLOR_LIGHTGREEN3, "Trebuie sa ai 10 ore jucate in ultimele 30 de zile (fara AFK/sleep) pentru a putea cumpara o proprietate.", "You need 10 played hours in last 30 days (without AFK/sleep) to buy a property.");
				if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) return SendClientMessage(playerid, COLOR_WHITE, "You already own a house, type /sellhouse if you want to buy this one.");
				if(HouseInfo[h][hOwned] == 0)
				{
					if(GetPlayerCash(playerid) < HouseInfo[h][hValue]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
                    InHouse[playerid] = h;
					PlayerInfo[playerid][pPhousekey] = h;
     				PlayerInfo[playerid][pRented] = -1;
					HouseInfo[h][hOwned] = 1;
					strmid(HouseInfo[h][hOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
					GivePlayerCash(playerid,-HouseInfo[h][hValue]);
					SetPlayerInterior(playerid,HouseInfo[h][hInterior]);
					SetPlayerPosEx(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
					SetPlayerVirtualWorld(playerid,HouseInfo[h][hVirtual]);
					PlayerInfo[playerid][pInt] = HouseInfo[h][hInterior];
					PlayerInfo[playerid][pLocal] = h;
					SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your purchase!");
 					format(stringcasa, sizeof(stringcasa), "%s [user:%d] a cumparat casa [house:%d] de la Stat pentru $%s.",playername,PlayerInfo[playerid][pSQLID],h,FormatNumber(HouseInfo[h][hValue]));
                    ABroadCast(COLOR_YELLOW, stringcasa, 1);
                    new var100[256],string2[256];
					mysql_real_escape_string(stringcasa, string2);
 					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string2);
					mysql_tquery(SQL,var100,"","");
					Update(playerid,pCashx);
					Update(playerid,pPhousekeyx);
					new str2[256];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Owned`='1',`Owner`='%s',`Prices`='0' WHERE `ID`='%d'",PlayerInfo[playerid][pNormalName],HouseInfo[h][hID]);
					mysql_tquery(SQL,str2,"","");
					OnPropTextdrawUpdate(1,h);
					if(strlen(housestring[InHouse[playerid]]) > 0)
					{
					    StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
					}
					HouseInfo[h][hPrice] = 0;
					return 1;
				}
				else if(HouseInfo[h][hOwned] == 1 && HouseInfo[h][hPrice] > 0)
				{
					if(GetPlayerCash(playerid) < HouseInfo[h][hPrice]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
					new query[256],ownerid;
					InHouse[playerid] = h;
					PlayerInfo[playerid][pPhousekey] = h;
     				PlayerInfo[playerid][pRented] = -1;
					HouseInfo[h][hOwned] = 1;
					format(query, sizeof(query), "SELECT * FROM `users` WHERE `name`='%s'", HouseInfo[h][hOwner]);
					new Cache: result = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						ownerid = cache_get_field_content_int(i, "id");
					}
					cache_delete(result);
					format(stringcasa, sizeof(stringcasa), "%s [user:%d] a cumparat casa [house:%d] de la %s [user:%d] pentru $%s.",playername,PlayerInfo[playerid][pSQLID],h,HouseInfo[h][hOwner],ownerid,FormatNumber(HouseInfo[h][hPrice]));
					strmid(HouseInfo[h][hOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
					GivePlayerCash(playerid,-HouseInfo[h][hPrice]);
					SetPlayerInterior(playerid,HouseInfo[h][hInterior]);
					SetPlayerPosEx(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
					SetPlayerVirtualWorld(playerid,HouseInfo[h][hVirtual]);
					PlayerInfo[playerid][pInt] = HouseInfo[h][hInterior];
					PlayerInfo[playerid][pLocal] = h;
					SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your purchase!");
                    ABroadCast(COLOR_YELLOW, stringcasa, 1);
                    new var100[256],string2[256];
					mysql_real_escape_string(stringcasa, string2);
 					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID],ownerid,string2);
					mysql_tquery(SQL,var100,"","");
					Update(playerid,pCashx);
					Update(playerid,pPhousekeyx);
					new str2[256];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Owned`='1',`Owner`='%s',`Prices`='0' WHERE `ID`='%d'",PlayerInfo[playerid][pNormalName],HouseInfo[h][hID]);
					mysql_tquery(SQL,str2,"","");
					if(strlen(housestring[InHouse[playerid]]) > 0)
					{
					    StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
					}
					new name[30];
					GetPlayerName(playerid, name, sizeof(name));
					foreach(new i : Player)
					{
						if(PlayerInfo[i][pSQLID] == ownerid)
						{
							GivePlayerCash(i, HouseInfo[h][hPrice]);
							Update(i, pCashx);
							PlayerInfo[i][pPhousekey] = 999;
							PlayerInfo[i][pRented] = -1;
							PlayerInfo[i][pSpawnChange] = 0;
							Update(i, pSpawnChangex);
							Update(i, pPhousekeyx);
							Update(i, pRentedx);
							if(PlayerInfo[i][pLocal] == h)
							{
								SetPlayerInterior(i,0);
								SetPlayerPosEx(i,HouseInfo[h][hEntrancex],HouseInfo[h][hEntrancey],HouseInfo[h][hEntrancez]);
								PlayerInfo[i][pInt] = 0;
							}
						}
					}
					mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET House = 999, SpawnChange = 0, Money = Money+%d WHERE `id`='%d'",HouseInfo[h][hPrice],ownerid);
					mysql_tquery(SQL,str2,"","");
					format(string2, sizeof(string2), "%s has bought your house for $%s.",name,FormatNumber(HouseInfo[h][hPrice]));
					mysql_real_escape_string(string2, var100);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",ownerid,var100);
					mysql_tquery(SQL,var100,"","");
					HouseInfo[h][hPrice] = 0;
					OnPropTextdrawUpdate(1,h);
					return 1;
				}
			}
		}
	}
	return 1;
}
CMD:tenants(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pPhousekey] == 999) return SCM(playerid,COLOR_WHITE,"You don't have house or you don't have rentroom.");
 		new playername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME],string[200];
		GetPlayerName(playerid, playername, sizeof(playername));
		new h = PlayerInfo[playerid][pPhousekey];
		if(PlayerInfo[playerid][pPhousekey] == h)
		{
			SendClientMessage(playerid, COLOR_WHITE, "---- Tenants online: ----");
			foreach(new i : Player)
			{
   				if(PlayerInfo[i][pRented] == h)
			    {
		        	GetPlayerName(i,giveplayer,sizeof(giveplayer));
					format(string,sizeof(string),"(%d) %s", i, giveplayer);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
		}
	}
	return 1;
}
CMD:rentroom(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz,playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new h = 1; h < sizeof(HouseInfo); h++)
		{
			if(IsPlayerInRangeOfPoint(playerid,2.0, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1)
			{
				if(HouseInfo[h][hRent] == 0) return SendClientMessage(playerid, COLOR_WHITE, "The owner of this house does not allow renters.");
				if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) return SendClientMessage(playerid, COLOR_WHITE, "You already own a house.");
				if(GetPlayerCash(playerid) > HouseInfo[h][hRent])
				{
					PlayerInfo[playerid][pRented] = h;
                    PlayerInfo[playerid][pPhousekey] = h;
					InHouse[playerid] = h;
	    			GivePlayerCash(playerid,-HouseInfo[h][hRent]);
					HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+HouseInfo[h][hRent];
					SetPlayerInterior(playerid,HouseInfo[h][hInterior]);
					SetPlayerPosEx(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
					SetPlayerVirtualWorld(playerid,HouseInfo[h][hVirtual]);
					GameTextForPlayer(playerid, "~g~house rented!", 5000, 1);
					PlayerInfo[playerid][pInt] = HouseInfo[h][hInterior];
					PlayerInfo[playerid][pLocal] = h;
					Update(playerid,pCashx);
					new str[128];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Rented`='%d',`House`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRented],PlayerInfo[playerid][pRented],PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					SetTimerEx("OnPropTextdrawUpdate", 1000, false, "dd", 1, h);
					if(strlen(housestring[InHouse[playerid]]) > 0)
					{
					    StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
					}
				 	return 1;
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
			}
		}
	}
	return 1;
}
CMD:housename(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPhousekey],housename[30],string[100];
    	if (PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
  		{
			if(sscanf(params, "s[30]", housename)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /housename [message]");
			new maxc = strlen(housename);
			if(maxc > 30) return SCM(playerid,COLOR_WHITE,"Your house name can have maximum 30 characters.");
    		new housename2[30];
    		mysql_real_escape_string(housename, housename2);
			strmid(HouseInfo[bouse][hDiscription], housename, 0, 64, 255);
   		 	format(string, sizeof(string), "House name set to:{B8DBFF} %s",HouseInfo[bouse][hDiscription]);
    		SendClientMessage(playerid, COLOR_WHITE, string);
			new str[256];
			mysql_format(SQL,str,sizeof(str),"UPDATE houses SET Discription='%s' WHERE ID='%d'", housename2, PlayerInfo[playerid][pPhousekey]);
			mysql_tquery(SQL,str,"","");
			OnPropTextdrawUpdate(1, bouse);
  		}
    	else return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
	}
	return 1;
}
CMD:createbiz(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return 1;
	new type, value, level, idd = bussines+1, Float: Pos[3], query[256];
	if(sscanf(params, "iii", type, value, level)) {
		SCM(playerid, COLOR_GREY, "Syntax: {FFFFFF}/createbiz <type> <value> <level>");
		SCM(playerid, COLOR_GREY, "(1) Banca, (2) Gun Shop, (3) Club, (4) Sex Shop, (5) Casino, (6) 24/7, (7) Burger Shot, (8) Gym");
		SCM(playerid, COLOR_GREY, "(9) Pizza, (11) Binco, (12) Gas Station, (13) PNS*, (14) Cluckin Bell, (15) CNN, (16) Tuning*");
		return 1;
	}
	if(type == 10 || type < 1) return SCM(playerid, COLOR_GREY, "Invalid type!");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	switch(type) {
		case 1: {
			format(query, sizeof(query), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Interior`) VALUES ('%f', '%f', '%f', '2306', '-16', '27', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
			BizzInfo[idd][bExitX] = 2306; BizzInfo[idd][bExitY] = -16; BizzInfo[idd][bExitZ] = 27;
		}
		case 2: {
			format(query, sizeof(query), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Interior`) VALUES ('%f', '%f', '%f', '316', '-142', '1000', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
			BizzInfo[idd][bExitX] = 316; BizzInfo[idd][bExitY] = -142; BizzInfo[idd][bExitZ] = 1000;
		}
		case 3: {
			format(query, sizeof(query), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Interior`) VALUES ('%f', '%f', '%f', '-794.942', '490.782', '1376.2', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
			BizzInfo[idd][bExitX] = -794.942; BizzInfo[idd][bExitY] = 490.782; BizzInfo[idd][bExitZ] = 1376.2;
		}
		case 4: {
			format(query, sizeof(query), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Interior`) VALUES ('%f', '%f', '%f', '-100.403', '-24.3921', '1000.72', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
			BizzInfo[idd][bExitX] = -100.403; BizzInfo[idd][bExitY] = -24.3921; BizzInfo[idd][bExitZ] = 1000.72;
		}
		case 5: {
			format(query, sizeof(query), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Interior`) VALUES ('%f', '%f', '%f', '2015.45', '1017.09', '996.875', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
			BizzInfo[idd][bExitX] = 2015.45; BizzInfo[idd][bExitY] = 1017.09; BizzInfo[idd][bExitZ] = 996.875;
		}
		case 6: {
			format(query, sizeof(query), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Interior`) VALUES ('%f', '%f', '%f', '-31.0246', '-91.3283', '1003.55', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
			BizzInfo[idd][bExitX] = -31.0246; BizzInfo[idd][bExitY] = -91.3283; BizzInfo[idd][bExitZ] = 1003.55;
		}
		case 7: {
			format(query, sizeof(query), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Interior`) VALUES ('%f', '%f', '%f', '363.134', '-74.8469', '1001.51', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
			BizzInfo[idd][bExitX] = 363.134; BizzInfo[idd][bExitY] = -74.8469; BizzInfo[idd][bExitZ] = 1001.51;
		}
		case 8: {
			format(query, sizeof(query), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Interior`) VALUES ('%f', '%f', '%f', '772.112', '-3.89865', '1000.73', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
			BizzInfo[idd][bExitX] = 772.112; BizzInfo[idd][bExitY] = -3.89865; BizzInfo[idd][bExitZ] = 1000.73;
		}
		case 9: {
			format(query, sizeof(query), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Interior`) VALUES ('%f', '%f', '%f', '372.54', '-133.009', '1001.49', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
			BizzInfo[idd][bExitX] = 372.54; BizzInfo[idd][bExitY] = -133.009; BizzInfo[idd][bExitZ] = 1001.49;
		}
		case 11: {
			format(query, sizeof(query), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Interior`) VALUES ('%f', '%f', '%f', '207.738', '-109.02', '1005.13', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
			BizzInfo[idd][bExitX] = 207.738; BizzInfo[idd][bExitY] = -109.02; BizzInfo[idd][bExitZ] = 1005.13;
		}
		case 12: format(query, sizeof(query), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Sbiz`) VALUES ('%f', '%f', '%f', '0', '0', '0', '%d', '%d', '%d', '1', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
		//case 13: format(query, sizeof(query), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Sbiz`) VALUES ('%f', '%f', '%f', '0', '0', '0', '%d', '%d', '%d', '1', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
		case 14: {
			format(query, sizeof(query), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Interior`) VALUES ('%f', '%f', '%f', '364.942', '-11.0787', '1001.85', '%d', '%d', '%d', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
			BizzInfo[idd][bExitX] = 364.942; BizzInfo[idd][bExitY] = -11.0787; BizzInfo[idd][bExitZ] = 1001.85;
		}
		case 15: format(query, sizeof(query), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Sbiz`) VALUES ('%f', '%f', '%f', '0', '0', '0', '%d', '%d', '%d', '1', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
		case 16: format(query, sizeof(query), "INSERT INTO `bizz` (`EntranceX`, `EntranceY`, `EntranceZ`, `ExitX`, `ExitY`, `ExitZ`, `LevelNeeded`, `BuyPrice`, `Type`, `Sbiz`) VALUES ('%f', '%f', '%f', '0', '0', '0', '%d', '%d', '%d', '1', '%d')", Pos[0], Pos[1], Pos[2], level, value, type, BizInteriorID(type));
	}
	mysql_tquery(SQL, query, "", "");
	format(query, sizeof(query), "UPDATE `bizz` SET `Virtual`='%d' WHERE `ID`='%d'", idd, idd);
	mysql_tquery(SQL, query, "", "");

	BizzInfo[idd][bEntranceX] = Pos[0];
	BizzInfo[idd][bEntranceY] = Pos[1];
	BizzInfo[idd][bEntranceZ] = Pos[2];
	BizzInfo[idd][bBuyPrice] = value;
	BizzInfo[idd][bLevelNeeded] = level;
	BizzInfo[idd][bVirtual] = idd;
	BizzInfo[idd][bType] = type;
	BizzInfo[idd][bInterior] = BizInteriorID(type);
	if(type >= 12 && type != 14) BizzInfo[idd][bSbiz] = 1;

	new PropertyString[256];
	DestroyDynamic3DTextLabel(BizzLabel[idd]);
	format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n{0068CF}This Business is for sale(/buybusiness) ! \n {EEEEEE}Price: {0068CF}%s \n{EEEEEE}Level: {0068CF}%d %s",BizzInfo[idd][bMessage],idd,FormatNumber(BizzInfo[idd][bBuyPrice]),BizzInfo[idd][bLevelNeeded]);
	BizzLabel[idd] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFCC,BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	CreateDynamicPickup(1239, 1, BizzInfo[idd][bEntranceX], BizzInfo[idd][bEntranceY], BizzInfo[idd][bEntranceZ]);
	pickups++;
	bussines++;

	if(BizzInfo[idd][bType] == 1) CreateDynamicMapIcon(BizzInfo[idd][bEntranceX],BizzInfo[idd][bEntranceY],BizzInfo[idd][bEntranceZ],52,0,-1,-1,-1,750.0); //Bank
	if(BizzInfo[idd][bType] == 2) CreateDynamicMapIcon(BizzInfo[idd][bEntranceX],BizzInfo[idd][bEntranceY],BizzInfo[idd][bEntranceZ],18,0,-1,-1,-1,750.0); //GunShop
	if(BizzInfo[idd][bType] == 3) CreateDynamicMapIcon(BizzInfo[idd][bEntranceX],BizzInfo[idd][bEntranceY],BizzInfo[idd][bEntranceZ],49,0,-1,-1,-1,750.0); //Bars
	if(BizzInfo[idd][bType] == 4) CreateDynamicMapIcon(BizzInfo[idd][bEntranceX],BizzInfo[idd][bEntranceY],BizzInfo[idd][bEntranceZ],38,0,-1,-1,-1,750.0); //Sex Shop
	if(BizzInfo[idd][bType] == 5) CreateDynamicMapIcon(BizzInfo[idd][bEntranceX],BizzInfo[idd][bEntranceY],BizzInfo[idd][bEntranceZ],25,0,-1,-1,-1,750.0); //Casino
	if(BizzInfo[idd][bType] == 6) CreateDynamicMapIcon(BizzInfo[idd][bEntranceX],BizzInfo[idd][bEntranceY],BizzInfo[idd][bEntranceZ],17,0,-1,-1,-1,750.0); //24/7
	if(BizzInfo[idd][bType] == 7) CreateDynamicMapIcon(BizzInfo[idd][bEntranceX],BizzInfo[idd][bEntranceY],BizzInfo[idd][bEntranceZ],10,0,-1,-1,-1,750.0); //Burger Shot
	if(BizzInfo[idd][bType] == 8) CreateDynamicMapIcon(BizzInfo[idd][bEntranceX],BizzInfo[idd][bEntranceY],BizzInfo[idd][bEntranceZ],54,0,-1,-1,-1,750.0); //Gym
	if(BizzInfo[idd][bType] == 9) CreateDynamicMapIcon(BizzInfo[idd][bEntranceX],BizzInfo[idd][bEntranceY],BizzInfo[idd][bEntranceZ],29,0,-1,-1,-1,750.0); //Pizza
	if(BizzInfo[idd][bType] == 10) CreateDynamicMapIcon(BizzInfo[idd][bEntranceX],BizzInfo[idd][bEntranceY],BizzInfo[idd][bEntranceZ],51,0,-1,-1,-1,750.0); //Rent Car
	if(BizzInfo[idd][bType] == 11) CreateDynamicMapIcon(BizzInfo[idd][bEntranceX],BizzInfo[idd][bEntranceY],BizzInfo[idd][bEntranceZ],45,0,-1,-1,-1,750.0); //Clothes
	if(BizzInfo[idd][bType] == 12) CreateDynamicMapIcon(BizzInfo[idd][bEntranceX],BizzInfo[idd][bEntranceY],BizzInfo[idd][bEntranceZ],27,0,-1,-1,-1,750.0); //Gas Station
	if(BizzInfo[idd][bType] == 13) CreateDynamicMapIcon(BizzInfo[idd][bEntranceX],BizzInfo[idd][bEntranceY],BizzInfo[idd][bEntranceZ],63,0,-1,-1,-1,750.0); //PNS
	if(BizzInfo[idd][bType] == 14) CreateDynamicMapIcon(BizzInfo[idd][bEntranceX],BizzInfo[idd][bEntranceY],BizzInfo[idd][bEntranceZ],14,0,-1,-1,-1,750.0); //Cluckin Bell

	new string[128];
	format(string, sizeof(string), "[@@ %d @@]%f, %f, %f, [$%s, %d lvl, %d int, %d type]", idd, Pos[0], Pos[1], Pos[2], FormatNumber(value), level, BizInteriorID(type), type);
	SCM(playerid, COLOR_YELLOW, string);
	return 1;
}

function BizInteriorID(type) {
	new x;
	switch(type) {
		case 1: x = 0;
		case 2: x = 7;
		case 3: x = 1;
		case 4: x = 3;
		case 5: x = 10;
		case 6: x = 18;
		case 7: x = 10;
		case 8: x = 5;
		case 9: x = 5;
		case 11: x = 15;
		case 12..13: x = 0;
		case 15..16: x = 0;
		case 14: x = 9;
	}
	return x;
}
CMD:createhouse(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 6)
		{
			new house[64],Float:pX,Float:pY,Float:pZ,string[128],PropertyString[256],query[500];
			if(sscanf(params, "s[64]", house)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /createhouse [exterior/interior/complete]");
		    if(strcmp(house,"exterior",true) == 0)
			{
			    GetPlayerPos(playerid, pX, pY, pZ);
				SetPVarFloat(playerid, "pHeX", pX);
	        	SetPVarFloat(playerid, "pHeY", pY);
	        	SetPVarFloat(playerid, "pHeZ", pZ);
				SetPVarInt(playerid, "hExt", 1);
				SendClientMessage(playerid, COLOR_YELLOW, "House exterior position configured.");
			}
			if(strcmp(house,"interior",true) == 0)
			{
			    GetPlayerPos(playerid, pX, pY, pZ);
				SetPVarFloat(playerid, "pHiX", pX);
            	SetPVarFloat(playerid, "pHiY", pY);
            	SetPVarFloat(playerid, "pHiZ", pZ);
				SetPVarInt(playerid, "pHiID", GetPlayerInterior(playerid));
				SetPVarInt(playerid, "pHiVW", GetPlayerVirtualWorld(playerid));
            	SetPVarInt(playerid, "hInt", 1);
				SendClientMessage(playerid, COLOR_YELLOW, "House interior position configured.");
			}
			if(strcmp(house,"complete",true) == 0)
			{
			    if(GetPVarInt(playerid, "hExt") != 1 || GetPVarInt(playerid, "hInt") != 1)
					return SendClientMessage(playerid, COLOR_RED, "You haven't configured either the house exterior or interior. Creation attempt failed.");

				new i = housess+1;
				mysql_format(SQL, query, sizeof(query), "INSERT INTO houses (Owner, Lockk, Hel, Arm, Level, Rentabil, Rent, Owned, Discription, Value, Takings) VALUES('AdmBot', '0', '0', '0', '10', '1', '5', '1', 'House', '10000000', '0')");
				mysql_tquery(SQL, query, "", "");

				HouseInfo[i][hID]                           = i;
   	    		HouseInfo[i][hEntrancex]                    = GetPVarFloat(playerid, "pHeX");
				HouseInfo[i][hEntrancey]                    = GetPVarFloat(playerid, "pHeY");
			 	HouseInfo[i][hEntrancez]                    = GetPVarFloat(playerid, "pHeZ");
        		HouseInfo[i][hExitx]                        = GetPVarFloat(playerid, "pHiX");
        		HouseInfo[i][hExity]                        = GetPVarFloat(playerid, "pHiY");
        		HouseInfo[i][hExitz]                        = GetPVarFloat(playerid, "pHiZ");
        		format(HouseInfo[i][hOwner], 64, "AdmBot");
        		format(HouseInfo[i][hDiscription], 64, "House");
        		HouseInfo[i][hValue]						= 10000000;
        		HouseInfo[i][hHel]                          = 0;
        		HouseInfo[i][hMusic]						= 0;
        		HouseInfo[i][hInterior]                     = GetPVarInt(playerid, "pHiID");
        		HouseInfo[i][hLock]                         = 0;
        		HouseInfo[i][hOwned]                        = 1;
        		HouseInfo[i][hRent]                         = 5;
        		HouseInfo[i][hRentabil]                     = 1;
        		HouseInfo[i][hTakings]                      = 0;
        		HouseInfo[i][hLevel]                        = 10;
        		HouseInfo[i][hVirtual]                      = GetPVarInt(playerid, "pHiVW");

        		mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Entrancex`='%f',`Entrancey`='%f',`Entrancez`='%f',`Exitx`='%f',`Exity`='%f',`Exitz`='%f',`Interior`='%d',`Virtual`='%d' WHERE `ID`='%d'", HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez], HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz], HouseInfo[i][hInterior], HouseInfo[i][hVirtual], i);
        		mysql_tquery(SQL, query, "", "");
        		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `House`='%d' WHERE `name`='AdmBot'", i);
        		mysql_tquery(SQL, query, "", "");

        		DeletePVar(playerid, "pHeX");
			    DeletePVar(playerid, "pHeY");
			    DeletePVar(playerid, "pHeZ");
			    DeletePVar(playerid, "pHiX");
			    DeletePVar(playerid, "pHeY");
			    DeletePVar(playerid, "pHeZ");
			    DeletePVar(playerid, "pHiID");
			    DeletePVar(playerid, "pHiVW");
			    DeletePVar(playerid, "pExt");
			    DeletePVar(playerid, "pInt");

        		DestroyDynamic3DTextLabel(HouseLabel[i]);
				format(PropertyString, sizeof(PropertyString),"{FFFFFF}House {B40404}%d \n{B40404}This house is for sale(/buyhouse) ! \n{FFFFFF}Description: {B40404}%s \n{FFFFFF}Price: {B40404}$%s \n{FFFFFF}Level: {B40404}%d",i,HouseInfo[i][hDiscription],FormatNumber(HouseInfo[i][hValue]),HouseInfo[i][hLevel]);
				HouseLabel[i] = CreateDynamic3DTextLabel(PropertyString, 0x9C0000F7, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
				DestroyDynamicPickup(HousePickup[i]);
				HousePickup[i] = CreateDynamicPickup(1273, 23, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]);

				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerPos(playerid, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]);
				housess++;
				format(string,sizeof(string),"House %d created!",i);
				SendClientMessage(playerid, COLOR_YELLOW, string);
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:movehouse(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 6)
		{
		    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return SendClientMessage(playerid, COLOR_RED, "You can move house only in virtual/interior 0.");
		    new house,Float:pX,Float:pY,Float:pZ,query[256];
		    if(sscanf(params, "d", house)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /movehouse [house id]");
		    GetPlayerPos(playerid, pX, pY, pZ);
		    HouseInfo[house][hEntrancex] = pX;
		    HouseInfo[house][hEntrancey] = pY;
		    HouseInfo[house][hEntrancez] = pZ;
		    new i = house;
		    mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Entrancex`='%f',`Entrancey`='%f',`Entrancez`='%f' WHERE `ID`='%d'",HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez],house);
    		mysql_tquery(SQL,query,"","");
    		format(query,sizeof(query),"You moved house %d to X:%f,Y:%f,Z:%f.",house,pX,pY,pZ);
    		SendClientMessage(playerid, COLOR_WHITE, query);
			OnPropTextdrawUpdate(1, i);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:houseinterior(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 6)
		{
		    new house,Float:pX,Float:pY,Float:pZ,query[256];
		    if(sscanf(params, "d", house)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /houseinterior [house id]");
		    GetPlayerPos(playerid, pX, pY, pZ);
		    HouseInfo[house][hExitx] = pX;
		    HouseInfo[house][hExity] = pY;
		    HouseInfo[house][hExitz] = pZ;
		    HouseInfo[house][hInterior] = GetPlayerInterior(playerid);
		    HouseInfo[house][hVirtual] = GetPlayerVirtualWorld(playerid);
		    mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Exitx`='%f',`Exity`='%f',`Exitz`='%f',`Interior`='%d',`Virtual`='%d' WHERE `ID`='%d'",HouseInfo[house][hExitx],HouseInfo[house][hExity],HouseInfo[house][hExitz],HouseInfo[house][hInterior],HouseInfo[house][hVirtual],house);
    		mysql_tquery(SQL,query,"","");
    		format(query,sizeof(query),"You changed house %d interior.",house);
    		SendClientMessage(playerid, COLOR_YELLOW, query);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:hinterior(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 6)
		{
			new house,interior,query[256];
			if(sscanf(params, "dd", house, interior)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /hinterior [house id] [0-small, 1-medium, 2-big]");
			if(interior < 0 || interior > 2) return SendClientMessage(playerid, COLOR_WHITE, "Interior ID must be between 0 and 2.");
			HouseInfo[house][hInteriorType] = interior;
			mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `InteriorType`='%d' WHERE `ID`='%d'",HouseInfo[house][hInteriorType],house);
    		mysql_tquery(SQL,query,"","");
			format(query,sizeof(query),"You changed house %d interior type.",house);
    		SendClientMessage(playerid, COLOR_YELLOW, query);
			OnPropTextdrawUpdate(1, house);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:housewithdraw(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPhousekey],moneyhouse,string[100];
		if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			if(sscanf(params, "d",moneyhouse)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /housewithdraw [amount]");
			if(moneyhouse < 1) return 1;
			if (moneyhouse > HouseInfo[bouse][hTakings]) return SendClientMessage(playerid, COLOR_WHITE, "You don't have that amount of money.");
			if (!PlayerToPoint(100, playerid,HouseInfo[bouse][hExitx],HouseInfo[bouse][hExity],HouseInfo[bouse][hExitz])) return SendClientMessage(playerid, COLOR_WHITE, "You need to be near your house.");
			else
			{
				GivePlayerCash(playerid,moneyhouse);
				HouseInfo[bouse][hTakings] = HouseInfo[bouse][hTakings]-moneyhouse;
				format(string, sizeof(string), "You have withdrawn $%d from your house vault.", moneyhouse);
				Update(playerid, pCashx);
				new str2[184];
				mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Takings`='%d' WHERE `ID`='%d'",HouseInfo[bouse][hTakings],HouseInfo[bouse][hID]);
				mysql_tquery(SQL,str2,"","");
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You don't own a house.");
	}
	return 1;
}
CMD:hwithdraw(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_housewithdraw(playerid, params);
}
CMD:hbalance(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPhousekey],string[100];
		if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			format(string, sizeof(string), "House Vault Balance: $%d", HouseInfo[bouse][hTakings]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You don't own a house.");
	}
	return 1;
}
CMD:evict(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPhousekey],target;
		if (bouse != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			if(sscanf(params, "u",target)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /evict [name/playerid]");
			if (target == playerid) return SendClientMessage(target, COLOR_GREY, "You can't evict yourself.");
			if(IsPlayerConnected(target))
			{
			    if(target != INVALID_PLAYER_ID)
			    {
					if(PlayerInfo[target][pPhousekey] == PlayerInfo[playerid][pPhousekey])
					{
						SendClientMessage(target, COLOR_WHITE, "You have been evicted.");
						SendClientMessage(playerid, COLOR_WHITE, "Player has been evicted.");
						PlayerInfo[target][pPhousekey] = 999;
						PlayerInfo[target][pRented] = -1;
						new str[100];
						mysql_format(SQL,str,100,"UPDATE users SET `House`='999',`Rented`='-1' WHERE `name`='%s'",PlayerInfo[target][pNormalName]);
						mysql_tquery(SQL,str,"","");
						SetTimerEx("OnPropTextdrawUpdate", 1000, false, "dd", 1, PlayerInfo[playerid][pPhousekey]);
						return 1;
					}
					else return SendClientMessage(playerid, COLOR_GREY, "Player doesn't have rent at your House.");
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You don't own a house.");
	}
	return 1;
}
CMD:evictall(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPhousekey];
		if (bouse != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			new str[100];
			mysql_format(SQL,str,100,"UPDATE users SET `House`='999',`Rented`='-1' WHERE `Rented`='%d'",PlayerInfo[playerid][pPhousekey]);
			mysql_tquery(SQL,str,"","");
			foreach(new i : Player)
			{
				if(i != playerid)
				{
					if (PlayerInfo[i][pPhousekey] == PlayerInfo[playerid][pPhousekey])
					{
						SendClientMessage(i, COLOR_WHITE, "You have been evicted from your house.");
						PlayerInfo[i][pPhousekey] = 999;
						PlayerInfo[i][pRented] = -1;
						return 1;
					}
				}
			}
			SendClientMessage(playerid, COLOR_WHITE, "Everyone have been evicted.");
			SetTimerEx("OnPropTextdrawUpdate", 1000, false, "dd", 1, PlayerInfo[playerid][pPhousekey]);
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "{FFF8C6}You don't own a house.");
	}
	return 1;
}
CMD:sellhousetostate(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pPhousekey] == 999) return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
		if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			SellHouseID[playerid] = PlayerInfo[playerid][pPhousekey];
			if(PlayerInfo[playerid][pLanguage] == 2) ShowPlayerDialog(playerid, DIALOG_SELLHOUSETOSTATE, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca vrei sa-ti vinzi casa pentru $2.000.000?", "Da", "Nu");
			else ShowPlayerDialog(playerid, DIALOG_SELLHOUSETOSTATE, DIALOG_STYLE_MSGBOX, "Are you sure?", "Are you sure you want to sell your house for $2.000.000?", "Yes", "No");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "{FFF8C6}You don't own a house.");
	}
	return 1;
}
CMD:sellhouseto(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
    if(IsPlayerConnected(playerid))
    {
		new id22 = PlayerInfo[playerid][pPhousekey],money,giveplayerid,sendername[25],giveplayer[25],string[150],playername[25],other[128];
		GetPlayerName(playerid, playername, sizeof(playername));
		if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 4,HouseInfo[id22][hEntrancex],HouseInfo[id22][hEntrancey],HouseInfo[id22][hEntrancez])) return SCM(playerid,COLOR_WHITE,"You are not near your house.");
			if(sscanf(params, "uiS(NULL)[128]",giveplayerid,money,other)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellhouseto [name/playerid] [price]");
			if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_LIGHTGREEN3, "Nu folosi spatii in pret.", "Don't use spaces in the price.");
			if(money < 1 || money > 5000000000) return SendClientMessage(playerid, COLOR_GREY, "Price must be between 1 and 5,000,000,000.");
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pPhousekey] != 999) return SendClientMessage(playerid, COLOR_WHITE, "This player already own a house or have rent house.");
					if(PlayerInfo[giveplayerid][pLevel] < HouseInfo[PlayerInfo[playerid][pPhousekey]][hLevel]) return SCM(playerid,COLOR_GREY,"This player don't have needed level.");
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_GREY, "You can't sell a house to yourself.");
						if(GetPlayerCash(giveplayerid) < money) return SCM(playerid,COLOR_GREY,"This player don't have money needed.");
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "You offered to %s to buy your house for $%s.", giveplayer, FormatNumber(money));
						SendClientMessage(playerid, COLOR_DARKPINK, string);
						format(string, sizeof(string), "%s wants to sell his house to you for $%s, type /accept house %d to accept.", sendername, FormatNumber(money),playerid);
						SendClientMessage(giveplayerid, COLOR_DARKPINK, string);
						HouseID[giveplayerid] = PlayerInfo[playerid][pPhousekey];
						HouseOffer[giveplayerid] = playerid;
						HousePrice[giveplayerid] = money;
					}
					else return SendClientMessage(playerid, COLOR_GREY, "This player is not near you.");
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You don't own a house.");
	}
	return 1;
}
CMD:sellhouse(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
    if(IsPlayerConnected(playerid))
    {
		new id22 = PlayerInfo[playerid][pPhousekey],money,other[128];
		if (id22 != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 4,HouseInfo[id22][hEntrancex],HouseInfo[id22][hEntrancey],HouseInfo[id22][hEntrancez])) return SCM(playerid,COLOR_GREY,"You are not near your house.");
			if(sscanf(params, "iS(NULL)[128]",money,other)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellhouse [price]");
			if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_LIGHTGREEN3, "Nu folosi spatii in pret.", "Don't use spaces in the price.");
			if(money < 0 || money > 1000000000) return SendClientMessage(playerid, COLOR_GREY, "Price maximum $1,000,000,000 (0 = stop selling).");
			HouseInfo[id22][hPrice] = money;
			new str2[256];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Prices`='%d' WHERE `ID`='%d'",money,id22);
			mysql_tquery(SQL,str2,"","");
			format(str2, sizeof(str2),"You have set your house sell price at $%s.",FormatNumber(money));
			SendClientMessage(playerid, COLOR_YELLOW, str2);
			OnPropTextdrawUpdate(1,id22);
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You don't own a house.");
	}
	return 1;
}
CMD:sellbusiness(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	if(IsPlayerConnected(playerid))
    {
    	new biz = PlayerInfo[playerid][pPbiskey],money,other[128];
    	if(biz != 255)
    	{
    		if(!IsPlayerInRangeOfPoint(playerid, 4,BizzInfo[biz][bEntranceX], BizzInfo[biz][bEntranceY], BizzInfo[biz][bEntranceZ])) return SCM(playerid,COLOR_GREY,"You are not near your business.");
    		if(sscanf(params, "iS(NULL)[128]",money,other)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellbusiness [price]");
    		if(money < 0 || money > 1000000000) return SendClientMessage(playerid, COLOR_GREY, "Price maximum $1,000,000,000 (0 = stop selling).");
    		BizzInfo[biz][bPrice] = money;
    		new str2[256];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE `bizz` SET `Prices`='%d' WHERE `ID`='%d'", money, biz);
			mysql_tquery(SQL,str2,"","");
			format(str2, sizeof(str2),"You have set your business sell price at $%s.", FormatNumber(money));
			SendClientMessage(playerid, COLOR_YELLOW, str2);
			OnPropTextdrawUpdate(2,biz);
    	}
    }
    return 1;
}
CMD:setrent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPhousekey],string[25],fee;
		if (bouse != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			if(sscanf(params, "d",fee)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /setrent [money]");
			if(fee < 0 || fee > 5000) return SendClientMessage(playerid, COLOR_GREY, "Minimum rent is $1, maximum rent is $5,000. To disable rent use /setrent 0.");
			HouseInfo[bouse][hRent] = fee;
			if(fee == 0) HouseInfo[bouse][hRentabil] = 0;
			else HouseInfo[bouse][hRentabil] = 1;
			new str2[64];
			mysql_format(SQL,str2,64,"UPDATE `houses` SET `Rent`='%d' WHERE `ID`='%d'",fee,bouse);
			mysql_tquery(SQL,str2,"","");
			mysql_format(SQL,str2,64,"UPDATE `houses` SET `Rentabil`='%d' WHERE `ID`='%d'", HouseInfo[bouse][hRentabil], bouse);
			mysql_tquery(SQL,str2,"","");
			format(string, sizeof(string), "House rent set to $%d.", HouseInfo[bouse][hRent]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			OnPropTextdrawUpdate(1,PlayerInfo[playerid][pPhousekey]);
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "{FFF8C6}You don't own a house.");
	}
	return 1;
}
CMD:houserent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    return cmd_setrent(playerid, params);
}
CMD:hupgrade(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			ShowPlayerDialog(playerid, DIALOG_HUPGRADE, DIALOG_STYLE_LIST, "House upgrades", "Food upgrade  - $50,000\nMusic upgrade  - {FFFF00}15 premium points", "Select", "Exit");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
	}
	return 1;
}
CMD:auninvite(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new id,string[256],giveplayer[30],sendername[MAX_PLAYER_NAME],reason[64],fpunish,fhid;
		if(sscanf(params, "uds[64]", id, fpunish, reason)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /auninvite [name/playerid] [fp] [reason]");
 		GetPlayerName(id, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerConnected(id))
		{
			if(id != INVALID_PLAYER_ID)
    		{
				if(PlayerInfo[id][pMember] == 0) return SendClientMessage(playerid, COLOR_GREY, "This player is not in a group.");
    		    new string2[500],query[500],escape[256],string1[256];
				format(query, sizeof(query), "SELECT * FROM `faction_logs` WHERE `player`='%d' ORDER BY `id` DESC LIMIT 1", PlayerInfo[id][pSQLID]);
				new Cache: ab = mysql_query(SQL, query);
				fhid = cache_get_field_content_int(0, "id");
				cache_delete(ab);
    		    if(fpunish > 0)
    		    {
					format(string, sizeof(string), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.",giveplayer,sendername,NumeFactiune(PlayerInfo[id][pMember]),PlayerInfo[id][pRank],GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]),fpunish,reason);
					ABroadCast(COLOR_RED2,string,1);
					SendFamilyMessage(PlayerInfo[id][pMember], COLOR_GENANNOUNCE, string);
					format(string2, sizeof(string2), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.", PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[id][pMember]][fName],PlayerInfo[id][pRank],GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]),fpunish,reason);
					mysql_real_escape_string(string2, escape);
					Factionlog(PlayerInfo[id][pMember],PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],escape);
					mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
					mysql_tquery(SQL,query,"","");
					mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", escape, PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,query,"","");
					PlayerInfo[id][pFpunish] = fpunish;
					if(PlayerInfo[id][pLanguage] == 2)
					{
						format(string1, sizeof(string1), "Ai fost demis de Admin %s din factiunea din care faceai parte dupa %d zile, cu %d FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), fpunish, reason);
						ShowPlayerDialog(id, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Inchide", "");
					}
					else
					{
						format(string1, sizeof(string1), "You were uninvited by Admin %s from your faction after %d days, with %d FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), fpunish, reason);
						ShowPlayerDialog(id, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Close", "");
					}
				}
				else if(fpunish < 1)
				{
					format(string, sizeof(string), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.",giveplayer,sendername,NumeFactiune(PlayerInfo[id][pMember]),PlayerInfo[id][pRank],GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]),reason);
					ABroadCast(COLOR_RED2,string,1);
					SendFamilyMessage(PlayerInfo[id][pMember], COLOR_GENANNOUNCE, string);
					format(string2, sizeof(string2), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.", PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[id][pMember]][fName],PlayerInfo[id][pRank],GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]),reason);
					mysql_real_escape_string(string2, escape);
					Factionlog(PlayerInfo[id][pMember],PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],escape);
					mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
					mysql_tquery(SQL,query,"","");
					mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", escape, PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,query,"","");
					PlayerInfo[id][pFpunish] = 0;
					if(PlayerInfo[id][pLanguage] == 2)
					{
						format(string1, sizeof(string1), "Ai fost demis de Admin %s din factiunea din care faceai parte dupa %d zile, fara FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), reason);
						ShowPlayerDialog(id, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Inchide", "");
					}
					else
					{
						format(string1, sizeof(string1), "You were uninvited by Admin %s from your faction after %d days, without FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), reason);
						ShowPlayerDialog(id, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Close", "");
					}
				}
    			PlayerInfo[id][pMember] = 0;
                PlayerInfo[id][pLeader] = 0;
                PlayerInfo[id][pRank] = 0;
				PlayerInfo[id][pFACWarns] = 0;
				PlayerInfo[id][pFactionJoin] = 0;
				PlayerInfo[id][pModel] = 250;
				gTeam[id] = 3;
				PlayerInfo[id][pTeam] = 3;
				OnDuty[id] = 0;
				tazer[id] = 0;
				SetPlayerArmourEx(id, 0);
    			SetPlayerSkin(id,PlayerInfo[id][pModel]);
				SetPlayerToTeamColor(id);
				new str[256];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FWarn`='0',`FPunish`='%d',`Team`='3', `FactionJoin`='0' WHERE `name`='%s'",PlayerInfo[id][pFpunish],PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
				return 1;
			}
		}
		else
 		{
             SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:auninviteoff(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new id[30], fp,string[MAX_STRING],reason[64],rank,ftime,faction,idd,query[500],string2[500],escape[30],escapee[256],fhid,language;
		if(sscanf(params, "s[30]is[64]", id, fp, reason)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /auninviteoff [name] [fp] [reason]");
		mysql_real_escape_string(id, escape);
		format(string, sizeof(string), "SELECT `Member` FROM `users` WHERE `name` = '%s'", escape);
		new Cache: r = mysql_query(SQL,string);
		if(cache_get_row_count())
		{
			new fostfactiune = cache_get_row_int ( 0, 0 );
			if(fostfactiune == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Acest jucator nu este intr-o factiune.");
				return 1;
			}
			format(query, sizeof(query), "SELECT * FROM `users` WHERE `name`='%s'",escape);
			new Cache: membresult = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				idd = cache_get_field_content_int(i, "id");
				rank = cache_get_field_content_int(i, "Rank");
				ftime = cache_get_field_content_int(i, "FactionJoin");
				faction = cache_get_field_content_int(i, "Member");
				language = cache_get_field_content_int(i, "Language");
			}
			cache_delete(membresult);
			format(query, sizeof(query), "SELECT * FROM `faction_logs` WHERE `player`='%d' ORDER BY `id` DESC LIMIT 1", idd);
			new Cache: abx = mysql_query(SQL, query);
			fhid = cache_get_field_content_int(0, "id");
			cache_delete(abx);
			if(fp == 0)
			{
				format(string, sizeof(string), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.",id,PlayerInfo[playerid][pNormalName],DynamicFactions[faction][fName],rank,GetDaysFromTimestamp(ftime),reason);
				ABroadCast(COLOR_RED2,string,1);
				SendFamilyMessage(faction, COLOR_GENANNOUNCE, string);
				mysql_format(SQL,string,sizeof(string),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='0',`FWarn`='0',`FactionJoin`='0' WHERE `name`='%s'",escape);
				mysql_tquery(SQL,string,"","");
				format(string2, sizeof(string2), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.",id,PlayerInfo[playerid][pNormalName],DynamicFactions[faction][fName],rank,GetDaysFromTimestamp(ftime),reason);
				mysql_real_escape_string(string2, escapee);
				Factionlog(faction,idd,PlayerInfo[playerid][pSQLID],escapee);
				mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
				mysql_tquery(SQL,query,"","");
				mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", escapee, idd, PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL,query,"","");
				if(language == 2) format(string, sizeof(string), "Ai fost demis de %s din factiunea din care faceai parte dupa %d zile, fara FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				else format(string, sizeof(string), "You were uninvited by %s from your faction after %d days, without FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				mysql_format(SQL,query, sizeof(query), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", idd, string);
				mysql_tquery(SQL,query,"","");
				cache_delete(r);
				return 1;
			}
			else if(fp >= 1)
			{
			    format(string, sizeof(string), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.",id,PlayerInfo[playerid][pNormalName],DynamicFactions[faction][fName],rank,GetDaysFromTimestamp(ftime),fp,reason);
				ABroadCast(COLOR_RED2,string,1);
				SendFamilyMessage(faction, COLOR_GENANNOUNCE, string);
				mysql_format(SQL,string,sizeof(string),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='%d',`FWarn`='0',`FactionJoin`='0' WHERE `name`='%s'",fp,escape);
				mysql_tquery(SQL,string,"","");
				format(string2, sizeof(string2), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.",id,PlayerInfo[playerid][pNormalName],DynamicFactions[faction][fName],rank,GetDaysFromTimestamp(ftime),fp,reason);
				mysql_real_escape_string(string2, escapee);
				Factionlog(faction,idd,PlayerInfo[playerid][pSQLID],escapee);
				mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
				mysql_tquery(SQL,query,"","");
				mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", escapee, idd, PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL,query,"","");
				if(language == 2) format(string, sizeof(string), "Ai fost demis de %s din factiunea din care faceai parte dupa %d zile, cu FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				else format(string, sizeof(string), "You were uninvited by %s from your faction after %d days, with FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				mysql_format(SQL,query, sizeof(query), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", idd, string);
				mysql_tquery(SQL,query,"","");
				cache_delete(r);
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Acest jucator nu exista.");
			cache_delete(r);
			return 1;
		}
		cache_delete(r);
	}
	return 1;
}
CMD:last(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
		    new id,list[64],test[300],test2[300],result[300],string[2500],query[500],name[30],name2[30],reasonn,gunname[50],actionid,reason[300],actiontime,lines,distance,where[10];
		    if(sscanf(params, "s[64]U(-1)D(10)", list,id,lines))
			{
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /last [action] [playerid - optional] [lines - optional, default 10]");
				SendClientMessage(playerid, COLOR_WHITE, "Actions: reports, kills, chat, actions, punish(warns, bans, jails), kicks");
				return 1;
			}
			if(!IsPlayerConnected(id) && id != -1) return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		    if(strcmp(list,"kills",true) == 0)
			{
				if(id != -1)
				{
					format(query, sizeof(query), "SELECT * FROM `kill_logs` WHERE `playerid`='%d' OR `killerid`='%d' ORDER BY `ID` DESC LIMIT %d", PlayerInfo[id][pSQLID], PlayerInfo[id][pSQLID], lines);
					new Cache: resultt = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "time", result); format(test, 300, result);
						reasonn						= cache_get_field_content_int(i, "reason");
						distance  					= cache_get_field_content_int(i, "distance");
						cache_get_field_content(i, "playername", result); format(name2, 30, result);
						cache_get_field_content(i, "killername", result); format(name, 30, result);
						GetWeaponNameEx(reasonn,gunname,sizeof(gunname));
						format(string,sizeof(string),"%s[%s] %s was killed by %s, reason: %s, distance: %d.\n",string,test,name2,name,gunname,distance);
					}
					cache_delete(resultt);
					ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"kills for player",string,"Close","");
				}
				else
				{
					format(query, sizeof(query), "SELECT * FROM `kill_logs` ORDER BY `ID` DESC LIMIT %d", lines);
					new Cache: resultt = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "time", result); format(test, 300, result);
						reasonn						= cache_get_field_content_int(i, "reason");
						distance  					= cache_get_field_content_int(i, "distance");
						cache_get_field_content(i, "playername", result); format(name2, 30, result);
						cache_get_field_content(i, "killername", result); format(name, 30, result);
						GetWeaponNameEx(reasonn,gunname,sizeof(gunname));
						format(string,sizeof(string),"%s[%s] %s was killed by %s, reason: %s, distance: %d.\n",string,test,name2,name,gunname,distance);
					}
					cache_delete(resultt);
					ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"kills",string,"Close","");
				}
			}
			if(strcmp(list,"reports",true) == 0)
			{
				new date[6],timex;
				if(id != -1)
				{
					format(query, sizeof(query), "SELECT * FROM `report_logs` WHERE `playerid`='%d' ORDER BY `id` DESC LIMIT %d", PlayerInfo[id][pSQLID], lines);
					new Cache: resultt = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "problem", result); format(test, 300, result);
						timex = cache_get_field_content_int(i, "time");
						TimestampToDate(timex,date[0],date[1],date[2],date[3],date[4],date[5],2);
						format(string,sizeof(string),"%s[%02d-%02d-%02d %02d:%02d:%02d] %s.\n",string,date[0],date[1],date[2],date[3],date[4],date[5],test);
					}
					cache_delete(resultt);
					ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"reports for player",string,"Close","");
				}
				else
				{
					format(query, sizeof(query), "SELECT * FROM `report_logs` ORDER BY `id` DESC LIMIT %d", lines);
					new Cache: resultt = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "problem", result); format(test, 300, result);
						timex = cache_get_field_content_int(i, "time");
						TimestampToDate(timex,date[0],date[1],date[2],date[3],date[4],date[5],2);
						format(string,sizeof(string),"%s[%02d-%02d-%02d %02d:%02d:%02d] %s.\n",string,date[0],date[1],date[2],date[3],date[4],date[5],test);
					}
					cache_delete(resultt);
					ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"reports",string,"Close","");
				}
			}
			if(strcmp(list,"chat",true) == 0)
			{
				if(id != -1)
				{
					format(query, sizeof(query), "SELECT * FROM `chat_logs` WHERE `playerid`='%d' ORDER BY `ID` DESC LIMIT %d", PlayerInfo[id][pSQLID], lines);
					new Cache: resultt = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "time", result); format(test, 300, result);
						cache_get_field_content(i, "text", result); format(test2, 300, result);
						cache_get_field_content(i, "where", where);
						for(new x, n = strlen(where); x <n; x++)
						{
							where[x] = toupper(where[x]);
						}
						GetPlayerName(id, name, sizeof(name));
						format(string,sizeof(string),"%s[%s] [%s] %s\n",string,test,where,test2);
					}
					cache_delete(resultt);
					ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"chat for player",string,"Close","");
				}
				else
				{
					format(query, sizeof(query), "SELECT * FROM `chat_logs` ORDER BY `ID` DESC LIMIT %d", lines);
					new Cache: resultt = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "time", result); format(test, 300, result);
						cache_get_field_content(i, "text", result); format(test2, 300, result);
						cache_get_field_content(i, "where", where);
						for(new x, n = strlen(where); x <n; x++)
						{
							where[x] = toupper(where[x]);
						}
						GetPlayerName(id, name, sizeof(name));
						format(string,sizeof(string),"%s[%s] [%s] %s\n",string,test,where,test2);
					}
					cache_delete(resultt);
					ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"chat",string,"Close","");
				}
			}
			if(strcmp(list,"actions",true) == 0)
			{
				if(id != -1)
				{
					format(query, sizeof(query), "SELECT * FROM `playerlogs` WHERE `playerid`='%d' OR `giverid`='%d' ORDER BY `ID` DESC LIMIT %d", PlayerInfo[id][pSQLID], PlayerInfo[id][pSQLID], lines);
					new Cache: resultt = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "action", result); format(test, 300, result);
						cache_get_field_content(i, "time", result); format(test2, 300, result);
						format(string,sizeof(string),"%s[%s] %s\n",string,test2,test);
					}
					cache_delete(resultt);
					ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"actions for player",string,"Close","");
				}
				else
				{
					format(query, sizeof(query), "SELECT * FROM `playerlogs` ORDER BY `ID` DESC LIMIT %d", lines);
					new Cache: resultt = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "action", result); format(test, 300, result);
						cache_get_field_content(i, "time", result); format(test2, 300, result);
						format(string,sizeof(string),"%s[%s] %s\n",string,test2,test);
					}
					cache_delete(resultt);
					ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"actions",string,"Close","");
				}
			}
			if(strcmp(list,"punish",true) == 0)
			{
				if(id != -1)
				{
					format(query, sizeof(query), "SELECT * FROM `punishlogs` WHERE `playerid`='%d' ORDER BY `ID` DESC LIMIT %d", PlayerInfo[id][pSQLID], lines);
					new Cache: resultt = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "time", result); format(test, 300, result);
						cache_get_field_content(i, "reason", result); format(reason, 300, result);
						actionid                    = cache_get_field_content_int(i, "actionid");
						actiontime                  = cache_get_field_content_int(i, "actiontime");
						cache_get_field_content(i, "playername", result); format(name, 30, result);
						cache_get_field_content(i, "givername", result); format(name2, 30, result);
						if(actionid == 1)
						{
							format(string,sizeof(string),"%s[%s] Ban: %s has been permanent banned by %s, reason: %s.\n",string,test,name,name2,reason);
						}
						else if(actionid == 2)
						{
							format(string,sizeof(string),"%s[%s] Ban: %s has been banned by %s for %d days, reason: %s.\n",string,test,name,name2,actiontime,reason);
						}
						else if(actionid == 3)
						{
							format(string,sizeof(string),"%s[%s] IP Ban: %s has been permanent banned by %s, reason: %s.\n",string,test,name,name2,reason);
						}
						else if(actionid == 4)
						{
							format(string,sizeof(string),"%s[%s] IP Ban: %s has been banned by %s for %d days, reason: %s.\n",string,test,name,name2,actiontime,reason);
						}
						else if(actionid == 5)
						{
							format(string,sizeof(string),"%s[%s] Warn: %s received a warn from admin %s, reason: %s.\n",string,test,name,name2,reason);
						}
						else if(actionid == 6)
						{
							format(string,sizeof(string),"%s[%s] Jail: %s was jailed by %s for %d minutes, reason: %s.\n",string,test,name,name2,actiontime,reason);
						}
						else if(actionid == 7)
						{
							format(string,sizeof(string),"%s[%s] Mute: %s has been muted by %s for %d minutes, reason: %s.\n",string,test,name,name2,actiontime,reason);
						}
						else if(actionid == 8)
						{
							format(string,sizeof(string),"%s[%s] %s was released from jail by admin %s, reason: %s.\n",string,test,name,name2,reason);
						}
					}
					cache_delete(resultt);
					ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"punish for player",string,"Close","");
				}
				else
				{
					format(query, sizeof(query), "SELECT * FROM `punishlogs` ORDER BY `ID` DESC LIMIT %d", lines);
					new Cache: resultt = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "time", result); format(test, 300, result);
						cache_get_field_content(i, "reason", result); format(reason, 300, result);
						actionid                    = cache_get_field_content_int(i, "actionid");
						actiontime                  = cache_get_field_content_int(i, "actiontime");
						cache_get_field_content(i, "playername", result); format(name, 30, result);
						cache_get_field_content(i, "givername", result); format(name2, 30, result);
						if(actionid == 1)
						{
							format(string,sizeof(string),"%s[%s] Ban: %s has been permanent banned by %s, reason: %s.\n",string,test,name,name2,reason);
						}
						else if(actionid == 2)
						{
							format(string,sizeof(string),"%s[%s] Ban: %s has been banned by %s for %d days, reason: %s.\n",string,test,name,name2,actiontime,reason);
						}
						else if(actionid == 3)
						{
							format(string,sizeof(string),"%s[%s] IP Ban: %s has been permanent banned by %s, reason: %s.\n",string,test,name,name2,reason);
						}
						else if(actionid == 4)
						{
							format(string,sizeof(string),"%s[%s] IP Ban: %s has been banned by %s for %d days, reason: %s.\n",string,test,name,name2,actiontime,reason);
						}
						else if(actionid == 5)
						{
							format(string,sizeof(string),"%s[%s] Warn: %s received a warn from admin %s, reason: %s.\n",string,test,name,name2,reason);
						}
						else if(actionid == 6)
						{
							format(string,sizeof(string),"%s[%s] Jail: %s was jailed by %s for %d minutes, reason: %s.\n",string,test,name,name2,actiontime,reason);
						}
						else if(actionid == 7)
						{
							format(string,sizeof(string),"%s[%s] Mute: %s has been muted by %s for %d minutes, reason: %s.\n",string,test,name,name2,actiontime,reason);
						}
						else if(actionid == 8)
						{
							format(string,sizeof(string),"%s[%s] %s was released from jail by admin %s, reason: %s.\n",string,test,name,name2,reason);
						}
					}
					cache_delete(resultt);
					ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"punish",string,"Close","");

				}
			}
			if(strcmp(list,"kicks",true) == 0)
			{
				if(id != -1)
				{
					format(query, sizeof(query), "SELECT * FROM `kicklogs` WHERE `playerid`='%d' ORDER BY `ID` DESC LIMIT %d", PlayerInfo[id][pSQLID], lines);
					new Cache: resultt = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "time", result); format(test, 300, result);
						cache_get_field_content(i, "playername", result); format(name, 30, result);
						cache_get_field_content(i, "givername", result); format(name2, 30, result);
						format(string,sizeof(string),"%s[%s] Kick: %s has been kicked by %s, reason: %s.\n",string,test,name,name2,reason);
					}
					cache_delete(resultt);
					ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"kicks for player",string,"Close","");
				}
				else
				{
					format(query, sizeof(query), "SELECT * FROM `kicklogs` ORDER BY `ID` DESC LIMIT %d", lines);
					new Cache: resultt = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "time", result); format(test, 300, result);
						cache_get_field_content(i, "playername", result); format(name, 30, result);
						cache_get_field_content(i, "givername", result); format(name2, 30, result);
						format(string,sizeof(string),"%s[%s] Kick: %s has been kicked by %s, reason: %s.\n",string,test,name,name2,reason);
					}
					cache_delete(resultt);
					ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"kicks",string,"Close","");
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:playersearch(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id, string[128], query[256], ip[16], pid[100], used[100], name[30], level, email[30], count=1, no;
			if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /playersearch [name/playerid]");
			if(IsPlayerConnected(id))
			{
				SendClientMessage(playerid, COLOR_WHITE, "--- Admin Player Search ---");
				GetPlayerIp(id, ip, sizeof(ip));
				format(query, sizeof(query), "SELECT * FROM `playerconnections` WHERE `ip`='%s'", ip);
				new Cache: ab = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count(); i != j; i++)
				{
					pid[i] = cache_get_field_content_int(i, "playerid");
				}
				cache_delete(ab);
				for(new x; x < 100; x++)
				{
					no = 0;
					if(pid[x] == 0) break;
					for(new a; a < 100; a++)
					{
						if(pid[x] == used[a]) no = 1;
					}
					if(no == 0)
					{
						format(query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%d'", pid[x]);
						new Cache: ac = mysql_query(SQL, query);
						cache_get_field_content(0, "name", name);
						cache_get_field_content(0, "Email", email);
						level = cache_get_field_content_int(0, "Level");
						if(strfind(email, "email@yahoo.com", true) != -1) email = "";
						format(string, sizeof(string), "(%d) %s | lvl: %d | email: %s", pid[x], name, level, email);
						if(count % 2 == 0) SendClientMessage(playerid, COLOR_WHITE, string);
						else SendClientMessage(playerid, COLOR_CYAN, string);
						count++;
						cache_delete(ac);
						used[x] = pid[x];
					}
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin.");
	}
	return 1;
}
CMD:ip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_playersearch(playerid, params);
}
CMD:dmg(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			if(ShowDMG[playerid] == 1)
			{
				ShowDMG[playerid] = 0;
				SendClientMessage(playerid, COLOR_WHITE, "Now you will see spectate player DMG.");
			}
			else
			{
				ShowDMG[playerid] = 1;
				SendClientMessage(playerid, COLOR_WHITE, "Now you will not see spectate player DMG.");
			}
		}
	}
	return 1;
}
CMD:addword(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 6)
		{
			new word[30],stringx[256],escape[128],x;
			if(sscanf(params, "s[30]", word)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /addword [word]");
			mysql_real_escape_string(word, escape);
			format(stringx, sizeof(stringx), "SELECT * FROM adv WHERE word = '%s'", escape);
			new Cache: xd = mysql_query(SQL, stringx);
			if(cache_get_row_count() == 0) x++;
			cache_delete(xd);
			if(x == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "This word is already forbidden.");
			mysql_format(SQL, stringx, sizeof(stringx), "INSERT INTO adv (`word`) VALUES ('%s')", escape);
			mysql_tquery(SQL, stringx, "", "");
			SendClientMessage(playerid, COLOR_WHITE, "Forbidden word added!");
		}
	}
	return 1;
}
CMD:removeword(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 6)
		{
			new word[30],stringx[256],escape[128],x;
			if(sscanf(params, "s[30]", word)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /removeword [word]");
			mysql_real_escape_string(word, escape);
			format(stringx, sizeof(stringx), "SELECT * FROM adv WHERE word = '%s'", escape);
			new Cache: xd = mysql_query(SQL, stringx);
			if(cache_get_row_count() == 0) x++;
			cache_delete(xd);
			if(x > 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Word not found.");
			mysql_format(SQL, stringx, sizeof(stringx), "DELETE FROM adv WHERE word = '%s'", escape);
			mysql_tquery(SQL, stringx, "", "");
			SendClientMessage(playerid, COLOR_WHITE, "Forbidden word removed!");
		}
	}
	return 1;
}
CMD:ban(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id,reason[128],reasone[128],string[200],giveplayer[30],sendername[30],days,str[1400],playerip[16],year,month,day,hour,minute,second,time;
			if(sscanf(params, "uds[128]", id,days,reason)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /ban [name/playerid] [days/0=permanent] [reason]");
			if(days < 0) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /ban [name/playerid] [days/0=permanent] [reason]");
			mysql_real_escape_string(reason, reasone);
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
			        getdate(year, month, day);
			        gettime(hour, minute, second);
       				GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerIp(id, playerip, sizeof(playerip));
					if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "You can't ban a higher (or equal) level administrator.");
					if(days == 0)
					{
					    format(string,sizeof(string),"Ban: %s has been permanent banned by %s, reason: %s.",giveplayer,sendername,reasone);
					    if(strfind(reason, "silent", true) != -1)
						{
							ABroadCast(COLOR_LIGHTRED, "Silent ban:", 1);
							ABroadCast(COLOR_LIGHTRED, string, 1);
						}
						else
						{
							SendClientMessageToAll(COLOR_LIGHTRED, string);
						}
						if(gPlayerLogged[id] == 0)
						{
							mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', 0, 0, 1, 1, 0)",
							giveplayer,PlayerInfo[playerid][pNormalName],reasone,playerip);
						}
						else
						{
					   	 	mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', 0, 0, 1, 1, 0)",
							PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],reasone,playerip);
						}
						mysql_tquery(SQL,str,"","");
						new var100[256];
	    				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','1','0','%s','%s','%s','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],reasone,giveplayer,sendername,gettime());
						mysql_tquery(SQL,var100,"","");
						KickEx(id);
					}
					if(days > 0)
					{
						time = gettime() + (days*86400);
					    format(string,sizeof(string),"Ban: %s has been banned by %s for %d days, reason: %s.",giveplayer,sendername,days,reasone);
					    if(strfind(reason, "silent", true) != -1)
						{
							ABroadCast(COLOR_LIGHTRED, string, 1);
						}
						else
						{
							SendClientMessageToAll(COLOR_LIGHTRED, string);
						}
						if(gPlayerLogged[id] == 0)
						{
							mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', %d, 0, 0, 1, %d)",
							giveplayer,PlayerInfo[playerid][pNormalName],reasone,playerip,days,time);
						}
						else
						{
					   		mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', %d, 0, 0, 1, %d)",
							PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],reasone,playerip,days,time);
						}

						mysql_tquery(SQL,str,"","");
						new var100[256];
	    				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','2','%d','%s','%s','%s','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],days,reasone,giveplayer,sendername,gettime());
						mysql_tquery(SQL,var100,"","");
						KickEx(id);
					}
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:banoff(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id[30],reason[128],reasone[128],string[200],sendername[30],days,str[1400],year,month,day,hour,minute,second,time,cont,qstr[500],playeridd,escape[30],admlevel;
			if(sscanf(params, "s[30]ds[128]", id,days,reason)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /banoff [name] [days/0=permanent] [reason]");
			if(days < 0) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /banoff [name] [days/0=permanent] [reason]");
            cont = MySQLCheckAccount(id);
        	if(cont == 0) return SCM(playerid, COLOR_LIGHTGREEN3, "Invalid player.");
			mysql_real_escape_string(reason, reasone);
	        getdate(year, month, day);
	        gettime(hour, minute, second);
	        GetPlayerName(playerid, sendername, sizeof(sendername));
			mysql_real_escape_string(id, escape);
	        format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `PlayerName`='%s' AND `Active`='1'", escape);
    		new Cache: banuri = mysql_query(SQL,qstr);
    		if(cache_get_row_count() > 0)
    		{
    		    SendClientMessage(playerid, COLOR_LIGHTRED, "This player is already banned.");
			}
			else
			{
				format(qstr, sizeof(qstr), "SELECT `id` FROM users WHERE `name` = '%s'", escape);
				new Cache: abs = mysql_query(SQL,qstr);
				if(cache_get_row_count() > 0)
				{
					playeridd = cache_get_field_content_int(0, "id");
					admlevel = cache_get_field_content_int(0, "Admin");
				}
				cache_delete(abs);
				if(admlevel >= PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "You can't ban a higher (or equal) level administrator.");
				if(days == 0)
				{
					format(string,sizeof(string),"Offline: Ban: %s has been permanent banned by %s, reason: %s.", id, sendername, reasone);
   					if(strfind(reason, "silent", true) != -1)
					{
						ABroadCast(COLOR_LIGHTRED, string, 1);
					}
					else
					{
						SendClientMessageToAll(COLOR_LIGHTRED, string);
					}
					mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '0', 0, 0, 1, 1, 0)",
					escape,PlayerInfo[playerid][pNormalName],reasone);
					mysql_tquery(SQL,str,"","");
					new var100[256];
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','1','0','%s','%s','%s','%d')", playeridd,PlayerInfo[playerid][pSQLID],reasone,escape,sendername,gettime());
					mysql_tquery(SQL,var100,"","");
				}
				if(days > 0)
				{
					time = gettime() + (days*86400);
					format(string,sizeof(string),"Offline: Ban: %s has been banned by %s for %d days, reason: %s.",id,sendername,days,reasone);
   					if(strfind(reason, "silent", true) != -1)
					{
						ABroadCast(COLOR_LIGHTRED, string, 1);
					}
					else
					{
						SendClientMessageToAll(COLOR_LIGHTRED, string);
					}
					mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '0', %d, 0, 0, 1, %d)",
					id,PlayerInfo[playerid][pNormalName],reasone,days,time);
					mysql_tquery(SQL,str,"","");
					new var100[256];
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','2','%d','%s','%s','%s','%d')", playeridd,PlayerInfo[playerid][pSQLID],days,reasone,escape,sendername,gettime());
					mysql_tquery(SQL,var100,"","");
				}
			}
			cache_delete(banuri);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:banip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id,reason[128],reasone[128],string[200],giveplayer[30],sendername[30],days,str[1400],playerip[16],year,month,day,hour,minute,second,time;
			if(sscanf(params, "uds[128]", id,days,reason)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /banip [name/playerid] [days/0=permanent] [reason]");
			if(days < 0) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /banip [name/playerid] [days/0=permanent] [reason]");
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					mysql_real_escape_string(reason, reasone);
			        getdate(year, month, day);
			        gettime(hour, minute, second);
       				GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerIp(id, playerip, sizeof(playerip));
					if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "You can't ban a higher (or equal) level administrator.");
					if(days == 0)
					{
					    format(string,sizeof(string),"IP Ban: %s has been permanent banned by %s, reason: %s.",giveplayer,sendername,reasone);
					    if(strfind(reason, "silent", true) != -1)
						{
							ABroadCast(COLOR_LIGHTRED, string, 1);
						}
						else
						{
							SendClientMessageToAll(COLOR_LIGHTRED, string);
						}
						if(gPlayerLogged[id] == 0)
						{
							mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', 0, 1, 1, 1, 0)",
							giveplayer,PlayerInfo[playerid][pNormalName],reasone,playerip);
						}
						else
						{
					   	 	mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', 0, 1, 1, 1, 0)",
							PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],reasone,playerip);
						}
						mysql_tquery(SQL,str,"","");
						new var100[256];
	    				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','3','0','%s','%s','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],giveplayer,sendername,gettime());
						mysql_tquery(SQL,var100,"","");
						KickEx(id);
					}
					if(days > 0)
					{
					    time = gettime() + (days*86400);
					    format(string,sizeof(string),"IP Ban: %s has been banned by %s for %d days, reason: %s.",giveplayer,sendername,days,reasone);
					    if(strfind(reason, "silent", true) != -1)
						{
							ABroadCast(COLOR_LIGHTRED, string, 1);
						}
						else
						{
							SendClientMessageToAll(COLOR_LIGHTRED, string);
						}
						if(gPlayerLogged[id] == 0)
						{
							mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', %d, 1, 0, 1, %d)",
							giveplayer,PlayerInfo[playerid][pNormalName],reasone,playerip,days,time);
						}
						else
						{
							mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', %d, 1, 0, 1, %d)",
							PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],reasone,playerip,days,time);
						}
						mysql_tquery(SQL,str,"","");
						new var100[256];
	    				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','4','%d','%s','%s','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],days,giveplayer,sendername,gettime());
						mysql_tquery(SQL,var100,"","");
						KickEx(id);
					}
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:banipp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			new ip[16],escape[16],reason[128],reasone[128],string[200],sendername[30],str[1400],year,month,day,hour,minute,second,playerip[16],qstr[500];
			if(sscanf(params, "s[16]s[128]", ip, reason)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /banipp [ip] [reason]");
   			getdate(year, month, day);
      		gettime(hour, minute, second);
			mysql_real_escape_string(reason, reasone);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			mysql_real_escape_string(ip, escape);
			format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `IP`='%s' AND `Active`='1'",escape);
    		new Cache: banuri = mysql_query(SQL,qstr);
    		if(cache_get_row_count() > 0)
    		{
    		    SendClientMessage(playerid, COLOR_LIGHTRED, "This IP is already banned.");
			}
			else
			{
				format(string,sizeof(string),"({FF6347}AdminStaff{FFFFFF}) %s has banned IP %s, reason: %s.",sendername,escape,reasone);
    			SendClientMessageToAll(COLOR_WHITE, string);
			    mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (AdminName, Reason, IP, Year, Month, Day, Hour, Minute, Second, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', %d, %d, %d, %d, %d, %d, 0, 1, 1, 1, 0)",
				PlayerInfo[playerid][pNormalName],reasone,escape,year,month,day,hour,minute,second);
				mysql_tquery(SQL,str,"","");
				foreach(new i : Player)
				{
				    GetPlayerIp(i, playerip, sizeof(playerip));
     				if(!strcmp(ip, playerip, true))
     				{
						KickEx(i);
					}
				}
			}
			cache_delete(banuri);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:unban(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pAdmin] >= 5)
		{
		    new id[30],escape[30],str1[256],string[128],sendername[30],qstr[256];
			if(sscanf(params, "s[30]", id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /unban [name]");
			mysql_real_escape_string(id, escape);
	        format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `PlayerName`='%s' AND `Active`='1'",escape);
    		new Cache: banuri = mysql_query(SQL,qstr);
    		if(cache_get_row_count() > 0)
    		{
    		    GetPlayerName(playerid, sendername, sizeof(sendername));
    		    format(string,sizeof(string),"({FF6347}AdminStaff{FFFFFF}) %s has unbanned user %s.",sendername,escape);
    		    ABroadCast(COLOR_WHITE, string,1);
			    mysql_format(SQL,str1,sizeof(str1),"UPDATE bans SET `Active`='0' WHERE `PlayerName`='%s'",escape);
				mysql_tquery(SQL,str1,"","");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid player.");
			}
			cache_delete(banuri);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:unbanip(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pAdmin] >= 5)
		{
		    new ip[16],escape[16],str1[256],string[256],sendername[30],qstr[256];
			if(sscanf(params, "s[16]", ip)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /unbanip [ip]");
			mysql_real_escape_string(ip, escape);
	        format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `IP`='%s' AND `Active`='1'",escape);
    		new Cache: banuri = mysql_query(SQL,qstr);
    		if(cache_get_row_count() > 0)
    		{
    		    GetPlayerName(playerid, sendername, sizeof(sendername));
    		    format(string,sizeof(string),"({FF6347}AdminStaff{FFFFFF}) %s has unbanned IP %s.",sendername,escape);
    		    ABroadCast(COLOR_WHITE, string,1);
			    mysql_format(SQL,str1,sizeof(str1),"UPDATE bans SET `Active`='0' WHERE `IP`='%s'",escape);
				mysql_tquery(SQL,str1,"","");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "This IP is not banned.");
			}
			cache_delete(banuri);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:getip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new id,playersip[256],giveplayer[30],string[256];
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /getip [name/playerid]");
		{
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			if(id != INVALID_PLAYER_ID)
	        {
				GetPlayerIp(id,playersip,sizeof(playersip));
				format(string, sizeof(string), "Player: %s (%d) IP: %s",giveplayer,id,playersip);
				SendClientMessage(playerid,COLOR_GRAD2,string);
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:agivemats(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
	   	if(IsPlayerConnected(playerid))
    	{
			new string[256],id,mats,giveplayer[30],sendername[MAX_PLAYER_NAME];
			if(sscanf(params, "ui", id,mats)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /agivemats [name/playerid] [amount]");
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
   			{
		    	PlayerInfo[id][pMats] += mats;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Admin %s has given to %s %d materials.", sendername,giveplayer,mats);
				ABroadCast(COLOR_RED,string,1);
				new str[128];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Mats`='%d' WHERE `name`='%s'",PlayerInfo[id][pMats],PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:spec(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			new id,giveplayer[25],string[256],sendername[25],string2[256];
			if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /spec [name/playerid]");
			{
				if(IsPlayerConnected(id))
				{
				    if(id != INVALID_PLAYER_ID)
				    {
						if(CanSpectate[id] == 0) return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use /spec on this admin.");
						if(Spectate[id] != -1) return SendClientMessage(playerid, COLOR_GREY, "That player is on spectating someone else.");
						if(TutTime[id] >= 1) return SendClientMessage(playerid, COLOR_GREY, "This player is currently in the tutorial.");
						if(Spectate[playerid] == -1)
						{
							BeforeSpectate[playerid][pState] = GetPlayerState(playerid);
							BeforeSpectate[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
							BeforeSpectate[playerid][pInt] = GetPlayerInterior(playerid);
							BeforeSpectate[playerid][pSpectating] = true;
							new Float: x, Float: y, Float: z;
							GetPlayerPos(playerid, x, y, z);

							if(!IsPlayerInAnyVehicle(playerid))
							{
								BeforeSpectate[playerid][pOldPos][0] = x;
								BeforeSpectate[playerid][pOldPos][1] = y;
								BeforeSpectate[playerid][pOldPos][2] = z;
							}
							else
								BeforeSpectate[playerid][pInVehicle] = GetPlayerVehicleID(playerid);
						}
				        Spectate[playerid] = id;
						new Float:health,country[50];
						GetPlayerHealth(Spectate[playerid], health);
						GetPlayerName(Spectate[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[playerid][pAdmin] >= 1)
						{
							new test[128];
							if(reportreason[id] == 1)
							{
								format(string, sizeof(string), "Admin %s is now spectating %s (reported for being stuck).",sendername,giveplayer);
								ABroadCast(COLOR_YELLOW,string,1);
								mysql_real_escape_string(reporttext[id], test);
								mysql_format(SQL, string2, sizeof(string2),"INSERT INTO report_logs (`playerid`,`adminid`,`problem`,`answer`,`time`) VALUES ('%d','%d','%s','/spec','%d')",PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],test,gettime());
								mysql_tquery(SQL, string2, "", "");
							}
							else if(reportreason[id] == 2)
							{
								format(string, sizeof(string), "Admin %s is now spectating %s (reported for DM).",sendername,giveplayer);
								ABroadCast(COLOR_YELLOW,string,1);
								mysql_real_escape_string(reporttext[id], test);
								mysql_format(SQL, string2, sizeof(string2),"INSERT INTO report_logs (`playerid`,`adminid`,`problem`,`answer`,`time`) VALUES ('%d','%d','%s','/spec','%d')",PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],test,gettime());
								mysql_tquery(SQL, string2, "", "");
								new weap, am, are = 0,str33[128],wName[50];
								format(string, sizeof(string),"%s's guns:",giveplayer);
								for(new is; is < 13; is++)
								{
									GetPlayerWeaponData(id, is, weap, am);
									if(weap >= 16 && am >= 1)
									{
										are = 1;
										GetWeaponNameEx(weap, wName, sizeof(wName));
										format(str33, sizeof(str33)," [%s-%d]",wName,am);
										strcat(string, str33);
									}
								}
								if(are == 1)
								{
									SendClientMessage(playerid, COLOR_GREY, string);
								}
							}
							ReportTime[id] = 0;
							format(reporttext[id], 30, "NULL");
							reportcheater[id] = -1;
							reportreason[id] = 0;
							if(playerreported[id] != -1)
							{
								reportreason[playerreported[id]] = 0;
							}
							playerreported[id] = -1;
							KillTimer(timerreport[id]);
						}
						GetPlayerCountry(id, country, sizeof(country));
						format(string, sizeof(string), "(%d) %s | Level: %d | Health: %.0f | AFK: %d | Duty: %d | Country: %s | Ping: %d",Spectate[playerid],giveplayer,PlayerInfo[Spectate[playerid]][pLevel],health,IsPlayerAFK[Spectate[playerid]],OnDuty[Spectate[playerid]],country,GetPlayerPing(Spectate[playerid]));
						SendClientMessage(playerid, COLOR_DARKPINK, string);
						TogglePlayerSpectating(playerid, 1);
						if(IsPlayerInAnyVehicle(Spectate[playerid]))
						{
						    new carid = GetPlayerVehicleID(Spectate[playerid]);
						    PlayerSpectateVehicle(playerid, carid);
							SpectateState[id] = 2;
						}
						else
						{
						    PlayerSpectatePlayer(playerid, Spectate[playerid]);
							SpectateState[id] = 1;
						}
						PlayerTextDrawSetString(playerid, TextDrawSpec[playerid][1], "LOADING...");
						PlayerTextDrawShow(playerid, TextDrawSpec[playerid][1]);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
				}
			}
   		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
			return 1;
		}
	}
	return 1;
}
CMD:forcenamechange(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new id, string[256], reason[128], sendername[30], giveplayer[30];
		if(sscanf(params, "us[128]",id,reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /forcenamechange [name/playerid] [reason]");
		if(IsPlayerConnected(id))
		{
			if(!strcmp(WantName[id], "NULL", true))
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string),"Admin %s forced %s (%d) - level %d to change his nickname. reason: %s", sendername, giveplayer, id, PlayerInfo[id][pLevel], reason);
				ABroadCast(COLOR_ADMCOMMANDS, string, 1);
				Log(PlayerInfo[playerid][pSQLID], string, "fnc");
				format(string, sizeof(string),"Admin %s forced you to change your nickname. reason: %s", sendername, reason);
				SendClientMessage(id, COLOR_ADMCOMMANDS, string);
				format(string, sizeof(string),"%s\n\nPlease enter your desired name below:",string);
				ShowPlayerDialog(id, DIALOG_CHANGENAME2, DIALOG_STYLE_INPUT, "Change name:", string, "Ok", "Cancel");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "This player already requested to change his name.");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:fnc(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_forcenamechange(playerid, params);
}
CMD:fvr(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_fvrespawn(playerid, params);
}
CMD:cancelname(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
			new id,string[128];
			if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cancelname [name/playerid]");
			if(IsPlayerConnected(id))
			{
				if(strcmp(WantName[id], "NULL", true))
				{
					format(string, sizeof(string),"Admin %s rejected your change name request.",PlayerInfo[playerid][pNormalName]);
					SendClientMessage(id, COLOR_DARKPINK, string);
					format(string, sizeof(string),"Admin %s rejected %s's change name request.",PlayerInfo[playerid][pNormalName], PlayerInfo[id][pNormalName]);
					ABroadCast(COLOR_COOLRED, string, 1);
					Log(PlayerInfo[playerid][pSQLID], string, "cn");
					format(WantName[id], 30, "NULL");
					TypeName[id] = 0;
				}
				else return SendClientMessage(playerid, COLOR_GREY, "This player didn't request to change his name.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:cn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_cancelname(playerid, params);
}
CMD:acceptname(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
			new id,string[256],str[256],stringss[256],stringname[128];
			if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /acceptname [name/playerid]");
			if(IsPlayerConnected(id))
			{
				if(strcmp(WantName[id], "NULL", true))
				{
					new newname = MySQLCheckAccount(WantName[id]);
					if(newname != 0) return SCM(playerid,COLOR_GREY,"This name already exist.");
					if(PlayerInfo[id][pPremiumPoints] <= 14 && TypeName[id] == 2)
					{
						SendClientMessage(id, COLOR_GREY, "Your change name request was rejected because you don't have necesary premium points.");
						SendClientMessage(playerid, COLOR_GREY, "This player don't have necesary premium points and his change name request was rejected.");
						TypeName[id] = 0;
						format(WantName[id], 30, "NULL");
						return 1;
					}
					if(PlayerInfo[id][pPhousekey] != 999 && strcmp(PlayerInfo[id][pNormalName], HouseInfo[PlayerInfo[id][pPhousekey]][hOwner], true) == 0)
					{
						mysql_format(SQL, string, sizeof(string),"UPDATE `houses` SET `Owner` = '%s' WHERE `Owner` = '%s'",WantName[id],PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL, string, "", "");
						strmid(HouseInfo[PlayerInfo[id][pPhousekey]][hOwner], WantName[id], 0, 30, 255);
					}
					if(PlayerInfo[id][pPbiskey] != 255)
					{
						mysql_format(SQL, string, sizeof(string),"UPDATE `bizz` SET `Owner` = '%s' WHERE `Owner` = '%s'",WantName[id],PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL, string, "", "");
						strmid(BizzInfo[PlayerInfo[id][pPbiskey]][bOwner], WantName[id], 0, 30, 255);
					}
					for(new v; v < MAX_PERSONAL_VEHICLES; v++)
					{
						if(PlayerInfo[id][pCar][v] != -1)
						{
							mysql_format(SQL, string, sizeof(string),"UPDATE `cars` SET `Owner` = '%s' WHERE `ID` = '%d'",WantName[id],PlayerInfo[id][pCar][v]);
							mysql_tquery(SQL, string, "", "");
							strmid(CarOwner[id][v], WantName[id], 0, 30, 255);
						}
					}
					if(TypeName[id] == 2)
					{
						PlayerInfo[id][pPremiumPoints] -= 15;
						Update(id, pPremiumPointsx);
						format(string, sizeof(string),"%s[user:%d] has paid 15 premium points to change his name to %s.", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], WantName[id]);
						mysql_real_escape_string(string, stringss);
						mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[id][pSQLID],stringss);
						mysql_tquery(SQL,str,"","");
					}
					mysql_format(SQL, string, sizeof(string),"UPDATE `users` SET `name` = '%s' WHERE `name` = '%s'",WantName[id],PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL, string, "", "");
					format(string, sizeof(string),"Admin %s changed %s's name to %s",PlayerInfo[playerid][pNormalName], PlayerInfo[id][pNormalName], WantName[id]);
					ABroadCast(COLOR_COOLRED, string, 1);
					Log(PlayerInfo[playerid][pSQLID], string, "an");
					new var100[256],string2[256],string3[256];
					format(string2,sizeof(string2),"%s[user:%d] si-a schimbat nick-ul in %s. (( Admin %s[admin:%d] ))",PlayerInfo[id][pNormalName],PlayerInfo[id][pSQLID],WantName[id], PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
					mysql_real_escape_string(string2, string3);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],string3);
					mysql_tquery(SQL,var100,"","");
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO namechanges (userid, oldname, newname, adminid) VALUES (%d, '%s', '%s', %d)", PlayerInfo[id][pSQLID], PlayerInfo[id][pNormalName], WantName[id], PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL, var100, "", "");
					strmid(PlayerInfo[id][pNormalName], WantName[id], 0, 30, 255);
					SetPlayerName(id, WantName[id]);
					format(WantName[id], 30, "NULL");
					TypeName[id] = 0;
					PlayerInfo[id][pClanTag] = 0;
					format(stringname,sizeof(stringname),"%s / %s", PlayerInfo[playerid][pNormalName], SERVER_NAME);
					PlayerTextDrawSetString(id, logo[id], stringname);
					PlayerTextDrawShow(id, logo[id]);
					SendClientMessage(playerid, COLOR_DARKPINK, "Player nickname changed.");
					SendClientMessage(id, COLOR_DARKPINK, "Your nickname request was accepted.");
				}
				else return SendClientMessage(playerid, COLOR_GREY, "This player didn't request to change his name.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:an(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_acceptname(playerid, params);
}
CMD:namechanges(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
		new id, query[256], sqlid, time[20], newname[30], oldname[30], count, string[1024];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /namechanges [name/playerid]");
		if(IsPlayerConnected(id))
		{
			format(string, sizeof(string), "Name changes:\n");
			format(query, sizeof(query), "SELECT * FROM namechanges WHERE userid = %d ORDER BY namechangeid ASC", PlayerInfo[id][pSQLID]);
			new Cache: xd = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				sqlid = cache_get_field_content_int(i, "userid");
				cache_get_field_content(i, "time", time);
				cache_get_field_content(i, "oldname", oldname);
				cache_get_field_content(i, "newname", newname);
				format(string, sizeof(string), "%s\n- (%d) Name: %s (changed from %s, %s)", string, sqlid, newname, oldname, time);
				count++;
			}
			cache_delete(xd);
			if(count == 0) return SendClientMessage(playerid, COLOR_GREY, "There are no recorded name changes for this player.");
			ShowPlayerDialog(playerid, DIALOG_NAMECHANGES, DIALOG_STYLE_MSGBOX, "SERVER: Name changes", string, "OK", "");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:giveallmoney(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new moneyall,sendername[MAX_PLAYER_NAME],string[100];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "i",moneyall)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /giveallmoney [money]");
		if(moneyall >= 1000001) return SendClientMessage(playerid, COLOR_GREY, "You can give maximum $1,000,000.");
		else if(moneyall < 1000001)
		{
			format(string, sizeof(string),"Admin %s has given $%s to all players online.", sendername, FormatNumber(moneyall));
			SendClientMessageToAll(COLOR_YELLOW,string);
			foreach(new i : Player)
			{
				GivePlayerCash(i, moneyall);
				Update(i, pCashx);
			}
			Log(PlayerInfo[playerid][pSQLID], string, "giveallmoney");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:areafreeze(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			new range,sendername[MAX_PLAYER_NAME],string[256];
			if(sscanf(params, "i",range)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /areafreeze [range]");
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s has frozen all players on range of %d.", sendername, range);
				ABroadCast(COLOR_WHITE,string,1);
				for(new i = 0; i < MAX_PLAYERS; i ++)
				{
					if (ProxDetectorS(range, playerid, i))
					{
						TogglePlayerControllable(i, 0);
					}
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:areaunfreeze(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			new range,sendername[MAX_PLAYER_NAME],string[256];
			if(sscanf(params, "i",range)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /areaunfreeze [range]");
			GetPlayerName(playerid, sendername, sizeof(sendername));
            format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s has unfrozen all players on range of %d.", sendername, range);
	        ABroadCast(COLOR_WHITE,string,1);
			for(new i = 0; i < MAX_PLAYERS; i ++)
			{
				if (ProxDetectorS(range, playerid, i))
				{
					TogglePlayerControllable(i, 1);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:areadisarm(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new range,string[256],sendername[MAX_PLAYER_NAME];
		if(sscanf(params, "i",range)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /areadisarm [range]");
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
            format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s has disarmed all players on range of %d.", sendername, range);
	        ABroadCast(COLOR_WHITE,string,1);
			for(new i = 0; i < MAX_PLAYERS; i ++)
			{
				if (ProxDetectorS(range, playerid, i))
				{
					ResetPlayerWeaponsEx(i);
		    		ResetPlayerWeapons(i);
			 	}
	  	  	}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:areagun(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new range,gun,ammo,string[256],sendername[25],count=0;
		if(sscanf(params, "iii", range, gun, ammo)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /areagun [range] [gun id] [ammo]");
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    if(gun < 1||gun > 46||gun==19||gun==20||gun==21||gun==45) return SCM(playerid,COLOR_WHITE,"Invalid weapond ID.");
		    if(ammo <1||ammo > 1000) return SCM(playerid,COLOR_WHITE,"Invalid ammo (1-1000).");
		    format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s has given gun %d with %d bullets to all players on range %d.", sendername,gun,ammo,range);
			ABroadCast(COLOR_WHITE,string,1);
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i))
				{
					if(ProxDetectorS(range, playerid, i))
					{
						GivePlayerWeaponEx(i, gun, ammo);
						if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
						{
				        	new gun2,tmp;
				        	GetPlayerWeaponData(i,5,gun2,tmp);
				        	#pragma unused tmp
				        	if(gun2)SetPlayerArmedWeapon(i,gun2);
				        	else SetPlayerArmedWeapon(i,0);
				        	count++;
						}
					}
				}
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:areaarmour(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			new range,armor,string[256],sendername[MAX_PLAYER_NAME];
			if(sscanf(params, "ii", range, armor)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /areaarmour [range] [armour]");
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 256, "({FF6347}AdminStaff{FFFFFF}) %s has set to all players on range %d armour to %d.", sendername, range, armor);
    			ABroadCast(COLOR_WHITE,string,1);
		  		for(new i = 0; i < MAX_PLAYERS; i ++)
				{
					if (ProxDetectorS(range, playerid, i))
					{
						SetPlayerArmourEx(i, armor);
		    			format(string, sizeof(string), "* Admin %s ti-a setat armura.", sendername);
						SendClientMessage(i, COLOR_DARKPINK, string);
					}
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:areaheal(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			new range,hp,string[256],sendername[MAX_PLAYER_NAME];
			if(sscanf(params, "ii", range, hp)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /areaheal [range] [amount]");
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 256, "({FF6347}AdminStaff{FFFFFF}) %s has set to all players in range %d heal to %d.", sendername, range, hp);
    			ABroadCast(COLOR_WHITE,string,1);
		  		for(new i = 0; i < MAX_PLAYERS; i ++)
				{
					if (ProxDetectorS(range, playerid, i))
					{
						SetPlayerHealthEx(i, hp);
		    			format(string, sizeof(string), "* Admin %s ti-a setat viata.", sendername);
						SendClientMessage(i, COLOR_DARKPINK, string);
					}
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:giveallpp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new rpall,sendername[MAX_PLAYER_NAME],string[100];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "i",rpall)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /giveallpp [level]");
		if(rpall >= 6) return SendClientMessage(playerid, COLOR_GREY, "Too much premium points(1-5).");
		else if(rpall < 6)
		{
			format(string, sizeof(string),"Admin %s give %d premium points to all players online.",sendername,rpall);
			SendClientMessageToAll(COLOR_YELLOW,string);
			foreach(new i : Player)
			{
				PlayerInfo[i][pPremiumPoints] += rpall;
				Update(i, pPremiumPointsx);
			}
			Log(PlayerInfo[playerid][pSQLID], string, "giveallpp");
		}
	}
	return 1;
}
CMD:givealllevel(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new rpall,sendername[MAX_PLAYER_NAME],string[100];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "i",rpall)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /givealllevel [level]");
		if(rpall >= 3) return SendClientMessage(playerid, COLOR_GREY, "Too much level(1-2).");
		else if(rpall < 3)
		{
			format(string, sizeof(string),"Admin %s give %d level to all players online.",sendername,rpall);
			SendClientMessageToAll(COLOR_YELLOW,string);
			foreach(new i : Player)
			{
				PlayerInfo[i][pLevel] += rpall;
				Update(i, pLevelx);
			}
			Log(PlayerInfo[playerid][pSQLID], string, "givealllevel");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:giveallrp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new rpall,sendername[MAX_PLAYER_NAME],string[100];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "i",rpall)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /giveallrp [amount]");
		if(rpall >= 10) return SendClientMessage(playerid, COLOR_GREY, "Too much respect points(1-10).");
		else if(rpall < 10)
		{
			format(string, sizeof(string),"Admin %s give %d respect points to all players online.",sendername,rpall);
			SendClientMessageToAll(COLOR_YELLOW,string);
			foreach(new i : Player)
			{
				PlayerInfo[i][pExp] += rpall;
				Update(i, pRP);
			}
			Log(PlayerInfo[playerid][pSQLID], string, "giveallrp");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:ah(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessage(playerid, COLOR_CYAN, "-------------------------------------------------------------------");
		SendClientMessage(playerid, COLOR_WHITE, "Level 1: /ban, /banip, /banipp, /banoff, /kick, /check, /checkv, /mute, /rveh, /fmembers, /aduty, /a");
		SendClientMessage(playerid, COLOR_WHITE, "Level 1: /gethere, /goto, /gotocar, /getcar, /spec, /slap, /up, /down, /respawn, /cc,");
		SendClientMessage(playerid, COLOR_WHITE, "Level 1: /setvw, /setint, /last, /setjob, /managearea, /placegotoevent, /count, /bigears, /fastevent");
		SendClientMessage(playerid, COLOR_WHITE, "Level 1: /freeze, /unfreeze, /o, /anno, /disarm, /jail, /jailoff, /nmute, /togfind");
		SendClientMessage(playerid, COLOR_WHITE, "Level 2: /relase, /relaseoff, /areaarmour, /areaheal, areagun, /areafreeze, /areaunfreeze");
		SendClientMessage(playerid, COLOR_WHITE, "Level 2: /putplayerinvehicle, /sethp");
		SendClientMessage(playerid, COLOR_WHITE, "Level 3: /rac, /oplace, /spawnweapon, /setweather, /temporarskin, /setskin, /setarmour");
		SendClientMessage(playerid, COLOR_WHITE, "Level 3: /forcenamechange (/fnc), /acceptname (/an), /cancelname (/cn), /spawncar");
		SendClientMessage(playerid, COLOR_WHITE, "Level 3: /removespawncarid, /removeallspawncar, /checkspawncar");
		SendClientMessage(playerid, COLOR_WHITE, "Level 4: /fuelcars, /auninvite, /auninviteoff, /makeleader");
		SendClientMessage(playerid, COLOR_WHITE, "Level 5: /sethelper, /agl, /maxmembers, /hprice, /bprice, /hlevel, /blevel");
		SendClientMessage(playerid, COLOR_WHITE, "Level 5: /givemoney, /money, /bank, /unwarn, /unban, /unbanip");
		SendClientMessage(playerid, COLOR_WHITE, "Level 6: /makeadmin, /serverpass, /servername, /setpp, /gmx, /createhouse, /movehouse, /giftbox");
		SendClientMessage(playerid, COLOR_WHITE, "Vehicles: /savevehicle, /vgroup, /vjob, /vrank, /vmove, /vcolor");
		SendClientMessage(playerid, COLOR_WHITE, "Teleports: /gotols, /gotolv, /gotosf, /gotospawn, /gotods, /gotom");
		SendClientMessage(playerid, COLOR_CYAN, "-------------------------------------------------------------------");
	}
	return 1;
}
CMD:aplay(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new link[128];
		if(sscanf(params, "s[128]", link)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /aplay [link]");
	    {
			new string[128],sendername[30];
			foreach(new i : Player)
			{
				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, link);
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string),"({FF6347}AdminStaff{FFFFFF}) %s used command /aplay.",sendername);
			ABroadCast(COLOR_WHITE, string, 1);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:specme(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(CanSpectate[playerid] == 0)
		{
			CanSpectate[playerid] = 1;
			SendClientMessage(playerid, COLOR_RED, "Adminii pot da acum spectate si /goto la tine.");
		}
		else
		{
			CanSpectate[playerid] = 0;
			SendClientMessage(playerid, COLOR_RED, "Adminii numai pot da acum spectate si /goto la tine.");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:kick(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new id, reason[128], reasone[128], string[256], sendername[25], giveplayer[25];
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
	{
	    if(sscanf(params, "us[128]", id, reason)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /kick [name/playerid] [reason]");
	    {
	        if(id != INVALID_PLAYER_ID)
	        {
				if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin] && PlayerInfo[playerid][pAdmin] > 0) return SendClientMessage(playerid, COLOR_GREY, "You can't kick a higher (or equal) level administrator.");
				mysql_real_escape_string(reason, reasone);
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Kick: %s has been kicked by %s, reason: %s.", giveplayer, sendername, reasone);
				if(strfind(reason, "silent", true) != -1)
				{
					ABroadCast(COLOR_LIGHTRED, string, 1);
				}
				else
				{
					SendClientMessageToAll(COLOR_LIGHTRED, string);
				}
				new var100[300];
	    		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO kicklogs (`playerid`,`giverid`,`playername`,`givername`,`reason`) VALUES ('%d','%d','%s','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],giveplayer,sendername,reasone);
				mysql_tquery(SQL,var100,"","");
				KickEx(id);
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:kill(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
		SetPlayerHealthEx(playerid, 0.0);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:closestcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			new VehicleID = GetClosestVehicle(playerid), string[128];

			if(doesVehicleExist(VehicleID))
			{
				PutPlayerInVehicle(playerid, VehicleID, 0);
				format(string, sizeof(string), "You have teleported into a %s (vehicle ID %d).", aVehicleNames[GetVehicleModel(VehicleID) - 400], VehicleID);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else SendClientMessage(playerid, COLOR_GREY, "No vehicles are in range.");
		}
		else SendClientMessage(playerid, COLOR_GREY, "You can only use this command while on foot.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:vre(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
		new string[128],sendername[30];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerInAnyVehicle(playerid))
		{
			new car = GetPlayerVehicleID(playerid), count;
			for(new x; x < MAX_VEHICLES; x++)
			{
				if(Carspawn[x] == car)
				{
					DestroyVehicle(x);
					Carspawn[x] = 0;
					count++;
					format(string,sizeof(string),"({FF6347}AdminStaff{FFFFFF}) Admin %s respawned vehicle %d.",sendername,x);
					ABroadCast(COLOR_WHITE,string,1);
					break;
				}
			}
			if(count == 0)
			{
				SetVehicleToRespawnEx(car);
				format(string,sizeof(string),"({FF6347}AdminStaff{FFFFFF}) Admin %s respawned vehicle %d.",sendername,car);
				ABroadCast(COLOR_WHITE,string,1);
			}
		}
		else
		{
			new car, count;
			if(sscanf(params, "d",car)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vre [car id]");
			new bool:unwanted[MAX_VEHICLES];
		    for(new player=0; player<MAX_PLAYERS; player++)
	     	{
	             if(IsPlayerInAnyVehicle(player))
				 {
				 	unwanted[GetPlayerVehicleID(player)]=true;
				 }
	     	}
	     	if(!unwanted[car])
			{
				for(new x; x < MAX_VEHICLES; x++)
				{
					if(Carspawn[x] == car)
					{
						if(!unwanted[car])
						{
							DestroyVehicle(x);
							Carspawn[x] = 0;
							count++;
							format(string,sizeof(string),"({FF6347}AdminStaff{FFFFFF}) Admin %s respawned vehicle %d.",sendername,x);
							ABroadCast(COLOR_WHITE,string,1);
							break;
						}
					}
				}
				if(count == 0)
				{
					if(!unwanted[car])
					{
						SetVehicleToRespawnEx(car);
						format(string,sizeof(string),"({FF6347}AdminStaff{FFFFFF}) Admin %s respawned vehicle %d.",sendername,car);
						ABroadCast(COLOR_WHITE,string,1);
					}
				}
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:rac(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] < 3)
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
			return 1;
		}
		new string[256], sendername[30];
		SetTimer("RACtime", 10000, 0);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string,sizeof(string),"{FFFFFF}All unused cars will be respawned in {009999}10 {FFFFFF}seconds by %s!", sendername);
		SendClientMessageToAll(COLOR_WHITE,string);
	}
	return 1;
}
CMD:va(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new range,Distance2,string[128];
			new Float: Distance, Float: posX, Float: posY, Float: posZ;
			if(sscanf(params, "d", range)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /va [range]");
			{
				if(range <= 0 || range >= 201) return SendClientMessage(playerid, COLOR_GREY, "Range must be between 1 and 200.");
				GetPlayerPos(playerid, posX, posY, posZ);
				for(new x = 1; x < MAX_VEHICLES; x++)
				{
					if(!IsVehicleOccupied(x))
					{
						Distance = GetVehicleDistanceFromPoint(x, posX, posY, posZ);
						Distance2 = floatround(Distance, floatround_round);
						if(Distance2 <= range)
						{
							SetVehicleToRespawn(x);
						}
					}
				}
				format(string, sizeof(string), "Ai respawnat masinile din zona a %d unitati de joc.",range);
				SendClientMessage(playerid, COLOR_DARKPINK, string);
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:respawn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
  		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			new id,sendername[30],giveplayer[30],string[256];
			if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /respawn [name/playerid]");
			{
				if(IsPlayerConnected(id))
    			{
				    if(id != INVALID_PLAYER_ID)
    				{
						GetPlayerName(id, giveplayer, sizeof(giveplayer));
						SpawnPlayer(id);
						GetPlayerName(playerid, sendername, sizeof(sendername));
 						format(string, sizeof(string), "You have been spawned by %s.", sendername);
						SendClientMessage(id, COLOR_DARKPINK, string);
						format(string, sizeof(string), "Done: You have /spawn-ed %s.", giveplayer);
						SendClientMessage(playerid, COLOR_DARKPINK, string);
						format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s has /spawn-ed %s.",sendername, giveplayer);
						ABroadCast(COLOR_WHITE,string,1);
						return 1;
					}
				}
                else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
   		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin/helper.");
	}
	return 1;
}
CMD:spawn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_respawn(playerid, params);
}
CMD:spawnhere(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
  		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			new id,sendername[30],giveplayer[30],string[256],Float:x,Float:y,Float:z;
			if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /spawnhere [name/playerid]");
			{
				if(IsPlayerConnected(id))
    			{
				    if(id != INVALID_PLAYER_ID)
    				{
    					GetPlayerPos(id, x, y, z);
						GetPlayerName(id, giveplayer, sizeof(giveplayer));
						SpawnPlayer(id);
						SetTimerEx("SetPlayerPosExx", 1000, false, "ufffdd", id, x, y, z, GetPlayerInterior(id), GetPlayerVirtualWorld(id));
						GetPlayerName(playerid, sendername, sizeof(sendername));
 						format(string, sizeof(string), "You have been spawned by %s.", sendername);
						SendClientMessage(id, COLOR_DARKPINK, string);
						format(string, sizeof(string), "Done: You have /spawn-ed %s.", giveplayer);
						SendClientMessage(playerid, COLOR_DARKPINK, string);
						format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s has /spawn-ed %s and restored his position.",sendername, giveplayer);
						ABroadCast(COLOR_WHITE,string,1);
						return 1;
					}
				}
                else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin/helper.");
	}
	return 1;
}
CMD:togarrests(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(togarrests[playerid] == 0)
	{
		togarrests[playerid] = 1;
		SendClientMessage(playerid, COLOR_DARKPINK, "Arrest disabled. You will not messages with players being arrested in the chat.");
	}
	else
	{
		togarrests[playerid] = 0;
		SendClientMessage(playerid, COLOR_DARKPINK, "You will now see arrests in the chat.");
	}
	return 1;
}
CMD:togl(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pLeader] < 1 && PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_LIGHTGREEN3,"You are not a leader/admin.");
	new string[128], name[30];
	GetPlayerName(playerid, name, sizeof(name));
	if(toglc[playerid] == 0)
	{
	    toglc[playerid] = 1;
	    format(string, sizeof(string), "[x] %s disabled leader chat.", name);
	    LeaderChat(COLOR_TEAL, string);
	}
	else if(toglc[playerid] == 1)
	{
	    toglc[playerid] = 0;
	    format(string, sizeof(string), "[v] %s enabled leader chat.", name);
	    LeaderChat(COLOR_TEAL, string);
	}
	return 1;
}
CMD:l(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
		{
			if(toglc[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You have disabled leader chat, use /togl to enable.");
			new sendername[30],mesajelc[250],string[250];
	       	GetPlayerName(playerid, sendername, sizeof(sendername));
	    	if(sscanf(params, "s[250]",mesajelc)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /l [message]");
	    	{
				if(PlayerInfo[playerid][pAdmin] >= 1)
				{
					format(string, sizeof(string), "(/l) Admin %s: %s",sendername, mesajelc);
				}
				else
				{
					if (PlayerInfo[playerid][pLeader] == 1)
					{
						format(string, sizeof(string), "(/l) Los Santos Police Department Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 2)
					{
						format(string, sizeof(string), "(/l) Federal Bureau of Investigation Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 3)
					{
						format(string, sizeof(string), "(/l) National Guard Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 4)
					{
						format(string, sizeof(string), "(/l) Los Aztecas Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 5)
					{
						format(string, sizeof(string), "(/l) Grove Street Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 6)
					{
						format(string, sizeof(string), "(/l) Los Vagos Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 8)
					{
						format(string, sizeof(string), "(/l) Las Venturas Police Department Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 9)
					{
						format(string, sizeof(string), "(/l) News Reporters Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 10)
					{
						format(string, sizeof(string), "(/l) Ballas Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 11)
					{
						format(string, sizeof(string), "(/l) Hitman Agency Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 12)
					{
						format(string, sizeof(string), "(/l) School Instructors LV Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 13)
					{
						format(string, sizeof(string), "(/l) Taxi Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 14)
					{
						format(string, sizeof(string), "(/l) Paramedic Department Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 15)
					{
						format(string, sizeof(string), "(/l) The Rifa Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 16)
					{
						format(string, sizeof(string), "(/l) San Fierro Police Department Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 17)
					{
						format(string, sizeof(string), "(/l) School Instructors LS Leader %s: %s",sendername, mesajelc);
					}
					else if (PlayerInfo[playerid][pLeader] == 18)
					{
						format(string, sizeof(string), "(/l) San Fierro Paramedic Leader %s: %s",sendername, mesajelc);
					}
				}
		    	if (PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
		    	{
		     		LeaderChat(COLOR_TEAL, string);
					new var100[300],resulttt[300],strr[300];
					format(strr, sizeof(strr),"%s: %s", sendername, mesajelc);
					mysql_real_escape_string(strr, resulttt);
					mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','l')", PlayerInfo[playerid][pSQLID], resulttt);
					mysql_tquery(SQL,var100,"","");
		    	}
            }
        }
		else return 1;
	}
	return 1;
}
CMD:fvrespawn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
   	{
      	if(PlayerInfo[playerid][pLeader] >= 1 ||PlayerInfo[playerid][pRank] >= 5)
      	{
			new str[128],sendername[30];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			SendClientMessage(playerid, COLOR_WHITE, "Faction vehicles respawned!");
      		if(PlayerInfo[playerid][pMember] == 1 && PlayerInfo[playerid][pRank] >=5)//PD
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 1)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
      		}
      		if(PlayerInfo[playerid][pMember] == 2 && PlayerInfo[playerid][pRank] >=5)//FBI
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
	            	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
	      		}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 2)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
      		}
      		if(PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] >=5)// NG
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 3)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
      		}
      		if(PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >=5)//Los Aztecas
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
           		 	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 4)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				if(InWar[4] == 1)
				{
					for(new x = 0; x < sizeof(VehicleInfo); x++)
					{
						if(VehicleInfo[x][vehGroup] == 4)
						{
							SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 1024);
						}
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
      		}
      		if(PlayerInfo[playerid][pMember] == 5 && PlayerInfo[playerid][pRank] >=5)//GP
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 5)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				if(InWar[5] == 1)
				{
					for(new x = 0; x < sizeof(VehicleInfo); x++)
					{
						if(VehicleInfo[x][vehGroup] == 5)
						{
							SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 1024);
						}
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
      		}
      		if(PlayerInfo[playerid][pMember] == 6 && PlayerInfo[playerid][pRank] >=5)//LSC
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
          	 	 	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 6)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				if(InWar[6] == 1)
				{
					for(new x = 0; x < sizeof(VehicleInfo); x++)
					{
						if(VehicleInfo[x][vehGroup] == 6)
						{
							SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 1024);
						}
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
      		}
      		if(PlayerInfo[playerid][pMember] == 8 && PlayerInfo[playerid][pRank] >=5)//LVPD
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 8)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
      		}
      		if(PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pRank] >=5)// NR
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 9)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
      		}
      		if(PlayerInfo[playerid][pMember] == 10 && PlayerInfo[playerid][pRank] >=5)// Ballas
     	 	{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
         	 	  	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 10)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				if(InWar[10] == 1)
				{
					for(new x = 0; x < sizeof(VehicleInfo); x++)
					{
						if(VehicleInfo[x][vehGroup] == 10)
						{
							SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 1024);
						}
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
      		}
      		if(PlayerInfo[playerid][pMember] == 11 && PlayerInfo[playerid][pRank] >=5)// HITMAN
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 11)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
      		}
      		if(PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pRank] >=5)// SI
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 12)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
      		}
      		if(PlayerInfo[playerid][pMember] == 13 && PlayerInfo[playerid][pRank] >=5)//taxi
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 13)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
      		}
      		if(PlayerInfo[playerid][pMember] == 14 && PlayerInfo[playerid][pRank] >=5)//fp
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 14)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
			}
  		    if(PlayerInfo[playerid][pMember] == 15 && PlayerInfo[playerid][pRank] >=5)//fp
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 15)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
      		}
      		if(PlayerInfo[playerid][pMember] == 16 && PlayerInfo[playerid][pRank] >=5)//fp
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 16)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
			}
  		    if(PlayerInfo[playerid][pMember] == 17 && PlayerInfo[playerid][pRank] >=5)//fp
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 17)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
      		}
            if(PlayerInfo[playerid][pMember] == 18 && PlayerInfo[playerid][pRank] >=5)//fp
      		{
				new bool:unwanted[MAX_VEHICLES];
				for(new player=0; player<MAX_PLAYERS; player++)
      			{
            		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      			}
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 18)
					{
						if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
						Gas[VehicleInfo[x][vehCarID]] = 100;
					}
				}
				format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
      		}
      	}
	  	else return 1;
	}
    return 1;
}
CMD:quitgroup(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
	    new query[256];
	    if(PlayerInfo[playerid][pLeader] > 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You can't use this command because you are a leader.");
	    if(PlayerInfo[playerid][pMember] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not a member of a group.");
        else if(PlayerInfo[playerid][pMember] >= 1 && PlayerInfo[playerid][pLeader] == 0)
		{
		    format(query, 256, "SELECT * FROM `users` WHERE `Member` = '%d' AND `Rank` = '7'", PlayerInfo[playerid][pMember]);
		    new Cache: masta = mysql_query(SQL, query);
			if(cache_get_row_count() >= 1)
			{
				ShowPlayerDialog(playerid,DIALOG_QUITGROUP,DIALOG_STYLE_MSGBOX,"Esti sigur?","Vrei sa parasesti factiunea curenta?\nVei primi 20 FP deoarece factiunea are lider.","Da","Nu");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_QUITGROUP,DIALOG_STYLE_MSGBOX,"Esti sigur?","Vrei sa parasesti factiunea curenta?\nNu vei primi FP deoarece factiunea nu are lider.","Da","Nu");
			}
			cache_delete(masta);
   		}
	}
	return 1;
}
CMD:warn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			new name[50],reason[64],reasone[64],string[256],sendername[30],id,warns;
			if(sscanf(params, "s[50]s[64]", name, reason)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /warn [full name] [reason]");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "SELECT * FROM `users` WHERE `name`='%s'", name);
			new Cache: ab = mysql_query(SQL, string);
			if(cache_get_row_count() == 1)
			{
				id = cache_get_field_content_int(0, "id");
				warns = cache_get_field_content_int(0, "Warnings");
			}
			else
			{
				cache_delete(ab);
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid player.");
				return 1;
			}
			cache_delete(ab);
			mysql_real_escape_string(reason, reasone);
			if(warns == 0)
			{
				mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Warnings` = '1', `WarnReason1` = '%s' WHERE `id` = '%d'", reasone, id);
				mysql_tquery(SQL, string, "", "");
			}
			else if(warns == 1)
			{
				mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Warnings` = '2', `WarnReason2` = '%s' WHERE `id` = '%d'", reasone, id);
				mysql_tquery(SQL, string, "", "");
			}
			else if(warns == 2)
			{
				mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Warnings` = '0', `WarnReason1` = '(null)', `WarnReason2` = '(null)' WHERE `id` = '%d'", id);
				mysql_tquery(SQL, string, "", "");
			}
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pSQLID] == id)
				{
					if(PlayerInfo[i][pLanguage] == 2) format(string, sizeof(string), "Ai primit un warn de la adminul %s, motiv: %s", sendername, reason);
					else format(string, sizeof(string), "You have received an warn from admin %s, reason: %s", sendername, reason);
					SendClientMessage(i, COLOR_RED2, string);
					KickEx(i);
				}
			}
			format(string, sizeof(string), "%s has been warned by %s, rason: %s", name, sendername, reason);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			new var100[256];
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','5','%s','%s','%s','%d')", id, PlayerInfo[playerid][pSQLID], reasone, name, sendername, gettime());
			mysql_tquery(SQL, var100, "", "");
			if(warns == 2)
			{
				new time = gettime() + (3*86400);
                mysql_format(SQL,string,sizeof(string),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', 'AdmBot', '3/3 warns', '0', 3, 0, 0, 1, %d)", name, time);
				mysql_tquery(SQL,string,"","");
				format(string, sizeof(string), "%s has been banned by AdmBot for 3 days, reason: 3/3 warns.", name);
				SendClientMessageToAll(COLOR_LIGHTRED, string);
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','0','2','%s','%s','%s','%d')", id, reasone, name, sendername, gettime());
				mysql_tquery(SQL, var100, "", "");
			}
			SendClientMessage(playerid, COLOR_DARKPINK, "WarnOff: Player warned!");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:mywarns(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
 		new string[128],query[256],warn1[64],warn2[64];
 		format(string, sizeof(string), "Warning status [%s, ID:%d]:", PlayerInfo[playerid][pNormalName], playerid);
 		SendClientMessage(playerid, COLOR_GREY, string);
 		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Ai %d/3 warn-uri. La 3/3 warns vei fi banat pentru 3 zile.", PlayerInfo[playerid][pWarns]);
 		else format(string, sizeof(string), "You have %d/3 warns. At 3/3 warns you will be banned for 3 days.", PlayerInfo[playerid][pWarns]);
 		SendClientMessage(playerid, COLOR_WHITE, string);
 		format(query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%d'", PlayerInfo[playerid][pSQLID]);
 		new Cache: ab = mysql_query(SQL, query);
 		cache_get_field_content(0, "WarnReason1", warn1);
 		cache_get_field_content(0, "WarnReason2", warn2);
 		cache_delete(ab);
 		SendClientMessage(playerid, COLOR_WHITE, warn1);
 		SendClientMessage(playerid, COLOR_WHITE, warn2);
 		SendClientMessage(playerid, COLOR_WHITE, "");
 	}
 	return 1;
}
CMD:checkwarns(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
 		if(PlayerInfo[playerid][pAdmin] > 0)
 		{
	 		new id,string[128],query[256],warn1[64],warn2[64];
	 		if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /checkwarns [name/playerid]");
	 		if(IsPlayerConnected(id))
	 		{
		 		format(string, sizeof(string), "Warning status [%s, ID:%d]:", PlayerInfo[id][pNormalName], id);
		 		SendClientMessage(playerid, COLOR_GREY, string);
		 		format(string, sizeof(string), "Acest jucator are %d warn-uri. La 3/3 warn-uri va fi banat 3 zile.", PlayerInfo[id][pWarns]);
		 		SendClientMessage(playerid, COLOR_WHITE, string);
		 		format(query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%d'", PlayerInfo[id][pSQLID]);
		 		new Cache: ab = mysql_query(SQL, query);
		 		cache_get_field_content(0, "WarnReason1", warn1);
		 		cache_get_field_content(0, "WarnReason2", warn2);
		 		cache_delete(ab);
		 		SendClientMessage(playerid, COLOR_WHITE, warn1);
		 		SendClientMessage(playerid, COLOR_WHITE, warn2);
		 		SendClientMessage(playerid, COLOR_WHITE, "");
		 	}
		 	else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	 	}
	 	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
 	}
 	return 1;
}
CMD:muteo(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
        if (PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
        new id[30],escape[30],cont,msg[80],msge[80],time,playeridd;
        if(sscanf(params, "s[25]is[80]", id,time,msg)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /muteo [name] [minutes] [reason]");
		mysql_real_escape_string(id, escape);
		cont = MySQLCheckAccount(escape);
        if(cont == 0) return SCM(playerid, COLOR_LIGHTGREEN3, "Invalid player.");
        if(time <= 0) return SCM(playerid, COLOR_LIGHTGREEN3, "Invalid mute time.");
		mysql_real_escape_string(msg, msge);
        new sendername[25],string[184];
        GetPlayerName(playerid,sendername,sizeof(sendername));
        format(string, sizeof(string), "Offline: ({FF6347}AdminStaff{FFFFFF}) %s was muted by %s for %d minutes, reason: %s", escape, sendername,time,msge);
		SendClientMessageToAll(COLOR_WHITE, string);
		new timem = time*60,
			str1[168];
		mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `Muted`='1',`MuteTime`='%d' WHERE `name`='%s'",timem,escape);
		mysql_tquery(SQL,str1,"","");
		format(str1, sizeof(str1), "SELECT `id` FROM users WHERE `name` = '%s'", escape);
		new Cache: ab = mysql_query(SQL,str1);
		if(cache_get_row_count() > 0)
		{
			playeridd = cache_get_field_content_int(0, "id");
		}
		cache_delete(ab);
		new var100[256];
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','7','%d','%s','%s','%s','%d')", playeridd,PlayerInfo[playerid][pSQLID],time,msge,escape,sendername,gettime());
		mysql_tquery(SQL,var100,"","");
		format(string, sizeof(string), "Ai primit mute de la adminul %s pentru %d minute, motiv: %s.", sendername,time,msge);
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",playeridd,string);
		mysql_tquery(SQL,var100,"","");
	}
	return 1;
}

CMD:gmx(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
	    if (PlayerInfo[playerid][pAdmin] >= 6)
		{
		    ShowPlayerDialog(playerid, DIALOG_GMX, DIALOG_STYLE_MSGBOX, "Server Restart", "Please confirm whether you are positive that you wish to initiate a server restart?", "Yes", "No");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:updaterr(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
	    if (PlayerInfo[playerid][pAdmin] >= 6)
		{
			ShowPlayerDialog(playerid, DIALOG_UPDATERR, DIALOG_STYLE_MSGBOX, "Update Server Restart", "Please confirm whether you are positive that you wish to initiate a server restart after payday?", "Yes", "No");
		}
	}
	return 1;
}
CMD:romana(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    PlayerInfo[playerid][pLanguage] = 2;
    new str[356];
	mysql_format(SQL,str,356,"UPDATE users SET `Language`='2' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
	mysql_tquery(SQL,str,"","");
    SendClientMessage(playerid, COLOR_WHITE, "Limba setata: romana.");
	SendClientMessage(playerid, COLOR_WHITE, "[EN] To set the language to English, use /en.");
    return 1;
}
CMD:english(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    PlayerInfo[playerid][pLanguage] = 1;
    new str[356];
	mysql_format(SQL,str,356,"UPDATE users SET `Language`='1' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
	mysql_tquery(SQL,str,"","");
    SendClientMessage(playerid, COLOR_WHITE, "Language set to english.");
	SendClientMessage(playerid, COLOR_WHITE, "[RO] Pentru a seta limba romana foloseste /ro.");
    return 1;
}
CMD:ro(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_romana(playerid, params);
}
CMD:en(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_english(playerid, params);
}
CMD:fuelcars(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 4)
	    {
			new gasvehicle,sendername[30],string[256];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(sscanf(params, "i", gasvehicle)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fuelcars [amount]");
		   	for(new c=0;c<MAX_VEHICLES;c++)
			{
				Gas[c] = gasvehicle;
			}
			format(string, sizeof(string), "{FFFFCC}All cars filled with %d procent fuel.",gasvehicle);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s has refuelled all vehicles with %d liters.",sendername,gasvehicle);
			ABroadCast(COLOR_WHITE,string,1);
	    }
	    else
	    {
	        SendClientMessage(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	        return 1;
	    }
	}
	return 1;
}
CMD:spawnweapon(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
	   	if (PlayerInfo[playerid][pAdmin] >= 3)
		{
			new id,gun,ammo,string[256],sendername[30],giveplayer[30],wname[30];
			if(sscanf(params, "uii",id,gun,ammo)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /spawnweapon [name/playerid] [gun id] [ammo]");
	  	    if(gun < 1||gun > 46||gun==19||gun==20||gun==21||gun==45) return SCM(playerid,COLOR_WHITE,"Invalid weapond ID.");
		    if(ammo <1||ammo > 1000) return SCM(playerid,COLOR_WHITE,"Invalid ammo (1-1000).");
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					GivePlayerWeaponEx(id, gun, ammo);
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetWeaponName(gun, wname, sizeof(wname));
					format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) Admin %s useed /spawnwapon to give %s a %s.", sendername, giveplayer, wname);
            		ABroadCast(COLOR_WHITE,string,1);
					if(GetPlayerState(id) == PLAYER_STATE_PASSENGER)
					{
				        new gun2,tmp;
				        GetPlayerWeaponData(id,5,gun2,tmp);
				        #pragma unused tmp
				        if(gun2)SetPlayerArmedWeapon(id,gun2);
				        else SetPlayerArmedWeapon(id,0);
					}
				}
			}
		    else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:healall(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new sendername[25],string[256];
    GetPlayerName(playerid, sendername, sizeof(sendername));
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pAdmin] >= 3)
        {
    		format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s has given to all players full hp.",sendername);
            ABroadCast(COLOR_WHITE,string,1);
            foreach(new i : Player)
			{
				SetPlayerHealthEx(i, 100);
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:setsvar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return 0;
	if(PlayerInfo[playerid][pAdmin] < 6) return 0;
	new string[128],query[256],svar[32],value,id;
	if(sscanf(params, "s[32]d", svar, value)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /setsvar [sVar] [value]");
	format(query, sizeof(query), "SELECT * FROM `svars` WHERE `SvarName`='%s'", svar);
	new Cache: xd = mysql_query(SQL, query);
	if(cache_get_row_count() > 0)
	{
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			id = cache_get_field_content_int(i, "id");
		}
		mysql_format(SQL, query, sizeof(query), "UPDATE `svars` SET `SvarValue`='%d' WHERE `id`='%d'", value, id);
		mysql_tquery(SQL, query, "", "");
		format(string, sizeof(string), "sVar %s updated to %d.", svar, value);
		ABroadCast(COLOR_ADMCOMMANDS, string, 6);
		format(string, sizeof(string), "sVar %s set.", svar);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		mysql_tquery(SQL, "SELECT * FROM `svars`", "LoadSVars", "");
	}
	else SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Unknown sVar.");
	cache_delete(xd);
	return 1;
}
CMD:svar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return 0;
	if(PlayerInfo[playerid][pAdmin] < 6) return 0;
	new string[128],svar[32],svarvalue;
	SendClientMessage(playerid, COLOR_WHITE, "sVars:");
	new Cache: xd = mysql_query(SQL, "SELECT * FROM `svars`");
	if(cache_get_row_count() > 0)
	{
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			svarvalue = cache_get_field_content_int(i, "SvarValue");
			cache_get_field_content(i, "SvarName", svar);
			format(string, sizeof(string), "%s - value: %d", svar, svarvalue);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	else SendClientMessage(playerid, COLOR_WHITE, "No sVars active.");
	cache_delete(xd);
	return 1;
}
CMD:set(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
 		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
			new id, item[20], amount, string[128], str[256];
			if(sscanf(params, "us[20]d", id, item, amount))
			{
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /set [playerid] [item] [amount]");
				SendClientMessage(playerid, COLOR_GREY, "Items: Health, Armour, Money, BankMoney, Skin, Interior, VirtualWorld, Job, RP, TemporarSkin");
				SendClientMessage(playerid, COLOR_GREY, "Phone, Materials, Group, GroupRank, Age, Gender, Premium, FP, PremiumPoints, Drugs, Skin, RB");
				return 1;
			}
			if(IsPlayerConnected(id))
			{
				if(id != INVALID_PLAYER_ID)
			    {
					if(strcmp(item,"health",true) == 0)
					{
						SetPlayerHealthEx(id, amount);
						format(string, sizeof(string), "%s[user:%d]'s health was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your health to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"armour",true) == 0)
					{
						SetPlayerArmourEx(id, amount);
						format(string, sizeof(string), "%s[user:%d]'s armour was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your armour to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"money",true) == 0)
					{
						if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
						ResetPlayerCash(id);
						GivePlayerCash(id, amount);
						Update(id, pCashx);
						format(string, sizeof(string), "%s[user:%d]'s money was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your money to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"bankmoney",true) == 0)
					{
						if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
						PlayerInfo[id][pAccount] = amount;
						Update(id, pBank);
						format(string, sizeof(string), "%s[user:%d]'s bank money was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your bank money to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"hours",true) == 0)
					{
						if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
						PlayerInfo[id][pConnectTime] = amount;
						Update(id, pConnectTimex);
						format(string, sizeof(string), "%s[user:%d]'s playing hours was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your playing hours to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"skin",true) == 0)
					{
						if(amount < 0 || amount > 311) return SendClientMessage(playerid, COLOR_GREY, "Skin id must between 0 and 311.");
						PlayerInfo[id][pModel] = amount;
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Model`='%d' WHERE `name`='%s'", PlayerInfo[id][pModel], PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
						SetPlayerSkin(id, PlayerInfo[id][pModel]);
						format(string, sizeof(string), "%s[user:%d]'s skin was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your skin to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"temporarskin",true) == 0)
					{
						if(amount < 0 || amount > 311) return SendClientMessage(playerid, COLOR_GREY, "Skin id must between 0 and 311.");
						SetPlayerSkin(id, amount);
						format(string, sizeof(string), "%s[user:%d]'s temporar skin was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your temporar skin to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"int",true) == 0)
					{
						SetPlayerInterior(id, amount);
						PlayerInfo[id][pInt] = amount;
						format(string, sizeof(string), "%s[user:%d]'s interior was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your interior to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"vw",true) == 0)
					{
						SetPlayerVirtualWorld(id, amount);
						format(string, sizeof(string), "%s[user:%d]'s virtual world was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your virtual world to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"job",true) == 0)
					{
						PlayerInfo[id][pJob] = amount;
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='%d' WHERE `name`='%s'", PlayerInfo[id][pJob], PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
						format(string, sizeof(string), "%s[user:%d]'s job was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your job to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"phone",true) == 0)
					{
						if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
						format(str, sizeof(str), "SELECT * FROM `users` WHERE `PhoneNr` = '%d' ORDER BY `id` ASC", amount);
						new Cache: res = mysql_query(SQL, str);
						if(cache_get_row_count() != 0)
						{
							SendClientMessage(playerid, COLOR_GREY, "That phone number is used by another player.");
							cache_delete(res);
							return 1;
						}
						else
						{
							if(amount < 1000 || amount > 9999)
							{
								SendClientMessage(playerid, COLOR_GREY, "Phone number must be between 1000 and 9999.");
								cache_delete(res);
								return 1;
							}
							PlayerInfo[id][pPhone] = 1;
							PlayerInfo[id][pPnumber] = amount;
							mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Phone`='1',`PhoneNr`='%d' WHERE `name`='%s'", PlayerInfo[id][pPnumber], PlayerInfo[id][pNormalName]);
							mysql_tquery(SQL,str,"","");
						}
						cache_delete(res);
						format(string, sizeof(string), "%s[user:%d]'s phone number was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your phone number to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"materials",true) == 0)
					{
						if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 5+.");
						PlayerInfo[id][pMats] = amount;
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Materials`='%d' WHERE `name`='%s'", PlayerInfo[id][pMats], PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
						format(string, sizeof(string), "%s[user:%d]'s materials was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your materials to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"rb",true) == 0)
					{
						if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 5+.");
						PlayerInfo[id][pRob] = amount;
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Rob`='%d' WHERE `name`='%s'", PlayerInfo[id][pMats], PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
						format(string, sizeof(string), "%s[user:%d]'s Rob Point's was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your Rob point's to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"drugs",true) == 0)
					{
						if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 5+.");
						PlayerInfo[id][pDrugs] = amount;
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Drugs`='%d' WHERE `name`='%s'", PlayerInfo[id][pMats], PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
						format(string, sizeof(string), "%s[user:%d]'s Drugs was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your drugs to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"group",true) == 0)
					{
						if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 5+.");
						if(amount < 0 || amount > 14) return SendClientMessage(playerid, COLOR_GREY, "Group id must be between 1 and 14.");
						PlayerInfo[id][pMember] = amount;
						if(amount > 0) PlayerInfo[id][pRank] = 1;
						else PlayerInfo[id][pRank] = 0;
						PlayerInfo[id][pModel] = 250;
						if(amount == 0)
						{
						    gTeam[id] = 3;
					    	PlayerInfo[id][pTeam] = 3;
						}
						else if(amount == 1 || amount == 2 || amount == 3 || amount == 7 || amount == 8)
						{
						    gTeam[id] = 2;
					    	PlayerInfo[id][pTeam] = 2;
						}
						else if(amount == 4 || amount == 5 || amount== 6 || amount == 10)
						{
						    gTeam[id] = 5;
					    	PlayerInfo[id][pTeam] = 5;
						}
						else if(amount == 9 || amount == 12 || amount == 13 || amount == 14)
						{
						    gTeam[id] = 4;
					    	PlayerInfo[id][pTeam] = 4;
						}
						else if(amount == 11)
						{
						    gTeam[id] = 11;
					    	PlayerInfo[id][pTeam] = 11;
						}
						SetPlayerSkin(id, PlayerInfo[id][pModel]);
						if(amount > 0) PlayerInfo[id][pFactionJoin] = gettime();
						else PlayerInfo[id][pFactionJoin] = 0;
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Team`='%d',`Member`='%d',`Rank`='%d',`Model`='%d',`FactionJoin`='%d' WHERE `name`='%s'", PlayerInfo[id][pTeam], PlayerInfo[id][pMember], PlayerInfo[id][pRank], PlayerInfo[id][pModel], PlayerInfo[id][pFactionJoin], PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
						format(string, sizeof(string), "%s[user:%d]'s group was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	SetPlayerToTeamColor(id);
		            	format(string, sizeof(string), "* Admin %s has set your group to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"grouprank",true) == 0)
					{
						if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 5+.");
						if(PlayerInfo[id][pMember] < 1) return SendClientMessage(playerid, COLOR_GREY, "This player is not in a group.");
						if(amount < 1 || amount > 7) return SendClientMessage(playerid, COLOR_GREY, "Rank must be between 1 and 7.");
						PlayerInfo[id][pRank] = amount;
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Rank`='%d' WHERE `name`='%s'", PlayerInfo[id][pRank], PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
						format(string, sizeof(string), "%s[user:%d]'s group rank was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your group rank to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"age",true) == 0)
					{
						if(amount < 1) return SendClientMessage(playerid, COLOR_GREY, "Age must be more than 0.");
						PlayerInfo[id][pAge] = amount;
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Age`='%d' WHERE `name`='%s'", PlayerInfo[id][pAge], PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
						format(string, sizeof(string), "%s[user:%d]'s age was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your age to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"gender",true) == 0)
					{
						if(amount < 1 || amount > 2) return SendClientMessage(playerid, COLOR_GREY, "Gender must be 1 (male) or 2 (female).");
						PlayerInfo[id][pSex] = amount;
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Sex`='%d' WHERE `name`='%s'", PlayerInfo[id][pSex], PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
						format(string, sizeof(string), "%s[user:%d]'s gender was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your gender to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"level",true) == 0)
					{
						if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
						if(amount < 1) return SendClientMessage(playerid, COLOR_GREY, "Level must be more than 0.");
						PlayerInfo[id][pLevel] = amount;
						Update(id, pLevelx);
						SetPlayerScore(id, PlayerInfo[id][pLevel]);
						format(string, sizeof(string), "%s[user:%d]'s level was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your level to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"rp",true) == 0)
					{
						if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
						if(amount < 1) return SendClientMessage(playerid, COLOR_GREY, "Respect points must be more than 0.");
						PlayerInfo[id][pExp] = amount;
						Update(id, pRP);
						format(string, sizeof(string), "%s[user:%d]'s respect points were set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your respect points to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"premium",true) == 0)
					{
						if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
						if(amount < 0 || amount > 2) return SendClientMessage(playerid, COLOR_GREY, "Premium must be 0 (Normal), 1 (Premium) or 2 (VIP).");
						PlayerInfo[id][pPremiumAccount] = amount;
						if(amount > 0)
						{
							if(PlayerInfo[id][pCarSlots] <= 8)
							{
								PlayerInfo[id][pCarSlots] += 2;
							}
							if(PlayerInfo[id][pCarSlots] == 9)
							{
								PlayerInfo[id][pCarSlots] += 1;
							}
						}
						mysql_format(SQL, string, sizeof(string), "UPDATE users SET `Premium`='%d',`CarSlots`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pPremiumAccount], PlayerInfo[id][pCarSlots], PlayerInfo[id][pNormalName]);
    					mysql_tquery(SQL,string,"","");
						format(string, sizeof(string), "%s[user:%d]'s premium was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your premium to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"fp",true) == 0)
					{
						if(amount < 0 || amount > 200) return SendClientMessage(playerid, COLOR_GREY, "Faction punish must be between 0 and 200.");
						PlayerInfo[id][pFpunish] = amount;
						Update(id, pFpunishx);
						format(string, sizeof(string), "%s[user:%d]'s faction punish was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	format(string, sizeof(string), "* Admin %s has set your faction punish to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
					else if(strcmp(item,"premiumpoints",true) == 0)
					{
						if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
						if(amount < 0) return 1;
						PlayerInfo[id][pPremiumPoints] = amount;
						Update(id, pPremiumPointsx);
						format(string, sizeof(string), "%s[user:%d]'s premium points were set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
		            	ABroadCast(COLOR_ADMCOMMANDS, string, 6);
		            	Log(PlayerInfo[playerid][pSQLID], string, "set");
		            	mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET TotalPP=TotalPP+%d WHERE `name` = '%s'", amount, PlayerInfo[id][pNormalName]);
    					mysql_tquery(SQL,string,"","");
    					format(string, sizeof(string), "* Admin %s has set your premium points to %d.", PlayerInfo[playerid][pNormalName], amount);
		            	SendClientMessage(id, COLOR_RED2, string);
					}
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return 1;
 	}
 	return 1;
}
CMD:stats(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pLevel] < 1) return SCM(playerid,COLOR_WHITE,"Command currently inaccessible.");
	if(IsPlayerConnected(playerid))
	{
		ShowStats(playerid,playerid);
	}
	return 1;
}
CMD:colors(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
	    new string1[500], string2[500], string3[500], string4[500], string5[500], string6[500], string7[500], string8[500], string9[500], string10[500], string11[500], string12[500], string13[500], string14[500], string15[500], string16[500], string17[5000];
	    format(string1, sizeof(string1), "{FFFFFF}Normal colors:");
 		format(string2, sizeof(string2), "{000000}000 {F5F5F5}001 {2A77A1}002 {840410}003 {263739}004 {86446E}005 {D78E10}006 {4C75B7}007 {BDBEC6}008 {5E7072}009 {46597A}010 {656A79}011 {5D7E8D}012 {58595A}013 {D6DAD6}014 {9CA1A3}015 {335F3F}016 {730E1A}017 {7B0A2A}018 {9F9D94}019");
		format(string3, sizeof(string3), "{3B4E78}020 {732E3E}021 {691E3B}022 {96918C}023 {515459}024 {3F3E45}025 {A5A9A7}026 {635C5A}027 {3D4A68}028 {979592}029 {421F21}030 {5F272B}031 {8494AB}032 {767B7C}033 {646464}034 {5A5752}035 {252527}036 {2D3A35}037 {93A396}038 {6D7A88}039");
 		format(string4, sizeof(string4), "{221918}040 {6F675F}041 {7C1C2A}042 {5F0A15}043 {193826}044 {5D1B20}045 {9D9872}046 {7A7560}047 {989586}048 {ADB0B0}049 {848988}050 {304F45}051 {4D6268}052 {162248}053 {272F4B}054 {7D6256}055 {9EA4AB}056 {9C8D71}057 {6D1822}058 {4E6881}059");
        format(string5, sizeof(string5), "{9C9C98}060 {917347}061 {661C26}062 {949D9F}063 {A4A7A5}064 {8E8C46}065 {341A1E}066 {6A7A8C}067 {AAAD8E}068 {AB988F}069 {851F2E}070 {6F8297}071 {585853}072 {9AA790}073 {601A23}074 {20202C}075 {A4A096}076 {AA9D84}077 {78222B}078 {0E316D}079");
        format(string6, sizeof(string6), "{722A3F}080 {7B715E}081 {741D28}082 {1E2E32}083 {4D322F}084 {7C1B44}085 {2E5B20}086 {395A83}087 {6D2837}088 {A7A28F}089 {AFB1B1}090 {364155}091 {6D6C6E}092 {0F6A89}093 {204B6B}094 {2B3E57}095 {9B9F9D}096 {6C8495}097 {4D8495}098 {AE9B7F}099");
        format(string7, sizeof(string7), "{406C8F}100 {1F253B}101 {AB9276}102 {134573}103 {96816C}104 {64686A}105 {105082}106 {A19983}107 {385694}108 {525661}109 {7F6956}110 {8C929A}111 {596E87}112 {473532}113 {44624F}114 {730A27}115 {223457}116 {640D1B}117 {A3ADC6}118 {695853}119");
        format(string8, sizeof(string8), "{9B8B80}120 {620B1C}121 {5B5D5E}122 {624428}123 {731827}124 {1B376D}125 {EC6AAE}126 {000000}127");
        format(string9, sizeof(string9), "{FFFFFF}Hidden colors:");
        format(string10, sizeof(string10), "{177517}128 {210606}129 {125478}130 {452A0D}131 {571E1E}132 {010701}133 {25225A}134 {2C89AA}135 {8A4DBD}136 {35963A}137 {B7B7B7}138 {464C8D}139 {84888C}140 {817867}141 {817A26}142 {6A506F}143 {583E6F}144 {8CB972}145 {824F78}146 {6D276A}147");
        format(string11, sizeof(string11), "{1E1D13}148 {1E1306}149 {1F2518}150 {2C4531}151 {1E4C99}152 {2E5F43}153 {1E9948}154 {1E9999}155 {999976}156 {7C8499}157 {992E1E}158 {2C1E08}159 {142407}160 {993E4D}161 {1E4C99}162 {198181}163 {1A292A}164 {16616F}165 {1B6687}166 {6C3F99}167");
        format(string12, sizeof(string12), "{481A0E}168 {7A7399}169 {746D99}170 {53387E}171 {222407}172 {3E190C}173 {46210E}174 {991E1E}175 {8D4C8D}176 {805B80}177 {7B3E7E}178 {3C1737}179 {733517}180 {781818}181 {83341A}182 {8E2F1C}183 {7E3E53}184 {7C6D7C}185 {020C02}186 {072407}187");
        format(string13, sizeof(string13), "{163012}188 {16301B}189 {642B4F}190 {368452}191 {999590}192 {818D96}193 {99991E}194 {7F994C}195 {839292}196 {788222}197 {2B3C99}198 {3A3A0B}199 {8A794E}200 {0E1F49}201 {15371C}202 {15273A}203 {375775}204 {060820}205 {071326}206 {20394B}207");
        format(string14, sizeof(string14), "{2C5089}208 {15426C}209 {103250}210 {241663}211 {692015}212 {8C8D94}213 {516013}214 {090F02}215 {8C573A}216 {52888E}217 {995C52}218 {99581E}219 {993A63}220 {998F4E}221 {99311E}222 {0D1842}223 {521E1E}224 {42420D}225 {4C991E}226 {082A1D}227");
        format(string15, sizeof(string15), "{96821D}228 {197F19}229 {3B141F}230 {745217}231 {893F8D}232 {7E1A6C}233 {0B370B}234 {27450D}235 {071F24}236 {784573}237 {8A653A}238 {732617}239 {319490}240 {56941D}241 {59163D}242 {1B8A2F}243 {38160B}244 {041804}245 {355D8E}246 {2E3F5B}247");
        format(string16, sizeof(string16), "{561A28}248 {4E0E27}249 {706C67}250 {3B3E42}251 {2E2D33}252 {7B7E7D}253 {4A4442}254 {28344E}255");
		format(string17, sizeof(string17), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s",string1,string2,string3,string4, string5, string6, string7, string8, string9, string10, string11, string12, string13, string14, string15, string16);
		ShowPlayerDialog(playerid, DIALOG_COLORID, DIALOG_STYLE_MSGBOX, "Vehicle Colors list - /carcolor", string17, "Close","");
	}
	return 1;
}
CMD:n(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new question[128],string[256],sendername[30],giveplayer[30],count,mesajx[200],var100[256];
		if(sscanf(params, "s[128]", question)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /n [question]");
		if(PlayerInfo[playerid][pAdmin] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are an admin/helper.");
		if(PlayerInfo[playerid][pHelper] == 0 || PlayerInfo[playerid][pHelper] == 0)
		{
			if(PlayerInfo[playerid][pNewbieTimeout] == 0)
			{
      			if(PlayerInfo[playerid][pNMuted] == 0)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(PlayerInfo[playerid][pNewbieEnabled] == 0)
					{
						PlayerInfo[playerid][pNewbieEnabled] = 1;
						SS(playerid, COLOR_DARKPINK, "Chat de ajutor activat.", "Help chat enabled.");
					}
					format(string, sizeof(string), "* Newbie %s: %s", sendername, question);
					SendClientMessage(playerid, COLOR_NEWBIE, string);
					mysql_real_escape_string(string, mesajx);
					foreach(new i : Player)
					{
						if(strcmp(PlayerInfo[i][pNewbieQuestion], "NULL", true)) count++;
					}
					if(count < 30)
					{
						format(PlayerInfo[playerid][pNewbieQuestion], 256, question);
						PlayerInfo[playerid][pNewbieTimeout] = 120;
						PlayerInfo[playerid][pFirstAnswer] = 1;
					 	mysql_format(SQL, var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','n')", PlayerInfo[playerid][pSQLID], mesajx);
						mysql_tquery(SQL, var100, "", "");
					}
					else
					{
						SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Sunt prea multe intrebari ce asteapta raspuns de la helperii serverului. Nu poti pune o intrebare acum.");
						SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Incearca mai tarziu...");
						return 1;
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "You are muted from the newbie chat.");
			}
			else
			{
			    format(string, sizeof(string), "Poti folosi /n peste %d secunde.", PlayerInfo[playerid][pNewbieTimeout]);
                SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		else
		{
			if(HaveNewbie[playerid] != -1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(HaveNewbie[playerid], giveplayer, sizeof(giveplayer));
				format(string, sizeof(string),"Raspuns trimis: %s", question);
				SendSplitMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string),"* Helper %s: %s", sendername, question);
				SendSplitMessage(HaveNewbie[playerid], COLOR_YELLOW, string);
				if(PlayerInfo[HaveNewbie[playerid]][pFirstAnswer] == 1)
				{
					format(string, sizeof(string),"* Newbie %s: %s", giveplayer, PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion]);
					foreach(new i : Player)
					{
						if(i != playerid && i != HaveNewbie[playerid])
						{
							if(PlayerInfo[i][pNewbieEnabled] == 1)
							{
								SendSplitMessage(i, COLOR_NEWBIE, string);
							}
						}
					}
					new escape[256],escape2[256];
					mysql_real_escape_string(question, escape);
					mysql_real_escape_string(PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion], escape2);
					mysql_format(SQL, string, sizeof(string),"INSERT INTO newbie_logs (`playerid`,`adminid`,`question`,`answer`,`time`) VALUES ('%d','%d','%s','%s','%d')",PlayerInfo[HaveNewbie[playerid]][pSQLID],PlayerInfo[playerid][pSQLID],escape2,escape,gettime());
					mysql_tquery(SQL, string, "", "");
					format(PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion], 256, "NULL");
					PlayerInfo[HaveNewbie[playerid]][pFirstAnswer] = 0;
				}
				format(string, sizeof(string),"* Helper %s: @%s, %s", sendername, giveplayer, question);
				mysql_real_escape_string(string, mesajx);
				foreach(new i : Player)
				{
					if(i != playerid && i != HaveNewbie[playerid])
					{
						if(PlayerInfo[i][pNewbieEnabled] == 1)
						{
							SendSplitMessage(i, COLOR_NEWBIE, string);
						}
					}
				}
				timernewbie[playerid] = 30;
				HelperTimer[playerid] = 0;
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','n')", PlayerInfo[playerid][pSQLID], mesajx);
				mysql_tquery(SQL, var100, "", "");
			}
			else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are an admin/helper.");
		}
	}
	return 1;
}
CMD:newbie(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_n(playerid, params);
}
CMD:ndelete(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new question[128],string[256],sendername[30],giveplayer[30];
		if(sscanf(params, "s[128]", question)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /ndelete [message]");
		if(PlayerInfo[playerid][pHelper] > 0)
		{
			if(HaveNewbie[playerid] != -1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(HaveNewbie[playerid], giveplayer, sizeof(giveplayer));
				format(string, sizeof(string),"(/ndelete) Raspuns trimis: %s", question);
				SendSplitMessage(playerid, COLOR_GREY, string);
				format(string, sizeof(string),"* Helper %s: %s", sendername, question);
				SendSplitMessage(HaveNewbie[playerid], COLOR_YELLOW, string);
				format(string, sizeof(string),"(/ndelete) * Helper %s: %s", sendername, question);
				if(PlayerInfo[HaveNewbie[playerid]][pFirstAnswer] == 1)
				{
					format(string, sizeof(string),"* Newbie %s: %s", giveplayer, PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion]);
					foreach(new i : Player)
					{
						if(i != playerid && i != HaveNewbie[playerid])
						{
							if(PlayerInfo[i][pNewbieEnabled] == 1)
							{
								if(PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pHelper] > 0)
								{
									SendSplitMessage(i, COLOR_NEWBIE, string);
								}
							}
						}
					}
					new escape[128],escape2[128];
					mysql_real_escape_string(question, escape);
					mysql_real_escape_string(PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion], escape2);
					mysql_format(SQL, string, sizeof(string),"INSERT INTO newbie_logs (`playerid`,`adminid`,`question`,`answer`,`time`) VALUES ('%d','%d','%s','%s','%d')",PlayerInfo[HaveNewbie[playerid]][pSQLID],PlayerInfo[playerid][pSQLID],escape2,escape,gettime());
					mysql_tquery(SQL, string, "", "");
					format(PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion], 256, "NULL");
					PlayerInfo[HaveNewbie[playerid]][pFirstAnswer] = 0;
				}
				format(string, sizeof(string),"(/ndelete) * Helper %s: @%s, %s", sendername, giveplayer, question);
				foreach(new i : Player)
				{
					if(i != playerid && i != HaveNewbie[playerid])
					{
						if(PlayerInfo[i][pNewbieEnabled] == 1)
						{
							if(PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pHelper] > 0)
							{
								SendSplitMessage(i, COLOR_NEWBIE, string);
							}
						}
					}
				}
				timernewbie[playerid] = 30;
				HelperTimer[playerid] = 0;
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "You don't have an active question.");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You are not an helper.");
	}
	return 1;
}
CMD:nd(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_ndelete(playerid, params);
}
CMD:nqueue(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pHelper] > 0 || PlayerInfo[playerid][pAdmin] > 0)
		{
			new string[128],questions,helpers;
			foreach(new i : Player)
			{
				if(strcmp(PlayerInfo[i][pNewbieQuestion], "NULL", true)) questions++;
				if(PlayerInfo[i][pHelper] > 0 && HelperDuty[i] == 1) helpers++;
			}
			format(string, sizeof(string),"Questions: %d / Helpers: %d",questions,helpers);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
	}
	return 1;
}
CMD:nreport(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pHelper] > 0)
		{
			if(HaveNewbie[playerid] != -1)
			{
				if(PlayerInfo[HaveNewbie[playerid]][pFirstAnswer] == 1)
				{
					new string[256],sendername[30],giveplayer[30];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(HaveNewbie[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string),"* Helper %s marked %s's[%d] question as a report: %s", sendername, giveplayer, HaveNewbie[playerid], PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion]);
					HLChat(COLOR_GREY, string);
					ABroadCast(COLOR_GREY, string, 1);
					format(string, sizeof(string), "Report from %s [%d, level %d]: %s", giveplayer, HaveNewbie[playerid], PlayerInfo[HaveNewbie[playerid]][pLevel], PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion]);
					format(reporttext[HaveNewbie[playerid]], 128, string);
					HLChat(COLOR_REPORT, string);
					ABroadCast(COLOR_REPORT, string, 1);
					ReportTime[HaveNewbie[playerid]] = 1;
					timerreport[HaveNewbie[playerid]] = SetTimerEx("Reportul", 60000, 0, "%d", HaveNewbie[playerid]);
					format(PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion], 128, "NULL");
					HaveNewbie[playerid] = -1;
					HelperTimer[playerid] = 0;
				}
				else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You can't /nreport an answered question.");
			}
			else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have a question.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not a helper.");
	}
	return 1;
}
CMD:nskip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pHelper] > 0)
		{
			if(HaveNewbie[playerid] != -1)
			{
				if(PlayerInfo[HaveNewbie[playerid]][pFirstAnswer] == 1)
				{
					timernewbie[playerid] = 1;
					SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Question skipped. If there are not other question, you will receive the same question again.");
				}
				else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You can't /nskip an answered question.");
			}
			else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have an active question.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not a helper.");
	}
	return 1;
}
CMD:nnext(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pHelper] > 0)
		{
			if(HelperDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty.");
			new questions,helpers,id=-1,have,string[128],name[30];
			foreach(new i : Player)
			{
				if(strcmp(PlayerInfo[i][pNewbieQuestion], "NULL", true)) questions++;
				if(PlayerInfo[i][pHelper] > 0 && HelperDuty[i] == 1) helpers++;
			}
			if(questions > helpers)
			{
				if(HaveNewbie[playerid] != -1 && PlayerInfo[HaveNewbie[playerid]][pFirstAnswer] == 0 || HaveNewbie[playerid] == -1)
				{
					foreach(new i : Player)
					{
						if(strcmp(PlayerInfo[i][pNewbieQuestion], "NULL", true))
						{
							foreach(new x : Player)
							{
								if(HaveNewbie[x] == i) have = 1;
							}
							if(have == 0)
							{
								id = i;
								break;
							}
						}
					}
					if(id != -1)
					{
						HaveNewbie[playerid] = id;
						HelperTimer[playerid] = 120;
						GetPlayerName(id, name, sizeof(name));
						format(string, sizeof(string), "{FF6200}** {FFFF00}Question from %s (%d, level %d) {FF6200}**", name, id, PlayerInfo[id][pLevel]);
						SendClientMessage(playerid, COLOR_YELLOW, string);
						SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[id][pNewbieQuestion]);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Nu sunt intrebari active pe /n.");
				}
				else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Trebuie sa raspunzi la intrebarea actuala inainte de a lua alta intrebare.");
			}
			else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Poti folosi /nnext doar daca sunt mai multe intrebari decat helperi.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not a helper.");
	}
	return 1;
}
CMD:report(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pReportMuted] > 0)
		{
			new string[128];
			format(string, sizeof(string),"You are muted on /report for %d minutes.", PlayerInfo[playerid][pReportMuted]);
			SendClientMessage(playerid, COLOR_GREY, string);
			return 1;
		}
	    ShowPlayerDialog(playerid, DIALOG_REPORT1, DIALOG_STYLE_LIST, "Report", "Contul meu este spart sau blocat\nRaporteaza DM\nRaporteaza un cheater\nIntrebari despre donatii\nSunt blocat/Cad prin mapa\nVreau sa fac o afacere si am nevoie de ajutor\nAlta problema", "OK", "Inchide");
	}
	return 1;
}
CMD:reports(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new string[128],cheaters;
		if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, "______REPORTS______");
		foreach(new i : Player)
		{
			if(strcmp(reporttext[i], "NULL", true) && reportcheater[i] == -1)
			{
				SendClientMessage(playerid, COLOR_DBLUE, reporttext[i]);
			}
			if(reportcheater[i] != -1)
			{
				cheaters++;
			}
		}
		format(string,sizeof(string),"cheaters: %d",cheaters);
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
 	}
	return 1;
}
CMD:cheaters(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, "> Cheaters:");
		foreach(new i : Player)
		{
			if(reportcheater[i] != -1)
			{
				SendClientMessage(playerid, COLOR_DBLUE, reporttext[i]);
			}
		}
	}
	return 1;
}
CMD:dr(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new string[128],id,sendername[30],string2[256];
			if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dr [name/playerid]");
			if(IsPlayerConnected(id))
			{
				if(!strcmp(reporttext[id], "NULL", true) && reportcheater[id] == -1) return SendClientMessage(playerid, COLOR_WHITE, "This player don't have an active report.");
				ReportTime[id] = 0;
				reportcheater[id] = -1;
				reportreason[id] = 0;
				if(playerreported[id] != -1)
				{
					reportreason[playerreported[id]] = 0;
				}
				playerreported[id] = -1;
				KillTimer(timerreport[id]);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string),"%s deleted %s",sendername,reporttext[id]);
				ABroadCast(COLOR_GREY,string,1);
				new escape[128];
				mysql_real_escape_string(reporttext[id], escape);
				mysql_format(SQL, string2, sizeof(string2),"INSERT INTO report_logs (`playerid`,`adminid`,`problem`,`answer`,`time`) VALUES ('%d','%d','%s','Report deleted','%d')",PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],escape,gettime());
				mysql_tquery(SQL, string2, "", "");
				format(reporttext[id], 30, "NULL");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3,"You are not an admin.");
	}
	return 1;
}
CMD:cr(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new string[128],id,sendername[30],reason[128],reasone[128],giveplayer[30],string2[256];
			if(sscanf(params, "uS(NULL)[128]",id,reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cr [name/playerid] [text(optional)]");
			if(IsPlayerConnected(id))
			{
				if(!strcmp(reporttext[id], "NULL", true) && reportcheater[id] == -1) return SendClientMessage(playerid, COLOR_WHITE, "This player don't have an active report.");
				mysql_real_escape_string(reason, reasone);
				ReportTime[id] = 0;
				reportcheater[id] = -1;
				reportreason[id] = 0;
				if(playerreported[id] != -1)
				{
					reportreason[playerreported[id]] = 0;
				}
				playerreported[id] = -1;
				KillTimer(timerreport[id]);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string,sizeof(string),"%s closed %s",sendername,reporttext[id]);
				ABroadCast(COLOR_GREY,string,1);
				if(strcmp(reason, "NULL", true))
				{
					format(string,sizeof(string),"(/cr) %s->%s: %s",sendername,giveplayer,reasone);
					ABroadCast(COLOR_YELLOW,string,1);
					SendClientMessage(id, COLOR_YELLOW, string);
				}
				new escape[128];
				mysql_real_escape_string(reporttext[id], escape);
				mysql_format(SQL, string2, sizeof(string2),"INSERT INTO report_logs (`playerid`,`adminid`,`problem`,`answer`,`time`) VALUES ('%d','%d','%s','%s','%d')",PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],escape,reasone,gettime());
				mysql_tquery(SQL, string2, "", "");
				format(reporttext[id], 30, "NULL");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3,"You are not an admin.");
	}
	return 1;
}
CMD:re(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			new id,reason[128],giveplayer[30],sendername[30],string[256];
			if(sscanf(params, "us[128]",id,reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /re [name/playerid] [text]");
			if(IsPlayerConnected(id))
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string),"(/re) %s->%s: %s",sendername,giveplayer,reason);
				HLChat(COLOR_YELLOW,string);
				ABroadCast(COLOR_YELLOW,string,1);
				format(string, sizeof(string),"> PM from %s: %s", giveplayer, reason);
				SendClientMessage(id, COLOR_YELLOW, string);
				PlayerPlaySound(id, 1139, 0.0, 0.0, 0.0);
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_GREY,"You are not an admin/helper.");
	}
	return 1;
}
CMD:togn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pNewbieEnabled] == 1)
	{
	    PlayerInfo[playerid][pNewbieEnabled] = 0;
	    SS(playerid, COLOR_DARKPINK, "Chat de ajutor dezactivat.", "Help chat disabled.");
	}
	else
	{
	    PlayerInfo[playerid][pNewbieEnabled] = 1;
	    SS(playerid, COLOR_DARKPINK, "Chat de ajutor activat.", "Help chat enabled.");
	}
	return 1;
}
CMD:nmute(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
	{
        new id,time,sendername[30],giveplayer[30],string[256];
    	if(sscanf(params, "ud", id, time))
		{
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /nmute [name/playerid] [minutes]");
			return 1;
		}
		else
		{
		    if(IsPlayerConnected(id))
			{
		        GetPlayerName(playerid, sendername, sizeof(sendername));
		        GetPlayerName(id, giveplayer, sizeof(giveplayer));
		        PlayerInfo[id][pNMuted] = time * 60;
		        Update(id,pNMutedx);
		        format(string, sizeof(string), "%s has muted you on /n for %d minutes.", sendername, time);
		        SendClientMessage(id,COLOR_WHITE,string);
		        format(string, sizeof(string), "%s has been muted from /n by %s for %d minutes.", giveplayer, sendername, time);
                ABroadCast(COLOR_RED,string,1);
				HLChat(COLOR_RED,string);
				format(string, sizeof(string), "You have muted %s for %d minutes.", giveplayer, time);
		        SendClientMessage(playerid,COLOR_WHITE,string);
			}
			else return SendClientMessage(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
		}
	}
	return 1;
}
CMD:rmute(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id,time,string[128],sendername[30],giveplayer[30];
		if(sscanf(params, "ud", id, time)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /rmute [name/playerid] [minutes]");
		if(time < 1 || time > 120) return SendClientMessage(playerid, COLOR_GREY, "You can mute a player minimum 1 minute and maximum 120 minutes.");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
		format(string, sizeof(string),"%s has been kicked and muted from /report by %s for %d minutes.",giveplayer,sendername,time);
		ABroadCast(COLOR_RED, string, 1);
		PlayerInfo[id][pReportMuted] = time;
		Update(id, pReportMutedx);
		KickEx(id);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:cheat(playerid, params[])
{
    new id,reason[300],sendername[30],giveplayer[30],string[128];
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(ReportTime[playerid] == 1) return SCM(playerid, COLOR_WHITE,"{f03337}Dupa un minut poti folosi aceasta actiune.");
    if(IsPlayerConnected(playerid))
    {
   		if(sscanf(params, "us[300]", id, reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cheat [id/name] [reason]");
	    if(IsPlayerConnected(id))
		{
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        GetPlayerName(id, giveplayer, sizeof(giveplayer));
			SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
	        format(string, sizeof(string), "%s [%d] was reported for cheating by %s: %s.",giveplayer,id,sendername,reason);
			format(reporttext[playerid], sizeof(string), string);
            reportcheater[playerid] = id;
			ABroadCast(COLOR_REPORT,string,1);
			HLChat(COLOR_REPORT,string);
			ReportTime[playerid] = 1;
 			timerreport[playerid] = SetTimerEx("Reportul", 60000, 0, "%d", playerid);
		}
		else return SendClientMessage(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
	}
	return 1;
}
CMD:cheats(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_cheat(playerid, params);
}
CMD:email(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
	    new result[300],message[300],string[5000],read,message2[100],finalmessage[100],query[500],emailid,idd=0;
	    format(query, sizeof(query), "SELECT * FROM `emails` WHERE `playerid` = '%d' ORDER BY `ID` DESC LIMIT 10", PlayerInfo[playerid][pSQLID]);
		new Cache: emailresult = mysql_query(SQL, query);
		if(cache_get_row_count() > 0)
		{
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
		    	cache_get_field_content(i, "Message", result); format(message, sizeof(message), result);
		    	read                    = cache_get_field_content_int(i, "EmailRead");
		    	emailid                 = cache_get_field_content_int(i, "ID");
		    	EmailId[playerid][idd] = emailid;
		    	idd++;
		    	if(strlen(message) > 49)
		    	{
		    		strmid(message2, message, 0, 50, sizeof(message2));
      				format(finalmessage,sizeof(finalmessage), "%s...",message2);
				}
		   	 	if(read > 0)
		    	{
		    		if(PlayerInfo[playerid][pLanguage] == 2)
		    		{
		    			format(string, sizeof(string), "%s[NECITIT]%s\n", string, finalmessage);
		    		}
		    		else
		    		{
		    			format(string, sizeof(string), "%s[UNREAD]%s\n", string, finalmessage);
		    		}
				}
				else
				{
			    	format(string, sizeof(string), "%s%s\n", string, finalmessage);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You don't have a email!");
		cache_delete(emailresult);
        ShowPlayerDialog(playerid,DIALOG_EMAILS,DIALOG_STYLE_LIST,"Emails",string,"Read","Exit");
	}
	return 1;
}
CMD:emails(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_email(playerid, params);
}
CMD:admins(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
        new string[128],sendername[30],specname[30];
        if(PlayerInfo[playerid][pAdmin] >= 5) SendClientMessage(playerid, COLOR_CYAN, "---- Admins Online (admin 5+ info) ----");
		else SendClientMessage(playerid, COLOR_CYAN, "-----Admins Online-----------------------------------------------");
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[playerid][pAdmin] >= 5)
				{
					if(PlayerInfo[i][pAdmin] >= 1 && PlayerInfo[i][pAdmin] <= 6)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						if(Spectate[i] != -1)
						{
							GetPlayerName(Spectate[i], specname, sizeof(specname));
							format(string, sizeof(string), "(%d) %s - level %d - AFK: %d - spectating %s (%d)", i, sendername, PlayerInfo[i][pAdmin], IsPlayerAFK[i], specname, Spectate[i]);
						}
						else format(string, sizeof(string), "(%d) %s - level %d - AFK: %d", i, sendername, PlayerInfo[i][pAdmin], IsPlayerAFK[i]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
				else
				{
					if(PlayerInfo[i][pAdmin] >= 1 && PlayerInfo[i][pAdmin] <= 6)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, sizeof(string), "(%d) %s - Scripter & Founder level %d", i, sendername, PlayerInfo[i][pAdmin]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
	    }
	    SendClientMessage(playerid, COLOR_CYAN, "-----------------------------------------------------------------------");
		SS(playerid, COLOR_WHITE, "Daca ai vreo problema, poti folosi /report. Pentru intrebari legate de joc poti folosi /n.", "If you have any problems, please use /report. For game related questions, use /n.");
		SendClientMessage(playerid, COLOR_CYAN, "-----------------------------------------------------------------------");
 	}
	return 1;
}
CMD:helpers(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
        new string[128],sendername[30],specname[30];
        if(PlayerInfo[playerid][pAdmin] >= 5) SendClientMessage(playerid, COLOR_CYAN, "---- Helpers Online (admin 5+ info) ----");
		else SendClientMessage(playerid, COLOR_CYAN, "----Helpers Online-----------------------------------------------");
		foreach(new i : Player)
		{
		    if(IsPlayerConnected(i))
			{
				if(PlayerInfo[playerid][pAdmin] >= 5)
				{
					if(PlayerInfo[i][pHelper] >= 1)
				    {
				    	GetPlayerName(i, sendername, sizeof(sendername));
				    	if(Spectate[i] != -1)
				    	{
				    		GetPlayerName(Spectate[i], specname, sizeof(specname));
				    		format(string, sizeof(string), "(%d) %s - level %d - AFK: %d - spectating %s (%d)", i, sendername, PlayerInfo[i][pHelper], IsPlayerAFK[i], specname, Spectate[i]);
				    	}
					    else format(string, sizeof(string), "(%d) %s - level %d - AFK: %d", i, sendername, PlayerInfo[i][pHelper], IsPlayerAFK[i]);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				    }
				}
				else
				{
					if(PlayerInfo[i][pHelper] >= 1)
				    {
				    	GetPlayerName(i, sendername, sizeof(sendername));
					    format(string, sizeof(string), "(%d) %s - helper level %d", i, sendername, PlayerInfo[i][pHelper]);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				    }
				}
			}
	    }
 	}
 	SendClientMessage(playerid, COLOR_CYAN, "-----------------------------------------------------------------------");
	SS(playerid, COLOR_WHITE, "Daca ai vreo intrebare legata de server, foloseste /n.", "For any game related questions, you can use /n.");
	SendClientMessage(playerid, COLOR_CYAN, "-----------------------------------------------------------------------");
	return 1;
}
CMD:leaders(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	SendClientMessage(playerid, COLOR_CYAN, "----Leaders Online-----------------------------------------------");
	new string[128],name[30],afktext[10];
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pLeader] > 0)
		{
			format(afktext, sizeof(afktext), "");
			if(IsPlayerAFK[i] > 39) format(afktext, sizeof(afktext), "- AFK");
			GetPlayerName(i, name, sizeof(name));
			format(string, sizeof(string), "Leader %s: %s [ID: %d] %s", DynamicFactions[PlayerInfo[i][pMember]][fName], name, i, afktext);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	SendClientMessage(playerid, COLOR_CYAN, "------------------------------------------------------------");
	return 1;
}
CMD:hduty(playerid, params[])
{
	if (PlayerInfo[playerid][pHelper] >= 1)
	{
	    if(HelperDuty[playerid] == 1)
	    {
  			HelperDuty[playerid] = 0;
           	SS(playerid, COLOR_LIGHTGREEN3, "Nu mai esti on duty ca helper.", "You are not on duty anymore.");
		}
		else
	    {
			HelperDuty[playerid] = 1;
			SS(playerid, COLOR_LIGHTGREEN3, "Acum esti on duty ca helper!", "You are now on duty!");
	    }
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not a helper.");
	}
	return 1;
}

CMD:aduty(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first!");
	    if(PlayerInfo[playerid][pAdmin] > 0)
	    {
	        if(AdminDuty[playerid] == 0)
	        {
	            new sendername[MAX_PLAYER_NAME], string[256];
	            AdminDuty[playerid] = 1;
	            SetPlayerArmourEx(playerid, 999);
				SetPlayerHealthEx(playerid, 999);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Notice: {FFFFFF}Admin %s este acum disponibil, pentru suport [/report].", sendername);
				ABroadCast(COLOR_RED2,string,1);
				if(PlayerInfo[playerid][pAdmin] >= 5)
				{
				    for(new i = 0; i < MAX_VEHICLES; i++)
					{
						SetVehicleParamsForPlayer(i,playerid,0,0);
					}
				}
				return 1;
	        }
	        else if(AdminDuty[playerid] == 1)
	        {
	            new sendername[MAX_PLAYER_NAME], string[256];
	            AdminDuty[playerid] = 0;
	            SetPlayerArmourEx(playerid, 0);
				SetPlayerHealthEx(playerid, 100);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "Notice: {FFFFFF}Admin %s nu mai este disponibil.", sendername);
				ABroadCast(COLOR_RED2,string,1);
				return 1;
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	    }
	}
    return 1;
}
CMD:makeadmin(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to login first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 6 || EstiFondator(playerid))

		{
			new id,adminlevel,sendername[30],giveplayer[30],string[200],escape[200];
			if(sscanf(params, "ui",id,adminlevel)) return SendClientMessage(playerid, COLOR_WHITE, "Scrie: /makeadmin <Name/Playerid> <Admin Level>");
			if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_RED, "Nu esti autorizat sa folosesti comanda.");
			if(PlayerInfo[id][pAdmin] >= 6 && !EstiFondator(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Nu poti modifica admin level-ul unui admin 6+!.");
			if(adminlevel > 4 && !EstiFondator(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Only founders can make admin higher than 4.");
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					printf("({FF6347}AdminStaff{FFFFFF}) %s has promoted %s to a level %d admin.", sendername, giveplayer, adminlevel);
					format(string, sizeof(string), "You've been promoted to level %d admin, by %s.", adminlevel, sendername);
					SendClientMessage(id, COLOR_WHITE, string);
					format(string, sizeof(string), "You have promoted %s to a level %d admin.", giveplayer,adminlevel);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "* Admin %s set %s's admin level to %d.", sendername,giveplayer,adminlevel);
					ABroadCast(COLOR_ADMCHAT,string,1);
					HLChat(COLOR_ADMCHAT,string);
					mysql_real_escape_string(string, escape);
					PlayerInfo[id][pAdmin] = adminlevel;
					if(adminlevel == 0)
					{
						AdminDuty[id] = 0;
					}
					new str[256];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Admin`='%d' WHERE `name`='%s'",PlayerInfo[id][pAdmin],PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					mysql_format(SQL,str, sizeof(str), "INSERT INTO staff_logs (`text`) VALUES ('%s')", escape);
					mysql_tquery(SQL,str,"","");
				}
			}
    		else
	    	{
		    	SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
		    }
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+ to use this.");
		}
	}
	return 1;
}
CMD:sethelper(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 5)
		{
			new id,helperlevel,sendername[30],giveplayer[30],string[200],escape[200];
			if(sscanf(params, "ui",id,helperlevel)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sethelper [name/playerid] [level]");
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "You have made %s a level %d helper.", giveplayer,helperlevel);
					SendClientMessage(playerid, COLOR_WHITE, string);
					if(helperlevel == 0) format(string, sizeof(string), "Administrator %s has removed you from the helper team.", sendername);
					else if(PlayerInfo[id][pHelper] <= helperlevel) format(string, sizeof(string), "Administrator %s has promoted you to a level %d helper.", sendername,helperlevel);
					else if(PlayerInfo[id][pHelper] > helperlevel) format(string, sizeof(string), "Administrator %s has demoted you to a level %d helper.", sendername,helperlevel);
					SendClientMessage(id, COLOR_YELLOW, string);
					format(string, sizeof(string), "* Admin %s set %s's helper level to %d.", sendername,giveplayer,helperlevel);
					ABroadCast(COLOR_ADMIN,string,1);
					HLChat(COLOR_ADMIN,string);
					Log(PlayerInfo[playerid][pSQLID], string, "staff");
					mysql_real_escape_string(string, escape);
					PlayerInfo[id][pHelper] = helperlevel;
					new str[256];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Helper`='%d' WHERE `name`='%s'",PlayerInfo[id][pHelper],PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					mysql_format(SQL,str, sizeof(str), "INSERT INTO staff_logs (`text`) VALUES ('%s')", escape);
					mysql_tquery(SQL,str,"","");
					mysql_format(SQL,str, sizeof(str), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID], escape);
					mysql_tquery(SQL,str,"","");
					if(helperlevel == 0)
					{
						PlayerInfo[id][pColors] = 0;
						Update(id, pColorsx);
					}
				}
			}
    		else
	    	{
		    	SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		    }
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 5+ to use this.");
		}
	}
	return 1;
}
CMD:vehname(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessage(playerid, COLOR_TEAL, "--------------------------------------------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, COLOR_WHITE, "Vehicle Search:");
		new
			rcount,
			string[128];

		if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "No keyword specified.");
		if(strlen(params) < 3) return SendClientMessage(playerid, COLOR_GREY, "Search keyword too short.");

		for(new v; v < sizeof(aVehicleNames); v++) {
			if(strfind(aVehicleNames[v], params, true) != -1) {

				if(rcount == 0) format(string, sizeof(string), "%s (ID %d)", aVehicleNames[v], v+400);
				else format(string, sizeof(string), "%s | %s (ID %d)", string, aVehicleNames[v], v+400);

				rcount++;
			}
		}

		if(rcount == 0) SendClientMessage(playerid, COLOR_GREY, "No results found.");

		else if(strlen(string) >= 128) SendClientMessage(playerid, COLOR_GREY, "Too many results found.");

		else SendClientMessage(playerid, COLOR_WHITE, string);

		SendClientMessage(playerid, COLOR_TEAL, "--------------------------------------------------------------------------------------------------------------------------------");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:gunname(playerid, params[]) {

	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessage(playerid, COLOR_TEAL, "--------------------------------------------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, COLOR_WHITE, "Weapon Search:");
		new
			rcount,
			string[128];

		if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "No keyword specified.");
		if(strlen(params) < 3) return SendClientMessage(playerid, COLOR_GREY, "Search keyword too short.");

		for(new v; v < 47; v++) {
			if(strfind(GunNames[v], params, true) != -1) {

				if(rcount == 0) format(string, sizeof(string), "%s (ID %d)", GunNames[v], v);
				else format(string, sizeof(string), "%s | %s (ID %d)", string, GunNames[v], v);

				rcount++;
			}
		}

		if(rcount == 0) SendClientMessage(playerid, COLOR_GREY, "No results found.");

		else if(strlen(string) >= 128) SendClientMessage(playerid, COLOR_GREY, "Too many results found.");

		else SendClientMessage(playerid, COLOR_WHITE, string);

		SendClientMessage(playerid, COLOR_TEAL, "--------------------------------------------------------------------------------------------------------------------------------");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:quests(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		new quest1[128],quest2[128],quest11[256],quest22[256];
		if(PlayerInfo[playerid][pLanguage] == 1)
		{
			if(PlayerInfo[playerid][pQuest1] == 1)  format(quest1,sizeof(quest1),"Go to the baseball stadium located in Las Venturas");
			else if(PlayerInfo[playerid][pQuest1] == 2)  format(quest1,sizeof(quest1),"Climb mount Chiliad");
			else if(PlayerInfo[playerid][pQuest1] == 3)  format(quest1,sizeof(quest1),"Traved %d KM with vehicle %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
			else if(PlayerInfo[playerid][pQuest1] == 4)  format(quest1,sizeof(quest1),"Rob a business");
			else if(PlayerInfo[playerid][pQuest1] == 5)  format(quest1,sizeof(quest1),"Collect %d materials",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 6)  format(quest1,sizeof(quest1),"Catch and sell %d fish",PlayerInfo[playerid][pQuestNeed1]);

			if(PlayerInfo[playerid][pQuest2] == 1)  format(quest2,sizeof(quest2),"Deliver %d pizza",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 2)
			{
				if(!IsACop(playerid))
				{
					format(quest2,sizeof(quest2),"Kill %d cops",PlayerInfo[playerid][pQuestNeed2]);
				}
				else
				{
					format(quest2,sizeof(quest2),"Arrest %d suspects",PlayerInfo[playerid][pQuestNeed2]);
				}
			}
			else if(PlayerInfo[playerid][pQuest2] == 3)  format(quest2,sizeof(quest2),"Kill %d players at paintball",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 4)  format(quest2,sizeof(quest2),"Collect and unload %d KG of garbage",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 5)  format(quest2,sizeof(quest2),"Sell %d KG of flour",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 6)  format(quest2,sizeof(quest2),"Buy drugs and use them");
			else if(PlayerInfo[playerid][pQuest2] == 7)  format(quest2,sizeof(quest2),"Go in a bar and get drunk");

			format(quest11,sizeof(quest11),"%s | Progress: %d/%d",quest1,PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
			format(quest22,sizeof(quest22),"%s | Progress: %d/%d",quest2,PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
		}
		else
		{
			if(PlayerInfo[playerid][pQuest1] == 1)  format(quest1,sizeof(quest1),"Mergi pe stadionul de baseball din Las Venturas");
			else if(PlayerInfo[playerid][pQuest1] == 2)  format(quest1,sizeof(quest1),"Urca pe muntele Chiliad");
			else if(PlayerInfo[playerid][pQuest1] == 3)  format(quest1,sizeof(quest1),"Parcurge distanta de %d KM cu un vehicul de tipul %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
			else if(PlayerInfo[playerid][pQuest1] == 4)  format(quest1,sizeof(quest1),"Jefuieste o afacere");
			else if(PlayerInfo[playerid][pQuest1] == 5)  format(quest1,sizeof(quest1),"Colecteaza %d materiale",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 6)  format(quest1,sizeof(quest1),"Vinde %d pesti",PlayerInfo[playerid][pQuestNeed1]);

			if(PlayerInfo[playerid][pQuest2] == 1)  format(quest2,sizeof(quest2),"Livreaza %d pizza",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 2)
			{
				if(!IsACop(playerid))
				{
					format(quest2,sizeof(quest2),"Omoara %d politisti",PlayerInfo[playerid][pQuestNeed2]);
				}
				else
				{
					format(quest2,sizeof(quest2),"Aresteaza %d suspecti",PlayerInfo[playerid][pQuestNeed2]);
				}
			}
			else if(PlayerInfo[playerid][pQuest2] == 3)  format(quest2,sizeof(quest2),"Omoara %d playeri la Paintball",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 4)  format(quest2,sizeof(quest2),"Colecteaza si descarca %d KG de gunoi",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 5)  format(quest2,sizeof(quest2),"Vinde %d KG de faina",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 6)  format(quest2,sizeof(quest2),"Cumpara droguri si foloseste-le");
			else if(PlayerInfo[playerid][pQuest2] == 7)  format(quest2,sizeof(quest2),"Du-te intr-un bar si imbata-te");

			format(quest11,sizeof(quest11),"%s | Progres: %d/%d",quest1,PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
			format(quest22,sizeof(quest22),"%s | Progres: %d/%d",quest2,PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
		}

		SendClientMessage(playerid, COLOR_NEWS, quest11);
		SendClientMessage(playerid, COLOR_NEWS, quest22);

		#if ACTIVE_QUEST == 1
			new questtext[128],questtext2[128],countobj;
			for(new obj = 1; obj <= questobjectss; obj++)
			{
				if(PlayerInfo[playerid][pFoundObject][obj] == 1) countobj++;
			}
			SendClientMessage(playerid, COLOR_YELLOW, "");
			format(questtext, sizeof(questtext), "Misiune Speciala: Gaseste toate cadourile ascunse. Progres: %d/%d.", countobj, questobjectss);
			format(questtext2, sizeof(questtext2), "Special Quest: Find all the hidden gifts. Progress: %d/%d.", countobj, questobjectss);
			SS(playerid, COLOR_YELLOW, questtext, questtext2);
			SS(playerid, COLOR_YELLOW, "Misiunea speciala va fi dezactivata pe 03.01.2017.", "The special quest will be disabled on 03.01.2017.");
			SS(playerid, COLOR_YELLOW, "Premiu: 20x bani castigati la payday, 20RP, 20 puncte rob, 1 slot pt vehicule (daca nu ai 1 liber), 1 Monster Truck TEMPORAR.", "Reward: 20x money earned from payday, 20RP, 20 rob points, 1 vehicle slot (if you don't have 1 free), 1 TEMPORARY Monster Truck.");
		#endif
	}
	return 1;
}
CMD:togfind(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_LIGHTGREEN3, AdminOnly);
 	    if(togfind[playerid] == 1)
 	    {
 	        togfind[playerid] = 0;
 	        SCM(playerid,COLOR_WHITE,"Disable tog find.");
 	    }
 	    else
 	    {
 	    	togfind[playerid] = 1;
            SCM(playerid,COLOR_WHITE,"Enable tog find.");
	    }
	}
	return 1;
}

CMD:find(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Trebuie sa te loghezi mai intai.");
	if(IsPlayerConnected(playerid))
 	{
		if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1)
		{
			new id,giveplayer[30],string[100];
			if(BusinessRob[playerid] > 0) return SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi aceasta comanda in timp ce jefuiesti o afacere.");
			if(PlayerInfo[playerid][pJob] != 1 && !IsACop(playerid) && PlayerInfo[playerid][pMember] != 11)	return SendClientMessage(playerid, COLOR_WHITE, "You are not a detective.");
			if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /find [name/playerid]");
			if(IsPlayerConnected(id))
			{
				if(id != INVALID_PLAYER_ID)
				{
				    if(id == playerid) return SendClientMessage(playerid, COLOR_GREY, "You can't find yourself.");
					if(togfind[id] == 1) return SCM(playerid, COLOR_GREY, "Player not connected.");
					if(PlayerInfo[id][pAdmin] > 0 && GetPlayerVirtualWorld(id) == 1337 || PlayerInfo[id][pAdmin] > 0 && Spectate[id] != -1 || PlayerInfo[id][pAdmin] > 0 && AdminDuty[id] == 1) return SS(playerid, COLOR_YELLOW, "Checkpoint dezactivat. Acel admin este ocupat.", "Checkpoint disabled. That admin is busy.");
					UsedFind[playerid] = 1;
	    			GetPlayerName(id, giveplayer, sizeof(giveplayer));
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(id, X,Y,Z);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, X,Y,Z, 3.5);
					targetfind[playerid] = id;
					foreach(new i : Player)
					{
					    if(IsACop(playerid))
					    {
					        if(caser[playerid] == i)
					        {
					            cased[i] --;
							}
						}
					}
					if(IsACop(playerid))
					{
					    cased[id] ++;
					    caser[playerid] = id;
					}
					format(string,sizeof(string),"Checkpoint-ul va afisa locatia playerului %s. Distanta pana la player: %.0f.",giveplayer,GetDistanceBetweenPlayers(playerid, id));
					SCM(playerid, COLOR_YELLOW, string);
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Anulare Checkpoint", "Esti sigur ca vrei sa anulezi checkpoint-ul curent?", "Da", "Nu");
		}
	}
 	return 1;
}

CMD:gethere(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			new plo,sendername[30],giveplayer[30],string[256];
			if(sscanf(params, "u",plo)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gethere [name/playerid]");
	    	new Float:plocx,Float:plocy,Float:plocz;
		    if (IsPlayerConnected(plo))
		    {
		     	if(plo != INVALID_PLAYER_ID)
			    {
					if(CanSpectate[plo] == 0) return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use /gethere on this admin.");
					GetPlayerPos(playerid, plocx, plocy, plocz);
					SetPlayerInterior(plo,GetPlayerInterior(playerid));
					PlayerInfo[plo][pInt] = PlayerInfo[playerid][pInt];
					PlayerInfo[plo][pLocal] = PlayerInfo[playerid][pLocal];
					if (GetPlayerState(plo) == 2)
					{
						TelePos[plo][0] = 0.0;
						TelePos[plo][1] = 0.0;
						new tmpcar = GetPlayerVehicleID(plo);
						SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
						GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
					}
					else
					{
						SetPlayerPosEx(plo,plocx,plocy+2, plocz);
					}
					if(InHouse[playerid] > 0)
					{
						InHouse[plo] = InHouse[playerid];
						if(strlen(housestring[InHouse[plo]]) > 0)
						{
					    	StopAudioStreamForPlayer(plo);
							PlayAudioStreamForPlayer(plo, housestring[InHouse[plo]]);
						}
					}
					if(InHQ[playerid] > 0)
					{
						InHQ[plo] = InHQ[playerid];
					}
					if(InBussines[playerid] > 0)
					{
						InBussines[plo] = InBussines[playerid];
					}
					SetPlayerVirtualWorld(plo, GetPlayerVirtualWorld(playerid));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(plo, giveplayer, sizeof(giveplayer));
					format(string,sizeof(string),"You have teleported %s to you.",giveplayer);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string,sizeof(string),"You have been teleported by admin %s.",sendername);
					SendClientMessage(plo, COLOR_GRAD1, string);
					format(string,sizeof(string),"%s used /gethere on %s.",sendername,giveplayer);
					if(PlayerInfo[plo][pPaintBallG] > 0)
					{
						foreach(new i : Player)
						{
						    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[plo][pPaintBallG] && i != plo)
						    {
						        format(string,sizeof(string),"%s has left the paintball arena.", giveplayer);
						        SendClientMessage(i, COLOR_YELLOW, string);
							}
						}
						curatj[plo] = 0;
						for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(plo, 1001, 1001, 1001);
						PlayerTextDrawHide(plo, PaintBallText[plo]);
						SetPlayerSkin(plo, PlayerInfo[plo][pModel]);
						paintp[PlayerInfo[plo][pPaintBallG]]--;
				        PlayerInfo[plo][pPaintBallG] = 0;
				        PlayerInfo[plo][pPaintBallKills] = 0;
				        PlayerInfo[plo][pPaintBallVoted] = 0;
				        PlayerInfo[plo][pPaintBallVoted2] = 0;
				        ResetPlayerWeaponsEx(plo);
					    ResetPlayerWeapons(plo);
					    SetPlayerArmourEx(plo, 0);
					    SetPlayerToTeamColor(plo);
					    SetPlayerWorldBounds(plo, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
					}
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:gotoxyz(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new string[128],interior,vw;
		new Float:x, Float:y, Float:z;
		if(sscanf(params, "fffii", x,y,z,interior,vw)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gotoxyz [x] [y] [z] [interior] [virtual]");
		{
			SetPlayerPosEx(playerid, x, y, z);
			format(string,sizeof(string),"You've teleported to x = %f, y = %f, z = %f, interior %d.",x,y,z,interior);
			SendClientMessage(playerid,COLOR_WHITE, string);
			SetPlayerVirtualWorld(playerid, vw);
			SetPlayerInterior(playerid,interior);
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
   			StopAudioStreamForPlayer(playerid);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:gotolv(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		new string[64],sendername[25];
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
				GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				SetVehicleVirtualWorld(tmpcar, 0);
				LinkVehicleToInterior(tmpcar, 0);
				OnPlayerGoto(playerid, 0, 0);
			}
			else
			{
				SetPlayerPosEx(playerid, 1699.2,1435.1, 10.7);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Warning: Admin %s Teleported to LV.", sendername);
			if(InHouse[playerid] > -1)
			{
			    StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:gotosf(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		new string[64],sendername[25];
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
				GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				SetVehicleVirtualWorld(tmpcar, 0);
				LinkVehicleToInterior(tmpcar, 0);
				OnPlayerGoto(playerid, 0, 0);
			}
			else
			{
				SetPlayerPosEx(playerid, -1417.0,-295.8,14.1);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmWarning: Admin %s Teleported to SF.", sendername);
			if(InHouse[playerid] > -1)
			{
   				StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:so(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
        if(IsACop(playerid))
        {
            if(timersoo[playerid] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You need to wait 5 seconds before use /so again.");
            {
                new id,string[256];
                if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /so [name/playerid]");
                {
					if(IsACop(id)) return SendClientMessage(playerid, COLOR_GREY, "You can't somate a cop.");
                    if (!ProxDetectorS(20.0, playerid, id)) return SendClientMessage(playerid, COLOR_WHITE, "Acel player este prea departe de tine.");
                    if(id != INVALID_PLAYER_ID)
                    {
                        new sendername[25],numelee[25];
                        GetPlayerName(id,numelee,sizeof(numelee));
                        GetPlayerName(playerid,sendername,sizeof(sendername));
                        if (GetPlayerState(id) == 2)
						{
						    new speed = Carspeed(id);
						    if(speed > 1)
						    {
								format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, esti urmarit de politie! Trage pe dreapta imediat!", sendername, numelee);
								ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
								timersoo[playerid] = 5;
								somatee[playerid] = 0;
								somated[id] = playerid;
								format(somatename[id], 30, sendername);
								soexpire[id] = 180;
							}
							else if(speed == 0)
							{
							    if(PlayerInfo[id][pWantedLevel] == 0)
							    {
							    	format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, esti urmarit de politie! Ramai pe loc!", sendername, numelee);
									ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
									timersoo[playerid] = 5;
									somatee[playerid] = 0;
									somated[id] = playerid;
									format(somatename[id], 30, sendername);
									soexpire[id] = 180;
								}
								else if(PlayerInfo[id][pWantedLevel] > 0)
								{
								    format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, esti urmarit de politie! Te predai?", sendername, numelee);
									ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
									timersoo[playerid] = 5;
									somatee[playerid] = 0;
									somated[id] = playerid;
									format(somatename[id], 30, sendername);
									soexpire[id] = 180;
								}
							}
						}
						else
						{
							if(PlayerInfo[id][pWantedLevel] > 0)
							{
							    format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, esti urmarit de politie! Te predai?", sendername, numelee);
								ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
								timersoo[playerid] = 5;
								somatee[playerid] = 0;
								somated[id] = playerid;
								format(somatename[id], 30, sendername);
								soexpire[id] = 180;
							}
							else if(PlayerInfo[id][pWantedLevel] == 0)
							{
							    format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, esti urmarit de politie! Opreste-te unde esti!", sendername, numelee);
								ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
								timersoo[playerid] = 5;
								somatee[playerid] = 0;
								somated[id] = playerid;
								format(somatename[id], 30, sendername);
								soexpire[id] = 180;
							}
						}
                    }
                    else return SendClientMessage(playerid, COLOR_WHITE, "Player not connected.");
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not a cop.");
	}
	return 1;
}
CMD:goto(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id,string[256],sendername[30],giveplayer[30],countx;
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /goto [name/playerid]");
		{
			if(id != INVALID_PLAYER_ID)
	        {
				if(CanSpectate[id] == 0) return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use /goto on this admin.");
				new Float:ax,Float:ay,Float:az;
				GetPlayerPos(playerid,ax,ay,az);
				posxxx[playerid] = ax;
				posyyy[playerid] = ay;
				poszzz[playerid] = az;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(id, x, y, z);
				new tmpcar = GetPlayerVehicleID(playerid), tmpcar2 = GetPlayerVehicleID(id);
				if (GetPlayerState(playerid) == 2)
				{
					SetVehiclePos(tmpcar, x, y+4, z);
					GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
					LinkVehicleToInterior(tmpcar, GetPlayerInterior(id));
					SetVehicleVirtualWorld(tmpcar, GetPlayerVirtualWorld(id));
					OnPlayerGoto(playerid, GetPlayerInterior(id), GetPlayerVirtualWorld(id));
				}
				else
				{
					if(GetPlayerState(id) == 2 || GetPlayerState(id) == 3)
					{
						new model = GetVehicleModel(GetPlayerVehicleID(id));
						if(MaxSeats[model - 400] > 0)
						{
							for(new xx; xx < MaxSeats[model - 400]; xx++)
							{
								if(!IsSeatTaken(tmpcar2, xx))
								{
									PutPlayerInVehicle(playerid, tmpcar2, xx);
									countx++;
									break;
								}
							}
						}
						else
						{
							SetPlayerPosEx(playerid,x,y+2, z);
						}
					}
					else
					{
						SetPlayerPosEx(playerid,x,y+2, z);
					}
					if(countx == 0) SetPlayerPosEx(playerid,x,y+2, z);
				}
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
				SetPlayerInterior(playerid, GetPlayerInterior(id));
				if(InHouse[id] > 0)
				{
					InHouse[playerid] = InHouse[id];
					if(strlen(housestring[InHouse[playerid]]) > 0)
					{
					    StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
					}
				}
				if(InHQ[id] > 0)
				{
					InHQ[playerid] = InHQ[id];
				}
				if(InBussines[id] > 0)
				{
					InBussines[playerid] = InBussines[id];
				}
				GetPlayerName(playerid,sendername,sizeof(sendername));
				GetPlayerName(id,giveplayer,sizeof(giveplayer));
				format(string,sizeof(string),"You have been teleported to %s.",giveplayer);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				format(string,sizeof(string),"Admin %s teleported to you.",sendername);
				SendClientMessage(id, COLOR_GRAD1, string);
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin.");
	return 1;
}
CMD:goback(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			if (posxxx[playerid] != 0 )
			{
				SetPlayerPosEx(playerid,posxxx[playerid],posyyy[playerid],poszzz[playerid]);
				SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "You haven't go anywhere yet.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin.");
	}
	return 1;
}

CMD:gotols(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
				GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				OnPlayerGoto(playerid, 0, 0);
			}
			else
			{
				SetPlayerPosEx(playerid, 1529.6,-1691.2,13.3);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			if(InHouse[playerid] > -1)
			{
				StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		}
	}
	return 1;
}
CMD:stunt(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, COLOR_YELLOW, "Stunt Area: Ai wanted, nu poti folosii comanda!");
	{
		if(PlayerInfo[playerid][pAdmin] >= 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2905.8000000,-730.2000100,10.7000000);
				GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				OnPlayerGoto(playerid, 0, 0);
			}
			else
			{
				SetPlayerPosEx(playerid, 2905.8000000,-730.2000100,10.7000000);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "Te-ai teleportat in STUNT AREA NRG!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			if(InHouse[playerid] > -1)
			{
				StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		}
	}
	return 1;
}
CMD:go(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
		new string[128], name[30];
		ShowPlayerDialog(playerid, DIALOG_GO, DIALOG_STYLE_LIST, "SERVER: Teleport Locations", "House Interiors\nRace Tracks\nCity Locations\nPopular Locations\nGym Interiors\nOther", "Select", "Cancel");
		GetPlayerName(playerid, name, sizeof(name));
		format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) {FFFFFF}Admin %s used command /go.", name);
		ABroadCast(COLOR_WHITE, string, 1);
	}
	return 1;
}
CMD:gotospawn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1973.7002,137.7904,27.6875);
				GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				OnPlayerGoto(playerid, 0, 0);
			}
			else
			{
				SetPlayerPosEx(playerid, -1973.7002,137.7904,27.6875);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			if(InHouse[playerid] > -1)
			{
				StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		}
	}
	return 1;
}
CMD:gotods(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 2)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1664.1561,1207.6320,7.2546);
				GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				OnPlayerGoto(playerid, 0, 0);
			}
			else
			{
				SetPlayerPosEx(playerid, -1664.1561,1207.6320,7.2546);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			if(InHouse[playerid] > -1)
			{
   				StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		}
	}
	return 1;
}
CMD:gotojail(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 227.6104,114.6985,1000.0156);
				GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				LinkVehicleToInterior(tmpcar, 10);
				SetVehicleVirtualWorld(tmpcar, 0);
				OnPlayerGoto(playerid, 10, 0);
			}
			else
			{
				SetPlayerPosEx(playerid, 227.6104,114.6985,1000.0156);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported to jail.");
			SetPlayerInterior(playerid,10);
			PlayerInfo[playerid][pInt] = 10;
			if(InHouse[playerid] > -1)
			{
				StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:mark(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
			SendClientMessage(playerid, COLOR_DARKPINK, "Mark set.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		}
	}
	return 1;
}
CMD:gotom(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -2317.8091,-1637.5575,483.7031);
				GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				OnPlayerGoto(playerid, 0, 0);
			}
			else
			{
				SetPlayerPosEx(playerid, -2317.8091,-1637.5575,483.7031);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			if(InHouse[playerid] > -1)
			{
				StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		}
	}
	return 1;
}
CMD:gotoeventarena(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 8124.4839,-7558.7246,15.3666);
				GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				OnPlayerGoto(playerid, 0, 0);
			}
			else
			{
				SetPlayerPosEx(playerid, 8124.4839,-7558.7246,15.3666);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			if(InHouse[playerid] > -1)
			{
			    StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		}
	}
	return 1;
}
CMD:gotomark(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				OnPlayerGoto(playerid, 0, 0);
			}
			else
			{
				SetPlayerPosEx(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
			}
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessage(playerid, COLOR_GREY, "You have been teleported to the mark.");
			SetPlayerInterior(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		}
	}
	return 1;
}
CMD:gotocar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
	  	{
			new testcar;
			if(sscanf(params, "d",testcar)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gotocar [car id]");
			new Float:cwx2,Float:cwy2,Float:cwz2;
			GetVehiclePos(testcar, cwx2, cwy2, cwz2);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
				GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				OnPlayerGoto(playerid, 0, 0);
			}
			else
			{
				SetPlayerPosEx(playerid, cwx2, cwy2, cwz2);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
			SetPlayerInterior(playerid,0);
			if(InHouse[playerid] > -1)
			{
			    StopAudioStreamForPlayer(playerid);
			}
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
			SetPlayerVirtualWorld(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		}
	}
	return 1;
}
CMD:check(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id;
			if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /check [name/playerid]");
			if(IsPlayerConnected(id))
			{
				if(id != INVALID_PLAYER_ID)
				{
					ShowStats(playerid,id);
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin/helper.");
	}
	return 1;
}
CMD:pm(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new id,message[128], string[256], sendername[25], giveplayer[25];
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		if(sscanf(params, "us[128]", id, message)) return SendClientMessage(playerid, COLOR_GREY,"Syntax:{FFFFFF} /pm [name/playerid] [message]");
		{
			if(id != INVALID_PLAYER_ID)
	        {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "> PM from %s: %s", sendername, message);
				SendClientMessage(id, COLOR_YELLOW, string);
				PlayerPlaySound(id, 1139, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "(( PM sent to %s: %s ))", giveplayer , message);
				SendClientMessage(playerid,  COLOR_SMS, string);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Player not connected.");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin/helper.");
	return 1;
}
CMD:id(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new id[30], giveplayer[150], sstring[256], name[30], find=0, idd, afktext[30], fps;
		if(sscanf(params, "s[30]", id)) return SendClientMessage(playerid, COLOR_GREY,"Syntax:{FFFFFF} /id [name/playerid]");
		{
			if(IsNumeric(id))
			{
				idd = strval(id);
				if(IsPlayerConnected(idd))
				{
					if(idd != INVALID_PLAYER_ID)
					{
						if(IsPlayerAFK[idd] > 0 && PlayerInfo[playerid][pAdmin] > 0)
						{
							format(afktext, sizeof(afktext), "- AFK for %d seconds", IsPlayerAFK[idd]);
						}
						if(PlayerInfo[idd][pAdmin] > 0 && PlayerInfo[playerid][pAdmin] == 0 || PlayerInfo[idd][pHelper] > 0 && PlayerInfo[playerid][pAdmin] == 0) fps = 60;
						else fps = PlayerInfo[idd][pFPS];
						if(PlayerInfo[idd][pSleeping] == 1)
						{
							if(PlayerInfo[idd][pClanTag] == 0)
							{
								format(giveplayer, sizeof(giveplayer),"%s", PlayerInfo[idd][pNormalName]);
							}
							if(PlayerInfo[idd][pClanTag] == 1)
							{
								format(giveplayer, sizeof(giveplayer),"{FFFF00}%s{CECECE}%s", ClanInfo[PlayerInfo[idd][pClan]][cClanTag], PlayerInfo[idd][pNormalName]);
							}
							if(PlayerInfo[idd][pClanTag] == 2)
							{
								format(giveplayer, sizeof(giveplayer),"%s{FFFF00}%s{CECECE}", PlayerInfo[idd][pNormalName], ClanInfo[PlayerInfo[idd][pClan]][cClanTag]);
							}
							if(PlayerInfo[idd][pRank] > 0)
							{
								format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: %s (rank %d) | Ping: %d | FPS: %d %s",idd,giveplayer,PlayerInfo[idd][pLevel],NumeFactiune(PlayerInfo[idd][pMember]),PlayerInfo[idd][pRank],GetPlayerPing(idd),fps,afktext);
								SendClientMessage(playerid, COLOR_GREY, sstring);
							}
							else
							{
								format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: None | Ping: %d | FPS: %d %s",idd,giveplayer,PlayerInfo[idd][pLevel],GetPlayerPing(idd),fps,afktext);
								SendClientMessage(playerid, COLOR_GREY, sstring);
							}
						}
						else
						{
							if(PlayerInfo[idd][pClanTag] == 0)
							{
								format(giveplayer, sizeof(giveplayer),"%s", PlayerInfo[idd][pNormalName]);
							}
							if(PlayerInfo[idd][pClanTag] == 1)
							{
								format(giveplayer, sizeof(giveplayer),"{FFFF00}%s{FFFFFF}%s", ClanInfo[PlayerInfo[idd][pClan]][cClanTag], PlayerInfo[idd][pNormalName]);
							}
							if(PlayerInfo[idd][pClanTag] == 2)
							{
								format(giveplayer, sizeof(giveplayer),"%s{FFFF00}%s{FFFFFF}", PlayerInfo[idd][pNormalName], ClanInfo[PlayerInfo[idd][pClan]][cClanTag]);
							}
							if(PlayerInfo[idd][pRank] > 0)
							{
								format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: %s (rank %d) | Ping: %d | FPS: %d %s",idd,giveplayer,PlayerInfo[idd][pLevel],NumeFactiune(PlayerInfo[idd][pMember]),PlayerInfo[idd][pRank],GetPlayerPing(idd),fps,afktext);
								SendClientMessage(playerid, COLOR_WHITE, sstring);
							}
							else
							{
								format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: None | Ping: %d | FPS: %d %s",idd,giveplayer,PlayerInfo[idd][pLevel],GetPlayerPing(idd),fps,afktext);
								SendClientMessage(playerid, COLOR_WHITE, sstring);
							}
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
			else
			{
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i))
					{
						if(find < 10)
						{
							GetPlayerName(i, name, sizeof(name));
							if(strfind(name, id, true) != -1)
							{
								if(PlayerInfo[i][pSleeping] == 1)
								{
									if(PlayerInfo[i][pClanTag] == 0)
									{
										format(giveplayer, sizeof(giveplayer),"%s", PlayerInfo[i][pNormalName]);
									}
									if(PlayerInfo[i][pClanTag] == 1)
									{
										format(giveplayer, sizeof(giveplayer),"{FFFF00}%s{CECECE}%s", ClanInfo[PlayerInfo[i][pClan]][cClanTag], PlayerInfo[i][pNormalName]);
									}
									if(PlayerInfo[i][pClanTag] == 2)
									{
										format(giveplayer, sizeof(giveplayer),"%s{FFFF00}%s{CECECE}", PlayerInfo[i][pNormalName], ClanInfo[PlayerInfo[i][pClan]][cClanTag]);
									}
									if(PlayerInfo[i][pRank] > 0)
									{
										format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: %s (rank %d) | Ping: %d | FPS: %d",i,giveplayer,PlayerInfo[i][pLevel],NumeFactiune(PlayerInfo[i][pMember]),PlayerInfo[i][pRank],GetPlayerPing(i),PlayerInfo[i][pFPS]);
										SendClientMessage(playerid, COLOR_GREY, sstring);
									}
									else
									{
										format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: None | Ping: %d | FPS: %d",i,giveplayer,PlayerInfo[i][pLevel],GetPlayerPing(i),PlayerInfo[i][pFPS]);
										SendClientMessage(playerid, COLOR_GREY, sstring);
									}
								}
								else
								{
									if(PlayerInfo[i][pClanTag] == 0)
									{
										format(giveplayer, sizeof(giveplayer),"%s", PlayerInfo[i][pNormalName]);
									}
									if(PlayerInfo[i][pClanTag] == 1)
									{
										format(giveplayer, sizeof(giveplayer),"{FFFF00}%s{FFFFFF}%s", ClanInfo[PlayerInfo[i][pClan]][cClanTag], PlayerInfo[i][pNormalName]);
									}
									if(PlayerInfo[i][pClanTag] == 2)
									{
										format(giveplayer, sizeof(giveplayer),"%s{FFFF00}%s{FFFFFF}", PlayerInfo[i][pNormalName], ClanInfo[PlayerInfo[i][pClan]][cClanTag]);
									}
									if(PlayerInfo[i][pRank] > 0)
									{
										format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: %s (rank %d) | Ping: %d | FPS: %d",i,giveplayer,PlayerInfo[i][pLevel],NumeFactiune(PlayerInfo[i][pMember]),PlayerInfo[i][pRank],GetPlayerPing(i),PlayerInfo[i][pFPS]);
										SendClientMessage(playerid, COLOR_WHITE, sstring);
									}
									else
									{
										format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: None | Ping: %d | FPS: %d",i,giveplayer,PlayerInfo[i][pLevel],GetPlayerPing(i),PlayerInfo[i][pFPS]);
										SendClientMessage(playerid, COLOR_WHITE, sstring);
									}
								}
								find ++;
							}
						}
					}
				}
				if(find == 0) return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
		}
	}
	return 1;
}
CMD:sleep(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(InHouse[playerid] > 0)
    {
    	if(PlayerInfo[playerid][pPhousekey] != InHouse[playerid]) return SS(playerid, COLOR_LIGHTGREEN3, "Poti dormi doar in casa proprie sau in casa inchiriata (/rentroom).", "You can only use /sleep only in your house.");
        if(PlayerInfo[playerid][pWantedLevel] == 0)
		{
            if(PlayerInfo[playerid][pSleeping] == 0)
			{
   				PlayerInfo[playerid][pSleeping] = 1;
				TogglePlayerControllable(playerid,0);
     			SS(playerid, COLOR_DARKPINK, "Acum poti ramane AFK fara a primi kick. Foloseste /sleep din nou cand vrei sa revi in joc.", "You can now leave your character AFK. Use /sleep again when you're back.");
				SS(playerid, COLOR_DARKPINK, "Minimizarea jocului (alt-tab) poate provoca unele buguri. Este recomandat sa apesi ESC inainte de a minimiza jocul.", "If alt-tabbing (minimising the game) is causing any bugs, it's recommended that you press escape before minimizing the game.");
                LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
				SetPlayerColor(playerid,COLOR_GRAD2);
			}
			else
			{
				PlayerInfo[playerid][pSleeping] = 0;
				TogglePlayerControllable(playerid,1);
				ClearAnimations(playerid);
                SS(playerid, COLOR_DARKPINK, "Bine ai revenit!", "Welcome back!");
				SetPlayerToTeamColor(playerid);
		    }
        }
        else return SS(playerid, COLOR_LIGHTGREEN3, "Nu poti folosi /sleep cat timp ai wanted.", "You're a wanted man. You can't go to sleep.");
    }
    else return SS(playerid, COLOR_WHITE, "Nu esti intr-o casa. Poti dormi doar in case.", "You're not in a house. You can only sleep inside a house.");
	return 1;
}
CMD:fixveh(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		{
    		if(IsPlayerInAnyVehicle(playerid))
		    {
			    RepairVehicle(GetPlayerVehicleID(playerid));
			    Gas[GetPlayerVehicleID(playerid)] = 100;
			    SendClientMessage(playerid, COLOR_WHITE, "Car was repaired successfully.");
		    }
		}
	}
	return 1;
}
CMD:fv(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_fixveh(playerid, params);
}
CMD:jetpack(playerid, params[])
{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 5)
			{
                SetPlayerSpecialAction(playerid, 2);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		}
		return 1;
}
CMD:flymode(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new sendername[30],string[256];
		    if(flymode[playerid] == 0)
		    {
		        GetPlayerName(playerid, sendername, sizeof(sendername));
	            flymode[playerid] = 1;
	    		format(string,sizeof(string),"%s is now in flymode.", sendername);
				ABroadCast(COLOR_YELLOW,string,1);
				InitFly(playerid);
				StartFly(playerid);
				SetPlayerHealthEx(playerid, 50000);
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:nos(playerid, params[])
{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 5)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
					SendClientMessage(playerid, COLOR_WHITE, "Vehicle nos added!");
				}
			}
			else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		}
		return 1;
}
CMD:service(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new x_nr[256],string[300],sendername[30],medics,taxidrivers;
		if(sscanf(params, "s[256]",x_nr))
		{
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /service [item]");
		  	SendClientMessage(playerid, COLOR_WHITE, "Available services: medic, taxi");
			return 1;
		}
		if(strcmp(x_nr,"taxi",true) == 0)
		{
			if(PlayerInfo[playerid][pMember] == 13) return SendClientMessage(playerid, COLOR_GREY, "You can't call a taxi because you're a taxi driver!");
			foreach(new i : Player)
			{
				if(TaxiFare[i] > 0) taxidrivers++;
			}
			if(taxidrivers == 0) return SendClientMessage(playerid, COLOR_YELLOW, "There are no taxi drivers on duty at the moment.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pMember] == 13 && TaxiFare[i] > 0)
				{
					format(string, sizeof(string), "%s [%d] has called for a taxi. Distance: %.0fm.", sendername,playerid,GetDistanceBetweenPlayers(playerid, i));
					SendClientMessage(i, COLOR_CYAN, string);
				}
			}
		    SendClientMessage(playerid, COLOR_GREY, "You have called for a taxi. Please wait here!");
		    TaxiCall[playerid] = 1;
		    return 1;
		}
		else if(strcmp(x_nr,"medic",true) == 0)
		{
			if(PlayerInfo[playerid][pMember] == 14) return SendClientMessage(playerid, COLOR_GREY, "You can't call an ambulance because you're a medic!");
		    foreach(new i : Player)
		    {
		   		if(IsAnAmbulance(GetPlayerVehicleID(i)) && PlayerInfo[i][pMember] == 14 && GetPlayerVehicleSeat(i) == 0) medics++;
		   	}
		   	if(medics == 0) return SendClientMessage(playerid, COLOR_YELLOW, "There are no ambulance drivers on duty at the moment.");
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			foreach(new i : Player)
			{
				if(IsAnAmbulance(GetPlayerVehicleID(i)) && PlayerInfo[i][pMember] == 14 && GetPlayerVehicleSeat(i) == 0)
				{
					format(string, sizeof(string), "%s [%d] has called for a medic. Distance: %.0fm.", sendername,playerid,GetDistanceBetweenPlayers(playerid, i));
					SendClientMessage(i, COLOR_CYAN, string);
				}
			}
		    SendClientMessage(playerid, COLOR_GREY, "You have called for an ambulance. Please wait here!");
		    MedicCall[playerid] = 1;
		    return 1;
		}
	}
	return 1;
}
CMD:medic(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pMember] != 14) return SendClientMessage(playerid, COLOR_GREY, "To call an ambulance, use /service medic.");
		new action[10], id, sendername[30], giveplayer[30], string[128], Float: X, Float: Y, Float: Z;
		if(sscanf(params, "s[10]u", action, id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /medic [action] [id]");
		if(strcmp(action,"accept",true) == 0)
		{
			if(!IsAnAmbulance(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You can't accept a call because you're not in an ambulance.");
			if(MedicCall[id] == 0) return SendClientMessage(playerid, COLOR_GREY, "This player hasn't called for an ambulance, or someone else accepted the call.");
			if(IsPlayerConnected(id))
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                if(PlayerInfo[id][pLanguage] == 2) format(string, sizeof(string), "Medicul %s ti-a acceptat apelul. Asteapta ambulanta aici.", sendername);
                else format(string, sizeof(string), "Medic %s has accepted your call. Please wait here for the ambulance.", sendername);
				SendClientMessage(id, COLOR_YELLOW, string);
				SS(id, COLOR_WHITE, "Daca nu mai ai nevoie de un medic, foloseste /cancel medic.", "If you don't need a medic anymore, use /cancel medic.");
				format(string, sizeof(string), "Medic %s has accepted the call from %s. Distance: %.0fm.",sendername,giveplayer,GetDistanceBetweenPlayers(playerid, TaxiCall[id]));
				SendFamilyMessage(13, COLOR_CYAN, string);
				format(string, sizeof(string), "Checkpoint set on %s [%d].", giveplayer, id);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				MedicAccepted[playerid] = id;
				MedicCall[id] = 0;
				GetPlayerPos(id, X, Y, Z);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, X,Y,Z, 3.0);
				UsedFind[playerid] = 1;
				targetfind[playerid] = id;
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else if(strcmp(action,"cancel",true) == 0)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			SendClientMessage(playerid, COLOR_WHITE, "You have canceled the medic call!");
			format(string, sizeof(string), "Medic %s canceled your call.", sendername);
			SendClientMessage(MedicAccepted[playerid], COLOR_YELLOW, string);
			MedicAccepted[playerid] = -1;
			DisablePlayerCheckpoint(playerid);
			UsedFind[playerid] = 0;
			targetfind[playerid] = -1;
		}
	}
	return 1;
}
CMD:taxi(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pMember] != 13) return SendClientMessage(playerid, COLOR_GREY, "To call a taxi, use /service taxi.");
		new action[10], id, sendername[30], giveplayer[30], string[128], Float: X, Float: Y, Float: Z;
		if(sscanf(params, "s[10]u", action, id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /taxi [action] [id]");
		if(strcmp(action,"accept",true) == 0)
		{
			if(TaxiFare[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You can't accept a call because you're not on duty.");
			if(TaxiCall[id] == 0) return SendClientMessage(playerid, COLOR_GREY, "This player hasn't called for a taxi, or someone else accepted the call.");
			if(IsPlayerConnected(id))
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                if(PlayerInfo[id][pLanguage] == 2) format(string, sizeof(string), "Taximetristul %s ti-a acceptat apelul. Asteapta taxiul aici.", sendername);
                else format(string, sizeof(string), "Taxi driver %s has accepted your call. Please wait here for the taxi.", sendername);
				SendClientMessage(id, COLOR_YELLOW, string);
				SS(id, COLOR_WHITE, "Daca nu mai ai nevoie de un taxi, foloseste /cancel taxi.", "If you don't need a taxi anymore, use /cancel taxi.");
				format(string, sizeof(string), "Taxi driver %s has accepted the call from %s. Distance: %.0fm.",sendername,giveplayer,GetDistanceBetweenPlayers(playerid, TaxiCall[id]));
				SendFamilyMessage(13, COLOR_CYAN, string);
				format(string, sizeof(string), "Checkpoint set on %s [%d].", giveplayer, id);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				TaxiAccepted[playerid] = id;
				TaxiCall[id] = 0;
				GetPlayerPos(id, X, Y, Z);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, X,Y,Z, 3.0);
				UsedFind[playerid] = 1;
				targetfind[playerid] = id;
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else if(strcmp(action,"cancel",true) == 0)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			SendClientMessage(playerid, COLOR_WHITE, "You have canceled the taxi call!");
			format(string, sizeof(string), "Taxi driver %s canceled your call.", sendername);
			SendClientMessage(TaxiAccepted[playerid], COLOR_YELLOW, string);
			TaxiAccepted[playerid] = -1;
			DisablePlayerCheckpoint(playerid);
			UsedFind[playerid] = 0;
			targetfind[playerid] = -1;
		}
	}
	return 1;
}
CMD:fare(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pMember] != 13) return SendClientMessage(playerid, COLOR_GREY, "You are not a taxi driver.");
		new fare,string[128],name[30];
		if(sscanf(params, "d", fare)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fare [amount]");
		if(fare < 0 || fare > 2000) return SendClientMessage(playerid, COLOR_GREY, "Fare must be between 1 and 2000.");
		if(fare == 0)
		{
			TaxiFare[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "You are now off duty!");
			PlayerTextDrawHide(playerid, RentCarText[playerid]);
			TaxiMoneyEarned[playerid] = 0;
			foreach(new i : Player)
			{
				if(TaxiDriver[i] == playerid)
				{
					TaxiDriver[i] = -1;
					TaxiMoneySpent[i] = 0;
					TaxiTimer[i] = 0;
					PlayerTextDrawHide(i, RentCarText[i]);
				}
			}
		}
		else
		{
			if(!IsAnTaxi(GetPlayerVehicleID(playerid))) return 1;
			GetPlayerName(playerid, name, sizeof(name));
			TaxiFare[playerid] = fare;
			format(string, sizeof(string), "* Taxi driver %s is now on duty ($%d). [/service taxi]", name, fare);
			SendClientMessageToAll(COLOR_ADV, string);
			SendClientMessage(playerid, COLOR_WHITE, "To get off duty, use /fare 0!");
			PlayerTextDrawSetString(playerid, RentCarText[playerid], "~r~waiting for customers..");
			PlayerTextDrawShow(playerid, RentCarText[playerid]);
			foreach(new i : Player)
			{
				if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i) && playerid != i)
				{
					TaxiDriver[i] = playerid;
					TaxiMoneySpent[i] += TaxiFare[playerid];
					TaxiMoneyEarned[playerid] += TaxiFare[playerid];
					GivePlayerCash(i, -TaxiFare[playerid]);
					GivePlayerCash(playerid, TaxiFare[playerid]);
					Update(i, pCashx);
					Update(playerid, pCashx);
					new timer = 10 + random(7);
					TaxiTimer[i] = timer;
					format(string, sizeof(string), "money earned: ~g~$%d", TaxiMoneyEarned[playerid]);
					PlayerTextDrawSetString(playerid, RentCarText[playerid], string);
					PlayerTextDrawShow(playerid, RentCarText[playerid]);
					format(string, sizeof(string), "money spent so far: ~g~$%d", TaxiMoneySpent[i]);
					PlayerTextDrawSetString(i, RentCarText[i], string);
					PlayerTextDrawShow(i, RentCarText[i]);
				}
			}
		}
	}
	return 1;
}
CMD:free(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new id,moneyfree,giveplayer[30],sendername[30],string[200],string2[200];
		if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a cop.");
		if(sscanf(params, "ui", id,moneyfree)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /free [name/playerid] [amount]");
		if(PlayerInfo[id][pJailed] < 1) return SCM(playerid, COLOR_GREY, "This player is not in jail.");
		if(PlayerInfo[id][pJailed] == 2) return SCM(playerid, COLOR_GREY, "This player have admin jail.");
		if(playerid == id) return SCM(playerid, COLOR_GREY, "You can't free yourself.");
		if(FreeExpire[playerid] > 0) return SS(playerid, COLOR_WHITE, "Ai oferit deja un free, te rugam sa astepti 30 secunde pentru a oferii un alt free.", "You offered already a free, please wait 30 seconds before offer another free.");
		if(PlayerInfo[playerid][pRob] < 3) return SS(playerid, COLOR_WHITE, "Ai nevoie de minim 3 puncte rob pentru a putea oferi free.", "You need 3 rob points to offer a free.");
		if(moneyfree < 1 || moneyfree > 1000000) return SCM(playerid, COLOR_GREY, "Invalid amount of money($1-$1,000,000).");
		if(ProxDetectorS(10.0, playerid, id))
		{
            if(IsPlayerConnected(id))
            {
                if(id != INVALID_PLAYER_ID)
                {
	 				FreeOffer[id] = playerid;
	 				FreePlayer[playerid] = id;
					FreePrice[id] = moneyfree;
					FreeExpire[playerid] = 30;
	 				GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "I-ai trimis lui %s o oferta de a fi eliberat pentru $%s.",giveplayer,FormatNumber(moneyfree));
					format(string2, sizeof(string2), "You have send to %s an offer to be released from jail for $%s.",giveplayer,FormatNumber(moneyfree));
					SS(playerid, COLOR_DARKPINK, string, string2);
					format(string, sizeof(string), "> %s doreste sa iti ofere posibilitatea de a iesi din jail in schimbul sumei de $%s. Scrie /accept free %d pentru a accepta.",sendername,FormatNumber(moneyfree),playerid);
					format(string2, sizeof(string2), "> %s has offered you to be released from jail for $%s. Use /accept free %d to accept the offer.",sendername,FormatNumber(moneyfree),playerid);
					SS(id, COLOR_DBLUE, string, string2);
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SCM(playerid, COLOR_GREY, "This player is not near you.");
	}
	return 1;
}
CMD:placegotoevent(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
 	{
 	    new Float:x, Float:y, Float:z, sendername[25], string[256];
     	GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerPos(playerid, x, y, z);
 	    if(!eventenabled)
	    {
   			pickup_event = CreatePickup(1314, 23, x, y, z, GetPlayerVirtualWorld(playerid));
   			evex = x;
   			evey = y;
   			evez = z;
   			eventenabled = 1;
   			interiorevent = GetPlayerInterior(playerid);
		   	virtuallevent = GetPlayerVirtualWorld(playerid);
   			dynamicevent3DText = CreateStreamed3DTextLabel("Event Teleport",COLOR_LIGHTRED, x, y, z+0.25,8.0,GetPlayerVirtualWorld(playerid));
   			format(string, sizeof(string), "(( Info: Admin %s activated event teleport, type /gotoevent. ))", sendername);
			SendClientMessageToAll(COLOR_LIGHTRED,string);
			return 1;
		}
		else
		{
			DestroyPickup(pickup_event);
			evex = 0.0;
			evey = 0.0;
			evez = 0.0;
			eventenabled = 0;
			interiorevent = 0;
			virtuallevent = 0;
			DestroyDynamic3DTextLabel(dynamicevent3DText);
			format(string, sizeof(string), "(( Info: Admin %s deactivated event teleport. ))", sendername);
			SendClientMessageToAll(COLOR_LIGHTRED,string);
		}
		return 1;
	}
	else
	{
 		SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:gotoevent(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pPaintBallG] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You can't use this command at Paintball.");
	if(IsPlayerConnected(playerid))
	{
	    if(eventenabled)
	    {
	        SetPlayerInterior(playerid, interiorevent);
	        SetPlayerVirtualWorld(playerid, virtuallevent);
			SetPlayerPosEx(playerid, evex, evey, evez);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have been teleported at event.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "No event teleport activated.");
	}
	return 1;
}
CMD:fireworks(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Use /placefireworks");
	return 1;
}
CMD:placefireworks(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pFWorks] > 0)
	{
		if(FireworkTimer[playerid] != 0) return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi artificiile o data la 30 de secunde.", "You can only place fireworks every 30 seconds.");
		new Float:x, Float:y, Float:z, string[128], name[30];
		GetPlayerName(playerid, name, sizeof(name));
		GetPlayerPos(playerid, x, y, z);
		CreateFirework(x, y, z);
		SendClientMessage(playerid, COLOR_DARKPINK, "Firework placed.");
		format(string, sizeof(string), "* %s takes some fireworks out of his pocket and places them on the ground.", name);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pFWorks]--;
		Update(playerid, pFWorksx);
		FireworkTimer[playerid] = 30;
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have fireworks.");
	return 1;
}
CMD:killcp(playerid, params[])
{
    if(CP[playerid] != 0)
 	{
  		DisablePlayerCheckpoint(playerid);
  		SendClientMessage(playerid,COLOR_WHITE,"You have disabled the checkpoint.");
  		CP[playerid] = 0;
 	}
    else if(UsedFind[playerid] == 1)
	{
		UsedFind[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		foreach(new i : Player)
		{
			if(IsACop(playerid))
			{
   				if(caser[playerid] == i)
			    {
					cased[i] --;
					caser[playerid] = 1001;
				}
			}
		}
		PlayerTextDrawHide(playerid, FindTXD[playerid][0]);
		PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
	}
	else if(BusinessRob[playerid] > 0)
	{
		SendClientMessage(playerid,COLOR_WHITE,"You can't use this while robbing the bank.");
		return 1;
	}
 	else if(Trucker[playerid] >= 1)
 	{
   		ShowPlayerDialog(playerid, DIALOG_CANCELJOB, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Vrei sa anulezi jobul curent?", "Da", "Nu");
 	}
 	return 1;
}
CMD:rrx(playerid, params[])
{
	new giveplayerid, splayer[25];
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not logged in.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_WHITE, "SERVER: Unknown command.");
	if(sscanf(params,"s[25]", splayer)) return SendClientMessage(playerid, COLOR_GREY,"Syntax:{FFFFFF} /rrx [name/playerid]");
	{
	    if(GetPlayers(splayer) == INVALID_PLAYER_ID) return InvalidPlayer(playerid);
		else if(GetPlayers(splayer) == 1000) return ToManyResults(playerid);
		else if(GetPlayers(splayer) == 1001) return ShowResults(playerid, splayer);
		else giveplayerid = GetPlayers(splayer);
	    IsBot[giveplayerid] = 1;
	    SetPlayerVirtualWorld(giveplayerid, giveplayerid);
	}
	return 1;
}
CMD:cancel(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		new x_job[256],string[128],name[30];
		if(sscanf(params, "s[256]",x_job))
		{
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cancel [service]");
			return 1;
		}
		if(strcmp(x_job,"requestevent",true) == 0)
		{
			if(requestingevent[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You haven't requested an event.");
			requestingevent[playerid] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your event request has been cancelled.");
		}
		else if(strcmp(x_job,"free",true) == 0)
		{
			if(FreeOffer[playerid] == -1) return SCM(playerid,COLOR_WHITE,"No one offered you a free.");
			FreeOffer[playerid] = -1;
			FreePrice[playerid] = 0;
		}
		else if(strcmp(x_job,"drugs",true) == 0)
		{
			if(DrugOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE,"No one offered you drugs.");
			DrugOffer[playerid] = 999;
			DrugPrice[playerid] = 0;
			DrugGram[playerid] = 0;
		}
		else if(strcmp(x_job,"repair",true) == 0)
		{
			if(RepairOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE,"No one offered you repair.");
			RepairOffer[playerid] = 999;
			RepairPrice[playerid] = 0;
			RepairCar[playerid] = 0;
		}
		else if(strcmp(x_job,"materials",true) == 0)
		{
			if(MatsOffer[playerid] == -1) return SCM(playerid,COLOR_WHITE,"No one offered you materials.");
			MatsOffer[playerid] = -1;
			MatsPrice[playerid] = 0;
			MatsAmmo[playerid] = 0;
		}
		else if(strcmp(x_job,"gun",true) == 0)
		{
			if(SellgunOffer[playerid] == -1) return SCM(playerid,COLOR_WHITE,"No one offered you gun.");
			SellgunOffer[playerid] = -1;
			SellgunPrice[playerid] = 0;
			SellgunMats[playerid] = 0;
			SellgunAmmo[playerid] = 0;
			SellgunID[playerid] = 0;
		}
		else if(strcmp(x_job,"find",true) == 0)
		{
			if(UsedFind[playerid] == 0) return SCM(playerid,COLOR_WHITE,"You don't have a find checkpoint.");
			if(UsedFind[playerid] == 1)
			{
				UsedFind[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				foreach(new i : Player)
				{
					if(IsACop(playerid))
					{
					    if(caser[playerid] == i)
					    {
							cased[i] --;
							caser[playerid] = 1001;
						}
					}
				}
				PlayerTextDrawHide(playerid, FindTXD[playerid][0]);
				PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
			}
		}
		else if(strcmp(x_job,"live",true) == 0)
		{
			if(LiveOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE,"No one offered you a live.");
			LiveOffer[playerid] = 999;
		}
		else if(strcmp(x_job,"refill",true) == 0)
		{
			if(RefillOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE,"No one offered you refill.");
			RefillOffer[playerid] = 999;
			RefillPrice[playerid] = 0;
		}
		else if(strcmp(x_job,"ticket",true) == 0)
		{
			if(TicketOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE,"No one offered you ticket.");
			TicketOffer[playerid] = 999;
			TicketMoney[playerid] = 0;
		}
		else if(strcmp(x_job,"medic",true) == 0)
		{
			if(MedicCall[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You have not called for an ambulance.");
			MedicCall[playerid] = 0;
			SendClientMessage(playerid, COLOR_DARKPINK, "Medic call cancelled.");
			GetPlayerName(playerid, name, sizeof(name));
			format(string, sizeof(string), "%s [%d] has canceled the medic call.", name, playerid);
			SendFamilyMessage(14, COLOR_CYAN, string);
		}
  		else if(strcmp(x_job,"House",true) == 0)
		{
			if(HouseOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE,"No one offered you a house.");
			HouseID[playerid] = 0;
			HouseOffer[playerid] = 999;
			HousePrice[playerid] = 0;
		}
		else if(strcmp(x_job,"taxi",true) == 0)
		{
			if(TaxiCall[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You have not called for a taxi.");
			TaxiCall[playerid] = 0;
			SendClientMessage(playerid, COLOR_DARKPINK, "Taxi call cancelled.");
			GetPlayerName(playerid, name, sizeof(name));
			format(string, sizeof(string), "%s [%d] has canceled the taxi call.", name, playerid);
			SendFamilyMessage(13, COLOR_CYAN, string);
		}
	}
	return 1;
}
CMD:accept(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new x_job[256],
			id,
			sendername[25],
			giveplayer[25],
			string[300];
		if(sscanf(params, "s[256]u",x_job,id))
		{
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /accept [item]");
			SendClientMessage(playerid, COLOR_WHITE, "Items: Invite, Weapon, Car, Ticket, Dice");
			return 1;
		}
		if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		if(strcmp(x_job,"dice",true) == 0)
		{
			if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
			if(Diceid[playerid] == 999) return SS(playerid, COLOR_WHITE, "Niciun player nu te-a invitat sa joci barbut.", "Nobody invited you to play dice.");
			if(Diceid[playerid] != id) return SS(playerid, COLOR_WHITE, "Acel player nu te-a invitat sa joci barbut cu el.", "That player didn't invited you to play dice with him.");
			if(GetPlayerCash(playerid) < Dicem[playerid]) return SS(playerid, COLOR_WHITE, "Tu sau adversarul tau nu aveti suficienti bani pentru a juca barbut.", "You or your adversary doesn't have enough money to play dice.");
		    if(GetPlayerCash(id) < Dicem[playerid]) return SS(playerid, COLOR_WHITE, "Tu sau adversarul tau nu aveti suficienti bani pentru a juca barbut.", "You or your adversary doesn't have enough money to play dice.");
			if(ProxDetectorS(10.0, playerid, Diceid[playerid]))
			{
			   	new dice1[MAX_PLAYERS],dice2[MAX_PLAYERS],total[MAX_PLAYERS];
			    dice1[playerid] = random(6) + 1;
				dice2[playerid] = random(6) + 1;
				total[playerid] = dice1[playerid] + dice2[playerid];
			    dice1[Diceid[playerid]] = random(6) + 1;
				dice2[Diceid[playerid]] = random(6) + 1;
				total[Diceid[playerid]] = dice1[Diceid[playerid]] + dice2[Diceid[playerid]];
			    GetPlayerName(playerid,sendername,sizeof(sendername));
			    GetPlayerName(Diceid[playerid],giveplayer,sizeof(giveplayer));
			    if(total[playerid] > total[Diceid[playerid]])
			    {
					format(string,sizeof(string),"%s rolls %d %d. %s rolls %d %d. %s won $%s.",sendername,dice1[playerid],dice2[playerid],giveplayer,dice1[Diceid[playerid]],dice2[Diceid[playerid]],sendername,FormatNumber(Dicem[playerid]));
					ProxDetector(10.0,playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid,Dicem[playerid]);
					GivePlayerCash(Diceid[playerid],-Dicem[playerid]);
					if(PlayerInfo[playerid][pLanguage] == 2)
					{
						format(string,sizeof(string),"(+) Ai castigat $%s!",FormatNumber(Dicem[playerid]));
						SendClientMessage(playerid, COLOR_GREEN, string);
						format(string,sizeof(string),"(-) Ai pierdut $%s!",FormatNumber(Dicem[playerid]));
						SendClientMessage(Diceid[playerid], COLOR_GREEN, string);
					}
					else
					{
						format(string,sizeof(string),"(+) You won $%s!",FormatNumber(Dicem[playerid]));
						SendClientMessage(playerid, COLOR_GREEN, string);
						format(string,sizeof(string),"(-) You lost $%s!",FormatNumber(Dicem[playerid]));
						SendClientMessage(Diceid[playerid], COLOR_GREEN, string);
					}
				}
				if(total[Diceid[playerid]] > total[playerid])
				{
					format(string,sizeof(string),"%s rolls %d %d. %s rolls %d %d. %s won $%s.",sendername,dice1[playerid],dice2[playerid],giveplayer,dice1[Diceid[playerid]],dice2[Diceid[playerid]],giveplayer,FormatNumber(Dicem[playerid]));
					ProxDetector(10.0,playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid,-Dicem[playerid]);
					GivePlayerCash(Diceid[playerid],Dicem[playerid]);
					if(PlayerInfo[Diceid[playerid]][pLanguage] == 2)
					{
						format(string,sizeof(string),"(+) Ai castigat $%s!",FormatNumber(Dicem[playerid]));
						SendClientMessage(Diceid[playerid], COLOR_GREEN, string);
						format(string,sizeof(string),"(-) Ai pierdut $%s!",FormatNumber(Dicem[playerid]));
						SendClientMessage(playerid, COLOR_GREEN, string);
					}
					else
					{
						format(string,sizeof(string),"(+) You won $%s!",FormatNumber(Dicem[playerid]));
						SendClientMessage(Diceid[playerid], COLOR_GREEN, string);
						format(string,sizeof(string),"(-) You lost $%s!",FormatNumber(Dicem[playerid]));
						SendClientMessage(playerid, COLOR_GREEN, string);
					}
				}
				if(total[Diceid[playerid]] == total[playerid])
				{
					format(string,sizeof(string),"%s rolls %d %d. %s rolls %d %d. No one won.",sendername,dice1[playerid],dice2[playerid],giveplayer,dice1[Diceid[playerid]],dice2[Diceid[playerid]]);
					ProxDetector(10.0,playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				Update(playerid, pCashx);
				Update(Diceid[playerid], pCashx);
				Diceid[playerid] = 999;
				Dicem[playerid] = 0;
			}
			else return SS(playerid, COLOR_WHITE, "Nu esti langa acel player.", "You are not near that player.");
			return 1;
		}
		else if(strcmp(x_job,"invite",true) == 0)
		{
		    if(FactionOffer[playerid] != 999)
		    {
		        new str[256];
		        GetPlayerName(FactionOffer[playerid], sendername, sizeof(sendername));
		        GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
				new para1 = playerid, ftext[30];
				if(PlayerInfo[FactionOffer[playerid]][pMember] == 1) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "LSPD"; ChosenSkin[para1] = 71; SetPlayerSkin(para1, 71); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 2) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "FBI"; ChosenSkin[para1] = 163; SetPlayerSkin(para1, 163); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 3) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "National Guard"; ChosenSkin[para1] = 287; SetPlayerSkin(para1, 287); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 4) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Los Aztecas"; ChosenSkin[para1] = 114; SetPlayerSkin(para1, 114); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 5) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Grove Street"; ChosenSkin[para1] = 106; SetPlayerSkin(para1, 106); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 6) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Los Vagos"; ChosenSkin[para1] = 177; SetPlayerSkin(para1, 177); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 8) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "LVPD"; ChosenSkin[para1] = 71; SetPlayerSkin(para1, 71); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 9) { PlayerInfo[para1][pTeam] = 4; gTeam[para1] = 4; ftext = "News Reporter"; ChosenSkin[para1] = 188; SetPlayerSkin(para1, 188); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 10) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Ballas"; ChosenSkin[para1] = 104; SetPlayerSkin(para1, 104); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 11) { PlayerInfo[para1][pTeam] = 11; gTeam[para1] = 11; ftext = "Hitman Agency"; ChosenSkin[para1] = 208; SetPlayerSkin(para1, 208); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 12) { PlayerInfo[para1][pTeam] = 4; gTeam[para1] = 4; ftext = "School Instructors LV"; ChosenSkin[para1] = 153; SetPlayerSkin(para1, 153); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 13) { PlayerInfo[para1][pTeam] = 4; gTeam[para1] = 4; ftext = "Taxi"; ChosenSkin[para1] = 253; SetPlayerSkin(para1, 253); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 14) { PlayerInfo[para1][pTeam] = 4; gTeam[para1] = 4; ftext = "Las Venturas Paramedic"; ChosenSkin[para1] = 276; SetPlayerSkin(para1, 276); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 15) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "The Rifa"; ChosenSkin[para1] = 222; SetPlayerSkin(para1, 222); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 17) { PlayerInfo[para1][pTeam] = 4; gTeam[para1] = 4; ftext = "School Instrucotrs LS"; ChosenSkin[para1] = 266; SetPlayerSkin(para1, 266); }
				else if(PlayerInfo[FactionOffer[playerid]][pMember] == 18) { PlayerInfo[para1][pTeam] = 4; gTeam[para1] = 4; ftext = "San Fierro Paramedic"; ChosenSkin[para1] = 266; SetPlayerSkin(para1, 266); }
				else { return 1; }
                PlayerInfo[para1][pMember] = PlayerInfo[FactionOffer[playerid]][pMember];
				PlayerInfo[para1][pRank] = 1;
				PlayerInfo[para1][pModel] = ChosenSkin[para1];
				PlayerInfo[para1][pFactionJoin] = gettime();
				SetPlayerVirtualWorld(para1,0);
				SetSpawnInfo(playerid, PlayerInfo[para1][pTeam], PlayerInfo[para1][pModel],0.0,0.0,0.0,0,0,0,0,0,0,0);
		    	gTeam[para1] = PlayerInfo[para1][pTeam];
				SetPlayerToTeamColor(para1);
				SpawnPlayer(para1);
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Team`='%d',`Member`='%d',`Rank`='1',`Model`='%d',`FactionJoin`='%d' WHERE `name`='%s'",PlayerInfo[para1][pTeam],PlayerInfo[para1][pMember],PlayerInfo[para1][pModel],PlayerInfo[para1][pFactionJoin],PlayerInfo[para1][pNormalName]);
				mysql_tquery(SQL,str,"","");
				new string2[256],query[256],string3[256];
				format(string,sizeof(string),"You are now a member of the %s.",ftext);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string,sizeof(string),"%s has joined the group (invited by %s).",giveplayer,sendername);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string);
				format(string2, sizeof(string2), "%s has joined the group %s (invited by %s).", PlayerInfo[playerid][pNormalName], ftext, PlayerInfo[FactionOffer[playerid]][pNormalName]);
				mysql_real_escape_string(string2, string3);
				mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`, `player`,`leader`) VALUES ('%s','%d','%d')", string3, PlayerInfo[para1][pSQLID],PlayerInfo[FactionOffer[playerid]][pSQLID]);
				mysql_tquery(SQL,query,"","");
				format(string2,sizeof(string2),"%s[user:%d] has joined the group %s (invited by %s[user:%d]).",giveplayer,PlayerInfo[para1][pSQLID],ftext,sendername,PlayerInfo[FactionOffer[playerid]][pSQLID]);
				mysql_real_escape_string(string2, string3);
				Factionlog(PlayerInfo[para1][pMember],PlayerInfo[para1][pSQLID],PlayerInfo[FactionOffer[playerid]][pSQLID],string3);
				new varxx[256];
				mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport1 = 0, Raport2 = 0, Raport3 = 0, Raport4 = 0, Raport5 = 0, Raport6 = 0, PaydayON = 0 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,varxx,"","");
				mysql_format(SQL, varxx, sizeof(varxx), "UPDATE aplications SET `status` = '2' WHERE `name` = '%s' AND `status` = '1'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,varxx,"","");
			}
		}
	 	else if(strcmp(x_job,"free",true) == 0)
		{
            if(FreeOffer[playerid] > -1)
			{
                if(FreeOffer[playerid] != id) return SCM(playerid,COLOR_WHITE,"This player has not offered you a free.");
			    if(GetPlayerCash(playerid) < FreePrice[playerid]) return SCM(playerid,COLOR_WHITE,"You don't have enough money.");
			    GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(FreeOffer[playerid], sendername, sizeof(sendername));
				format(string, sizeof(string), "(+) %s a acceptat oferta de a fi eliberat iar tu ai primit $%s.", giveplayer, FormatNumber(FreePrice[playerid]));
				SendClientMessage(FreeOffer[playerid], COLOR_GREEN, string);
				PlayerInfo[FreeOffer[playerid]][pRob] -= 3;
				format(string, sizeof(string), "Ai platit $%s pentru a fi eliberat din inchisoare.", FormatNumber(FreePrice[playerid]));
				SendClientMessage(playerid, COLOR_DARKPINK, string);
				PlayerInfo[playerid][pJailTime] = 1;
				GivePlayerCash(playerid, -FreePrice[playerid]);
				GivePlayerCash(FreeOffer[playerid],FreePrice[playerid]);
				PlayerInfo[playerid][pJailed] = 1;
				new str[356];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `JailTime`='0',`Money`='%d',`Jailed`='0' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d' WHERE `name`='%s'",GetPlayerCash(FreeOffer[playerid]),PlayerInfo[FreeOffer[playerid]][pNormalName]);
				mysql_tquery(SQL,str,"","");
				//KillTimer(timerfree1[FreeOffer[playerid]]);
                FreeOffer[playerid] = -1;
                FreePlayer[playerid] = -1;
				FreePrice[playerid] = 0;
				format(string, sizeof(string), "Dispatch: %s was released by %s from jail.", giveplayer, sendername);
				SendTeamMessage(8, COLOR_DBLUE, string);
				SendTeamMessage(3, COLOR_DBLUE, string);
				SendTeamMessage(2, COLOR_DBLUE, string);
				SendTeamMessage(1, COLOR_DBLUE, string);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Nobody offered you free.");
		}
		else if(strcmp(x_job,"cinvite",true) == 0)
		{
	        if(GetPVarInt(playerid, "cinvID") >= 1)
			{
	            new messageString[128],str33[184],iddd,name2[30],strings[128];
	            PlayerInfo[playerid][pClan] = GetPVarInt(playerid, "cinvID");
				iddd = GetPVarInt(playerid, "cinvIDD");
				GetPlayerName(iddd,name2,sizeof(name2));
				PlayerInfo[playerid][pCRank] = 1;
				DeletePVar(playerid, "cinvID");
				DeletePVar(playerid, "cinvIDD");
				GetPlayerName(playerid,sendername,sizeof(sendername));
				format(messageString, sizeof(messageString), "{%s}[CLAN] %s joined the clan (invited by %s).",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],sendername,name2);
				SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, messageString);
				mysql_format(SQL,str33,sizeof(str33),"UPDATE users SET `Clan`='%d',`CRank`='1',`ClanJoin`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pClan],gettime(),PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str33,"","");
				format(messageString, sizeof(messageString), "%s joined the clan (invited by %s).",sendername,name2);
				mysql_real_escape_string(messageString, strings);
				mysql_format(SQL,str33,sizeof(str33),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
				mysql_tquery(SQL,str33,"","");

	        }
	        else {
				return SendClientMessage(playerid, COLOR_GREY, "You don't have an active clan invite request.");
			}
	    }
		else if(strcmp(x_job,"materials",true) == 0)
		{
			if(MatsOffer[playerid] > -1)
			{
			    if(MatsOffer[playerid] != id) return SCM(playerid,COLOR_WHITE,"This player has not offered you materials.");
			    if(GetPlayerCash(playerid) < MatsPrice[playerid]) return SCM(playerid,COLOR_WHITE,"You don't have enough money.");
				PlayerInfo[playerid][pMats] += MatsAmmo[playerid];
				PlayerInfo[MatsOffer[playerid]][pMats] -= MatsAmmo[playerid];
			    GivePlayerCash(playerid, - MatsPrice[playerid]);
			    GivePlayerCash(MatsOffer[playerid], MatsPrice[playerid]);
			    GetPlayerName(MatsOffer[playerid],giveplayer,sizeof(giveplayer));
			    GetPlayerName(playerid,sendername,sizeof(sendername));
			    format(string,sizeof(string),"{B8FFDB}You buy %d materials for $%s from %s.",MatsAmmo[playerid],FormatNumber(MatsPrice[playerid]),giveplayer);
				SCM(playerid,COLOR_WHITE,string);
			    format(string,sizeof(string),"{B8FFDB}%s bought your materials for $%s.",sendername,FormatNumber(MatsPrice[playerid]));
				SCM(MatsOffer[playerid],COLOR_WHITE,string);
		        Update(playerid,pMatsx);
		        Update(MatsOffer[playerid],pMatsx);
		        Update(MatsOffer[playerid],pCashx);
				Update(playerid,pCashx);
				MatsOffer[playerid] = -1;
				MatsAmmo[playerid] = 0;
				MatsPrice[playerid] = 0;
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Nobody offered you materials.");
		}
		else if(strcmp(x_job,"gun",true) == 0)
		{
			if(SellgunOffer[playerid] > -1)
			{
			    if(SellgunOffer[playerid] != id) return SCM(playerid,COLOR_WHITE,"This player has not offered you gun.");
			    if(GetPlayerCash(playerid) < SellgunPrice[playerid]) return SCM(playerid,COLOR_WHITE,"You don't have enough money.");
			    new weaponid,ammo,price,mats,gunname[60],idoffer;
			    weaponid = SellgunID[playerid];
			    ammo = SellgunAmmo[playerid];
				price = SellgunPrice[playerid];
				mats = SellgunMats[playerid];
				idoffer = SellgunOffer[playerid];
			    GivePlayerWeaponEx(playerid,weaponid,ammo);
				PlayerInfo[idoffer][pMats] -= mats;
				GivePlayerCash(playerid, -price);
			    GivePlayerCash(idoffer, price);
				Update(playerid, pCashx);
				Update(idoffer,pMatsx);
				Update(idoffer, pCashx);
				GetPlayerName(idoffer,giveplayer,sizeof(giveplayer));
			    GetPlayerName(playerid,sendername,sizeof(sendername));
				GetWeaponNameEx(weaponid,gunname,sizeof(gunname));
				format(string, sizeof(string), "You have given %s, a %s with %d ammo, for %d Materials.", sendername,gunname, ammo,mats);
				SendClientMessage(idoffer, COLOR_GRAD1, string);
				format(string, sizeof(string), "You have recieved a %s with %d ammo from %s.", gunname, ammo, giveplayer);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "* %s created a Gun from Materials, and hands it to %s.", giveplayer ,sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SellgunOffer[playerid] = -1;
				SellgunPrice[playerid] = 0;
				SellgunMats[playerid] = 0;
				SellgunAmmo[playerid] = 0;
				SellgunID[playerid] = 0;
				if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
				{
			        new gun2,tmp;
			        GetPlayerWeaponData(playerid,5,gun2,tmp);
			        #pragma unused tmp
			        if(gun2)SetPlayerArmedWeapon(playerid,gun2);
			        else SetPlayerArmedWeapon(playerid,0);
				}
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Nobody offered you materials.");
		}
  		else if(strcmp(x_job,"biz",true) == 0)
		{
			if(bizoffer[playerid] < 999)
			{
				if(bizoffer[playerid] != id) return SCM(playerid,COLOR_WHITE,"This player has not offered you a bussines.");
				if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
				if(GetPlayerCash(playerid) >= bizprice[playerid])
				{
					if(IsPlayerConnected(bizoffer[playerid]))
					{
					    if(ProxDetectorS(5.0, playerid, bizoffer[playerid]))
					    {
					    	new time,count;
					    	format(string, sizeof(string), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", PlayerInfo[playerid][pSQLID]);
							new Cache: salut = mysql_query(SQL, string);
							for(new i, j = cache_get_row_count (); i != j; ++i)
							{
								if(count < 30)
								{
									time += cache_get_field_content_int(i, "time");
									count++;
								}
							}
							cache_delete(salut);
							if(time < 36000) return SS(playerid, COLOR_LIGHTGREEN3, "Trebuie sa ai 10 ore jucate in ultimele 30 de zile (fara AFK/sleep) pentru a putea cumpara o proprietate.", "You need 10 played hours in last 30 days (without AFK/sleep) to buy a property.");
					        GetPlayerName(bizoffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "You accepted to buy business %d for $%s from %s.",bizid[playerid],FormatNumber(bizprice[playerid]),giveplayer);
							SendClientMessage(playerid, COLOR_GREEN, string);
							format(string, sizeof(string), "%s accepted to buy your business for $%s.",sendername,FormatNumber(bizprice[playerid]));
							SendClientMessage(bizoffer[playerid], COLOR_GREEN, string);
							format(string, sizeof(string), "%s [user:%d] a cumparat bizz-ul(/sellbizto) [bizz:%d] de la %s [user:%d] pentru $%s.",sendername,PlayerInfo[playerid][pSQLID],bizid[playerid],giveplayer,PlayerInfo[bizoffer[playerid]][pSQLID],FormatNumber(bizprice[playerid]));
                            ABroadCast(COLOR_YELLOW,string,1);
                            new var100[256],string2[256];
	    					mysql_real_escape_string(string, string2);
							mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID],PlayerInfo[HouseOffer[playerid]][pSQLID],string2);
							mysql_tquery(SQL,var100,"","");
							GivePlayerCash(playerid, -bizprice[playerid]);
						    GivePlayerCash(bizoffer[playerid], bizprice[playerid]);
						    new str[356];
							PlayerInfo[playerid][pPbiskey] = bizid[playerid];
							strmid(BizzInfo[bizid[playerid]][bOwner], PlayerInfo[playerid][pNormalName], 0, 25, 999);
							mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Bizz`='%d',`Money`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPbiskey],GetPlayerCash(playerid),PlayerInfo[playerid][pNormalName]);
							mysql_tquery(SQL,str,"","");
							mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Owner`='%s' WHERE `ID`='%d'",BizzInfo[bizid[playerid]][bOwner],bizid[playerid]);
							mysql_tquery(SQL,str,"","");
							OnPropTextdrawUpdate(2,bizid[playerid]);
							PlayerInfo[bizoffer[playerid]][pPbiskey] = 255;
							mysql_format(SQL,string,sizeof(string),"UPDATE users SET `Bizz`='255',`Money`='%d' WHERE `name`='%s'",GetPlayerCash(bizoffer[playerid]),PlayerInfo[bizoffer[playerid]][pNormalName]);
							mysql_tquery(SQL,string,"","");
							bizid[playerid] = 0;
							bizprice[playerid] = 0;
							bizoffer[playerid] = 999;
							return 1;
						}
						else return SendClientMessage(playerid, COLOR_WHITE, "You need to be near the seller.");
					}
					else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Nobody offered you a bussines.");
		}
   		else if(strcmp(x_job,"house",true) == 0)
		{
			if(HouseOffer[playerid] < 999)
			{
				if(HouseOffer[playerid] != id) return SCM(playerid,COLOR_WHITE,"This player has not offered you a house.");
				if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
				if(GetPlayerCash(playerid) >= HousePrice[playerid])
				{
					if(IsPlayerConnected(HouseOffer[playerid]))
					{
					    if(ProxDetectorS(3.0, playerid, HouseOffer[playerid]))
					    {
					    	if(PlayerInfo[id][pPhousekey] != HouseID[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "This player don't own the house offered.");
					    	if(PlayerInfo[id][pPhousekey] == PlayerInfo[id][pRented]) return SendClientMessage(playerid, COLOR_WHITE, "This player don't own the house offered");
					    	new time,count;
					    	format(string, sizeof(string), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", PlayerInfo[playerid][pSQLID]);
							new Cache: salut = mysql_query(SQL, string);
							for(new i, j = cache_get_row_count (); i != j; ++i)
							{
								if(count < 30)
								{
									time += cache_get_field_content_int(i, "time");
									count++;
								}
							}
							cache_delete(salut);
							if(time < 36000) return SS(playerid, COLOR_LIGHTGREEN3, "Trebuie sa ai 10 ore jucate in ultimele 30 de zile (fara AFK/sleep) pentru a putea cumpara o proprietate.", "You need 10 played hours in last 30 days (without AFK/sleep) to buy a property.");
					    	GetPlayerName(HouseOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "You accepted to buy house %d for $%s from %s.",HouseID[playerid],FormatNumber(HousePrice[playerid]),giveplayer);
							SendClientMessage(playerid, COLOR_GREEN, string);
							format(string, sizeof(string), "%s accepted to buy your house for $%s.",sendername,FormatNumber(HousePrice[playerid]));
							SendClientMessage(HouseOffer[playerid], COLOR_GREEN, string);
							format(string, sizeof(string), "%s [user:%d] a cumparat casa(/sellhouseto) [house:%d] de la %s [user:%d] pentru $%s.",sendername,PlayerInfo[playerid][pSQLID],HouseID[playerid],giveplayer,PlayerInfo[HouseOffer[playerid]][pSQLID],FormatNumber(HousePrice[playerid]));
                            ABroadCast(COLOR_YELLOW,string,1);
                            new var100[256],string2[256];
	    					mysql_real_escape_string(string, string2);
							mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID],PlayerInfo[HouseOffer[playerid]][pSQLID],string2);
							mysql_tquery(SQL,var100,"","");
							PlayerInfo[playerid][pPhousekey] = HouseID[playerid];
							PlayerInfo[HouseOffer[playerid]][pPhousekey] = 999;
		    				GivePlayerCash(playerid, -HousePrice[playerid]);
						    GivePlayerCash(HouseOffer[playerid], HousePrice[playerid]);
							strmid(HouseInfo[HouseID[playerid]][hOwner], PlayerInfo[playerid][pNormalName], 0, 25, 999);
							Update(playerid,pCashx);
							Update(playerid,pPhousekeyx);
							Update(HouseOffer[playerid],pPhousekeyx);
							Update(HouseOffer[playerid],pCashx);
							new str2[256];
							mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'",HouseInfo[HouseID[playerid]][hOwner],HouseID[playerid]);
							mysql_tquery(SQL,str2,"","");
							OnPropTextdrawUpdate(1,HouseID[playerid]);
							RemovePlayerMapIcon(HouseOffer[playerid], 1);
							HouseOffer[playerid] = 999;
							HousePrice[playerid] = 0;
							HouseID[playerid] = 0;
							return 1;
						}
						else return SendClientMessage(playerid, COLOR_WHITE, "You need to be near the seller.");
					}
					else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Nobody offered you a house.");
		}
		else if(strcmp(x_job,"ticket",true) == 0)
		{
			if(TicketOffer[playerid] < 999)
			{
				if(TicketOffer[playerid] != id) return SCM(playerid,COLOR_WHITE,"This player has not offered you ticket.");
			    if(IsPlayerConnected(TicketOffer[playerid]))
			    {
			        if (ProxDetectorS(5.0, playerid, TicketOffer[playerid]))
					{
				        GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(GetPlayerCash(playerid) < TicketMoney[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
						format(string, sizeof(string), "* %s takes out $%d in cash, and hands it to %s.", sendername, TicketMoney[playerid], giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						format(string, sizeof(string), "You have paid the $%d ticket %s issued you.", TicketMoney[playerid], giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "%s has accepted the $%d ticket you issued them - you have received $%d.", sendername, TicketMoney[playerid], TicketMoney[playerid]);
						SendClientMessage(TicketOffer[playerid], COLOR_WHITE, string);
						GivePlayerCash(playerid, - TicketMoney[playerid]);
						GivePlayerCash(TicketOffer[playerid], TicketMoney[playerid]);
						new varxx[256];
						mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport1 = Raport1+1 WHERE name = '%s'",PlayerInfo[TicketOffer[playerid]][pNormalName]);
						mysql_tquery(SQL,varxx,"","");
						Update(playerid, pCashx);
						Update(TicketOffer[playerid], pCashx);
						TicketOffer[playerid] = 999;
						TicketMoney[playerid] = 0;
						return 1;
					}
					else return SendClientMessage(playerid, COLOR_WHITE, "The officer is not near you.");
			    }
			    else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Nobody offered you a ticket.");
		}
		else if(strcmp(x_job,"refill",true) == 0)
		{
			if(RefillOffer[playerid] < 999)
			{
				if(RefillOffer[playerid] != id) return SCM(playerid,COLOR_WHITE,"This player has not offered you a refill.");
				if(IsPlayerConnected(RefillOffer[playerid]))
			    {
			        if(GetPlayerCash(playerid) > RefillPrice[playerid])
			        {
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(RefillOffer[playerid], giveplayer, sizeof(giveplayer));
			            new car = gLastCar[playerid];
      					format(string, sizeof(string), "{B8FFDB}* You refilled your car for $%d by Car Mechanic %s.",RefillPrice[playerid],giveplayer);
						SendClientMessage(playerid,COLOR_WHITE, string);
						format(string, sizeof(string), "{B8FFDB}* You refilled %s's car and you received $%d.",sendername,RefillPrice[playerid]);
						SendClientMessage(RefillOffer[playerid], COLOR_WHITE, string);
						GivePlayerCash(RefillOffer[playerid],RefillPrice[playerid]);
						GivePlayerCash(playerid, -RefillPrice[playerid]);
						if(Gas[car] < 110) { Gas[car] = 100; }
			 	 		new str[256];
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d' WHERE `name`='%s'",GetPlayerCash(RefillOffer[playerid]),PlayerInfo[RefillOffer[playerid]][pNormalName]);
						mysql_tquery(SQL,str,"","");
						Update(playerid, pCashx);
					    RefillOffer[playerid] = 999;
						RefillPrice[playerid] = 0;
						return 1;
			        }
					else return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
			    }
			    else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Nobody offered you a refill for your car.");
		}
		else if(strcmp(x_job,"live",true) == 0)
		{
			if(LiveOffer[playerid] < 999)
			{
				if(LiveOffer[playerid] != id) return SCM(playerid,COLOR_WHITE,"This player has not offered you live.");
			    if(IsPlayerConnected(LiveOffer[playerid]))
			    {
				    if (ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
					{
						if(TalkingLive[LiveOffer[playerid]] == 0)
						{
							new varxx[256];
							mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport4 = Raport4+1 WHERE name = '%s'",PlayerInfo[LiveOffer[playerid]][pNormalName]);
							mysql_tquery(SQL,varxx,"","");
						}
						new strs[128],namee[30];
						GetPlayerName(playerid, namee, sizeof(namee));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now in a live interview! Respect the rules or you will get kicked!");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Everything you say will be seen by everyone on the server!");
						SendClientMessage(playerid, COLOR_DARKPINK, "Ai primit freeze. Te vei putea misca dupa ce se va termina live-ul.");
						format(strs,sizeof(strs),"%s accepted live interview.", namee);
						SendClientMessage(LiveOffer[playerid], COLOR_LIGHTBLUE, strs);
						SendClientMessage(LiveOffer[playerid], COLOR_DARKPINK, "Ai primit freeze. Te vei putea misca dupa ce vei termina live-ul.");
						TogglePlayerControllable(playerid, 0);
						TogglePlayerControllable(LiveOffer[playerid], 0);
						TalkingLive[playerid] = 1;
						TalkingLive[LiveOffer[playerid]] = 1;
						LiveOffer[playerid] = 999;
						return 1;
					}
					else return SendClientMessage(playerid, COLOR_WHITE, "You are to far away from the News Reporter.");
				}
                else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Nobody gave you a live conversation offer.");
		}
		else if(strcmp(x_job,"drugs",true) == 0)
		{
			if(DrugOffer[playerid] < 999)
			{
				if(DrugOffer[playerid] != id) return SCM(playerid,COLOR_WHITE,"This player has not offered you drugs.");
				if(GetPlayerCash(playerid) > DrugPrice[playerid])
				{
				    if(PlayerInfo[playerid][pDrugs] <= 50)
				    {
					    if(IsPlayerConnected(DrugOffer[playerid]))
					    {
					        GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "{B8FFDB}* You bought %d gram for $%d from Drug Dealer %s.",DrugGram[playerid],DrugPrice[playerid],giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "{B8FFDB}* %s has bought your %d gram, the $%d was added to your PayCheck.",sendername,DrugGram[playerid],DrugPrice[playerid]);
							SendClientMessage(DrugOffer[playerid], COLOR_WHITE, string);
							GivePlayerCash(DrugOffer[playerid],DrugPrice[playerid]);
							GivePlayerCash(playerid, -DrugPrice[playerid]);
							PlayerInfo[playerid][pDrugs] += DrugGram[playerid];
							PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
							new str[456];
							mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Drugs`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pNormalName]);
							mysql_tquery(SQL,str,"","");
							mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Drugs`='%d' WHERE `name`='%s'",GetPlayerCash(DrugOffer[playerid]),PlayerInfo[DrugOffer[playerid]][pDrugs],PlayerInfo[DrugOffer[playerid]][pNormalName]);
							mysql_tquery(SQL,str,"","");
						    DrugOffer[playerid] = 999;
							DrugPrice[playerid] = 0;
							DrugGram[playerid] = 0;
							return 1;
						}
						else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
					}
					else return SendClientMessage(playerid, COLOR_WHITE, "You are fully loaded with drugs, use them first.");
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Nobody offered you any drugs.");
		}
		else if(strcmp(x_job,"repair",true) == 0)
		{
			if(RepairOffer[playerid] < 999)
			{
				if(RepairOffer[playerid] != id) return SCM(playerid,COLOR_WHITE,"This player has not offered you repair.");
			    if(GetPlayerCash(playerid) > RepairPrice[playerid])
				{
					if(IsPlayerInAnyVehicle(playerid))
					{
					    if(IsPlayerConnected(RepairOffer[playerid]))
					    {
						    GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
       						RepairCar[playerid] = GetPlayerVehicleID(playerid);
						    SetVehicleHealth(RepairCar[playerid], 1000.0);
						    RepairVehicle(RepairCar[playerid]);
							format(string, sizeof(string), "{B8FFDB}* You repaired your car for $%d by Car Mechanic %s.",RepairPrice[playerid],giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "{B8FFDB}* You fixed %s's car, the $%d has been added to your PayCheck.",sendername,RepairPrice[playerid]);
							SendClientMessage(RepairOffer[playerid], COLOR_WHITE, string);
							GivePlayerCash(RepairOffer[playerid],RepairPrice[playerid]);
							GivePlayerCash(playerid, -RepairPrice[playerid]);
							Update(playerid, pCashx);
							Update(RepairOffer[playerid],pCashx);
							RepairOffer[playerid] = 999;
							RepairPrice[playerid] = 0;
							return 1;
						}
						else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
					}
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Nobody offered you to repair your car.");
		}
		else if(strcmp(x_job,"hidden",true) == 0)
		{
		    if(IsPlayerConnected(hiddenoffer[playerid]))
		    {
		        if(hiddenoffer[playerid] != id) return SCM(playerid, COLOR_WHITE, "This player has not offered you a hidden color.");
		        if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
		        if(PlayerInfo[hiddenoffer[playerid]][pPremiumPoints] <= 19) return SCM(playerid, COLOR_WHITE, "That player don't have 20 premium points.");
		        if(GetPlayerCash(playerid) >= hiddenprice[playerid])
		        {
		            new string23[128], string233[128];
		            PlayerInfo[hiddenoffer[playerid]][pPremiumPoints] -= 20;
		            PlayerInfo[playerid][pHiddenColor] += 1;
		            Update(hiddenoffer[playerid], pPremiumPointsx);
		            Update(playerid, pHiddenColorx);
		            GivePlayerCash(playerid, -hiddenprice[playerid]);
		            GivePlayerCash(hiddenoffer[playerid], hiddenprice[playerid]);
		            Update(playerid, pCashx);
		            Update(hiddenoffer[playerid], pCashx);
		            format(string23, sizeof(string23), "Ai cumparat o culoare hidden in schimbul sumei de $%s.", FormatNumber(hiddenprice[playerid]));
		            format(string233, sizeof(string233), "You have bought a hidden color for $%s.", FormatNumber(hiddenprice[playerid]));
		            SS(playerid, COLOR_DARKPINK, string23, string233);
					format(string23,sizeof(string23),"Ai primit $%s in schimbul unui hidden (20 puncte premium).", FormatNumber(hiddenprice[playerid]));
		            format(string233,sizeof(string233),"You have received $%s for a hidden color (20 premium points).", FormatNumber(hiddenprice[playerid]));
		            SS(hiddenoffer[playerid], COLOR_DARKPINK, string23, string233);
		            hiddenoffer[playerid] = 999;
		            hiddenprice[playerid] = 0;
		            SellTradeTimer[id] = 0;
				}
				else return SCM(playerid, COLOR_GREY, "You don't have enough money.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else if(strcmp(x_job,"tradehouseforhouse",true) == 0)
		{
		    if(IsPlayerConnected(tradeofferer[playerid]))
		    {
		        if(tradeofferer[playerid] != id) return SCM(playerid, COLOR_WHITE, "This player has not offered you a house trade.");
		        if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
		        if(GetPlayerCash(tradeofferer[playerid]) >= tradediff[playerid])
		        {
		        	new tid = tradeofferer[playerid], sendername21[30], giveplayer21[30], string21[256];
		        	if(PlayerInfo[playerid][pPhousekey] == 999 || PlayerInfo[tid][pPhousekey] == 999) return SendClientMessage(playerid, COLOR_WHITE, "Tu sau celalalt jucator nu mai detineti o casa.");
		        	if(PlayerInfo[playerid][pPhousekey] == PlayerInfo[playerid][pRented] || PlayerInfo[id][pPhousekey] == PlayerInfo[id][pRented]) return SendClientMessage(playerid, COLOR_WHITE, "Tu sau celalalt jucator nu mai detineti o casa");
		        	if(tradecars[playerid] != PlayerInfo[tid][pPhousekey]) return SendClientMessage(playerid, COLOR_WHITE, "Acel jucator nu mai detine aceasta casa.");
		        	if(tradecars2[playerid] != PlayerInfo[playerid][pPhousekey]) return SendClientMessage(playerid, COLOR_WHITE, "Tu nu mai detii casa oferita.");

		        	GetPlayerName(tid, sendername21, sizeof(sendername21));
		            GetPlayerName(playerid, giveplayer21, sizeof(giveplayer21));
		        	GivePlayerCash(playerid, tradediff[playerid]);
		        	GivePlayerCash(tid, -tradediff[playerid]);
		        	PlayerInfo[playerid][pPhousekey] = tradecars[playerid];
		        	PlayerInfo[tid][pPhousekey] = tradecars2[playerid];
		        	strmid(HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], PlayerInfo[playerid][pNormalName], 0, 25, 999);
		        	strmid(HouseInfo[PlayerInfo[tid][pPhousekey]][hOwner], PlayerInfo[tid][pNormalName], 0, 25, 999);
					Update(playerid, pCashx);
					Update(playerid, pPhousekeyx);
					Update(tid, pPhousekeyx);
					Update(tid, pCashx);
					new str2[256];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pPhousekey]);
					mysql_tquery(SQL,str2,"","");
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'", PlayerInfo[tid][pNormalName], PlayerInfo[tid][pPhousekey]);
					mysql_tquery(SQL,str2,"","");

					format(string21, sizeof(string21), "($) %s traded his house (%d) + $%s for %s's house (%d).", sendername21, PlayerInfo[playerid][pPhousekey], FormatNumber(tradediff[playerid]), giveplayer21, PlayerInfo[tid][pPhousekey]);
					SendClientMessage(playerid, COLOR_GREEN2, string21);
					SendClientMessage(tid, COLOR_GREEN2, string21);
					ProxDetector(30.0, playerid, string21, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ABroadCast(COLOR_YELLOW, string21, 1);

					new var100[256],string2[256];
	    			mysql_real_escape_string(string21, string2);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[tid][pSQLID], string2);
					mysql_tquery(SQL,var100,"","");
					tradeofferer[playerid] = -1;
					tradediff[playerid] = 0;
					tradetype[playerid] = -1;
					tradetype2[playerid] = -1;
					tradecars[playerid] = -1;
					tradecars2[playerid] = -1;
					SellTradeTimer[id] = 0;
					OnPropTextdrawUpdate(1, PlayerInfo[playerid][pPhousekey]);
					OnPropTextdrawUpdate(1, PlayerInfo[tid][pPhousekey]);
		       	}
		       	else return SCM(playerid, COLOR_GREY, "This player don't have the difference.");
		    }
		    else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else if(strcmp(x_job,"tradehouseforcar",true) == 0)
		{
		    if(IsPlayerConnected(tradeofferer[playerid]))
		    {
		        if(tradeofferer[playerid] != id) return SCM(playerid, COLOR_WHITE, "This player has not offered you a house.");
		        if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
		        if(PlayerInfo[playerid][pPhousekey] != 999) return SCM(playerid, COLOR_WHITE, "You already own/have rent to a house.");
		        if(PlayerInfo[id][pPhousekey] == 999) return SCM(playerid, COLOR_WHITE, "This player don't own a house.");
		        if(PlayerInfo[id][pPhousekey] == tradecars[playerid] && PlayerInfo[id][pPhousekey] == PlayerInfo[id][pRented]) return SCM(playerid, COLOR_WHITE, "This player don't own a house");
		        if(GetPlayerCash(tradeofferer[playerid]) >= tradediff[playerid])
		        {
		        	new tid = tradeofferer[playerid], string21[256], sendername21[30], giveplayer21[30], idcar1, idcar2;
		            GetPlayerName(tid,sendername21,sizeof(sendername21));
		            GetPlayerName(playerid,giveplayer21,sizeof(giveplayer21));
		            for(new vv; vv < PlayerInfo[playerid][pCarSlots]; vv++)
					{
						if(PlayerInfo[playerid][pCar][vv] == tradetype2[playerid])
						{
							idcar1 = vv;
						}
					}
					if(tradetype2[playerid] != PlayerInfo[playerid][pCar][idcar1]) return SendClientMessage(playerid, COLOR_WHITE, "Masina oferita numai este detinuta de tine.");
					for(new vv; vv < PlayerInfo[tid][pCarSlots]; vv++)
					{
						if(PlayerInfo[tid][pCar][vv] == -1)
						{
							idcar2 = vv;
							break;
						}
					}
					if(idcar2 == 0) return SendClientMessage(playerid, COLOR_GREY, "That player don't have enough car slots.");
					PlayerInfo[tid][pCarID][idcar2] = tradetype[playerid];
					PlayerInfo[tid][pCar][idcar2] = tradetype2[playerid];
					PlayerInfo[playerid][pCarID][idcar1] = 0;
					PlayerInfo[playerid][pCar][idcar1] = -1;
					GivePlayerCash(tid, -tradediff[playerid]);
					GivePlayerCash(playerid, tradediff[playerid]);
					Update(tid, pCashx);
					Update(playerid, pCashx);
					strmid(CarOwner[tid][idcar2], PlayerInfo[tid][pNormalName], 0, 50, 999);
	    			cUpdate(tid, idcar2, cOwnerx);
					strmid(CarOwner[playerid][idcar1], PlayerInfo[playerid][pNormalName], 0, 50, 999);
	    			cUpdate(playerid, idcar1, cOwnerx);
					LoadCar(playerid);
					LoadCar(tid);

					PlayerInfo[tid][pPhousekey] = 999;
		        	PlayerInfo[playerid][pPhousekey] = tradecars[playerid];
		        	strmid(HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], PlayerInfo[playerid][pNormalName], 0, 25, 999);
		        	Update(playerid, pPhousekeyx);
					Update(tid, pPhousekeyx);
					mysql_format(SQL, string21, sizeof(string21), "UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pPhousekey]);
					mysql_tquery(SQL, string21, "", "");

					format(string21, sizeof(string21), "($) %s traded his house (%d) + $%s for %s's car (%s).", sendername21, PlayerInfo[playerid][pPhousekey], FormatNumber(tradediff[playerid]), giveplayer21, aVehicleNames[PlayerInfo[tid][pCarModel][idcar2] - 400]);
					SendClientMessage(playerid, COLOR_GREEN2, string21);
					SendClientMessage(tid, COLOR_GREEN2, string21);
					ProxDetector(30.0, playerid, string21, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ABroadCast(COLOR_YELLOW, string21, 1);

					new var100[256],string2[256];
	    			mysql_real_escape_string(string21, string2);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[tid][pSQLID], string2);
					mysql_tquery(SQL,var100,"","");
					tradeofferer[playerid] = -1;
					tradediff[playerid] = 0;
					tradetype[playerid] = -1;
					tradetype2[playerid] = -1;
					tradecars[playerid] = -1;
					tradecars2[playerid] = -1;
					SellTradeTimer[id] = 0;
					OnPropTextdrawUpdate(1, PlayerInfo[playerid][pPhousekey]);
					RemovePlayerFromVehicle(playerid);
		       	}
		       	else return SCM(playerid, COLOR_GREY, "This player don't have the difference.");
		    }
		    else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else if(strcmp(x_job,"tradecar",true) == 0)
		{
		    if(IsPlayerConnected(tradeofferer[playerid]))
		    {
		        if(tradeofferer[playerid] != id) return SCM(playerid, COLOR_WHITE, "This player has not offered you a car.");
		        if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
		        if(GetPlayerCash(tradeofferer[playerid]) >= tradediff[playerid])
		        {
		            new tid = tradeofferer[playerid],string21[256],sendername21[30],giveplayer21[30],idcar1,idcar2;
		            GetPlayerName(tradeofferer[playerid],sendername21,sizeof(sendername21));
		            GetPlayerName(playerid,giveplayer21,sizeof(giveplayer21));
					for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
					{
						if(PlayerInfo[playerid][pCar][vv] == tradetype2[playerid])
						{
							idcar1 = vv;
						}
					}
					for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
					{
						if(PlayerInfo[tid][pCar][vv] == tradetype[playerid])
						{
							idcar2 = vv;
						}
					}
					if(tradetype2[playerid] != PlayerInfo[playerid][pCar][idcar1]) return SendClientMessage(playerid, COLOR_WHITE, "Masina oferita numai este detinuta de tine.");
					if(tradetype[playerid] != PlayerInfo[tid][pCar][idcar2]) return SendClientMessage(playerid, COLOR_WHITE, "Acel jucator numai detine aceasta masina.");

					if(tradecars2[playerid] == PlayerInfo[playerid][pCarID][idcar1])
					{
	    				PlayerInfo[playerid][pCarID][idcar1] = tradecars[playerid];
					}

					if(tradecars[playerid] == PlayerInfo[tid][pCarID][idcar2])
					{
	    				PlayerInfo[tid][pCarID][idcar2] = tradecars2[playerid];
					}

					if(tradetype2[playerid] == PlayerInfo[playerid][pCar][idcar1])
					{
					    PlayerInfo[playerid][pCar][idcar1] = tradetype[playerid];
					}

					if(tradetype[playerid] == PlayerInfo[tid][pCar][idcar2])
					{
					    PlayerInfo[tid][pCar][idcar2] = tradetype2[playerid];
					}

					GivePlayerCash(tradeofferer[playerid], -tradediff[playerid]);
					GivePlayerCash(playerid, tradediff[playerid]);
					Update(tradeofferer[playerid], pCashx);
					Update(playerid, pCashx);

					strmid(CarOwner[playerid][idcar1], PlayerInfo[playerid][pNormalName], 0, 50, 999);
	    			cUpdate(playerid, idcar1, cOwnerx);

	    			strmid(CarOwner[tid][idcar2], PlayerInfo[tid][pNormalName], 0, 50, 999);
	    			cUpdate(tid, idcar2, cOwnerx);

					format(string21, sizeof(string21), "($) %s traded his car (%s - %d) + $%s for %s's car (%s - %d).", sendername21, aVehicleNames[PlayerInfo[tid][pCarModel][idcar1] - 400], PlayerInfo[tid][pCar][idcar1], FormatNumber(tradediff[playerid]), giveplayer21, aVehicleNames[PlayerInfo[playerid][pCarModel][idcar2] - 400], PlayerInfo[playerid][pCar][idcar2]);
					SendClientMessage(playerid, COLOR_GREEN2, string21);
					SendClientMessage(tid, COLOR_GREEN2, string21);
					ProxDetector(30.0, playerid, string21, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ABroadCast(COLOR_YELLOW, string21,1);
					new var100[256],string2[256];
	    			mysql_real_escape_string(string21, string2);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID],PlayerInfo[tradeofferer[playerid]][pSQLID],string2);
					mysql_tquery(SQL,var100,"","");
					tradeofferer[playerid] = -1;
					tradediff[playerid] = 0;
					tradetype[playerid] = -1;
					tradetype2[playerid] = -1;
					tradecars[playerid] = -1;
					tradecars2[playerid] = -1;
					SellTradeTimer[id] = 0;
					LoadCar(playerid);
					LoadCar(tid);
					RemovePlayerFromVehicle(playerid);
					RemovePlayerFromVehicle(tid);
				}
				else return SCM(playerid, COLOR_GREY, "This player don't have the difference.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else if(strcmp(x_job,"car",true) == 0)
		{
		    if(IsPlayerConnected(ofercar[playerid]))
		    {
		        if(ofercar[playerid] != id) return SCM(playerid,COLOR_WHITE,"This player has not offered you a car.");
		        if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
		        if(GetPlayerCash(playerid) >= carprice[playerid])
		        {
		            new vehh = GetPlayerVehicleID(id),myvehh = GetPlayerVehicleID(playerid),total,idcar1,idcar2;
					if(vehh != primesccar[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Vehicle seller needs to be in his selling car.");
					if(myvehh != primesccar[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in the offered vehicle.");

					for(new v; v < MAX_PERSONAL_VEHICLES; v++)
					{
						if(PlayerInfo[playerid][pCar][v] != -1) total++;
					}
					if(total+1 > PlayerInfo[playerid][pCarSlots])
					{
						SendClientMessage(playerid, COLOR_GREY, "You can't buy any more cars. Sell one of your cars if you want to buy a new one. Normal players can own 2 cars. Premium players can own 4 cars.");
						return 1;
					}
					for(new v; v < PlayerInfo[playerid][pCarSlots]; v++)
					{
						if(PlayerInfo[playerid][pCar][v] == -1)
						{
							idcar1 = v;
							break;
						}
					}
					for(new v; v < PlayerInfo[id][pCarSlots]; v++)
					{
						if(PlayerInfo[id][pCar][v] == cartype[playerid])
						{
							idcar2 = v;
						}
					}
					if(cartype[playerid] != PlayerInfo[id][pCar][idcar2]) return SendClientMessage(playerid, COLOR_WHITE, "Acel jucator numai detine aceasta masina.");

					PlayerInfo[playerid][pCar][idcar1] = PlayerInfo[id][pCar][idcar2];
					PlayerInfo[playerid][pCarID][idcar1] = PlayerInfo[id][pCarID][idcar2];

					PlayerInfo[id][pCar][idcar2] = -1;
					PlayerInfo[id][pCarID][idcar2] = 0;
					SellTradeTimer[id] = 0;

					LoadCar(playerid);
					LoadCar(id);

					new sendernames[30],giveplayers[30],stringy[256];
					GetPlayerName(playerid,sendernames,sizeof(sendernames));
					GetPlayerName(ofercar[playerid],giveplayers,sizeof(giveplayers));
                    format(stringy, sizeof(stringy), "* %s sold his %s [car:%d] to %s for $%s.",giveplayers,aVehicleNames[PlayerInfo[playerid][pCarModel][idcar1] - 400],PlayerInfo[playerid][pCar][idcar1],sendernames,FormatNumber(carprice[playerid]));
                    ProxDetector(30.0, playerid, stringy, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, stringy);
					SendClientMessage(ofercar[playerid], COLOR_LIGHTBLUE, stringy);
					ABroadCast(COLOR_YELLOW, stringy,1);
					SendClientMessage(id, COLOR_WHITE, "The sell/trade car offer has expired.");
					new var100[256],string2[256];
 					mysql_real_escape_string(stringy, string2);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID],PlayerInfo[ofercar[playerid]][pSQLID],string2);
					mysql_tquery(SQL,var100,"","");
					RemovePlayerFromVehicleEx(ofercar[playerid]);
					GivePlayerCash(playerid, - carprice[playerid]);
	    			GivePlayerCash(ofercar[playerid], carprice[playerid]);
					Update(playerid,pCashx);
					Update(ofercar[playerid],pCashx);

					strmid(CarOwner[playerid][idcar1], PlayerInfo[playerid][pNormalName], 0, 50, 999);
	    			cUpdate(playerid, idcar1, cOwnerx);
	    			strmid(CarOwner[id][idcar2], PlayerInfo[id][pNormalName], 0, 50, 999);
	    			cUpdate(id, idcar2, cOwnerx);
					ofercar[playerid] = -1;
    				carprice[playerid] = 0;
       				primesccar[playerid] = 0;
       				cartype[playerid] = 0;

       				LoadCar(playerid);
					LoadCar(id);
				}
				else return SCM(playerid,COLOR_WHITE,"You don't have enough money.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Available names:{B8DBFF} Drugs, Repair, House");
			SendClientMessage(playerid, COLOR_WHITE, "Available names:{B8DBFF} Vehicle, Taxi, Medic, Live");
			SendClientMessage(playerid, COLOR_WHITE, "Available names:{B8DBFF} Mechanic, Ticket, Refill");
			return 1;
		}
	}
	return 1;
}
CMD:leaderhelp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		SendClientMessage(playerid, COLOR_WHITE,"Leader help: /members /fvrespawn /invite /lockhq /changerank /granknames /gmotd /l");
	}
	return 1;
}
CMD:invite(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pRank] >= 6)
		{
			new id,string[256],string2[256],giveplayer[30],sendername[30];
			if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY,"Syntax:{FFFFFF} /invite [name/playerid]");
			if(PlayerInfo[id][pFpunish] != 0) return SCM(playerid, COLOR_GREY, "You can not invite this player because he have faction punish.");
            new membrii = GetFactionMembers(PlayerInfo[playerid][pMember]);
   			if(membrii >= DynamicFactions[PlayerInfo[playerid][pMember]][fMaxMembers]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You have reached maximum faction members.");
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					if(PlayerInfo[id][pMember] == 0 && PlayerInfo[id][pLeader] == 0)
					{
						format(string, sizeof(string), "SELECT * FROM `aplications` WHERE `name` = '%s' AND `status`='1'", PlayerInfo[id][pNormalName]);
						new Cache: membresult = mysql_query(SQL, string);
						//if(cache_get_row_count() == 0) return SendClientMessage(playerid, COLOR_WHITE, "This player don't have an accepted application on panel.");
						cache_delete(membresult);
    					GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(id, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "%s has invited you to join group %s (to accept the invitation, type '/accept invite %d').", sendername, DynamicFactions[PlayerInfo[playerid][pMember]][fName], playerid);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						SendClientMessage(playerid, COLOR_DARKPINK, "Processing invite...");
						format(string2, sizeof(string2), "You have invited %s to join your group.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string2);
						FactionOffer[id] = playerid;
                    }
					else return SendClientMessage(playerid, COLOR_GREY, "This player is already in a group.");
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return 1;
	}
	return 1;
}
CMD:maxmembers(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 6)
 	{
 	    new fid,maxmembers,string[MAX_STRING];
 	    if(sscanf(params, "dd",fid,maxmembers)) return SendClientMessage(playerid, 0xFFFFFFFF, "{FF9900}Scrie: {33CCFF}/maxmembers <FactionID> <Members>");
 	    if(maxmembers > 4 && maxmembers <= 50)
 	    {
 	        if(fid > 0 && fid <= 14)
 	        {
 	        	DynamicFactions[fid][fMaxMembers] = maxmembers;
 	        	mysql_format(SQL, string, sizeof(string), "UPDATE `factions` SET `MaxMembers`='%d' WHERE `ID`='%d'",DynamicFactions[fid][fMaxMembers], fid);
				mysql_tquery(SQL,string,"","");
				format(string, sizeof(string), "Acum factiunea %s are numarul maxim de %d membri.",DynamicFactions[fid][fName], DynamicFactions[fid][fMaxMembers]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "FactionID must be between 1 and 14.");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "Max members must be between 1 and 50.");
	}
	else
	{
 		SendClientMessage(playerid, COLOR_ERROR, AdminOnly);
	}
	return 1;
}
CMD:lockhq(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pLeader] >= 1)
	 	{
	 		new string[128],str[256];
	 		switch(DynamicFactions[PlayerInfo[playerid][pMember]][fLocked])
	 		{
				case 1: {
				    SendClientMessage(playerid, COLOR_WHITE, "HQ unlocked.");
					DynamicFactions[PlayerInfo[playerid][pMember]][fLocked] = 0;
					format(string, sizeof(string), "%s's HQ", DynamicFactions[PlayerInfo[playerid][pMember]][fName]);
					mysql_format(SQL, str, sizeof(str), "UPDATE `factions` SET `Locked`='0' WHERE `ID`='%d'", PlayerInfo[playerid][pMember]);
					mysql_tquery(SQL, str, "", "");
				}
				case 0: {
				    SendClientMessage(playerid, COLOR_WHITE, "HQ locked.");
					DynamicFactions[PlayerInfo[playerid][pMember]][fLocked] = 1;
				    format(string, sizeof(string), "%s's HQ\n\n(locked)", DynamicFactions[PlayerInfo[playerid][pMember]][fName]);
				    mysql_format(SQL, str, sizeof(str), "UPDATE `factions` SET `Locked`='1' WHERE `ID`='%d'", PlayerInfo[playerid][pMember]);
				    mysql_tquery(SQL, str, "", "");
				}
			}
			UpdateDynamic3DTextLabelText(DynamicFactions[PlayerInfo[playerid][pMember]][fLabelID], COLOR_COOLBLUE, string);
	 	}
	}
	return 1;
}
CMD:granknames(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pLeader] >= 1)
	 	{
	 		new rankid, rankname[32],string[128], query[256], rankname2[32];
	 		if(sscanf(params, "ds[32]", rankid, rankname)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /granknames [rankid (1-7)] [rank title]");
	 		mysql_real_escape_string(rankname, rankname2);
	 		switch(rankid)
	 		{
	 			case 1: {
	 				format(DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sizeof(rankname), rankname);
	 				mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Rank1`='%s' WHERE `ID`='%d'", rankname2, PlayerInfo[playerid][pMember]);
	 				mysql_tquery(SQL, query, "", "");

	 				format(string, sizeof(string), "You have changed the title of Rank 1 to '%s'.", rankname);
	 				SendClientMessage(playerid, COLOR_WHITE, string);
	 			}
	 			case 2: {
	 				format(DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sizeof(rankname), rankname);
	 				mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Rank2`='%s' WHERE `ID`='%d'", rankname2, PlayerInfo[playerid][pMember]);
	 				mysql_tquery(SQL, query, "", "");

	 				format(string, sizeof(string), "You have changed the title of Rank 2 to '%s'.", rankname);
	 				SendClientMessage(playerid, COLOR_WHITE, string);
	 			}
	 			case 3: {
	 				format(DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sizeof(rankname), rankname);
	 				mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Rank3`='%s' WHERE `ID`='%d'", rankname2, PlayerInfo[playerid][pMember]);
	 				mysql_tquery(SQL, query, "", "");

	 				format(string, sizeof(string), "You have changed the title of Rank 3 to '%s'.", rankname);
	 				SendClientMessage(playerid, COLOR_WHITE, string);
	 			}
	 			case 4: {
	 				format(DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sizeof(rankname), rankname);
	 				mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Rank4`='%s' WHERE `ID`='%d'", rankname2, PlayerInfo[playerid][pMember]);
	 				mysql_tquery(SQL, query, "", "");

	 				format(string, sizeof(string), "You have changed the title of Rank 4 to '%s'.", rankname);
	 				SendClientMessage(playerid, COLOR_WHITE, string);
	 			}
	 			case 5: {
	 				format(DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sizeof(rankname), rankname);
	 				mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Rank5`='%s' WHERE `ID`='%d'", rankname2, PlayerInfo[playerid][pMember]);
	 				mysql_tquery(SQL, query, "", "");

	 				format(string, sizeof(string), "You have changed the title of Rank 5 to '%s'.", rankname);
	 				SendClientMessage(playerid, COLOR_WHITE, string);
	 			}
	 			case 6: {
	 				format(DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sizeof(rankname), rankname);
	 				mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Rank6`='%s' WHERE `ID`='%d'", rankname2, PlayerInfo[playerid][pMember]);
	 				mysql_tquery(SQL, query, "", "");

	 				format(string, sizeof(string), "You have changed the title of Rank 6 to '%s'.", rankname);
	 				SendClientMessage(playerid, COLOR_WHITE, string);
	 			}
	 			case 7: {
	 				format(DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sizeof(rankname), rankname);
	 				mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Rank7`='%s' WHERE `ID`='%d'", rankname2, PlayerInfo[playerid][pMember]);
	 				mysql_tquery(SQL, query, "", "");

	 				format(string, sizeof(string), "You have changed the title of Rank 7 to '%s'.", rankname);
	 				SendClientMessage(playerid, COLOR_WHITE, string);
	 			}
	 		}
	 	}
	}
	return 1;
}
CMD:changerank(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pLeader] >= 1)
	 	{
			new para1,level,string[256],giveplayer[30],sendername[30],rtext[64];
			if(sscanf(params, "ui", para1,level)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /changerank [name/playerid] [1-6]");
			if(level > 6 || level < 1) return SendClientMessage(playerid, COLOR_GREY, "Minimum rank is 1 and maximum is 6.");
			if(PlayerInfo[para1][pMember] != PlayerInfo[playerid][pLeader]) return SendClientMessage(playerid, COLOR_GREY, "This member is not in your faction.");
			if(PlayerInfo[para1][pLeader] > 0) return SCM(playerid, COLOR_GREY, "This player is a leader.");
			if(para1 != INVALID_PLAYER_ID)
			{
				GetPlayerName(para1, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(level == 1) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1]);
				else if(level == 2) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2]);
				else if(level == 3) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3]);
				else if(level == 4) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4]);
				else if(level == 5) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5]);
				else if(level == 6) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6]);
				format(string,sizeof(string),"%s changed %s's faction rank from %d to %d.",sendername,giveplayer,PlayerInfo[para1][pRank],level);
				Factionlog(PlayerInfo[para1][pMember],PlayerInfo[para1][pSQLID],PlayerInfo[playerid][pSQLID],string);
				PlayerInfo[para1][pRank] = level;
				format(string, sizeof(string), "%s has promoted you to the rank of %s (%d).", sendername,rtext,level);
				SendClientMessage(para1, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You have promoted %s to the rank of %s (%d).", giveplayer,rtext,level);
				SendClientMessage(playerid, COLOR_WHITE, string);
        		new str[256];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Rank`='%d' WHERE `name`='%s'",PlayerInfo[para1][pRank],PlayerInfo[para1][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
	     	else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You are not a faction leader.");
	}
	return 1;
}
CMD:atm(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		for(new x; x < MAX_ATMS; x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, AtmInfo[x][fATMPos][0], AtmInfo[x][fATMPos][1], AtmInfo[x][fATMPos][2]))
			{
				ShowPlayerDialog(playerid, DIALOG_ATM_MENU, DIALOG_STYLE_LIST, "SERVER: Automated Teller Machine", "Check Balance\nWithdraw", "OK", "Cancel");
			}
		}
	}
	return 1;
}
CMD:withdraw(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
     	if(IsAtBank(playerid))
		{
			new money,string[100];
			if(sscanf(params, "i", money))
			{
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /withdraw [amount]");
				format(string, sizeof(string), "You have $%s in your account.", FormatNumber(PlayerInfo[playerid][pAccount]));
				SendClientMessage(playerid, COLOR_YELLOW, string);
				return 1;
			}
			if(money < 1) return SendClientMessage(playerid, COLOR_GREY, "Invalid amount specified.");
			if (money > PlayerInfo[playerid][pAccount]) return SendClientMessage(playerid, COLOR_WHITE, "You don't have that amount of money.");
		    ConsumingMoney[playerid] = 1;
			GivePlayerCash(playerid, money);
			PlayerInfo[playerid][pAccount] = PlayerInfo[playerid][pAccount] - money;
			format(string, sizeof(string), "You have withdrawn $%s from your bank account. Your account balance is now $%s.", FormatNumber(money), FormatNumber(PlayerInfo[playerid][pAccount]));
			SendClientMessage(playerid, COLOR_DCHAT, string);
    		Update(playerid, pBank);
			Update(playerid, pCashx);
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You are not at the bank!");
	}
	return 1;
}
CMD:deposit(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
     	if(IsAtBank(playerid))
		{
			new money,string[128];
			if(sscanf(params, "i", money)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /deposit [amount]");
			if(money < 1) return SendClientMessage(playerid, COLOR_GREY, "Invalid amount specified.");
			if (money > GetPlayerCash(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money for this transaction.");
			GivePlayerCash(playerid, -money);
			PlayerInfo[playerid][pAccount] = money + PlayerInfo[playerid][pAccount];
			format(string, sizeof(string), "You have deposited $%s into your bank account. Your account balance is now $%s.", FormatNumber(money), FormatNumber(PlayerInfo[playerid][pAccount]));
			SendClientMessage(playerid, COLOR_DCHAT, string);
			Update(playerid, pBank);
			Update(playerid, pCashx);
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You are not at the bank!");
	}
	return 1;
}
CMD:balance(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
        if(IsAtBank(playerid))
	    {
			new string[100];
			format(string, sizeof(string), "Your current bank account balance is: $%s", FormatNumber(PlayerInfo[playerid][pAccount]));
			SendClientMessage(playerid, COLOR_DCHAT, string);
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You are not at the bank!");
	}
	return 1;
}
CMD:transfer(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, COLOR_GREY, "You need level 5 use this command.");
        if(IsAtBank(playerid))
	    {
			new id,moneytransfer,string[200],giveplayer[30],sendername[30],playermoney;
			if(sscanf(params, "ui", id,moneytransfer)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /transfer [name/playerid] [amount]");
			if(playerid == id) return SendClientMessage(playerid, COLOR_GREY, "You can't transfer money to yourself.");
			if(IsPlayerConnected(id))
			{
                if(id != INVALID_PLAYER_ID)
			    {
			    	if(gPlayerLogged[id] == 0) return SendClientMessage(playerid, COLOR_GREY, "This player is not logged in.");
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					playermoney = PlayerInfo[playerid][pAccount];
					if (moneytransfer > 0 && playermoney >= moneytransfer)
					{
						TransferOffer[playerid] = id;
						TransferMoney[playerid] = moneytransfer;
						if(PlayerInfo[playerid][pLanguage] == 2)
					    {
					    	format(string,sizeof(string),"Esti sigur ca vrei sa-i transferi %s$ lui %s?\n\nDaca imprumuti bani cuiva, o faci pe proprie raspundere. Adminii nu te vor ajuta sa ii recuperezi.", FormatNumber(moneytransfer), giveplayer);
							ShowPlayerDialog(playerid, DIALOG_TRANSFER, DIALOG_STYLE_MSGBOX, "Transfer money", string, "Da", "Nu");
						}
						else
						{
							format(string,sizeof(string),"Are you sure you want to transfer %s$ to %s?\n\nKeep in mind that if you loan money to other players, you have no guarantee that you'll receive them back.", FormatNumber(moneytransfer), giveplayer);
							ShowPlayerDialog(playerid, DIALOG_TRANSFER, DIALOG_STYLE_MSGBOX, "Transfer money", string, "Yes", "No");
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "Invalid amount specified.");
				}
	        }
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
    	}
		else return SendClientMessage(playerid, COLOR_WHITE, "You are not at the bank!");
	}
	return 1;
}
CMD:undercover(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    {
		if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
		{
		    if(Undercover[playerid] == 0 && GoChase[playerid] == 999) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a contract.");
			if(Undercover[playerid] == 0)
			{
		    	SCM(playerid, COLOR_YELLOW, "You are now undercover. No one can see your name.");
		    	Undercover[playerid] = 1;
		    	foreach(new i : Player)
     			{
      				ShowPlayerNameTagForPlayer(i, playerid, 0);
           		}
			}
			else
			{
		    	SCM(playerid, COLOR_YELLOW, "You are not undercover anymore. Anyone can see your name.");
		    	Undercover[playerid] = 0;
				foreach(new i : Player)
     			{
      				ShowPlayerNameTagForPlayer(i, playerid, 1);
           		}
			}
 		}
 		else return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not a hitman.");
	}
	return 1;
}
CMD:gethit(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    {
        if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11) {} else return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not a hitman.");
		{
		    new searchhit = 0,cid[MAX_PLAYERS],sendername[30],giveplayer[30],string[128];
		    if(GoChase[playerid] != 999)
			{
				SCM(playerid,COLOR_WHITE,"You have already a contract.");
				return 1;
			}
		    if(PlayerInfo[playerid][pHitT] != 0)
		    {
				SCM(playerid,COLOR_WHITE,"Trebuie sa astepti 5 minute dupa ce ai anulat/terminat un contract pentru a folosi /gethit.");
				return 1;
		    }
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][pHeadValue] > 0 && GotHit[i] == 0 && PlayerInfo[i][pMember] != 11 && gPlayerLogged[i] == 1 && IsBot[i] == 0)
			    {
			        searchhit = 1;
			        cid[playerid] = i;
			    }
		    }
			if(searchhit == 0)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "No contracts available.");
			    return 1;
			}
			if(IsPlayerConnected(cid[playerid]))
		    {
		        GetPlayerName(playerid, sendername, sizeof(sendername));
		        GetPlayerName(cid[playerid], giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "%s received a contract. Target: %s.", sendername, giveplayer);
				SendFamilyMessage(11, COLOR_TEAL, string);
				SendClientMessage(playerid, COLOR_YELLOW, "You have a new contract(/mycontract).");
			    GoChase[playerid] = cid[playerid];
				GetChased[cid[playerid]] = playerid;
				GotHit[cid[playerid]] = 1;
				foreach(new i : Player)
	            togfind[playerid] = 1;
	            return 1;
			}
		}
	}
	return 1;
}
CMD:mycontract(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    {
        if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
		{
		    if(GoChase[playerid] != 999)
		    {
		        new name[30],string[128];
		    	GetPlayerName(GoChase[playerid], name, sizeof(name));
		    	format(string, sizeof(string), "You have a contract on %s(%d)",name,GoChase[playerid]);
		    	SendClientMessage(playerid, COLOR_GREY, string);
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "You don't have a contract.");
		}
	}
	return 1;
}
CMD:checkcontract(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    {
        if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
		{
		    new id;
		    if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /checkcontract [name/playerid]");
			if(PlayerInfo[id][pMember] != 11) return SendClientMessage(playerid, COLOR_WHITE, "This player is not a hitman.");
			if(GoChase[id] != 999)
		    {
		        new name[30],string[128],name2[30];
		    	GetPlayerName(GoChase[id], name, sizeof(name));
		    	GetPlayerName(id,name2,sizeof(name2));
		    	format(string, sizeof(string), "%s have a contract on %s(%d)",name2,name,GoChase[id]);
		    	SendClientMessage(playerid, COLOR_GREY, string);
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "This hitman don't have a contract.");
		}
	}
	return 1;
}
CMD:cancelhit(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    {
        if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
		{
		    if(GoChase[playerid] != 999)
		    {
		        new name[30],string[256];
		        GotHit[GoChase[playerid]] = 0;
				GetChased[GoChase[playerid]] = 999;
				GoChase[playerid] = 999;
            	foreach(new i : Player)
	        	togfind[playerid] = 0;
            	PlayerInfo[playerid][pHitT] = 0;
  	 			mysql_format(SQL, string, sizeof(string), "UPDATE users SET `HitT`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pHitT], PlayerInfo[playerid][pNormalName]);
	        	mysql_tquery(SQL,string,"","");
				GetPlayerName(playerid, name, sizeof(name));
		    	format(string, sizeof(string), "%s canceled his contract.",name);
		    	SendFamilyMessage(11, COLOR_TEAL, string);
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "You don't have a contract.");
		}
	}
	return 1;
}
CMD:contracts(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    {
        if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
		{
		    new count1=0,count2=0,string[128];
		    foreach(new i : Player)
		    {
		        if(PlayerInfo[i][pHeadValue] != 0 && IsBot[i] == 0)
		        {
		            if(PlayerInfo[i][pSleeping] == 1)
		            {
		            	count1++;
					}
					count2++;
				}
			}
			SendClientMessage(playerid, COLOR_TEAL, "[Contracts]");
			format(string,sizeof(string),"Targets AFK/sleeping: %d",count1);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string),"Total targets: %d",count2);
			SendClientMessage(playerid, COLOR_WHITE, string);
		    SendClientMessage(playerid, COLOR_TEAL, "-------------------");
		}
	}
	return 1;
}
CMD:factions(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		ShowFactions(playerid);
	}
	return 1;
}
CMD:hqs(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1)
		{
			ShowPlayerDialog(playerid, DIALOG_HQS, DIALOG_STYLE_LIST, "SERVER: HQ Locations", "Los Santos Police Department\nNational Guard\nHitman Agency\nFBI\nNews Reporters\nGrove Street\nBallas\nLos Aztecas\nSchool Instructors LV\nLas Venturas Paramedic Department\nLos Vagos\nTaxi LS\nLas Venturas Police Department\nThe Rifa\nSan Fierro Police Department\nSchool Instructors LS\nSan Fierro Paramedic Department", "Checkpoint", "Back");
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Anulare Checkpoint", "Esti sigur ca vrei sa anulezi checkpoint-ul curent?", "Da", "Nu");
		}
	}
	return 1;
}
CMD:locations(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1)
		{
			ShowPlayerDialog(playerid, DIALOG_LOCATIONS, DIALOG_STYLE_LIST, "SERVER: Server Locations", "Driving School(DMV)\nLos Santos\nLas Venturas\nFaction HQS\nVehicle Mod Shops\nPaintball\nDealership", "Select", "Close");
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Anulare Checkpoint", "Esti sigur ca vrei sa anulezi checkpoint-ul curent?", "Da", "Nu");
		}
	}
	return 1;
}
CMD:gps(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_locations(playerid, params);
}
CMD:where(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_locations(playerid, params);
}
CMD:heal(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new sendername[30],str[128],id,suma,Float:health;
		if(PlayerInfo[playerid][pMember] == 14 && IsAnAmbulance(GetPlayerVehicleID(playerid)) && GetPlayerVehicleSeat(playerid) == 0)
		if(PlayerInfo[playerid][pMember] == 18 && IsAnAmbulance(GetPlayerVehicleID(playerid)) && GetPlayerVehicleSeat(playerid) == 0)
		{
			if(sscanf(params, "ud",id,suma)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /heal [playerid/name] [amount]");
			if(suma < 1 || suma > 2000) return SendClientMessage(playerid, COLOR_GREY, "Amount must be between 1 and 2000.");
			GetPlayerHealth(id, health);
			if(health <= 95)
			{
				if(GetPlayerCash(id) >= suma)
				{
					GivePlayerCash(id, -suma);
					GivePlayerCash(playerid, suma);
					Update(id, pCashx);
					Update(playerid, pCashx);
					SetPlayerHealthEx(id, 100.0);
					format(str, sizeof(str), "~h~healed~n~~g~+%s", FormatNumber(suma));
					GameTextForPlayer(playerid, str, 5000, 1);
					new varxx[256],are;
					format(varxx, sizeof(varxx), "SELECT * FROM `antifraudaraport` WHERE `pid1`='%d' AND `pid2`='%d'", PlayerInfo[playerid][pSQLID], PlayerInfo[id][pSQLID]);
					new Cache: ab = mysql_query(SQL, varxx);
					if(cache_get_row_count() > 0) are = 1;
					cache_delete(ab);
					if(are == 0)
					{
						mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport1 = Raport1+1 WHERE name = '%s'", PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,varxx,"","");
						mysql_format(SQL, varxx, sizeof(varxx), "INSERT INTO `antifraudaraport` (`pid1`,`pid2`,`time`) VALUES ('%d','%d','%d')", PlayerInfo[playerid][pSQLID], PlayerInfo[id][pSQLID], (gettime() + 900));
						mysql_tquery(SQL,varxx,"","");
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "This player don't have enough money.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "This player have more than 95 hp.");
		}
		else
		{
			if(HealTimer[playerid] != 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need to wait 30 seconds before using /heal again.");
			if(InHouse[playerid] > 0)
			{
				if(HouseInfo[InHouse[playerid]][hHel] == 1)
				{
					SetPlayerHealthEx(playerid, 100.0);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(str, sizeof(str),"* %s ate some food.",sendername);
					ProxDetector(30.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					HealTimer[playerid] = 30;
				}
				else return SendClientMessage(playerid, COLOR_GREY, "This house don't have a food upgrade.");
			}
			if(PlayerInfo[playerid][pMember] != 0 && IsInHQ(playerid))
			{
				SetPlayerHealthEx(playerid, 100.0);
				SetPlayerHealthEx(playerid, 100.0);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(str, sizeof(str),"* %s ate some food.",sendername);
				ProxDetector(30.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				HealTimer[playerid] = 30;
			}
		}
	}
	return 1;
}
CMD:healme(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			SetPlayerHealthEx(playerid, 100.0);
		}
	}
	return 1;
}
CMD:block(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pPhone] == 1)
		{
			new id,string[128],string2[128],name[30];
			if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /block [name/playerid]");
			if(IsPlayerConnected(id))
			{
				PlayerInfo[playerid][pPhoneBlocked][id] = 1;
				GetPlayerName(id, name, sizeof(name));
				format(string, sizeof(string), "Userul %s a fost blocat. Nu te va putea contacta prin telefon pana la urmatorul relog.", name);
				format(string2, sizeof(string2), "User %s has been temporary blocked. He won't be able to call/sms you until you reconnect to the server.", name);
				SS(playerid, COLOR_DARKPINK, string, string2);
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You don't have an iPhone.");
	}
	return 1;
}
CMD:unblock(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pPhone] == 1)
		{
			new id,string[128],string2[128],name[30];
			if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /unblock [name/playerid]");
			if(IsPlayerConnected(id))
			{
				if(PlayerInfo[playerid][pPhoneBlocked][id] == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "That user is not blocked!");
				PlayerInfo[playerid][pPhoneBlocked][id] = 0;
				GetPlayerName(id, name, sizeof(name));
				format(string, sizeof(string), "Userul %s a fost deblocat.", name);
				format(string2, sizeof(string2), "User %s has been unblocked.", name);
				SS(playerid, COLOR_DARKPINK, string, string2);
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You don't have an iPhone.");
	}
	return 1;
}
CMD:call(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new number,sendername[30],string[256],giveplayer[25];
		if(sscanf(params, "i",number)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /call [number]");
		if(PlayerInfo[playerid][pPnumber] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You dont't have a phone.");
		if(PhoneOnline[playerid] > 0) return SCM(playerid, COLOR_WHITE, "Your phone is turned off.");
		if(PlayerInfo[playerid][pCredits] < 2) return SCM(playerid, COLOR_WHITE, "You don't have enough credits to call.");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(number == 112)
		{
		    if(IsACop(playerid)) return SCM(playerid,COLOR_WHITE,"You are a cop.");
    	    if(WantedReason[playerid] != 999)
    	    {
    	    	if(PlayerInfo[GetPlayerID(WantedName[playerid])][pJailTime] > 0) return SCM(playerid, COLOR_WHITE, "This player is already in jail.");
    	        new killerid = GetPlayerID(WantedName[playerid]);
				if(killerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
                if(PlayerInfo[killerid][pWantedLevel] >= 6) return SCM(playerid, COLOR_GREY, "This player has got already maximum of wanted stars.");
				else { WantedPoints[killerid] += 2; }
                if(WantedPoints[killerid] > 13)
				{
					WantedPoints[killerid] = 13;
				}
				format(string,sizeof(string),"You reported %s for a crime.",GetName(killerid));
				SCM(playerid,COLOR_LIGHTBLUE,string);
				if(WantedReason[playerid] != 49)
				{
					SetPlayerCriminal(killerid,playerid, "first degree murder");
				}
				else if(WantedReason[playerid] == 49)
				{
				    SetPlayerCriminal(killerid,playerid, "hit and run");
				}
				ClearWanted(playerid);
				return 1;
		    }
			else
			{
				if(Mobile[playerid] == -1)
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
					Mobile[playerid] = -2;
					SendClientMessage(playerid, COLOR_WHITE, "You've called Emergency services, please select the department you desire (i.e: LSPD, LSFMD).");
					if(PlayerInfo[playerid][pPhone] == 0)
					{
						SetPlayerAttachedObject(playerid,4,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
					}
					else if(PlayerInfo[playerid][pPhone] == 1)
					{
						SetPlayerAttachedObject(playerid, 4, 18865, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // MobilePhone1 - phone1
					}
				}
				return 1;
			}
		}
		if(number == PlayerInfo[playerid][pPnumber]) return SendClientMessage(playerid, COLOR_GRAD2, "You can't call yourself.");
		if(Mobile[playerid] != -1) return SendClientMessage(playerid, COLOR_WHITE, "You are already on a call.");
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pPnumber] == number && number != 0)
				{
					new giveplayerid = i;
					if(IsPlayerConnected(giveplayerid))
					{
						if(giveplayerid != INVALID_PLAYER_ID)
						{
						    if(PhoneOnline[giveplayerid] > 0) return SendClientMessage(playerid, COLOR_WHITE, "That player phone is offline.");
							if(PhoneOnlineCalls[giveplayerid] > 0) return SendClientMessage(playerid, COLOR_WHITE, "That player phone is offline for calls.");
							if(PlayerInfo[giveplayerid][pPhoneBlocked][playerid] == 1) return SS(playerid, COLOR_LIGHTGREEN3, "Playerul pe care incerci sa-l suni ti-a blocat numarul de telefon.", "The player you are trying to call has blocked your number. You can't contact him/her.");
							if (Mobile[giveplayerid] == -1)
							{
								Mobile[playerid] = giveplayerid;
								format(string, sizeof(string), "* %s takes out their cellphone, and dials in a number.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
								PlayerPlaySound(giveplayerid, 20600, 0.0, 0.0, 0.0);
								format(string, sizeof(string), "%s is calling you. Use /p(ickup) to answer your phone.", sendername);
								SendClientMessage(giveplayerid, COLOR_YELLOW, string);
								GetPlayerName(giveplayerid,giveplayer,sizeof(giveplayer));
								if(PlayerInfo[playerid][pPhone] == 0)
								{
									SetPlayerAttachedObject(playerid,4,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
								}
								else if(PlayerInfo[playerid][pPhone] == 1)
								{
									SetPlayerAttachedObject( playerid, 4, 18865, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // MobilePhone1 - phone1
								}
								if(PlayerInfo[giveplayerid][pPhone] == 0)
								{
									format(string, sizeof(string), "* %s's cellphone starts to ring...", giveplayer);
								}
								else if(PlayerInfo[giveplayerid][pPhone] == 1)
								{
									format(string, sizeof(string), "* %s's iPhone starts to ring...", giveplayer);
								}
								ProxDetector(20.0, giveplayerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								CellTime[playerid] = 1;
								SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
								return 1;
							}
						}
					}
				}
			}
		}
		SendClientMessage(playerid, COLOR_GRAD2, "(cellphone) *busy tone*");
	}
	return 1;
}
CMD:t(playerid, params[])
{
    return cmd_sms(playerid, params);
}
CMD:sms(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new phonenumb,smstext[90],sendername[30],giveplayer[30],string[256],giveplayerid,string2[184];
	    if(PlayerInfo[playerid][pMuted] == 1)
	    {
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
			else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
			return 1;
		}
		if(sscanf(params, "is[90]",phonenumb,smstext)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sms [number] [text]");
		if(PlayerInfo[playerid][pPnumber] == 0) return SendClientMessage(playerid, COLOR_GREY, "You dont't have a cellphone.");
		if(PhoneOnline[playerid] > 0) return SCM(playerid, COLOR_GREY, "Your phone turned is off.");
		if(PlayerInfo[playerid][pCredits] < 2) return SCM(playerid, COLOR_GREY, "You don't have credits needed.");
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    giveplayerid = i;
					    if(PhoneOnline[giveplayerid] > 0) return SendClientMessage(playerid, COLOR_GREY, "This player have his phone turned off.");
					    if(PlayerInfo[giveplayerid][pPhoneBlocked][playerid] == 1) return SS(playerid, COLOR_LIGHTGREEN3, "Playerul caruia incerci sa ii trimiti SMS ti-a blocat numarul de telefon.", "The player you are trying to text has blocked your number. You can't contact him/her.");
					    GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[giveplayerid][pAdmin] < 1) format(string, sizeof(string), "SMS from %s (%d): %s", sendername, PlayerInfo[playerid][pPnumber], smstext);
						else format(string, sizeof(string), "SMS from %s (%d): %s", sendername, playerid, smstext);
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string2, sizeof(string2), "SMS sent to %s (%d): %s", giveplayer, PlayerInfo[giveplayerid][pPnumber], smstext);
						SendClientMessage(giveplayerid,COLOR_YELLOW, string);
						SendClientMessage(playerid,COLOR_SMS, string2);
						new var100[300],resulttt[300],strr[300];
						format(strr, sizeof(strr),"[SMS] %s to %s: %s", sendername, giveplayer, smstext);
						mysql_real_escape_string(strr, resulttt);
						mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','sms')", PlayerInfo[playerid][pSQLID], resulttt);
						mysql_tquery(SQL,var100,"","");
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerPlaySound(giveplayerid, 1139, 0.0, 0.0, 0.0);
						PlayerInfo[playerid][pCredits] = PlayerInfo[playerid][pCredits] - 2;
						LastPlayer[i] = playerid;
						for(new adm = 0; adm<=MAX_PLAYERS;adm++)
     					{
     	    				if(IsPlayerConnected(adm))
							{
  	    						if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
        	    				{
        	        				format(string, sizeof(string), "{63969C}SMS from %s (%d) to %s (%d): %s",sendername,playerid,giveplayer,giveplayerid,smstext);
									SendClientMessage(adm,  COLOR_WHITE, string);
    	    					}
							}
      					}
					}
				}
			}
		}
	}
	return 1;
}
CMD:reply(playerid, params[])
{
    if(PlayerInfo[playerid][pPhone] == 1)
	{
	    if(LastPlayer[playerid] != -1)
	    {
	        if(PlayerInfo[playerid][pCredits] >= 2)
	        {
	            new sendername[30],giveplayer[30],string[256],string2[256];
	            if(strlen(params) <= 0) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /reply [text]");
	    		if(PhoneOnline[LastPlayer[playerid]] > 0) return SendClientMessage(playerid, COLOR_GREY, "This player have his phone turned off.");
	    		if(PlayerInfo[LastPlayer[playerid]][pPhoneBlocked][playerid] == 1) return SS(playerid, COLOR_LIGHTGREEN3, "Playerul caruia incerci sa ii trimiti SMS ti-a blocat numarul de telefon.", "The player you are trying to text has blocked your number. You can't contact him/her.");
			    GetPlayerName(playerid, sendername, sizeof(sendername));
				if(PlayerInfo[LastPlayer[playerid]][pAdmin] < 1) format(string, sizeof(string), "SMS from %s (%d): %s", sendername, PlayerInfo[playerid][pPnumber], params);
				else format(string, sizeof(string), "SMS from %s (%d): %s", sendername, playerid, params);
				GetPlayerName(LastPlayer[playerid], giveplayer, sizeof(giveplayer));
				LastPlayer[LastPlayer[playerid]] = playerid;
				format(string2, sizeof(string2), "SMS sent to %s (%d): %s",giveplayer,PlayerInfo[LastPlayer[playerid]][pPnumber],params);
				SendClientMessage(LastPlayer[playerid],COLOR_YELLOW, string);
				SendClientMessage(playerid,COLOR_SMS, string2);
				new var100[300],resulttt[300],strr[300];
				format(strr, sizeof(strr),"[SMS] %s to %s: %s", sendername, giveplayer, params);
				mysql_real_escape_string(strr, resulttt);
				mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','sms')", PlayerInfo[playerid][pSQLID], resulttt);
				mysql_tquery(SQL,var100,"","");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerPlaySound(LastPlayer[playerid], 1139, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pCredits] = PlayerInfo[playerid][pCredits] - 2;
				for(new adm = 0; adm<=MAX_PLAYERS;adm++)
				{
					if(IsPlayerConnected(adm))
					{
						if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
  						{
    						format(string, sizeof(string), "{63969C}SMS from %s (%d) to %s (%d): %s",sendername,playerid,giveplayer,LastPlayer[playerid],params);
							SendClientMessage(adm,  COLOR_WHITE, string);
  						}
					}
				}
			}
			else return SCM(playerid, COLOR_GREY, "You don't have credits needed.");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Nobody has sent you an SMS!");
	}
	else SendClientMessage(playerid, COLOR_GREY, "You don't have an iPhone!");
	return 1;
}
CMD:speaker(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pPnumber] == 0) return SendClientMessage(playerid,COLOR_WHITE, "You do not have a phone.");
		if(Mobile[playerid] == -1 || Mobile[playerid] == -2 || Mobile[playerid] == -3 || Mobile[playerid] == -4) return 1;
		if(PlayerInfo[playerid][pSpeaker] == 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Speaker is on.");
			PlayerInfo[playerid][pSpeaker] = 1;
			return 1;
		}
		if(PlayerInfo[playerid][pSpeaker] == 1)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Speaker is off.");
			PlayerInfo[playerid][pSpeaker] = 0;
			return 1;
		}
	}
	return 1;
}
CMD:turn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
        new x_nr[50],sendername[30],string[128];
		if(sscanf(params, "s[50]",x_nr)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /turn [on/off/off calls]");
        if(strcmp(x_nr,"off calls",true) == 0)
     	{
			if(PlayerInfo[playerid][pPhone] != 1) return SS(playerid, COLOR_WHITE, "Doar cei ce au iPhone pot sa dezactiveze apelurile. Pentru a cumpara un iPhone foloseste /shop.", "Only player with iPhone can deactivate their phone. If you want to buy an iPhone use /shop.");
            if (PhoneOnlineCalls[playerid] == 0)
            {
                PhoneOnlineCalls[playerid] = 1;
                GetPlayerName(playerid, sendername, sizeof(sendername));
                format(string, sizeof(string), "* %s turns his/her iPhone off for calls.", sendername);
	    		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    		return 1;
			}
			else
			SCM(playerid, COLOR_WHITE, "Your phone is already turned off for calls.");
			return 1;
		}
		if(strcmp(x_nr,"off",true) == 0)
     	{
            if (PhoneOnline[playerid] == 0)
            {
                PhoneOnline[playerid] = 1;
                GetPlayerName(playerid, sendername, sizeof(sendername));
				if(PlayerInfo[playerid][pPhone] == 0)
				{
                    format(string, sizeof(string), "* %s turns off his/her phone.", sendername);
				}
				else if(PlayerInfo[playerid][pPhone] == 1)
				{
                    format(string, sizeof(string), "* %s turns off his/her iPhone.", sendername);
				}
	    		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    		return 1;
			}
			else
			{
				if(PlayerInfo[playerid][pPhone] == 0)
				{
					SCM(playerid, COLOR_WHITE, "Your phone is already turned off.");
				}
				else if(PlayerInfo[playerid][pPhone] == 1)
				{
					SCM(playerid, COLOR_WHITE, "Your iPhone is already turned off.");
				}
				return 1;
			}
		}
		if(strcmp(x_nr,"on",true) == 0)
     	{
            if (PhoneOnline[playerid] == 1)
            {
                PhoneOnline[playerid] = 0;
				PhoneOnlineCalls[playerid] = 0;
                GetPlayerName(playerid, sendername, sizeof(sendername));
				if(PlayerInfo[playerid][pPhone] == 0)
				{
					format(string, sizeof(string), "* %s turns on his/her phone.", sendername);
				}
				else if(PlayerInfo[playerid][pPhone] == 1)
				{
					format(string, sizeof(string), "* %s turns on his/her iPhone.", sendername);
				}
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			else
			{
				if(PlayerInfo[playerid][pPhone] == 0)
				{
					SCM(playerid, COLOR_WHITE, "Your phone is already turned on.");
				}
				else if(PlayerInfo[playerid][pPhone] == 1)
				{
					SCM(playerid, COLOR_WHITE, "Your iPhone is already turned on.");
				}
				return 1;
			}
		}
    }
    return 1;
}
CMD:pickup(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		if(Mobile[playerid] != -1) return SendClientMessage(playerid, COLOR_GRAD2, "You are already on a call...");
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(Mobile[i] == playerid)
				{
					Mobile[playerid] = i;
					SendClientMessage(i,COLOR_WHITE, "The other person has answered the call.");
                    SendClientMessage(playerid,COLOR_WHITE, "You have answered your phone.");
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
					if(PlayerInfo[playerid][pPhone] == 0)
					{
						SetPlayerAttachedObject(playerid,4,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
					}
					else if(PlayerInfo[playerid][pPhone] == 1)
					{
						SetPlayerAttachedObject( playerid, 4, 18865, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // MobilePhone1 - phone1
					}
					return 1;
				}
			}
		}
	}
	return 1;
}
CMD:p(playerid, params[])
{
	return cmd_pickup(playerid, params);
}
CMD:hangup(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new caller = Mobile[playerid];
		if(Mobile[playerid] != -2 && Mobile[playerid] != -3 && Mobile[playerid] != -4)
		{
			if(IsPlayerConnected(caller))
			{
				if(caller != INVALID_PLAYER_ID)
				{
					if(caller != -1)
					{
						if(PhoneOnline[caller] == 0)
						{
							SendClientMessage(caller,COLOR_WHITE,"Your call has been terminated by the other party.");
						}
						CellTime[caller] = 0;
						CellTime[playerid] = 0;
						SendClientMessage(playerid,COLOR_WHITE,"You have terminated the current call.");
						Mobile[caller] = -1;
						SetPlayerSpecialAction(caller,SPECIAL_ACTION_STOPUSECELLPHONE);
						RemovePlayerAttachedObject(caller,4);
						RemovePlayerAttachedObject(playerid,4);
						Mobile[playerid] = -1;
						CellTime[playerid] = 0;
						PlayerInfo[playerid][pSpeaker] = 0;
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
					}
				}
			}
		}
		else
		{
			SendClientMessage(playerid,COLOR_WHITE,"You have terminated the current call.");
			RemovePlayerAttachedObject(playerid, 4);
			Mobile[playerid] = -1;
			CellTime[playerid] = 0;
			PlayerInfo[playerid][pSpeaker] = 0;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
	}
	return 1;
}
CMD:h(playerid, params[])
{
	return cmd_hangup(playerid, params);
}
CMD:jailoff(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		new id[30],escape[30],reason[128],reasone[128],string[128],sendername[30],minutes,cont,playeridd,qstr[256];
		GetPlayerName(playerid,sendername,sizeof(sendername));
		if(sscanf(params, "s[25]is[128]", id,minutes,reason)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /ajailo [name] [minutes] [reason]");
		mysql_real_escape_string(id, escape);
		mysql_real_escape_string(reason, reasone);
		cont = MySQLCheckAccount(escape);
		if(cont == 0) return SCM(playerid, COLOR_LIGHTGREEN3, "Invalid player.");
		new timej = minutes*60;
		format(string, sizeof(string), "(Offline) ({FF6347}AdminStaff{FFFFFF}) %s was jailed by %s, reason: %s (%d minutes).", escape, sendername,reasone,minutes);
		ABroadCast(COLOR_WHITE,string,1);
		format(qstr, sizeof(qstr), "SELECT `id` FROM users WHERE `name` = '%s'", escape);
		new Cache: ab = mysql_query(SQL,qstr);
		if(cache_get_row_count() > 0)
		{
			playeridd = cache_get_field_content_int(0, "id");
		}
		cache_delete(ab);
		new var100[256];
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','6','%s','%s','%s','%d')", playeridd,PlayerInfo[playerid][pSQLID],reasone,escape,sendername,gettime());
		mysql_tquery(SQL,var100,"","");
		format(string,sizeof(string),"Ai primit jail de la adminul %s pentru %d minute, motiv: %s.",sendername,minutes,reasone);
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",playeridd,string);
		mysql_tquery(SQL,var100,"","");
		new str1[184];
		mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `Jailed`='2',`JailTime`='%d',`WantedLevel`='0' WHERE `name`='%s'",timej,escape);
		mysql_tquery(SQL,str1,"","");
	}
	return 1;
}
CMD:jail(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		new id,reason[128],reasone[128],string[128],giveplayer[30],sendername[30],minutes;
		if(sscanf(params, "uis[128]", id,minutes,reason)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /jail [name/playerid] [minutes] [reason]");
		{
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[id][pJailTime] > 0) return SCM(playerid, COLOR_GREY, "This player is already in jail.");
				    mysql_real_escape_string(reason, reasone);
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					ResetPlayerWeaponsEx(id);
					ResetPlayerWeapons(id);
					WantedPoints[id] = 0;
					PlayerInfo[id][pJailed] = 2;
					PlayerInfo[id][pJailTime] = minutes*60;
					SetPlayerInterior(id, 10);
                    new rand;
					rand = random(sizeof(gRandomAJailSpawns));
					SetPlayerPosEx(id,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
					format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s has been jailed by %s, reason: %s (%d minutes).", giveplayer, sendername,reasone,minutes);
					SendClientMessageToAll(COLOR_WHITE, string);
					new var100[256];
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`actiontime`,`unixtime`) VALUES ('%d','%d','6','%s','%s','%s','%d','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],reasone,giveplayer,sendername,minutes,gettime());
					mysql_tquery(SQL,var100,"","");
		            Update(playerid,pJailedx);
					Update(playerid,pJailTimex);
					return 1;
				}
			}
			else
			{
				 SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
		}
	}
	return 1;
}
CMD:dm(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		new id,string[128],giveplayer[30],sendername[30],query[256],dm=0,time,reason[30],unixtime;
		if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dm [name/playerid]");
		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
				if(PlayerInfo[id][pJailTime] > 0) return SCM(playerid, COLOR_GREY, "This player is already in jail.");
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				ResetPlayerWeaponsEx(id);
				ResetPlayerWeapons(id);
				WantedPoints[id] = 0;
				PlayerInfo[id][pJailed] = 2;
				Update(id, pJailedx);
				SetPlayerInterior(id, 10);
                new rand;
				rand = random(sizeof(gRandomAJailSpawns));
				SetPlayerPosEx(id,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
				format(query, sizeof(query),"SELECT * FROM `punishlogs` WHERE `playerid`='%d' AND `actionid`='6'",PlayerInfo[id][pSQLID]);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					unixtime = cache_get_field_content_int(i, "unixtime");
					cache_get_field_content(i, "reason", reason);
					if(strcmp(reason,"DM",true) == 0 && unixtime > gettime()-30*86400) dm++;
				}
				cache_delete(resultt);
				if(dm < 6)
				{
					time = dm*10 + 10;
					PlayerInfo[id][pGunLicSuspend] = dm + 1;
				}
				else
				{
					time = 60;
					PlayerInfo[id][pGunLicSuspend] = 6;
				}
				PlayerInfo[id][pGunLic] = 0;
				PlayerInfo[id][pGunLicT] = 0;
				PlayerInfo[id][pJailTime] = time*60;
				format(string,sizeof(string),"({FF6347}AdminStaff{FFFFFF}) %s has been jailed by %s, reason: DM (%d minutes).",giveplayer,sendername,time);
				SendClientMessageToAll(COLOR_WHITE, string);
				new var100[256];
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`actiontime`,`unixtime`) VALUES ('%d','%d','6','DM','%s','%s','%d','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],time,gettime());
				mysql_tquery(SQL,var100,"","");
				Update(id, pJailTimex);
				Update(id, pGunLicSuspendx);
				return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:dmp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		new id,string[128],giveplayer[30],sendername[30],time=10;
		if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dmp [name/playerid]");
		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
				if(PlayerInfo[id][pJailTime] > 0) return SCM(playerid, COLOR_GREY, "This player is already in jail.");
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				ResetPlayerWeaponsEx(id);
				ResetPlayerWeapons(id);
				WantedPoints[id] = 0;
				PlayerInfo[id][pJailed] = 2;
				Update(id, pJailedx);
				SetPlayerInterior(id, 10);
                new rand;
				rand = random(sizeof(gRandomAJailSpawns));
				SetPlayerPosEx(id,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
				PlayerInfo[id][pJailTime] = time*60;
				format(string,sizeof(string),"({FF6347}AdminStaff{FFFFFF}) %s has been jailed by %s, reason: DM #2 (%d minutes).",giveplayer,sendername,time);
				SendClientMessageToAll(COLOR_WHITE, string);
				new var100[256];
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`actiontime`,`unixtime`) VALUES ('%d','%d','6','DM #2','%s','%s','%d','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],time,gettime());
				mysql_tquery(SQL,var100,"","");
				Update(id, pJailTimex);
				return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:lg(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		new id,string[128],giveplayer[30],sendername[30],query[256],reason[30],time,unixtime,mute=0;
		if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /lg [name/playerid]");
		if(IsPlayerConnected(id))
		{
			if(id != INVALID_PLAYER_ID)
		    {
		    	GetPlayerName(id, giveplayer, sizeof(giveplayer));
		    	GetPlayerName(playerid, sendername, sizeof(sendername));
		    	format(query, sizeof(query),"SELECT * FROM `punishlogs` WHERE `playerid`='%d' AND `actionid`='7'",PlayerInfo[id][pSQLID]);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					unixtime = cache_get_field_content_int(i, "unixtime");
					cache_get_field_content(i, "reason", reason);
					if(strfind(reason,"limbaj",true) != -1 && unixtime > gettime()-30*86400) { mute++; SendClientMessage(playerid, COLOR_WHITE, "Test"); }
				}
				cache_delete(resultt);
				time = mute*10 + 10;
				PlayerInfo[id][pMuted] = 1;
				PlayerInfo[id][pMuteTime] = time*60;
				format(string, sizeof(string), "* You were muted by Admin %s for %d minutes, reason: limbaj vulgar / offensive language.", sendername, time);
				SendClientMessage(id, COLOR_LIGHTRED, string);
		    	format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s has been muted by %s for %d minutes, reason: limbaj vulgar / offensive language.", giveplayer, sendername, time);
				SendClientMessageToAll(COLOR_WHITE, string);
				mysql_format(SQL,query,sizeof(query),"UPDATE users SET `Muted`='1',`MuteTime`='%d' WHERE `name`='%s'", PlayerInfo[id][pMuteTime], PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,query,"","");
				new var100[256];
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','7','%d','limbaj vulgar / offensive language','%s','%s','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],time,giveplayer,sendername,gettime());
				mysql_tquery(SQL,var100,"","");
		    }
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:relase(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		new id,string[128],giveplayer[30],sendername[30],reason[128],reasone[128];
		if(sscanf(params, "us[128]", id, reason)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /relase [name/playerid] [reason]");
		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
				mysql_real_escape_string(reason, reasone);
			    GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				ResetPlayerWeaponsEx(id);
				ResetPlayerWeapons(id);
				WantedPoints[id] = 0;
				PlayerInfo[id][pJailed] = 0;
				PlayerInfo[id][pJailTime] = 0;
				PlayerInfo[id][pWantedLevel] = 0;
				Update(id,pJailedx);
				Update(id,pJailTimex);
				Update(id,pWantedLevelx);
				SetPlayerInterior(id, 0);
				SetPlayerVirtualWorld(id, 0);
				SetPlayerPosEx(id, -1973.7002,137.7904,27.6875);
				format(string,sizeof(string),"({FF6347}AdminStaff{FFFFFF}) %s was released from jail by admin %s, reason: %s.",giveplayer,sendername,reason);
				SendClientMessageToAll(COLOR_WHITE, string);
   				SetPlayerSkin(id, PlayerInfo[id][pModel]);
				ClearCrime(id);
				PlayerTextDrawHide(id, Jailtime[id]);
				new var100[256];
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`actiontime`,`unixtime`) VALUES ('%d','%d','8','%s','%s','%s','0','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],reasone,giveplayer,sendername,gettime());
				mysql_tquery(SQL,var100,"","");
				return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:aclear(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Trebuie sa te loghezi mai intai.");
//	if(PinLogged[playerid] == 0) return SCM(playerid, COLOR_LIGHTRED,"Trebuie sa  introduci pin-ul mai intai.(/pin)sau sa iti setezi un pin /setpin");
	if(IsPlayerConnected(playerid))
	{
	 	if(PlayerInfo[playerid][pAdmin] >= 3)
		{
			if(PlayerInfo[playerid][pLevel] >=1)
			{
				new id,string[128],giveplayer[30],sendername[30];
				if(sscanf(params, "u", id)) return SCM(playerid,COLOR_WHITE,"{FF9900}Scrie: {33CCFF}/clear <Name/Playerid>");
				{
			    	if(IsPlayerConnected(id))
			    	{
			    		if(id != INVALID_PLAYER_ID)
			      		{
                            //if(PlayerInfo[id][pAdmin] >= 1) return SendClientMessage(playerid, COLOR_WHITE, "Nu poti da /aclear unui admin.");
					    	GetPlayerName(id, giveplayer, sizeof(giveplayer));
					    	GetPlayerName(playerid, sendername, sizeof(sendername));
				    		format(string, sizeof(string), "* You cleared the Records and Wanted Points of %s.", giveplayer);
			     			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					    	format(string, sizeof(string), "* Officer %s has cleared your Records and Wanted Points.", sendername);
					    	SendClientMessage(id, COLOR_LIGHTBLUE, string);
						    format(string, sizeof(string), "* %s has cleared %s's Records and Wanted Points.", sendername, giveplayer);
						    SendTeamMessage(20, COLOR_LIGHTBLUE, string);
                            SendTeamMessage(8, COLOR_LIGHTBLUE, string);
							SendTeamMessage(3, COLOR_LIGHTBLUE, string);
			     			SendTeamMessage(2, COLOR_LIGHTBLUE, string);
	          				SendTeamMessage(1, COLOR_LIGHTBLUE, string);
					    	WantedPoints[id] = 0;
		       				PlayerInfo[id][pWantedLevel] = 0;
						    SetPlayerWantedLevel(id, 0);
						    PlayerTextDrawHide(id, WantedText[id]);
					    	ClearCrime(id);
							Update(id,pWantedLevelx);
	                    }
					}
			    	else
				    {
				    	SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Acest player nu este conectat.");
				    }
		        }
     		}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "{FFB870}Nu ai destula valoare.");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "{FFB870}Nu esti admin 3+.");
		}
	}
	return 1;
}
CMD:clear(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
	 	if(IsACop(playerid))
		{
			new tmpcar = GetPlayerVehicleID(playerid),fid = PlayerInfo[playerid][pMember];
			if(IsACopCar(tmpcar) || IsANgCar(tmpcar) || IsAFbiCar(tmpcar) || IsALVPDCar(tmpcar) || PlayerToPoint(50.0,playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]))
			{
				new id,string[128],giveplayer[30],sendername[30];
				if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /clear [name/playerid]");
				{
			    	if(IsPlayerConnected(id))
			    	{
			    		if(id != INVALID_PLAYER_ID)
			      		{
                        	if(id == playerid) return SendClientMessage(playerid, COLOR_WHITE, "You cannot clear yourself.");
					    	GetPlayerName(id, giveplayer, sizeof(giveplayer));
					    	GetPlayerName(playerid, sendername, sizeof(sendername));
					    	format(string, sizeof(string), "%s has cleared all your warrants!", sendername);
					    	SendClientMessage(id, COLOR_LIGHTRED, string);
						    format(string, sizeof(string), "Dispatch: %s has cleared all the warrants on %s.", sendername, giveplayer);
                            SendTeamMessage(8, COLOR_LIGHTBLUE, string);
							SendTeamMessage(3, COLOR_LIGHTBLUE, string);
			     			SendTeamMessage(2, COLOR_LIGHTBLUE, string);
	          				SendTeamMessage(1, COLOR_LIGHTBLUE, string);
					    	WantedPoints[id] = 0;
		       				PlayerInfo[id][pWantedLevel] = 0;
						    SetPlayerWantedLevel(id, 0);
						    PlayerTextDrawHide(id, WantedText[id]);
					    	ClearCrime(id);
							Update(id,pWantedLevelx);
							foreach(new i : Player)
							{
								if(IsACop(i))
								{
									SetPlayerMarkerForPlayer( i, id, ( GetPlayerColor( id ) & 0xFFFFFF00 ) );
								}
							}
	                    }
					}
			    	else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		        }
     		}
			else return SendClientMessage(playerid, COLOR_GREY, "You are to not in your HQ or a police vehicle.");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You are not a cop.");
	}
	return 1;
}
CMD:givelicense(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
        if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pMember] == 17)
        {
            new x_nr[30],id,sendername[30],giveplayer[30],string[128];
   			if(sscanf(params, "s[50]u",x_nr,id))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /givelicense [license] [name/playerid]");
			    SendClientMessage(playerid, COLOR_WHITE, "Licenses: boat, gun, fly");
				return 1;
			}
			if(id == playerid) return SendClientMessage(playerid, COLOR_GREY, "You can't give a licence to yourself.");
			if(strcmp(x_nr,"fly",true) == 0)
			{
				if(IsPlayerConnected(id))
				{
				    if(id != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[id][pFlyLicT] > 10) return SendClientMessage(playerid, COLOR_WHITE, "This player fly licence expire in more than 10 hours.");
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(id, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "I-ai dat lui %s licenta de fly.",giveplayer);
				        SendClientMessage(playerid, COLOR_DARKPINK, string);
				        format(string, sizeof(string), "%s ti-a dat licenta de fly.",sendername);
				        SendClientMessage(id, COLOR_DARKPINK, string);
				        format(string, sizeof(string), "(i) %s has given %s the fly licence.",sendername,giveplayer);
				        SendFamilyMessage(12, COLOR_MEMBER, string);
				        PlayerInfo[id][pFlyLic] = 1;
				        PlayerInfo[id][pFlyLicT] = 100;
						new str[256];
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `FlyLic`='1',`FlyLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
						new varxx[256];
						mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport1 = Raport1+1 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,varxx,"","");
				        return 1;
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
			else if(strcmp(x_nr,"boat",true) == 0)
			{
				if(IsPlayerConnected(id))
				{
				    if(id != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[id][pBoatLicT] > 10) return SendClientMessage(playerid, COLOR_WHITE, "This player boat licence expire in more than 10 hours.");
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(id, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "I-ai dat lui %s licenta de boat.",giveplayer);
				        SendClientMessage(playerid, COLOR_DARKPINK, string);
				        format(string, sizeof(string), "%s ti-a dat licenta de boat.",sendername);
				        SendClientMessage(id, COLOR_DARKPINK, string);
				        format(string, sizeof(string), "(i) %s has given %s the boat licence.",sendername,giveplayer);
				        SendFamilyMessage(12, COLOR_MEMBER, string);
				        PlayerInfo[id][pBoatLic] = 1;
				        PlayerInfo[id][pBoatLicT] = 100;
						new str[256];
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `BoatLic`='1',`BoatLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
						new varxx[256];
						mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport1 = Raport1+1 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,varxx,"","");
				        return 1;
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
			else if(strcmp(x_nr,"gun",true) == 0)
			{
				if(IsPlayerConnected(id))
				{
				    if(id != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[id][pGunLicT] > 10) return SendClientMessage(playerid, COLOR_WHITE, "This player gun licence expire in more than 10 hours.");
						if(PlayerInfo[id][pLevel] < 3) return SendClientMessage(playerid, COLOR_WHITE, "This player does not have level 3.");
						if(PlayerInfo[id][pGunLicSuspend] > 0) return SendClientMessage(playerid, COLOR_WHITE, "This player have gun license suspended.");
						GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(id, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "I-ai dat lui %s licenta de gun.",giveplayer);
				        SendClientMessage(playerid, COLOR_DARKPINK, string);
				        format(string, sizeof(string), "%s ti-a dat licenta de gun.",sendername);
				        SendClientMessage(id, COLOR_DARKPINK, string);
				        format(string, sizeof(string), "(i) %s has given %s the gun licence.",sendername,giveplayer);
				        SendFamilyMessage(12, COLOR_MEMBER, string);
				        PlayerInfo[id][pGunLic] = 1;
				        PlayerInfo[id][pGunLicT] = 100;
						new str[256];
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `GunLic`='1',`GunLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
						new varxx[256];
						mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport1 = Raport1+1 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,varxx,"","");
				        return 1;
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
        }
        else return SendClientMessage(playerid, COLOR_GREY, "You are not a school instructor.");
    }
    return 1;
}
CMD:startlesson(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
        if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)
        {
            new id,sendername[30],giveplayer[30],string[128];
   			if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /startlesson [name/playerid]");
   			{
				if(IsPlayerConnected(id))
				{
				    if(id != INVALID_PLAYER_ID)
				    {
						if(playerid == id) return SCM(playerid, COLOR_GREY, "You can't use this command on yourself'.");
					    GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(id, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* You've started %s's Lesson.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* Instructor %s has started your Lesson.",sendername);
				        SendClientMessage(id, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* Instructor %s has started %s Lesson.",sendername,giveplayer);
				        SendFamilyMessage(12,COLOR_YELLOW,string);
				        TakingLesson[id] = 2;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
				    return 1;
				}
	        }
	    }
    	else
        {
            SendClientMessage(playerid, COLOR_GREY, "You are not a school instructor.");
            return 1;
        }
    }
    return 1;
}
CMD:stoplesson(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
        if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)
        {
            new id,sendername[30],giveplayer[30],string[128];
   			if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /stoplesson [name/playerid]");
   			{
				if(IsPlayerConnected(id))
				{
				    if(id != INVALID_PLAYER_ID)
				    {
						if(TakingLesson[id] != 2) return SendClientMessage(playerid, COLOR_GREY, "This player is not taking a lesson.");
						if(playerid == id) return SCM(playerid, COLOR_GREY, "You can't use this command on yourself.");
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(id, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* You've stopped %s's Lesson.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* Instructor %s has stopped your Lesson.",sendername);
				        SendClientMessage(id, COLOR_LIGHTBLUE, string);
				        TakingLesson[id] = 0;
				    }
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	        }
	    }
	    else return SendClientMessage(playerid, COLOR_GREY, "You are not a school instructor.");
	}
	return 1;
}
CMD:givegun(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)
        {
			new id,sendername[30],giveplayer[30],string[128];
			if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /givegun [name/playerid]");
   			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GivePlayerWeaponEx(id, 23, 10);
				format(string, sizeof(string), "# %s has given a weapon to %s.", sendername, giveplayer);
				SendFamilyMessage(12, COLOR_MEMBER, string);
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You are not a school instructor.");
	}
	return 1;
}
CMD:showlicenses(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		new id;
        if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /showlicenses [name/playerid]");
        if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
        if(!ProxDetectorS(8.0, playerid, id)) return SCM(playerid, COLOR_GREY, "This player is not near you.");
		if(Spectate[id] != -1) return SCM(playerid, COLOR_GREY, "This player is not near you.");
		new text1[20],text2[20],text3[20],text4[20],string[128],sendername[30];
		if(PlayerInfo[playerid][pCarLic] == 1) { text1 = "Passed"; } else { text1 = "Not Passed"; }
		if(PlayerInfo[playerid][pFlyLic] == 1) { text2 = "Passed"; } else { text2 = "Not Passed"; }
		if(PlayerInfo[playerid][pBoatLic] == 1) { text3 = "Passed"; } else { text3 = "Not Passed"; }
        if(PlayerInfo[playerid][pGunLic] == 1) { text4 = "Passed"; } else { text4 = "Not Passed"; }
        GetPlayerName(playerid, sendername, sizeof(sendername));
        format(string, sizeof(string), "---- %s's licenses ----", sendername);
	    SendClientMessage(id, COLOR_WHITE, string);
	    if(PlayerInfo[playerid][pCarLicT] == 0)
	    {
        	format(string, sizeof(string), "Drivers licence: %s", text1);
        	SendClientMessage(id, COLOR_WHITE, string);
        }
	    else
	    {
        	format(string, sizeof(string), "Drivers licence: %s (expires in %d hours)", text1,PlayerInfo[playerid][pCarLicT]);
        	SendClientMessage(id, COLOR_WHITE, string);
        }
        if(PlayerInfo[playerid][pFlyLicT] == 0)
	    {
			format(string, sizeof(string), "Flying licence: %s", text2);
			SendClientMessage(id, COLOR_WHITE, string);
		}
		else
		{
			format(string, sizeof(string), "Flying licence: %s (expires in %d hours)", text2,PlayerInfo[playerid][pFlyLicT]);
			SendClientMessage(id, COLOR_WHITE, string);
		}
        if(PlayerInfo[playerid][pBoatLicT] == 0)
	    {
			format(string, sizeof(string), "Boat licence: %s", text3);
			SendClientMessage(id, COLOR_WHITE, string);
		}
		else
		{
			format(string, sizeof(string), "Boat licence: %s (expires in %d hours)", text3,PlayerInfo[playerid][pBoatLicT]);
			SendClientMessage(id, COLOR_WHITE, string);
		}
		if(PlayerInfo[playerid][pGunLicT] == 0)
	    {
			format(string, sizeof(string), "Weapon licence: %s", text4);
			SendClientMessage(id, COLOR_WHITE, string);
		}
		else
		{
			format(string, sizeof(string), "Weapon licence: %s (expires in %d hours)", text4,PlayerInfo[playerid][pGunLicT]);
			SendClientMessage(id, COLOR_WHITE, string);
		}
		SendClientMessage(id, COLOR_WHITE, "------------");
		new giveplayer[25];
		GetPlayerName(playerid,sendername,sizeof(sendername));
		GetPlayerName(id,giveplayer,sizeof(giveplayer));
		format(string, sizeof(string), "* %s has shown his/her Licenses to you.", sendername);
		SendClientMessage(id, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* You have shown your Licenses to %s.", giveplayer);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
    return 1;
}
CMD:alicenses(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_LIGHTGREEN3, AdminOnly);
		new id;
        if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /alicenses [name/playerid]");
        if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
        new text1[20],text2[20],text3[20],text4[20],string[128],giveplayer[30];
		if(PlayerInfo[id][pCarLic] == 1) { text1 = "Passed"; } else { text1 = "Not Passed"; }
		if(PlayerInfo[id][pFlyLic] == 1) { text2 = "Passed"; } else { text2 = "Not Passed"; }
		if(PlayerInfo[id][pBoatLic] == 1) { text3 = "Passed"; } else { text3 = "Not Passed"; }
        if(PlayerInfo[id][pGunLic] == 1) { text4 = "Passed"; } else { text4 = "Not Passed"; }
        GetPlayerName(id, giveplayer, sizeof(giveplayer));
        format(string,sizeof(string),"---- %s's licenses ----", giveplayer);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    if(PlayerInfo[id][pCarLicT] == 0)
	    {
        	if(PlayerInfo[id][pCarLicSuspend] == 0)
			{
				format(string, sizeof(string), "Drivers licence: %s", text1);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else if(PlayerInfo[id][pCarLicSuspend] > 0)
			{
				format(string, sizeof(string), "Drivers licence: Suspended (suspended for %d hours)", PlayerInfo[id][pCarLicSuspend]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
        }
	    else
	    {
        	format(string, sizeof(string), "Drivers licence: %s (expires in %d hours)", text1,PlayerInfo[id][pCarLicT]);
        	SendClientMessage(playerid, COLOR_WHITE, string);
        }
        if(PlayerInfo[id][pFlyLicT] == 0)
	    {
			format(string, sizeof(string), "Flying licence: %s", text2);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
			format(string, sizeof(string), "Flying licence: %s (expires in %d hours)", text2,PlayerInfo[id][pFlyLicT]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
        if(PlayerInfo[id][pBoatLicT] == 0)
	    {
			format(string, sizeof(string), "Boat licence: %s", text3);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
			format(string, sizeof(string), "Boat licence: %s (expires in %d hours)", text3,PlayerInfo[id][pBoatLicT]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		if(PlayerInfo[id][pGunLicT] == 0)
	    {
			if(PlayerInfo[id][pGunLicSuspend] == 0)
			{
				format(string, sizeof(string), "Weapon licence: %s", text4);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else if(PlayerInfo[id][pGunLicSuspend] > 0)
			{
				format(string, sizeof(string), "Weapon licence: Suspended (suspended for %d hours)", PlayerInfo[id][pGunLicSuspend]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		else
		{
			format(string, sizeof(string), "Weapon licence: %s (expires in %d hours)", text4,PlayerInfo[id][pGunLicT]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		SendClientMessage(playerid, COLOR_WHITE, "------------");
	}
    return 1;
}
CMD:licenses(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
        new text1[20],text2[20],text3[20],text4[20],string[128],sendername[30];
		if(PlayerInfo[playerid][pCarLic] == 1) { text1 = "Passed"; } else { text1 = "Not Passed"; }
		if(PlayerInfo[playerid][pFlyLic] == 1) { text2 = "Passed"; } else { text2 = "Not Passed"; }
		if(PlayerInfo[playerid][pBoatLic] == 1) { text3 = "Passed"; } else { text3 = "Not Passed"; }
        if(PlayerInfo[playerid][pGunLic] == 1) { text4 = "Passed"; } else { text4 = "Not Passed"; }
        GetPlayerName(playerid, sendername, sizeof(sendername));
        format(string,sizeof(string),"---- %s's licenses ----", sendername);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    if(PlayerInfo[playerid][pCarLicT] == 0)
	    {
			if(PlayerInfo[playerid][pCarLicSuspend] == 0)
			{
				format(string, sizeof(string), "Drivers licence: %s", text1);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else if(PlayerInfo[playerid][pCarLicSuspend] > 0)
			{
				format(string, sizeof(string), "Drivers licence: Suspended (suspended for %d hours)", PlayerInfo[playerid][pCarLicSuspend]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
        }
	    else
	    {
        	format(string, sizeof(string), "Drivers licence: %s (expiers in %d hours)", text1,PlayerInfo[playerid][pCarLicT]);
        	SendClientMessage(playerid, COLOR_WHITE, string);
        }
        if(PlayerInfo[playerid][pFlyLicT] == 0)
	    {
			format(string, sizeof(string), "Flying licence: %s", text2);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
			format(string, sizeof(string), "Flying licence: %s (expires in %d hours)", text2,PlayerInfo[playerid][pFlyLicT]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
        if(PlayerInfo[playerid][pBoatLicT] == 0)
	    {
			format(string, sizeof(string), "Boat licence: %s", text3);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
			format(string, sizeof(string), "Boat licence: %s (expires in %d hours)", text3,PlayerInfo[playerid][pBoatLicT]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		if(PlayerInfo[playerid][pGunLicT] == 0)
	    {
			if(PlayerInfo[playerid][pGunLicSuspend] == 0)
			{
				format(string, sizeof(string), "Weapon licence: %s", text4);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else if(PlayerInfo[playerid][pGunLicSuspend] > 0)
			{
				format(string, sizeof(string), "Weapon licence: Suspended (suspended for %d hours)", PlayerInfo[playerid][pGunLicSuspend]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		else
		{
			format(string, sizeof(string), "Weapon licence: %s (expires in %d hours)", text4,PlayerInfo[playerid][pGunLicT]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		SendClientMessage(playerid, COLOR_WHITE, "------------");
	}
    return 1;
}
CMD:setfrequency(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[256],password[20],password2[20],ownerid;
	if(PlayerInfo[playerid][pWTalkie] == 0) return SCM(playerid, COLOR_GREY, "You don't have a walkie talkie.");
	new freqss2;
    if(sscanf(params, "dS(q)[20]",freqss2,password)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /setfrequency [frequency] (0 to switch off).");
    if(freqss2 < 0 || freqss2 > 1000000) return SCM(playerid, COLOR_GREY, "Invalid frequency specified. Valid frequencies: 1 - 1000000.");
    if(freqss2 == 0)
    {
    	WTChannel[playerid] = 0;
    	mysql_format(SQL,string,sizeof(string),"UPDATE `users` SET `WTChannel` = '%d' WHERE `name` = '%s'",WTChannel[playerid],PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,string,"","");
    	SendClientMessage(playerid, COLOR_GREY, "You have switched off your walkie-talkie.");
    	return 1;
    }
    if(freqss2 < 100) return SCM(playerid, COLOR_GREY, "Invalid walkie talkie frequency.");
    if(freqss2 >= 1000)
    {
	    format(string, sizeof(string), "You are now broadcasting at the frequency of #%d khz.",freqss2);
	    SCM(playerid, COLOR_WHITE, string);
		WTChannel[playerid] = freqss2;
		mysql_format(SQL,string,sizeof(string),"UPDATE `users` SET `WTChannel` = '%d' WHERE `name` = '%s'",WTChannel[playerid],PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,string,"","");
	}
	else
	{
		format(string, sizeof(string), "SELECT * FROM `frequencies` WHERE `freqid`='%d'", freqss2);
		new Cache: ab = mysql_query(SQL, string);
		if(cache_get_row_count() > 0)
		{
			cache_get_field_content(0, "password", password2);
			ownerid = cache_get_field_content_int(0, "ownerid");
		}
		else
		{
			cache_delete(ab);
			SendClientMessage(playerid, COLOR_WHITE, "Invalid frequency. This frequency can be bought from the /shop.");
			return 1;
		}
		cache_delete(ab);
		if(ownerid == PlayerInfo[playerid][pSQLID])
		{
			format(string, sizeof(string), "You are now broadcasting at the frequency of #%d khz.",freqss2);
		    SCM(playerid, COLOR_WHITE, string);
			WTChannel[playerid] = freqss2;
			mysql_format(SQL,string,sizeof(string),"UPDATE `users` SET `WTChannel` = '%d' WHERE `name` = '%s'",WTChannel[playerid],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,string,"","");
		}
		else
		{
			if(strcmp(password,password2,true) == 0)
			{
				format(string, sizeof(string), "You are now broadcasting at the frequency of #%d khz.",freqss2);
			    SCM(playerid, COLOR_WHITE, string);
				WTChannel[playerid] = freqss2;
				mysql_format(SQL,string,sizeof(string),"UPDATE `users` SET `WTChannel` = '%d' WHERE `name` = '%s'",WTChannel[playerid],PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,string,"","");
			}
			else return SS(playerid, COLOR_WHITE, "Parola invalida! Aceasta este o frecventa privata. Ai nevoie de o parola pentru a o putea folosi.", "Invalid password! This is a private frequency. You need the password to enter.");
		}
	}
	return 1;
}
CMD:setfreq(playerid, params[])
{
	return cmd_setfrequency(playerid, params);
}
CMD:freq(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new action[10], value[20],string[256],name[30];
	if(sscanf(params, "s[10]S(q)[20]", action, value))
	{
		SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /freq [action] [value]");
		SendClientMessage(playerid, COLOR_WHITE, "Actions: password, members, list");
		return 1;
	}
	if(strcmp(action,"list",true) == 0)
	{
		new freqid, password[50];
		SendClientMessage(playerid, COLOR_WHITE, "Frequencies owned by you:");
		format(string, sizeof(string), "SELECT * FROM `frequencies` WHERE `ownerid`='%d'", PlayerInfo[playerid][pSQLID]);
		new Cache: test = mysql_query(SQL, string);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			freqid = cache_get_field_content_int(i, "freqid");
			cache_get_field_content(i, "password", password);
			format(string, sizeof(string), "Freq %d - pass: %s", freqid, password);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		cache_delete(test);
	}
	else if(strcmp(action,"members",true) == 0)
	{
		if(WTChannel[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You need to be on the frequency that you want to manage.");
		format(string, sizeof(string), "---- Broadcasting on frequency %d ----", WTChannel[playerid]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		foreach(new i : Player)
		{
			if(WTChannel[i] == WTChannel[playerid])
			{
				GetPlayerName(i, name, sizeof(name));
				format(string, sizeof(string), "(%d) %s", i, name);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
	}
	else if(strcmp(action,"password",true) == 0)
	{
		new xx, freqid;
		if(WTChannel[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You need to be on the frequency that you want to manage.");
		format(string, sizeof(string), "SELECT * FROM `frequencies` WHERE `ownerid`='%d'", PlayerInfo[playerid][pSQLID]);
		new Cache: test = mysql_query(SQL, string);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			freqid = cache_get_field_content_int(i, "freqid");
			if(WTChannel[playerid] == freqid)
			{
				xx = 1;
				break;
			}
		}
		cache_delete(test);
		if(xx == 0) return SendClientMessage(playerid, COLOR_WHITE, "You need to be on your own frequency to use this command.");
		mysql_format(SQL, string, sizeof(string), "UPDATE `frequencies` SET `password`='%s' WHERE `freqid`='%d'", value, WTChannel[playerid]);
		mysql_tquery(SQL, string, "", "");
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Parola frecventei a fost schimbata in %s", value);
		else format(string, sizeof(string), "Frequency password changed to %s", value);
		SendClientMessage(playerid, COLOR_WHITE, string);
		SS(playerid, COLOR_WHITE, "Toti playerii au fost dati afara de pe frecventa ta deoarece ownerul frecventei a schimbat parola.", "Everyone got kicked from the frequency.");
		foreach(new i : Player)
		{
			if(WTChannel[i] == freqid)
			{
				WTChannel[i] = 0;
				SS(playerid, COLOR_WHITE, "Ai fost dat afara de pe frecventa deoarece ownerul frecventei a schimbat parola.", "You were kicked from the frequency because the owner of the frequency changed the password.");
			}
		}
	}
	return 1;
}
CMD:wt(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pWTalkie] == 0) return SCM(playerid, COLOR_GREY, "You don't have a walkie talkie.");
	new msg[128],sendername[25],string[256];
    if(PlayerInfo[playerid][pMuted] == 1)
    {
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 1;
	}
	if(sscanf(params, "s[128]", msg)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /wt [message]");
	if(WTChannel[playerid] == 0) return SCM(playerid,COLOR_GREY,"You need to set a broadcast frequency first (using /setfrequency).");
	GetPlayerName(playerid,sendername,sizeof(sendername));
	foreach(new i : Player)
	{
	    if(WTChannel[i] == WTChannel[playerid])
	    {
			format(string, sizeof(string), "[WT %d] %s: %s",WTChannel[playerid],sendername, msg);
			SCM(i, COLOR_SMS, string);
			format(string ,sizeof(string),"(radio) ''%s''", params);
			SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
	    }
	}
	new var100[300],resulttt[300],strr[300];
	format(strr, sizeof(strr),"[WT %d] %s: %s", WTChannel[playerid], sendername, msg);
	mysql_real_escape_string(strr, resulttt);
	mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','wt')", PlayerInfo[playerid][pSQLID], resulttt);
	mysql_tquery(SQL,var100,"","");
	return 1;
}
CMD:arrest(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new tmpcar = GetPlayerVehicleID(playerid);
	if(IsACop(playerid))
	{
        if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
		new id,sendername[30],giveplayer[30],string[186];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /arrest [name/playerid]");
		new tmpcar2 = GetPlayerVehicleID(id);
		if(IsPlayerConnected(id))
		{
			if(GetDistanceBetweenPlayers(playerid,id) < 5)
			{
				if( GetPlayerState(playerid) == PLAYER_STATE_DRIVER && Copcar2(tmpcar) && tmpcar == tmpcar2 && PlayerToPoint(10.0, playerid, 1526.2357,-1678.0305,5.8906) || PlayerToPoint(6.0, playerid, 268.9264,81.9687,1001.0391) || PlayerToPoint(4.0, playerid, 2282.1289,2425.7620,3.4692) )
				{
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(PlayerInfo[id][pWantedLevel] < 1) return SendClientMessage(playerid, COLOR_GREY, "This player don't have wanted.");
					new varxx[256];
					mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport2 = Raport2+1 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,varxx,"","");
					if(PlayerInfo[playerid][pQuest2] == 2)
					{
						if(PlayerInfo[playerid][pQuestNeed2] > PlayerInfo[playerid][pQuestProgress2])
						{
							PlayerInfo[playerid][pQuestProgress2]++;
							Update(playerid, pQuestProgress2x);
							if(PlayerInfo[playerid][pQuestProgress2] >= PlayerInfo[playerid][pQuestNeed2])
							{
								FinishQuest2(playerid, 2);
							}
							else
							{
								new str[128];
								if(PlayerInfo[playerid][pLanguage] == 1)
								{
									format(str, sizeof(str),"Quest [Arrest %d suspects] progress: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
									SendClientMessage(playerid, COLOR_YELLOW, str);
								}
								else
								{
									format(str, sizeof(str),"Progres pentru misiunea [Aresteaza %d suspecti]: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
									SendClientMessage(playerid, COLOR_YELLOW, str);
								}
							}
						}
					}
					if(PlayerInfo[id][pWantedLevel] >= 1)
					{
						new fine = PlayerInfo[id][pWantedLevel] * 600, time;
						if(SvarInfo[1][svValue] == 0) time = PlayerInfo[id][pWantedLevel] * 150;
						else time = PlayerInfo[id][pWantedLevel] * 75;
						GivePlayerCash(id, -fine);
						new str23[256],idfac;
						idfac = PlayerInfo[playerid][pMember];
                        DynamicFactions[idfac][fBank] += fine;
						mysql_format(SQL,str23,sizeof(str23),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[idfac][fBank], idfac);
						mysql_tquery(SQL,str23,"","");
						ResetPlayerWeaponsEx(id);
						ResetPlayerWeapons(id);
						PlayerInfo[id][pJailTime] = time;
						SetPlayerWantedLevel(id, 0);
						PlayerTextDrawHide(id, WantedText[id]);
						SetPlayerInterior(id, 6);
		                new rand;
						rand = random(sizeof(gRandomJailSpawns));
						SetPlayerPosEx(id,gRandomJailSpawns[rand][0],gRandomJailSpawns[rand][1],gRandomJailSpawns[rand][2]);
						format(string, sizeof(string), "You have been arrested by %s for %d seconds, and issued a fine of $%d.", sendername, time, fine);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						PlayerInfo[id][pJailed] = 1;
						PlayerInfo[id][pArrested] += 1;
						PlayerInfo[id][pWantedLevel] = 0;
						WantedPoints[id] = 0;
						arrestcop[id] = playerid;
						if(CP[id] == 50)
						{
							DisablePlayerCheckpoint(id);
							CP[id] = 0;
						}
                        Update(id,pJailedx);
                        Update(id,pJailTimex);
						Update(playerid,pCashx);
						Update(id,pCashx);
						Update(id,pWantedLevelx);
						if(PlayerCuffed2[id] == 1)
						{
						    PlayerCuffed2[id] = 0;
					    	SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
					    	RemovePlayerAttachedObject(id,1);
					    	TogglePlayerControllable(id, 1);
						}
						if(IsPlayerInRangeOfPoint(playerid, 4,2282.1289,2425.7620,3.4692))
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,1526.2357,-1678.0305,5.8906))
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 3)
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 0)
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,-1606.1118,673.9193,-5.2422) && GetPlayerVirtualWorld(playerid) == 0)
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						format(string, sizeof(string), "%s arrested suspect %s, issuing a fine of $%d with a sentence of %d seconds.", sendername, giveplayer, fine, time);
						foreach(new i : Player) if(togarrests[i] == 0) SendClientMessage(i, COLOR_LIGHTRED, string);
						TogglePlayerControllable(id, 0);
						SetTimerEx("UnFreezeStation", 1000, false, "i", id);
						return 1;
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "You are not near the jail.");
			}
			else return SCM(playerid,COLOR_GREY,"This player is not near you.");
		}
		else return SCM(playerid,COLOR_GREY,"Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_GREY, "You are not a cop.");
	return 1;
}
CMD:ecar(playerid, params[])
{
   return cmd_spawncar(playerid, params);
}
CMD:spawncar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new model,sendername[25],string[256];
		if(sscanf(params, "i", model)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /spawncar [model]");
		if(model < 400 || model > 611) return SCM(playerid, COLOR_GREY, "Invalid car model.");
    	new Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid, X,Y,Z);
     	new carid = CreateVehicle(model, X,Y,Z, 0.0,  -1, -1, -1);
		Carspawn[carid] = carid;
		SetVehicleNumberPlate(carid, "ADMIN");
       	GetPlayerName(playerid, sendername, sizeof(sendername));
       	new vehicles = GetVehicleModel(carid) - 400;
    	format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s has spawned a %s.",sendername,aVehicleNames[vehicles]);
    	ABroadCast(COLOR_WHITE, string, 4);
		LinkVehicleToInterior(carid, GetPlayerInterior(playerid));
		SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
		PutPlayerInVehicle(playerid, carid, 0);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:vcreate(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new id,model,string[128],giveplayer[30],total;
		if(sscanf(params, "ui", id, model)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vcreate [playerid] [model]");
		if(model < 400 || model > 611) return SCM(playerid, COLOR_GREY, "Invalid car ID! (400-611)");
		if(IsPlayerConnected(id))
		{
			if(id != INVALID_PLAYER_ID)
			{
				for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				{
					if(PlayerInfo[id][pCar][v] != -1) total++;
				}
				if(total+1 > PlayerInfo[id][pCarSlots])
				{
					SendClientMessage(playerid, COLOR_GREY, "This player have all vehicles slots full.");
					return 1;
				}
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				CreateVEH[playerid] = model;
				CreateVEHID[playerid] = id;
				format(string, sizeof(string), "Esti sigur ca vrei sa-i dai lui %s masina %s?\n\nAbuzul de aceasta comanda poate duce la scoaterea ta din staff!", giveplayer, aVehicleNames[model - 400]);
				ShowPlayerDialog(playerid, DIALOG_VCREATE, DIALOG_STYLE_MSGBOX, "Personal Vehicle Create", string, "Da", "Nu");
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:savevehicle(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in a vehicle to save it.");
		ShowPlayerDialog(playerid,DIALOG_SAVEVEHICLE,DIALOG_STYLE_MSGBOX, "Save vehicle", "Esti sigur ca vrei sa salvezi aceasta masina?", "Da","Nu");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:deletevehicle(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in a vehicle to delete it.");
		ShowPlayerDialog(playerid,DIALOG_DELETEVEHICLE,DIALOG_STYLE_MSGBOX, "Delete vehicle", "Esti sigur ca vrei sa stergi aceasta masina?", "Da","Nu");
	}
	return 1;
}
CMD:vcolor(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new color1, color2, str[256], carid = GetPlayerVehicleID(playerid);
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in a vehicle to change his color.");
		if(sscanf(params, "dd", color1, color2)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vcolor [color1] [color2]");
		if(color1 < -1 || color1 > 255) return 1;
		if(color2 < -1 || color2 > 255) return 1;
		for(new x; x < MAX_VEHICLES; x++)
		{
			if(VehicleInfo[x][vehCarID] == carid)
			{
				VehicleInfo[x][vehColor1] = color1;
				VehicleInfo[x][vehColor2] = color2;
				mysql_format(SQL,str,sizeof(str),"UPDATE vehicles SET `Color1`='%d',`Color2`='%d' WHERE `ID`='%d'",VehicleInfo[x][vehColor1],VehicleInfo[x][vehColor2],VehicleInfo[x][vehCarIDD]);
				mysql_tquery(SQL,str,"","");
				ChangeVehicleColor(VehicleInfo[x][vehCarID], VehicleInfo[x][vehColor1], VehicleInfo[x][vehColor2]);
				SendClientMessage(playerid, COLOR_YELLOW, "Vehicle color changed.");
				return 1;
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:vmove(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in a vehicle to move it.");
		new str[256];
		for(new x = 0; x < MAX_VEHICLES; x++)
		{
			if(VehicleInfo[x][vehCarID] == GetPlayerVehicleID(playerid))
			{
				GetVehiclePos(VehicleInfo[x][vehCarID], VehicleInfo[x][vehPosX], VehicleInfo[x][vehPosY], VehicleInfo[x][vehPosZ]);
				GetVehicleZAngle(VehicleInfo[x][vehCarID], VehicleInfo[x][vehRotation]);
				mysql_format(SQL,str,sizeof(str),"UPDATE vehicles SET `PosX`='%f',`PosY`='%f',`PosZ`='%f',`Rotation`='%f' WHERE `ID`='%d'",VehicleInfo[x][vehPosX],VehicleInfo[x][vehPosY],VehicleInfo[x][vehPosZ],VehicleInfo[x][vehRotation],VehicleInfo[x][vehCarIDD]);
				mysql_tquery(SQL,str,"","");
				SendClientMessage(playerid, COLOR_YELLOW, "Vehicle position changed.");
				return 1;
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:vmodel(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in a vehicle to change model.");
		new str[256],model;
		if(sscanf(params, "d", model)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vmodel [model]");
		if(model < 400 || model > 611) return SCM(playerid, COLOR_GREY, "Model must be between 400 and 611.");
		for(new x = 0; x < MAX_VEHICLES; x++)
		{
			if(VehicleInfo[x][vehCarID] == GetPlayerVehicleID(playerid))
			{
				VehicleInfo[x][vehModel] = model;
				DestroyVehicle(VehicleInfo[x][vehCarID]);
				VehicleInfo[x][vehCarID] = CreateVehicle(VehicleInfo[x][vehModel], VehicleInfo[x][vehPosX], VehicleInfo[x][vehPosY], VehicleInfo[x][vehPosZ], VehicleInfo[x][vehRotation], VehicleInfo[x][vehColor1], VehicleInfo[x][vehColor2], 1800);
				PutPlayerInVehicle(playerid, VehicleInfo[x][vehCarID], 0);
				mysql_format(SQL,str,sizeof(str),"UPDATE vehicles SET `Model`='%d' WHERE `ID`='%d'", VehicleInfo[x][vehModel],VehicleInfo[x][vehCarIDD]);
				mysql_tquery(SQL,str,"","");
				format(str, sizeof(str), "You have successfully changed vehicle %d to a %s.", x, aVehicleNames[VehicleInfo[x][vehModel] - 400]);
				SendClientMessage(playerid, COLOR_YELLOW, str);
				return 1;
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:vgroup(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in a vehicle to change group.");
		new str[256],group;
		if(sscanf(params, "d", group)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vgroup [faction id]");
		for(new x = 0; x < MAX_VEHICLES; x++)
		{
			if(VehicleInfo[x][vehCarID] == GetPlayerVehicleID(playerid))
			{
				VehicleInfo[x][vehGroup] = group;
				VehicleInfo[x][vehRank] = 1;
				mysql_format(SQL,str,sizeof(str),"UPDATE vehicles SET `Group`='%d',`Rank`='1' WHERE `ID`='%d'",VehicleInfo[x][vehGroup],VehicleInfo[x][vehCarIDD]);
				mysql_tquery(SQL,str,"","");
				SendClientMessage(playerid, COLOR_YELLOW, "Vehicle group changed.");
				return 1;
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:vjob(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in a vehicle to change group.");
		new str[256],group;
		if(sscanf(params, "d", group)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vjob [job id]");
		for(new x = 0; x < MAX_VEHICLES; x++)
		{
			if(VehicleInfo[x][vehCarID] == GetPlayerVehicleID(playerid))
			{
				VehicleInfo[x][vehJob] = group;
				mysql_format(SQL,str,sizeof(str),"UPDATE vehicles SET `Job`='%d' WHERE `ID`='%d'",VehicleInfo[x][vehJob],VehicleInfo[x][vehCarIDD]);
				mysql_tquery(SQL,str,"","");
				SendClientMessage(playerid, COLOR_YELLOW, "Vehicle job changed.");
				return 1;
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:vrank(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in a vehicle to change rank.");
		new str[256],group;
		if(sscanf(params, "d", group)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vrank [rank]");
		if(group < 0 || group > 7) return SCM(playerid, COLOR_GREY, "Rank must be between 0 and 7.");
		for(new x = 0; x < MAX_VEHICLES; x++)
		{
			if(VehicleInfo[x][vehCarID] == GetPlayerVehicleID(playerid))
			{
				VehicleInfo[x][vehRank] = group;
				mysql_format(SQL,str,sizeof(str),"UPDATE vehicles SET `Rank`='%d' WHERE `ID`='%d'",VehicleInfo[x][vehRank],VehicleInfo[x][vehCarIDD]);
				mysql_tquery(SQL,str,"","");
				SendClientMessage(playerid, COLOR_YELLOW, "Vehicle rank changed.");
				return 1;
			}
		}
	}
	else if(PlayerInfo[playerid][pLeader] >= 1)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in a vehicle to change rank.");
		new str[256],group;
		if(sscanf(params, "d", group)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vrank [rank]");
		if(group < 0 || group > 7) return SCM(playerid, COLOR_GREY, "Rank must be between 0 and 7.");
		for(new x = 0; x < MAX_VEHICLES; x++)
		{
			if(VehicleInfo[x][vehCarID] == GetPlayerVehicleID(playerid))
			{
				if(VehicleInfo[x][vehGroup] != PlayerInfo[playerid][pLeader]) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You can use this command only on your faction vehicles.");
				VehicleInfo[x][vehRank] = group;
				mysql_format(SQL,str,sizeof(str),"UPDATE vehicles SET `Rank`='%d' WHERE `ID`='%d'",VehicleInfo[x][vehRank],VehicleInfo[x][vehCarIDD]);
				mysql_tquery(SQL,str,"","");
				SendClientMessage(playerid, COLOR_YELLOW, "Vehicle rank changed.");
				return 1;
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:destroycarspawn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	if(Destroycar == 0)
	{
	    Destroycar = 1;
	    SCM(playerid,COLOR_WHITE,"Destroy car spawn is enable.");
	}
	else if(Destroycar == 1)
	{
	    Destroycar = 0;
	    SCM(playerid,COLOR_WHITE,"Destroy car spawn is disable.");
	}
	return 1;
}
CMD:removespawncarid(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
	    new id,string[128],sendername[30];
	    if(sscanf(params, "d", id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /removespawncarid [car id]");
		if(Carspawn[id] != 0)
		{
		    DestroyVehicle(id);
			Carspawn[id] = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string,sizeof(string),"({FF6347}AdminStaff{FFFFFF}) Admin %s despawned vehicle %d.",sendername,id);
			ABroadCast(COLOR_WHITE,string,1);
		}
		else return SendClientMessage(playerid, COLOR_GREY,"This is not a spawned car.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:removeallspawncar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[128],sendername[30];
		for(new i = 1; i < MAX_VEHICLES; i++)
		{
			if(Carspawn[i] != 0)
			{
				DestroyVehicle(Carspawn[i]);
				Carspawn[i] = 0;
			}
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string,sizeof(string),"({FF6347}AdminStaff{FFFFFF}) Admin %s despawned all vehicles.",sendername);
		ABroadCast(COLOR_WHITE,string,1);
		Destroycar = 0;
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:checkspawncar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[64];
		for(new i = 1; i < MAX_VEHICLES; i++)
		{
			if(Carspawn[i] != 0)
			{
			    format(string,sizeof(string),"Car ID: %d",Carspawn[i]);
				SCM(playerid,COLOR_WHITE,string);
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:rob(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need level 3 to do this.");
	if(PlayerInfo[playerid][pWantedLevel] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't rob a business when you have wanted.");
	if(PlayerInfo[playerid][pRob] >= 10 && PlayerInfo[playerid][pPremiumAccount] == 0 || PlayerInfo[playerid][pRob] >= 8 && PlayerInfo[playerid][pPremiumAccount] > 0)
    {
		if(IsACop(playerid)) return SCM(playerid,COLOR_WHITE,"You are a cop.");
		if(InBussines[playerid] != -1)
		{
			DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid, COLOR_ROB, "Robbing the business...");
			SendClientMessage(playerid, COLOR_ROB, "Please wait 10 seconds...");
			RobTimer[playerid] = SetTimerEx("RobFunc", 10000, 0, "i", playerid);
			BusinessRob[playerid] = 3;
			if(PlayerInfo[playerid][pPremiumAccount] == 0)
			{
				PlayerInfo[playerid][pRob] -= 10;
			}
			else if(PlayerInfo[playerid][pPremiumAccount] > 0)
			{
				PlayerInfo[playerid][pRob] -= 8;
			}
			SetPlayerWantedLevel(playerid, 6);
			PlayerTextDrawShow(playerid, WantedText[playerid]);
			new str1[256];
 			if(PlayerInfo[playerid][pLanguage] == 2) format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[playerid]/60+1);
			else format(str1,sizeof(str1),"WANTED DECREASES IN: ~r~%d MINUTES",wantedlost[playerid]/60+1);
			PlayerTextDrawSetString(playerid, WantedText[playerid], str1);
			WantedPoints[playerid] = 12;
			SetPlayerCriminal(playerid,-1, "armed robbery");
			if(PlayerInfo[playerid][pQuest1] == 4 && PlayerInfo[playerid][pQuestProgress1] == 0)
			{
				PlayerInfo[playerid][pQuestProgress1] = 1;
				Update(playerid, pQuestProgress1x);
				FinishQuest1(playerid, 4);
			}
			Update(playerid,pRobx);
			Update(playerid,pWantedLevelx);
			if(UsedFind[playerid] == 1)
			{
				UsedFind[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				foreach(new i : Player)
				{
					if(IsACop(playerid))
					{
						if(caser[playerid] == i)
						{
							cased[i] --;
							caser[playerid] = 1001;
						}
					}
				}
				PlayerTextDrawHide(playerid, FindTXD[playerid][0]);
				PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
			}
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "Trebuie sa fi in interiorul unui business pentru a-l jefui.");
	}
	else
	{
		if(PlayerInfo[playerid][pPremiumAccount] == 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You don't have 10 rob points.");
		}
		else if(PlayerInfo[playerid][pPremiumAccount] > 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You don't have 8 rob points.");
		}
		return 1;
	}
	return 1;
}
CMD:tod(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		new hour,string[60],sendername[25];
		if(sscanf(params, "i", hour)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /tod [time]");
        SetWorldTime(hour);
        GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "AdmCmd %s[%d] has set the time to %d.", sendername, playerid, hour);
		ABroadCast(COLOR_ADMCOMMANDS,string, 1);
		return 1;
	}
	return 1;
}
CMD:setweather(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		new weather,string[60],sendername[25];
		GetPlayerName(playerid,sendername,sizeof(sendername));
		if(sscanf(params, "i",weather)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /setweather [weather id]");
		if(weather < 0||weather > 45) return SendClientMessage(playerid, COLOR_GREY, "Weather ID can't be below 0 or above 45.");
		SetWeather(weather);
		format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s[%d] used the command /setweather %d", sendername, playerid, weather);
		ABroadCast(COLOR_WHITE,string, 1);
	}
	return 1;
}
CMD:down(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		{
			new id,size;
			if(sscanf(params, "ui",id,size)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /down [name/playerid] [size]");
	    	new Float:slx, Float:sly, Float:slz;
		    if(IsPlayerConnected(id))
		    {
				GetPlayerPos(id, slx, sly, slz);
				SetPlayerPosEx(id, slx, sly, slz-size);
			}
	    	else
	    	{
		    	SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	    	}
		}
	}
	return 1;
}
CMD:slap(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
		{
			new string[64],giveplayer[25],sendername[25],id;
			if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /slap [name/playerid]");
	    	new Float:slx, Float:sly, Float:slz;
		    if(IsPlayerConnected(id))
		    {
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerPos(id, slx, sly, slz);
				SetPlayerPosEx(id, slx, sly, slz+5.0);
				PlayerPlaySound(playerid, 1190, slx, sly, slz);
				format(string, 256, "You have slaped %s.",giveplayer);
				SendClientMessage(playerid, COLOR_DARKPINK, string);
                format(string, 256, "/slap: %s has slapped %s.", sendername,giveplayer);
				ABroadCast(COLOR_ADMCOMMANDS,string,1);
			}
	    	else
	    	{
		    	SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	    	}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin/helper.");
	}
	return 1;
}
CMD:slapcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new Float: x, Float: y, Float: z, string[128], id;
			if(sscanf(params, "d", id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /slapcar [car id]");
			GetVehiclePos(id, x, y, z);
			SetVehiclePos(id, x, y, z+5);
			format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s slapped (/slapcar) the car %d.", PlayerInfo[playerid][pNormalName], id);
			ABroadCast(COLOR_WHITE,string,1);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:mute(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
		{
			new time,id,string[256],sendername[25],giveplayer[25],reason[128],reasone[128],str[256],mute=1;
			if(sscanf(params, "uis[128]",id,time,reason)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /mute [name/playerid] [minutes] [reason]");
		    if(IsPlayerConnected(id))
		    {
				mysql_real_escape_string(reason, reasone);
				if(time == 0) mute = 0;
				PlayerInfo[id][pMuted] = mute;
				PlayerInfo[id][pMuteTime] = time*60;
			    GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* You were muted by Admin %s for %d minutes, reason: %s.", sendername,time,reasone);
				SendClientMessage(id, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s has been muted by %s for %d minutes, reason: %s.", giveplayer, sendername,time, reasone);
				SendClientMessageToAll(COLOR_WHITE, string);
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Muted`='%d',`MuteTime`='%d' WHERE `name`='%s'",mute,PlayerInfo[id][pMuteTime],PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
				new var100[256];
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','7','%d','%s','%s','%s','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],time,reasone,giveplayer,sendername,gettime());
				mysql_tquery(SQL,var100,"","");
			}
	    	else
	    	{
	    		SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	    	}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:mutedplayers(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
   	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
	        new count = 0,string[250],giveplayer[25];
			SendClientMessage(playerid, COLOR_WHITE, "{ADFF5C}|___Muted Players___|");
		    foreach(new i : Player)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pMuted] == 1)
				    {
					    GetPlayerName(i, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "%s(%d) - Mute time left: %d.",giveplayer,i,PlayerInfo[i][pMuteTime]);
						SendClientMessage(playerid,COLOR_WHITE,string);
						count++;
					}
				}
			}
			if(count == 0)
			{
	    		SendClientMessage(playerid,COLOR_LIGHTRED,"* Currently no muted players online.");
			}
	    	else if(count == 1)
  	    	{
		    	SendClientMessage(playerid,COLOR_LIGHTRED,"* Now are 1 muted player online.");
	    	}
	    	else if (count >= 2)
	    	{
		    	format(string, sizeof(string), "* Now are %d muted players online.", count);
		        SCM(playerid, COLOR_LIGHTRED, string);
	    	}
		}
	    else
	    {
           SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	    }
	}
	return 1;
}
CMD:getjob(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
        new sendername[25],str[256];
		GetPlayerName(playerid,sendername,sizeof(sendername));
		if(PlayerInfo[playerid][pJob] == 0)
		{
		    if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1366.9601,-1292.1105,13.5469))
			{
		        SS(playerid, COLOR_LIGHTBLUE, "Jobul tau este acum Arms Dealer.", "Your new job is now Arms Dealer.");
			    PlayerInfo[playerid][pJob] = 9;
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2129.9590,-1700.0682,15.0784))
			{
		        SS(playerid, COLOR_LIGHTBLUE, "Jobul tau este acum Drugs Dealer.", "Your new job is now Drugs Dealer.");
			    PlayerInfo[playerid][pJob] = 4;
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,-366.4417,-1412.7061,25.7266))
			{
		        SS(playerid, COLOR_LIGHTBLUE, "Jobul tau este acum Farmer.", "Your new job is now Farmer.");
			    PlayerInfo[playerid][pJob] = 6;
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1653.6558,-2238.0095,13.5201))
			{
		        SS(playerid, COLOR_LIGHTBLUE, "Jobul tau este acum Bus Driver.", "Your now job is now Bus Driver.");
			    PlayerInfo[playerid][pJob] = 7;
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2510.2173,2794.8362,10.8203))
			{
		        SS(playerid, COLOR_LIGHTBLUE, "Jobul tau este acum Garbage Man.", "Your new job is now Garbage man.");
			    PlayerInfo[playerid][pJob] = 10;
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,607.8508,-1438.1113,14.0647))
			{
		        SS(playerid, COLOR_LIGHTBLUE, "Jobul tau este acum Detective.", "Your new job is now Detective.");
			    PlayerInfo[playerid][pJob] = 1;
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2849.8909,891.6392,10.7500))
			{
		        SS(playerid, COLOR_LIGHTBLUE, "Jobul tau este acum Car Jacker.", "Your new job is now Car Jacker.");
			    PlayerInfo[playerid][pJob] = 2;
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1621.0037,2210.8643,15.1959))
			{
		        SS(playerid, COLOR_LIGHTBLUE, "Jobul tau este acum Mechanic.", "Your new job is now Mechanic.");
			    PlayerInfo[playerid][pJob] = 8;
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,-2661.4724,263.0804,4.6328))
			{
		        SS(playerid, COLOR_LIGHTBLUE, "Jobul tau este acum Pizza Boy.", "Your new job is now Pizza Boy.");
			    PlayerInfo[playerid][pJob] = 5;
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,372.0800,-2086.0505,7.8359))
			{
		        SS(playerid, COLOR_LIGHTBLUE, "Jobul tau este acum Fisherman.", "Your new job is now Fisherman.");
			    PlayerInfo[playerid][pJob] = 13;
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2000.5967,1568.3157,15.3672))
			{
		        SS(playerid, COLOR_LIGHTBLUE, "Jobul tau este acum Fisherman.", "Your new job is now Fisherman.");
			    PlayerInfo[playerid][pJob] = 13;
			}
			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,-76.8129,-1136.6630,1.0781))
			{
		        SS(playerid, COLOR_LIGHTBLUE, "Jobul tau este acum Trucker.", "Your new job is now Trucker.");
			    PlayerInfo[playerid][pJob] = 14;
			}
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pJob], PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
		}
		else return SS(playerid, COLOR_LIGHTGREEN3, "Ai deja un job. Foloseste /quitjob pentru a renunta la jobul curent!", "You already have a job. Use /quitjob to quit the job you have first!");
	}
    return 1;
}
CMD:quitjob(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
   	{
	    if(PlayerInfo[playerid][pJob] >= 1)
	    {
			if(IsPlayerInAnyVehicle(playerid)) return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar cand nu te afli intr-un vehicul.", "You can't use this command while you're in a vehicle.");
		    SendClientMessage(playerid, COLOR_GREY, "You have quit your job!");
		    PlayerInfo[playerid][pJob] = 0;
		    UsedFind[playerid] = 0;
			foreach(new i : Player)
			{
				if(IsACop(playerid))
				{
					if(caser[playerid] == i)
					{
						cased[i] --;
						caser[playerid] = 1001;
					}
				}

			}
			PlayerTextDrawHide(playerid, FindTXD[playerid][0]);
			PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
			GotoMats[playerid] = 0;
			if(IsATruck(GetPlayerVehicleID(playerid)))
			{
			    RemovePlayerFromVehicle(playerid);
	    		restruck[playerid] = SetTimerEx("RespawnTruck", 1, 0, "i",playerid);
			}
			if(IsAFarmer(GetPlayerVehicleID(playerid)) || IsAPizza(GetPlayerVehicleID(playerid)) || IsAGarbageTruck(GetPlayerVehicleID(playerid)) || IsABus(GetPlayerVehicleID(playerid)))
			{
				RemovePlayerFromVehicle(playerid);
			}
			if(farmerc[playerid] == 1)
			{
				farmerc[playerid] = 0;
				farmertime[playerid] = 1;
				PlayerTextDrawHide(playerid, farmjob[playerid]);
				PlayerTextDrawHide(playerid, farmbox[playerid]);
				PlayerTextDrawHide(playerid, farmtime[playerid]);
				PlayerTextDrawHide(playerid, farmspeed[playerid]);
				PlayerTextDrawHide(playerid, farmwanted[playerid]);
				KillTimer(timerfarmm[playerid]);
			}
			if(CarJacker[playerid] > 0)
			{
		    	CarJacker[playerid] = 0;
		    	JackAcc[playerid] = 0;
			}
			if(Trucker[playerid] >= 1)
			{
			    RemovePlayerFromVehicle(playerid);
		   		Trucker[playerid] = 0;
	        	Trucker2[playerid] = 0;
	        	DestroyVehicle(viddd[playerid]);
	        	viddd[playerid] = 0;
	        	SetVehicleToRespawn(TruckID[playerid]);
	        	TruckID[playerid] = 0;
	    		restruck[playerid] = SetTimerEx("RespawnTruck", 1, 0, "i",playerid);
			}
			if(busc[playerid] == 1)
			{
		    	busc[playerid] = 0;
		    	PlayerTextDrawHide(playerid, BusJob[playerid]);
		    	PlayerTextDrawHide(playerid, BusCheck[playerid]);
		    	KillTimer(timerbus[playerid]);
		    	if(JobStep[playerid] >= 1)
		    	{
      				JobStep[playerid] = 0;
	    			GivePlayerCash(playerid, -2500);
		    		SendClientMessage(playerid, COLOR_GREEN, "(-) Ai platit $2.500 companiei de autobuze pentru taxe.");
				}
			}
			if(MatsHolding[playerid] > 0)
			{
			    MatsHolding[playerid] = 0;
			}
			if(CheckBus[playerid] > 0)
			{
			    busc[playerid] = 0;
				CheckBus[playerid] = 0;
			}
			if(CP[playerid] == 34)
			{
			    new towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
				SetVehicleToRespawn(towedcar);
				CP[playerid] = 0;
			}
			CP[playerid] = 0;
			pizzaj[playerid] = 0;
			pizzatime[playerid] = 0;
			failpizza[playerid] = -1;
			PizzaCP[playerid] = 0;
			pizzaprize[playerid] = 0;
			DisablePlayerRaceCheckpoint(playerid);
			DisablePlayerCheckpoint(playerid);
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Job`='0' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You don't have a job.");
	}
	return 1;
}
CMD:jaillist(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
   	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
	        new count = 0,string[250],giveplayer[25];
			SendClientMessage(playerid, COLOR_WHITE, "{ADFF5C}|___Jailed Players___|");
		    foreach(new i : Player)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pJailed] >= 1)
				    {
					    GetPlayerName(i, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "%s(%d) - Jailed time left: [%d]",giveplayer,i,PlayerInfo[i][pJailTime]);
						SendClientMessage(playerid,COLOR_WHITE,string);
						count++;
					}
				}
			}
			if(count == 0)
			{
	    		SendClientMessage(playerid,COLOR_LIGHTRED,"* Currently no jailed players online.");
			}
	    	else if(count == 1)
  	    	{
		    	SendClientMessage(playerid,COLOR_LIGHTRED,"* Now are 1 jailed player online.");
	    	}
	    	else if (count >= 2)
	    	{
		    	format(string, sizeof(string), "* Now are %d jailed players online.", count);
		        SCM(playerid, COLOR_LIGHTRED, string);
	    	}
		}
	    else
	    {
           SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	    }
	}
	return 1;
}
CMD:exam(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You can't use this command when you are in a car.");
    if(PlayerToPoint(5.0,playerid, 1219.0502,-1812.7823,16.5938))
    {
		new string[256];
    	if(PlayerInfo[playerid][pCarLic] == 0)
     	{
			if(PlayerInfo[playerid][pCarLicSuspend] > 0)
			{
				if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(string,sizeof(string),"Permisul tau de conducere a fost suspendat recent. Poti da examenul peste %d ore.",PlayerInfo[playerid][pCarLicSuspend]);
				}
				else
				{
					format(string,sizeof(string),"Your driving license was suspended recently. You can take the exam after %d hours.",PlayerInfo[playerid][pCarLicSuspend]);
				}
				SendClientMessage(playerid, COLOR_GREY, string);
				return 1;
			}
      		if(TakingLesson[playerid] == 0)
        	{
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
        		ClearAnimations(playerid);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
       			PlayerHandsup[playerid] = 0;
		    	TakingLesson[playerid] = 1;
       			examcar[playerid] = AddStaticVehicle(410, 1242.0013,-1850.0372,13.0384,90.7065,  -1, -1);
				Gas[examcar[playerid]] = 100;
				PutPlayerInVehicleEx(playerid, examcar[playerid], 0);
				DisableRemoteVehicleCollisions(playerid, 1);
				SS(playerid, COLOR_WHITE, "Examenul a inceput. Mergi la checkpoint.", "The exam has begun. Go to the checkpoint.");
				SS(playerid, COLOR_WHITE, "Scrie /engine sau apasa tasta 2 pentru a porni motorul masinii.", "Type /engine or press key 2 to start the engine.");
			    CP[playerid] = 100;
			    PlayerTextDrawShow(playerid, DMVexam[playerid]);
				format(string, sizeof(string), "~w~CHECKPOINTS: ~r~0~w~/~r~24");
				PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
				PlayerTextDrawShow(playerid, DMVcheck[playerid]);
				SetPlayerRaceCheckpoint(playerid,0, 1135.3868,-1850.5981,13.0366,1045.2626,-1809.4169,13.2637,4.0);
			}
   			else return SendClientMessage(playerid, COLOR_GREY, "You already have an exam.");
      	}
       	else return SendClientMessage(playerid, COLOR_GREY, "You already have a driver license.");
    }
   	else return SendClientMessage(playerid, COLOR_GREY, "You are not at the DMV.");
	return 1;
}
CMD:buy(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 6)
		{
			ShowPlayerDialog(playerid,Dialog_24,DIALOG_STYLE_LIST,"SERVER: 24/7","Cellphone ($500)\nPhone Book ($50)\nPhone Credit ($500)\nWalkie Talkie ($2,500)\nPhoto Camera ($2,000)\nGas Can ($5,000)","Select","Exit");
			return 1;
		}
	}
    return 1;
}
CMD:buyfightstyle(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 8)
		{
			ShowPlayerDialog(playerid,Dialog_Gym,DIALOG_STYLE_LIST,"SERVER: Fighting Styles","Boxing ($6,000)\nKung Fu ($10,000)\nKnee Head ($10,000)\nGrab & Kick ($10,000)\nElbow ($10,000)\nDefault ($2,000)","Select","Cancel");
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You are not at gym.");
	}
    return 1;
}
CMD:buytoys(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 4)
		{
			ShowPlayerDialog(playerid,DIALOG_SEXSHOP,DIALOG_STYLE_LIST,"SERVER: Sex Shop","Purple Dildo ($100)\nSmall White Vibrator ($100)\nSilver Vibrator ($100)\nLarge White Vibrator ($100)\nFlowers ($150)","Select","Exit");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You are not at sex shop.");
	}
	return 1;
}
CMD:buydrink(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(InBussines[playerid] > 0)
	{
	    if(BizzInfo[InBussines[playerid]][bType] == 3)
	    {
	        ShowPlayerDialog(playerid,DIALOG_BAR,DIALOG_STYLE_LIST,"SERVER: Bar","Stock Bar Cigars ($50)\nSprunk ($50)\nBeer ($60)\nWine ($100)","Select","Exit");
        }
        else return SendClientMessage(playerid, COLOR_WHITE, "You are not at bar.");
    }
    return 1;
}
CMD:shop(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    {
        new titlestring[MAX_STRING],string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],string5[MAX_STRING],string6[MAX_STRING],string7[MAX_STRING],iString[1500];
  		format(titlestring, sizeof(titlestring), "Premium points: {008080}%d", PlayerInfo[playerid][pPremiumPoints]);
  		format(string1, sizeof(string1), "{EEC271}[+] Get Premium Points");
  		format(string2, sizeof(string2), "{FFFFFF}Premium account - {008080}60 {FFFFFF}premium points\n{FFFFFF}Change Nickname - {008080}15 {FFFFFF}premium points");
  		format(string3, sizeof(string3), "{FFFFFF}Clear FP - {008080}15 {FFFFFF}premium points");
  		format(string4, sizeof(string4), "{FFFFFF}Clear warns - {008080}20 {FFFFFF}premium points\n{FFFFFF}Clear KM & Distance traveled for a vehicle - {008080}20 {FFFFFF}points");
  		format(string5, sizeof(string5), "{FFFFFF}Vehicle hidden color - {008080}20 {FFFFFF}premium points\n{FFFFFF}5x fireworks - {008080}1 {FFFFFF}premium point");
  		format(string6, sizeof(string6), "{FFFFFF}Buy vehicle slot - {008080}20 {FFFFFF}premium points\n{FFFFFF}Walkie-talkie private frequency - {008080}15 {FFFFFF}premium points\n{FFFFFF}iPhone - {008080}10 {FFFFFF}premium points");
		format(string7, sizeof(string7), "{FFFFFF}Buy $300,000 - {{008080}1 {FFFFFF}premium point\n{FFFFFF}Buy $3,000,000 - {008080}10 {FFFFFF}premium points\n{FFFFFF}Buy $15,000,000 - {008080}50 {FFFFFF}premium points\n{FFFFFF}Buy $30,000,000 - {008080}100 {FFFFFF}premium points\n{FFFFFF}Clear Faction History - {008080}50 {FFFFFF}premium points\n{FFFFFF}Buy Clan - {008080}100 {FFFFFF}premium points");
  		format(iString, sizeof(iString), "%s\n%s\n%s\n%s\n%s\n%s\n%s", string1, string2, string3, string4, string5, string6,string7);
	 	ShowPlayerDialog(playerid,DIALOG_SHOP,DIALOG_STYLE_LIST, titlestring, iString, "Buy","Exit");
    }
    return 1;
}
CMD:gototreasure(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(Winner == 1) return SendClientMessage(playerid, -1, "There is no pumpkin spawn.");
		if(GetPlayerState(playerid) == 2) SetVehiclePos(GetPlayerVehicleID(playerid), gRandomPositions[Number][0], gRandomPositions[Number][1]+5, gRandomPositions[Number][2]);
		else SetPlayerPos(playerid, gRandomPositions[Number][0], gRandomPositions[Number][1]+5, gRandomPositions[Number][2]);
		SendClientMessage(playerid, -1, "You have ben teleported.");
		return 1;
	}
	return 0;
}
CMD:treasureshop(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    {
        new titlestring[MAX_STRING],string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],iString[1500];
  		format(titlestring, sizeof(titlestring), "Treasure points: {008080}%d", PlayerInfo[playerid][pTreasurePoints]);
  		format(string1, sizeof(string1), "{FFFFFF}Buy walky taljy - {008080}15 {FFFFFF}treasure points");
 		format(string2, sizeof(string2), "{FFFFFF}iPhone - {008080}10 {FFFFFF}treasure points");
		format(string3, sizeof(string3), "{FFFFFF}Buy $30,000,000 - {008080}100 {FFFFFF}treasure points");
  		format(iString, sizeof(iString), "%s\n%s\n%s\n%s\n%s\n%s\n%s", string1, string2, string3);
	 	ShowPlayerDialog(playerid,DIALOG_TRESHOP,DIALOG_STYLE_LIST, titlestring, iString, "Buy","Exit");
    }
    return 1;
}
CMD:oldcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		new string[64];
	    format(string, sizeof(string), "Your old car was: %d",gLastCar[playerid]);
	    SendClientMessage(playerid, COLOR_GREY, string);
    }
    return 1;
}
CMD:eject(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
   	{
        new State;
        if(IsPlayerInAnyVehicle(playerid))
        {
			new id,string[128],giveplayer[25];
		 	State=GetPlayerState(playerid);
	        if(State!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You can only eject people as a driver.");
			if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /eject [name/playerid]");
			new test;
			test = GetPlayerVehicleID(playerid);
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					if(PlayerTied[id] > 0) return SendClientMessage(playerid, COLOR_GREY, "This player is tied.");
			        if(id == playerid) return SendClientMessage(playerid, COLOR_GREY, "You can't eject yourself.");
			        if(IsPlayerInVehicle(id,test))
			        {
						new PName[MAX_PLAYER_NAME];
						GetPlayerName(playerid,PName,sizeof(PName));
						GetPlayerName(id, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "* You have thrown %s out of the car!", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* You have been thrown out the car by %s !", PName);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						RemovePlayerFromVehicleEx(id);
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "That player is not in your car.");
					    return 1;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "You need to be in a vehicle to use this command.");
		}
	}
	return 1;
}
CMD:tie(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(IsAMember(playerid))
		{
		    if(PlayerInfo[playerid][pRank] < 3) return SendClientMessage(playerid, COLOR_GREY, "You need rank 2 or higher to tie people up.");
		    new id,string[128],sendername[25],giveplayer[25];
			if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /tie [name/playerid]");
		    if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
				    if(PlayerTied[id] > 0) return SendClientMessage(playerid, COLOR_GREY, "This player is already tied.");
					if (ProxDetectorS(8.0, playerid, id))
					{
					    new car = GetPlayerVehicleID(playerid);
					    if(id == playerid) return SendClientMessage(playerid, COLOR_GREY, "You can't tie yourself.");
					    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(id, car))
					    {
					        GetPlayerName(id, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        format(string, sizeof(string), "* You were tied up by %s, till untie.", sendername);
							SendClientMessage(id, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* You tied %s up, till untie.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s ties %s up, so he wont go anywhere.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							TogglePlayerControllable(id, 0);
							PlayerTied[id] = 1;
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Player not in your car or you are not the driver.");
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "No player near you.");
					    return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			    return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You are not a gang member.");
		}
	}
	return 1;
}
CMD:untie(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(IsAMember(playerid) || IsACop(playerid))
		{
		    if(PlayerInfo[playerid][pRank] < 3 && IsAMember(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need rank 2 or higher to untie people.");
			new id,string[128],giveplayer[25],sendername[25];
			if(sscanf(params, "u",id)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /untie [name/playerid]");
			if(IsPlayerConnected(id))
			{
				if(id != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, id))
					{
					    if(id == playerid) return SendClientMessage(playerid, COLOR_GREY, "You can't untie yourself!");
						if(PlayerTied[id])
						{
						    GetPlayerName(id, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* You were Untied by %s.", sendername);
							SendClientMessage(id, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* You Untied %s.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							TogglePlayerControllable(id, 1);
							PlayerTied[id] = 0;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "That player isn't tied up.");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "No player near you.");
					    return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			    return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You are not a gang member/cop.");
		}
	}
	return 1;
}
CMD:cc(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
		{
			foreach(new id : Player)
			{
				if(PlayerInfo[id][pAdmin] == 0 && PlayerInfo[id][pHelper] == 0)
				{
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
					SendClientMessage(id, COLOR_SYSTEM, " ");
				}
			}
			new sendername[25],string[100];
			GetPlayerName(playerid,sendername,sizeof(sendername));
			format(string,sizeof(string),"({FF6347}AdminStaff{FFFFFF}) {FFFFFF}%s used /cc.",sendername);
			ABroadCast(COLOR_WHITE,string,1);
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:buygun(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_GREY, "You don't have gun license.");
    if(BizzInfo[InBussines[playerid]][bType] == 2)
    {
		if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "You are not in a gun shop.");
	 	ShowPlayerDialog(playerid,Dialog_gunshop,DIALOG_STYLE_LIST,"Select:","Baseball bat($1,000)\nSD Pistol($2,000)\nDesert eagle($3,000)\nShotgun($4,200)\nMP5($4,600)\nAK47($7,000)\nM4($7,000)","Select","Cancel");
	    return 1;
    }
    else SendClientMessage(playerid, COLOR_GREY, "You are not in a gun shop.");
    return 1;
}
CMD:whisper(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		new string[128],id,mess[250],giveplayer[25],sendername[25];
        if(PlayerInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "You must have level 2 to use /w(isper).");
        if(PlayerInfo[playerid][pMuted] == 1)
        {
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
			else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
			return 1;
		}
		if(sscanf(params, "us[250]",id,mess)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /w [name/playerid] [message]");
		if (IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
				if(GetDistanceBetweenPlayers(playerid,id) > 5) return SCM(playerid, COLOR_GREY, "This player is not near you.");
				if(Spectate[id] != -1) return SCM(playerid, COLOR_GREY, "This player is not near you.");
			    if(HidePM[id] > 0) return SendClientMessage(playerid, COLOR_GREY, "This player doesn't allow whispers.");
				if(id == playerid) return SendClientMessage(playerid, COLOR_GREY, "You can not send a message to yourself.");
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "%s whispers: %s", sendername, mess);
				SendClientMessage(id, COLOR_YELLOW, string);
				format(string, sizeof(string), "Whisper to %s: %s", giveplayer, mess);
				SendClientMessage(playerid,  COLOR_YELLOW, string);
				new var100[300],resulttt[300],strr[300];
				format(strr, sizeof(strr),"%s whisper to %s: %s", sendername, giveplayer, mess);
				mysql_real_escape_string(strr, resulttt);
				mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','w')", PlayerInfo[playerid][pSQLID], resulttt);
				mysql_tquery(SQL,var100,"","");
				for(new adm = 0; adm<=MAX_PLAYERS;adm++)
				{
    				if(IsPlayerConnected(adm))
					{
	    				if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
    	    			{
   	        				format(string, sizeof(string), "Whisper: (%d) %s to (%d) %s: %s",playerid,sendername,id,giveplayer,mess);
							SendClientMessage(adm,  COLOR_YELLOW, string);
  	    				}
					}
				}
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	return 1;
}
CMD:w(playerid, params[])
{
	return cmd_whisper(playerid, params);
}
CMD:makeleader(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 3)
		{
			new para1,level,string[256],giveplayer[25],sendername[25],escape[256];
	     	if(sscanf(params, "ui",para1,level))
	    	{
		     	SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /makeleader [name/playerid] [faction]");
				SendClientMessage(playerid, COLOR_WHITE, "(1) LSPD (2) FBI (3) National Guard (4) Los Aztecas");
				SendClientMessage(playerid, COLOR_WHITE, "(5) Grove Street (6) Los Vagos (8) LVPD");
				SendClientMessage(playerid, COLOR_WHITE, "(9) News Reporter (10) Ballas (11) Hitman Agency (12) School Instructors LV");
				SendClientMessage(playerid, COLOR_WHITE, "(13) Los Santos Taxi (14) Paramedic (15) The Rifa (16) San Fierro Police Department");
				SendClientMessage(playerid, COLOR_WHITE, "(17) School Instructors LS (18) San Fierro Paramedic Department");
				return 1;
			}
			if(level > 18 || level < 0) return SendClientMessage(playerid, COLOR_GREY,"Don't go below number 1, or above number 16.");
			if(level == 7) return SendClientMessage(playerid, COLOR_GREY,"This group doesn't exit.");
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
		            if(PlayerInfo[para1][pMember] > 0 && PlayerInfo[para1][pLeader] > 0) return SendClientMessage(playerid, COLOR_GREY, "This player is in a faction.");
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new ftext[50],query[256];
					if(level == 1) { ftext = "Los Santos Police Department"; } //Police Force
					else if(level == 2) { ftext = "Federal Bureau of Investigations"; } //FBI
					else if(level == 3) { ftext = "National Guard"; } //National Guard
					else if(level == 4) { ftext = "Los Aztecas"; } //Los Aztecas
					else if(level == 5) { ftext = "Grove Street"; } //Grove Street
					else if(level == 6) { ftext = "Los Vagos"; } //Los Vagos
					else if(level == 8) { ftext = "Las Venturas Police Department"; } //LVPD
					else if(level == 9) { ftext = "News Reporters"; } //News Reporter
					else if(level == 10) { ftext = "Ballas"; } //Ballas
                    else if(level == 11) { ftext = "Hitman Agency"; } //The Agency
                    else if(level == 12) { ftext = "School Instructors LV"; } //School Instructors
                    else if(level == 13) { ftext = "Taxi"; } //Los Santos Taxi
                    else if(level == 14) { ftext = "Las Venturas Paramedic Department"; } //Paramedic
                    else if(level == 15) { ftext = "The Rifa"; } //Paramedic
                    else if(level == 16) { ftext = "San Fierro Police Department"; } //Paramedic
                    else if(level == 17) { ftext = "School Instructors LS"; } //Paramedic
                    else if(level == 18) { ftext = "San Fierro Paramedic Department"; } //Paramedic
					PlayerInfo[para1][pMember] = level;
					PlayerInfo[para1][pLeader] = level;
					format(string, sizeof(string), "<< Administrator %s has set you to lead group %s. >>", sendername,ftext);
					SendClientMessage(para1, COLOR_DARKPINK, string);
					format(string, sizeof(string), "<< Admin %s has set %s to lead group %s >>",sendername,giveplayer,ftext);
					ABroadCast(COLOR_RED2,string,1);
					format(string, sizeof(string), "%s is now the leader of faction %s.", PlayerInfo[para1][pNormalName], ftext);
					Log(PlayerInfo[playerid][pSQLID], string, "staff");
					mysql_real_escape_string(string, escape);
					Factionlog(level,PlayerInfo[para1][pSQLID],PlayerInfo[playerid][pSQLID],escape);
					mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`, `player`,`leader`) VALUES ('%s','%d','%d')", escape, PlayerInfo[para1][pSQLID],PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,query,"","");
					mysql_format(SQL, query, sizeof(query), "INSERT INTO staff_logs (`text`) VALUES ('%s')", escape);
					mysql_tquery(SQL,query,"","");
					if(level == 0) { PlayerInfo[para1][pModel] = 0; }
					else if(level == 1) { PlayerInfo[para1][pModel] = 71; } //LSPD
					else if(level == 2) { PlayerInfo[para1][pModel] = 163; } //FBI
					else if(level == 3) { PlayerInfo[para1][pModel] = 287; } //National Guard
					else if(level == 4) { PlayerInfo[para1][pModel] = 114; } //Los Aztecas
					else if(level == 5) { PlayerInfo[para1][pModel] = 106; } //Grove Street
					else if(level == 6) { PlayerInfo[para1][pModel] = 177; } //Los Vagos
					else if(level == 8) { PlayerInfo[para1][pModel] = 71; } //LVPD
					else if(level == 9) { PlayerInfo[para1][pModel] = 188; } //News Reporter
					else if(level == 10) { PlayerInfo[para1][pModel] = 104; } //Ballas
                    else if(level == 11) { PlayerInfo[para1][pModel] = 208; } //Hitman
                    else if(level == 12) { PlayerInfo[para1][pModel] = 153; } //School Instructors
                    else if(level == 13) { PlayerInfo[para1][pModel] = 253; } //Los Santos Taxi
                    else if(level == 14) { PlayerInfo[para1][pModel] = 276; } //Paramedic
                    else if(level == 15) { PlayerInfo[para1][pModel] = 104; } //The Rifa
                    else if(level == 16) { PlayerInfo[para1][pModel] = 266; } //The Rifa
                    else if(level == 17) { PlayerInfo[para1][pModel] = 210; } //The Rifa
                    else if(level == 18) { PlayerInfo[para1][pModel] = 276; } //The Rifa
					if(level == 0)
					{
					    gTeam[para1] = 3;
				    	PlayerInfo[para1][pTeam] = 3;
					}
					else if(level == 1 || level == 2 || level == 3 || level == 7 || level == 8 || level == 16)
					{
					    gTeam[para1] = 2;
				    	PlayerInfo[para1][pTeam] = 2;
					}
					else if(level == 4 || level == 5 || level == 6 || level == 10 || level == 15)
					{
					    gTeam[para1] = 5;
				    	PlayerInfo[para1][pTeam] = 5;
					}
					else if(level == 9 || level == 12 || level == 13 || level == 14 || level == 18)
					{
					    gTeam[para1] = 4;
				    	PlayerInfo[para1][pTeam] = 4;
					}
					else if(level == 11)
					{
					    gTeam[para1] = 11;
				    	PlayerInfo[para1][pTeam] = 11;
					}
				    SetPlayerSkin(para1, PlayerInfo[para1][pModel]);
                    PlayerInfo[para1][pRank] = 7;
                    PlayerInfo[para1][pFactionJoin] = gettime();
				 	new wakaname[25];
					GetPlayerName(para1,wakaname,25);
					new str[356];
					mysql_format(SQL,str,356,"UPDATE users SET `Leader`='%d',`Member`='%d',`Rank`='7',`Team`='%d',`Model`='%d',`FactionJoin`='%d' WHERE `name`='%s'",PlayerInfo[para1][pLeader],PlayerInfo[para1][pMember],PlayerInfo[para1][pTeam],PlayerInfo[para1][pModel],PlayerInfo[para1][pFactionJoin],PlayerInfo[para1][pNormalName]);
					mysql_tquery(SQL,str,"","");
					SetPlayerToTeamColor(para1);
					new varxx[256];
					mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport1 = 0, Raport2 = 0, Raport3 = 0, Raport4 = 0, Raport5 = 0, Raport6 = 0, PaydayON = 0 WHERE name = '%s'",PlayerInfo[para1][pNormalName]);
					mysql_tquery(SQL,varxx,"","");
				}
			}
     		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:refill(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
	    if(PlayerInfo[playerid][pJob] != 8) return SendClientMessage(playerid, COLOR_GREY, "You are not a mechanic.");
		new playa,money,string[256],giveplayer[25],sendername[25];
	 	if(sscanf(params, "ui",playa,money)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /refill [name/playerid] [price]");
		if(money < 1 || money > 10000) return SendClientMessage(playerid, COLOR_GREY, "Price not lower then 1, or above 10,000.");
		if(RefillOffer[playa] == playerid) return SendClientMessage(playerid, COLOR_GREY, "This player have already a refill offer.");
		if(RepairTime[playerid] > 0) return SS(playerid, COLOR_GREY, "Poti folosi asta doar o data la 60 de secunde.", "You can use this command once per 60 seconds.");
		if(IsPlayerConnected(playa))
		{
		    if(playa != INVALID_PLAYER_ID)
		    {
		        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
				{
				    if(playa == playerid) return SendClientMessage(playerid, COLOR_GREY, "You can't offer refill to yourself.");
				    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
				    format(string, sizeof(string), "You offered %s to refill his car for $%s.",giveplayer,FormatNumber(money));
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "%s wants to refill your car for $%s, type /accept refill %d to accept the offer.",sendername,FormatNumber(money),playerid);
					SendClientMessage(playa, COLOR_WHITE, string);
					RefillOffer[playa] = playerid;
					RefillPrice[playa] = money;
					RepairTime[playerid] = 60;
				}
				else return SendClientMessage(playerid, COLOR_GREY, "That player is not near you/not in a car.");
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:repair(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
	    if(PlayerInfo[playerid][pJob] != 8) return SendClientMessage(playerid, COLOR_GREY, "You are not a mechanic.");
		new playa,money,string[256],giveplayer[25],sendername[25];
 		if(sscanf(params, "ui",playa,money)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /repair [name/playerid] [price]");
		if(money < 1 || money > 10000) return SendClientMessage(playerid, COLOR_GREY, "Price not lower then 1, or above 10,000.");
    	if(RepairOffer[playa] == playerid) return SendClientMessage(playerid, COLOR_GREY, "This player have already a repair offer.");
    	if(RepairTime[playerid] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You need to wait 60 seconds to use this command again.");
		if(IsPlayerConnected(playa))
		{
		    if(playa != INVALID_PLAYER_ID)
		    {
		        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
				{
				    if(playa == playerid) return SendClientMessage(playerid, COLOR_GREY, "You can't offer repair to yourself.");
			    	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
				    format(string, sizeof(string), "You offered %s to fix his car for $%s.",giveplayer,FormatNumber(money));
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "%s wants to repair your car for $%s, type /accept repair %d to accept the offer.",sendername,FormatNumber(money),playerid);
					SendClientMessage(playa, COLOR_WHITE, string);
					RepairOffer[playa] = playerid;
					RepairPrice[playa] = money;
					RepairTime[playerid] = 60;
				}
				else return SendClientMessage(playerid, COLOR_GREY, "That player is not near you/not in a car.");
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:dropcar(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(CP[playerid] > 0 || IsATruck(GetPlayerVehicleID(playerid)) || CheckBus[playerid] > 0 || IsAPizza(GetPlayerVehicleID(playerid)) && CarJacker[playerid] < 1)
	{
 		ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Anulare Checkpoint", "Esti sigur ca vrei sa anulezi checkpoint-ul curent?", "Da", "Nu");
	}
    if(IsPlayerConnected(playerid))
	{
	    if(JackAcc[playerid] > 0)
		{
			new string[128];
			format(string,sizeof(string),"Wait %d seconds before drop another car.",JackAcc[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
	    if(PlayerInfo[playerid][pJob] == 2)
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {
				if(IsAnOwnableCar(GetPlayerVehicleID(playerid)))
				{
					SetPlayerCheckpoint(playerid, 2850.9663, 891.8728, 10.7500, 10.0);
					CarJacker[playerid] = 1;
					SendClientMessage(playerid, COLOR_WHITE, "Reach the checkpoint to drop your vehicle off at the crane.");
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "You can't sell personal vehicles.");
			}
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You are not a car jacker. Use /jobs.");
	}
	return 1;
}
CMD:tow(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pJob] == 8)
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {
	            new m = GetVehicleModel(GetPlayerVehicleID(playerid));
		    	if (m == 525)
	     	   	{
	     	   	    if(TowAcc[playerid] == 1) return SendClientMessage(playerid, COLOR_GREY, "Nu poti tracta atat de repede o masina, trebuie sa astepti 2 minute.");
	     	   	    if(GetPlayerState(playerid)==2)
	     	   	    {
						new Float:pX,Float:pY,Float:pZ;
						GetPlayerPos(playerid,pX,pY,pZ);
						new Float:vX,Float:vY,Float:vZ;
						new Found=0;
						new vid=0;
						while((vid<MAX_VEHICLES)&&(!Found))
						{
		   					vid++;
		   					GetVehiclePos(vid,vX,vY,vZ);
		   					if ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
							{
								if(IsABike(vid) || GetVehicleModel(vid) == 448 || GetVehicleModel(vid) == 461 || GetVehicleModel(vid) == 462 || GetVehicleModel(vid) == 463 || GetVehicleModel(vid) == 468 || GetVehicleModel(vid) == 471 || GetVehicleModel(vid) == 521 || GetVehicleModel(vid) == 522 || GetVehicleModel(vid) == 523)
								{
		 							SCM(playerid, COLOR_GREY, "Please chose another vehicle this is invalid model.");
								    return 1;
								}
								if(IsAnOwnableCar(vid))
								{
								    SCM(playerid,COLOR_WHITE,"You can't tow personal cars.");
								    return 1;
								}
							    Found=1;
		   				    	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
		           				{
		   				        	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
                     				DisablePlayerCheckpoint(playerid);
                                    gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
						       	}
					           	else
					           	{
		    						AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
	                				new rand;
									rand = random(sizeof(TowCarCk));
						 		    SetPlayerCheckpoint(playerid, TowCarCk[rand][0],TowCarCk[rand][1],TowCarCk[rand][2], 6);
                         			CP[playerid] = 34;
								}
		 					}
		     			}
						if(!Found) return SendClientMessage(playerid, COLOR_GREY, "There is no car near to you.");
					}
					else return SendClientMessage(playerid, COLOR_GREY, "You need to be the driver.");
				}
				else return SendClientMessage(playerid, COLOR_GREY, "You need to be in a tow truck to use this command.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "You need to be in a tow truck to use this command.");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You need to be a mechanic to use this command.");
	}
	return 1;
}
CMD:spawnchange(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
	    if(PlayerInfo[playerid][pPhousekey] != 999)
        {
            if(PlayerInfo[playerid][pSpawnChange] == 1)
            {
                SendClientMessage(playerid, COLOR_CYAN, "Spawn Changed! You will now be spawned at the HQ / spawn zone.");
                PlayerInfo[playerid][pSpawnChange] = 0;
                Update(playerid, pSpawnChangex);
            }
            else
            {
                SendClientMessage(playerid, COLOR_CYAN, "Spawn Changed! You will now be spawned at your own / rented house.");
                PlayerInfo[playerid][pSpawnChange] = 1;
                Update(playerid, pSpawnChangex);
            }
        }
        else return SCM(playerid, COLOR_WHITE, "You do not have a home or a rent.");
    }
    return 1;
}
CMD:unfreeze(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			new playa;
			if(sscanf(params, "u",playa)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /unfreeze [name/playerid]");
		    if(IsPlayerConnected(playa))
		    {
		        if(playa != INVALID_PLAYER_ID)
		        {
					TogglePlayerControllable(playa, 1);
					new sendername[25],giveplayer[25],string[100];
					GetPlayerName(playerid,sendername,sizeof(sendername));
					GetPlayerName(playa,giveplayer,sizeof(giveplayer));
					format(string, sizeof(string), "%s unfrozen %s (/unfreeze).",sendername, giveplayer);
					ABroadCast(COLOR_RED2,string,1);
					HLChat(COLOR_RED2,string);
					return 1;
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3,"You are not an admin/helper.");
	}
	return 1;
}
CMD:freeze(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			new playa,string[128],sendername[30],giveplayer[30];
			if(sscanf(params, "u",playa)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /freeze [name/playerid]");
		    if(IsPlayerConnected(playa))
		    {
		        if(playa != INVALID_PLAYER_ID)
		        {
					TogglePlayerControllable(playa, 0);
					GetPlayerName(playerid,sendername,sizeof(sendername));
					GetPlayerName(playa,giveplayer,sizeof(giveplayer));
					format(string, sizeof(string), "%s has frozen %s (/freeze).",sendername, giveplayer);
					ABroadCast(COLOR_RED2,string,1);
					HLChat(COLOR_RED2,string);
					return 1;
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin/helper.");
	}
	return 1;
}
CMD:entercar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 2)
 		{
			new testcar,loc;
			if(sscanf(params, "ii",testcar,loc)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /entercar [car id] [seat id]");
			if(loc < 0 || loc > 4) return SendClientMessage(playerid, COLOR_GREY, "Invalid Seat ID(0-4).");
			PutPlayerInVehicleEx(playerid, testcar, loc);
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:putplayerinvehicle(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 2)
 		{
			new testcar,loc,id;
			if(sscanf(params, "iii",id,testcar,loc)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /putplayerinvehicle [name/playerid] [car id] [seat id]");
			if(loc < 0 || loc > 4) return SendClientMessage(playerid, COLOR_GREY, "Invalid Seat ID(0-4).");
			PutPlayerInVehicleEx(id, testcar, loc);
			SendClientMessage(id, COLOR_GRAD1, "You have been teleported.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:getcar(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
  		  	new plo;
			if(sscanf(params, "i",plo)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /getcar [car id]");
		    new Float:plocx,Float:plocy,Float:plocz;
		    new interiorr = GetPlayerInterior(playerid);
		    new virtuall = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, plocx, plocy, plocz);
			SetVehiclePos(plo,plocx,plocy+4, plocz);
			GetVehiclePos(plo, old_veh_pos[plo][0], old_veh_pos[plo][1], old_veh_pos[plo][2]);
			LinkVehicleToInterior(plo, interiorr);
			SetVehicleVirtualWorld(plo, virtuall);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:fill(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new idcar = GetPlayerVehicleID(playerid);
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
	    if(GetPVarInt(playerid, "Engine") == 0)
        {
	    	if(IsAtGasStation(playerid))
	    	{
 				TogglePlayerControllable(playerid, 0);
   				GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Re-Fueling Vehicle, please wait",2000,3);
    			SetTimerEx("Fillup",RefuelWait,0,"i",playerid);
   				Refueling[playerid] = 1;
	    	}
	    	else
		    {
		        if(PlayerInfo[playerid][pFuel] > 0)
		        {
		    		SendClientMessage(playerid, COLOR_DARKPINK, "* You filled your car with 20% fuel from your gas can.");
					if(Gas[idcar] < 80)
					{
						Gas[idcar] += 20;
					}
					else return SS(playerid, COLOR_DARKPINK, "Ai suficient combustibil in vehicul!", "You have enough fuel in your vehicle.");
		        	PlayerInfo[playerid][pFuel] = 0;
					new str[128];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Fuel`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					TogglePlayerControllable(playerid, 1);
				}
				return 1;
	    	}
    	}
    	else
    	{
	    	SendClientMessage(playerid,COLOR_WHITE,"You need to stop your engine before reffueling!");
    	}
    }
	return 1;
}
CMD:fillgascan(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pGasCan] != 1) return SendClientMessage(playerid, COLOR_DARKPINK, "You don't have a gas can. Go to a 24/7 shop to buy one.");
	    if(PlayerInfo[playerid][pFuel] < 20)
	    {
	    	if(IsAtGasStation(playerid))
	    	{
     			new price = 20 * 50;
				new string[64];
				format(string, sizeof(string), "Ai platit $%s pentru a umple canistra cu benzina.",FormatNumber(price));
				SendClientMessage(playerid, COLOR_GREEN, string);
				PlayerInfo[playerid][pFuel] = 20;
				GivePlayerCash(playerid, - price);
  				new str[178],bid;
 				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Fuel`='20' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
                if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[33][bEntranceX],BizzInfo[33][bEntranceY],BizzInfo[33][bEntranceZ])) bid = 33;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[42][bEntranceX],BizzInfo[42][bEntranceY],BizzInfo[42][bEntranceZ])) bid = 42;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ])) bid = 43;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ])) bid = 44;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[45][bEntranceX],BizzInfo[45][bEntranceY],BizzInfo[45][bEntranceZ])) bid = 45;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[46][bEntranceX],BizzInfo[46][bEntranceY],BizzInfo[46][bEntranceZ])) bid = 46;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[47][bEntranceX],BizzInfo[47][bEntranceY],BizzInfo[47][bEntranceZ])) bid = 47;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[48][bEntranceX],BizzInfo[48][bEntranceY],BizzInfo[48][bEntranceZ])) bid = 48;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[49][bEntranceX],BizzInfo[49][bEntranceY],BizzInfo[49][bEntranceZ])) bid = 49;
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[50][bEntranceX],BizzInfo[50][bEntranceY],BizzInfo[50][bEntranceZ])) bid = 50;
				BizzInfo[bid][bTill] += price;
		    	mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_DARKPINK, "You are not near a gas station.");
		}
	    else return SendClientMessage(playerid, COLOR_DARKPINK, "Your gas can is already full.");
	}
	return 1;
}
CMD:pizza(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pJob] == 5)
		{
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 448)
			{
			    if(pizzatime[playerid] > 0)
			    {
			        new strr[256];
			        format(strr,sizeof(strr),"You can deliver another pizza in %d seconds.",pizzatime[playerid]);
			        SendClientMessage(playerid, COLOR_GREY, strr);
			        return 1;
				}
				if(GetPlayerState(playerid) == 2)
			    {
			        DisablePlayerRaceCheckpoint(playerid);
		            new rand,Float:Position[3],distance;
					rand = random(sizeof(gRandomPizza));
					GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
					SetPlayerRaceCheckpoint(playerid,0,gRandomPizza[rand][0],gRandomPizza[rand][1],gRandomPizza[rand][2],0.0,0.0,0.0,4.0);
					distance = floatround(GetDistanceBetweenPoints(Position[0],Position[1], Position[2], gRandomPizza[rand][0], gRandomPizza[rand][1], gRandomPizza[rand][2]), floatround_round);
					if(PlayerInfo[playerid][pPizzaSkill] == 1) pizzaprize[playerid] = distance*8;
					if(PlayerInfo[playerid][pPizzaSkill] == 2) pizzaprize[playerid] = distance*8 + (distance*8)*(10/100);
					if(PlayerInfo[playerid][pPizzaSkill] == 3) pizzaprize[playerid] = distance*8 + (distance*8)*(20/100);
					if(PlayerInfo[playerid][pPizzaSkill] == 4) pizzaprize[playerid] = distance*8 + (distance*8)*(30/100);
					if(PlayerInfo[playerid][pPizzaSkill] == 5) pizzaprize[playerid] = distance*8 + (distance*8)*(40/100);
					if(PlayerInfo[playerid][pPizzaSkill] == 6) pizzaprize[playerid] = distance*8 + (distance*8)*(50/100);
					pizzaj[playerid] = 1;
					pizzatime[playerid] = 30;
					failpizza[playerid] = -1;
					PizzaCP[playerid] = 1;
					SCM(playerid,COLOR_GREY,"Mergi la checkpoint pentru a livra pizza.");
			    }
			    else return SCM(playerid,COLOR_WHITE,"You are not the driver of pizza scooter.");
			}
			else return SCM(playerid,COLOR_WHITE,"You are not in a pizza scooter.");
		}
		else return SCM(playerid,COLOR_WHITE,"You are not a Pizza Boy.");
	}
	return 1;
}
CMD:getmats(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pJob] != 9) return SendClientMessage(playerid, COLOR_GREY, "You are not an arms dealer.");
        if(IsPlayerInRangeOfPoint(playerid, 5, 597.5396,-1246.9562,18.2512))
		{
			if(GetPlayerCash(playerid) >= 500)
			{
		    	SetPlayerCheckpoint(playerid, 1713.1602,916.2577,10.8203, 10.0);
		    	SendClientMessage(playerid, COLOR_WHITE, "Mergi la checkpoint pentru a colecta materialele.");
		    	MatsHolding[playerid] = 1;
		    	CP[playerid] = 6901;
		    	GivePlayerCash(playerid,-500);
				Update(playerid, pCashx);
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Nu ai $500.");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "{FEC3AC}Mergi la checkpoint pentru a colecta materialele.");
		    SetPlayerCheckpoint(playerid,597.5396,-1246.9562,18.2512, 10.0);
		    GotoMats[playerid] = 1;
		}
	}
	return 1;
}
CMD:sellmaterials(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pJob] != 9) return SendClientMessage(playerid, COLOR_GREY, "You are not an arms dealer.");
		new id,mats,string[128],sendername[25],giveplayer[25],price;
	    if(sscanf(params, "uii",id,mats,price)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellmaterials [name/playerid] [materials] [price]");
		if(price < 1 || price > 500000) return SendClientMessage(playerid, COLOR_GREY, "Price can't be lower than $1, or above $500,000.");
		if(playerid == id) return SCM(playerid, COLOR_GREY, "You can not sell materials to yourself.");
        if(id != INVALID_PLAYER_ID)
        {
			if(ProxDetectorS(5.0, playerid, id))
			{
			    if(mats > PlayerInfo[playerid][pMats]) return SendClientMessage(playerid, COLOR_GREY, "You don't have so many materials to sell.");
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "You offered %s, %d materials for %s$.",giveplayer,mats,FormatNumber(price));
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "%s offered you %d materials for %s$, type /accept materials %d to accept the offer.",sendername,mats,FormatNumber(price),playerid);
				SendClientMessage(id, COLOR_WHITE, string);
				MatsOffer[id] = playerid;
				MatsPrice[id] = price;
				MatsAmmo[id] = mats;
			}
			else return SendClientMessage(playerid, COLOR_GREY, "This player is not near you.");
        }
    }
    return 1;
}
CMD:sellgun(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
	    if (PlayerInfo[playerid][pJob] != 9) return SendClientMessage(playerid, COLOR_GREY, "You are not an arms dealer.");
		new x_weapon[10],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS],price2,id,giveplayer[25],sendername[25],string[128];
		if(sscanf(params, "us[10]d",id,x_weapon,price2))
		{
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellgun [name/playerid] [gun name] [price]");
			SendClientMessage(playerid, COLOR_WHITE, "Weapons: SDPistol(100) Deagle(150)");
			SendClientMessage(playerid, COLOR_WHITE, "Weapons: MP5(200) Shotgun(300)");
			SendClientMessage(playerid, COLOR_WHITE, "Weapons: AK47(350) M4(400) Rifle(600)");
			return 1;
		}
		if(playerid == id) return SCM(playerid, COLOR_GREY, "You can't sell guns to yourself.");
		if(PlayerInfo[id][pJailed] > 0) return SCM(playerid, COLOR_GREY, "This player is in jail.");
		if(id != INVALID_PLAYER_ID)
        {
			if(PlayerInfo[id][pGunLic] == 0) return SCM(playerid, COLOR_GREY, "This player does not have a gun license.");
			if(strcmp(x_weapon,"sdpistol",true) == 0)
			{
			    if(PlayerInfo[playerid][pMats] < 100) return SendClientMessage(playerid, COLOR_GREY, "Not enough materials for that gun.");
				weapon[playerid] = 23;
				price[playerid] = 100;
				ammo[playerid] = 100;
			}
			else if(strcmp(x_weapon,"deagle",true) == 0)
			{
			    if(PlayerInfo[playerid][pMats] < 150) return SendClientMessage(playerid, COLOR_GREY, "Not enough materials for that gun.");
			    weapon[playerid] = 24;
				price[playerid] = 150;
				ammo[playerid] = 100;
			}
			else if(strcmp(x_weapon,"mp5",true) == 0)
			{
			    if(PlayerInfo[playerid][pMats] < 200) return SendClientMessage(playerid, COLOR_GREY, "Not enough materials for that gun.");
			    weapon[playerid] = 29;
				price[playerid] = 200;
				ammo[playerid] = 150;
			}
			else if(strcmp(x_weapon,"shotgun",true) == 0)
			{
			    if(PlayerInfo[playerid][pMats] < 300) return SendClientMessage(playerid, COLOR_GREY, "Not enough materials for that gun.");
			    weapon[playerid] = 25;
				price[playerid] = 300;
				ammo[playerid] = 50;
			}
			else if(strcmp(x_weapon,"ak47",true) == 0)
			{
			    if(PlayerInfo[playerid][pMats] < 350) return SendClientMessage(playerid, COLOR_GREY, "Not enough materials for that gun.");
			    weapon[playerid] = 30;
				price[playerid] = 350;
				ammo[playerid] = 250;
			}
			else if(strcmp(x_weapon,"m4",true) == 0)
			{
			    if(PlayerInfo[playerid][pMats] < 400) return SendClientMessage(playerid, COLOR_GREY, "Not enough materials for that gun.");
				weapon[playerid] = 31;
				price[playerid] = 400;
				ammo[playerid] = 250;
			}
			else if(strcmp(x_weapon,"rifle",true) == 0)
			{
			    if(PlayerInfo[playerid][pMats] < 600) return SendClientMessage(playerid, COLOR_GREY, "Not enough materials for that gun.");
			    weapon[playerid] = 33;
				price[playerid] = 600;
				ammo[playerid] = 25;
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Invalid weapon name.");
			if(price2 < 1 || price2 > 100000) return SendClientMessage(playerid, COLOR_GREY, "Price must be between $1 and $100000.");
			if (ProxDetectorS(5.0, playerid, id))
			{
                if(Spectate[id] == playerid) return SCM(playerid, COLOR_GREY, "This player is not near you.");
                if(GetPlayerCash(id) < price2) return SCM(playerid, COLOR_GREY, "This player don't have money needed.");
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				SellgunOffer[id] = playerid;
				SellgunPrice[id] = price2;
				SellgunMats[id] = price[playerid];
				SellgunAmmo[id] = ammo[playerid];
				SellgunID[id] = weapon[playerid];
				new gunname[50];
				GetWeaponNameEx(weapon[playerid],gunname,sizeof(gunname));
				format(string, sizeof(string), "You offered %s a %s for %s$.",giveplayer,gunname,FormatNumber(price2));
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "%s offered you a %s for %s$, type /accept gun %d to accept the offer.",sendername,gunname,FormatNumber(price2),playerid);
				SendClientMessage(id, COLOR_WHITE, string);
			}
			else return SendClientMessage(playerid, COLOR_GREY, "This player is not near you.");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:engine(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        new idcar = GetPlayerVehicleID(playerid),string[128],sendername[25];
        new engine,lights,alarm,doors,bonnet,boot,objective;
        if(Gas[idcar] == 0) return SCM(playerid, COLOR_GREY, "This car is out of fuel.");
	    if(IsABike(idcar)) return SS(playerid, COLOR_LIGHTGREEN3, "Nu poti folosi comanda /engine pentru biciclete.", "You can't do that for bikes!");
	    if(Refueling[playerid] == 0)
  	 	{
     	    if(vehEngine[idcar] == 0)
        	{
				vehEngine[idcar] = 1;
	            GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
	            SetVehicleParamsEx(idcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	            new vehicle;
	            vehicle = GetVehicleModel(idcar) - 400;
	    		GetPlayerName(playerid, sendername, sizeof(sendername));
	            SetPVarInt(playerid, "Engine", 1);
	            if(Undercover[playerid] != 0)
	            {
	                format(string,sizeof(string),"* An unknown hitman starts the engine of his %s.",aVehicleNames[vehicle]);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            }
	            else
	            {
		            format(string,sizeof(string),"* %s starts the engine of his %s.",sendername,aVehicleNames[vehicle]);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
        	}
      	  	else if(vehEngine[idcar] == 1)
        	{
    			vehEngine[idcar] = 0;
    			GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
            	new vehicle;
            	vehicle = GetVehicleModel(idcar) - 400;
	        	GetPlayerName(playerid, sendername, sizeof(sendername));
            	SetPVarInt(playerid, "Engine", 0);
            	if(Undercover[playerid] != 0)
            	{
	                format(string,sizeof(string),"* An unknown hitman stops the engine of his %s.",aVehicleNames[vehicle]);
	            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
            	else
            	{
	            	format(string,sizeof(string),"* %s stops the engine of his %s.",sendername,aVehicleNames[vehicle]);
	            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
        	}
    	}
		else return SendClientMessage(playerid,COLOR_WHITE,"{999999}Please wait, you refill your vehicle.");
    }
	else return SendClientMessage(playerid,COLOR_WHITE,"{999999}You need to be in a vehicle to use this command.");
	return 1;
}
CMD:disarm(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id,string[128],sendername[25],giveplayer[25];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /disarm [name/playerid]");
		if(id != INVALID_PLAYER_ID)
		{
		    GetPlayerName(id, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    ResetPlayerWeaponsEx(id);
		    ResetPlayerWeapons(id);
			format(string, sizeof(string), "Admin %s disarmed %s [%d].",sendername, giveplayer, id);
			ABroadCast(COLOR_WHITE,string,1);
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:agl(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
        if (PlayerInfo[playerid][pAdmin] >= 5)
        {
			new id,x_nr[10],sendername[25],giveplayer[25],string[128];
			if(sscanf(params, "us[10]",id,x_nr))
			{
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /agl [name/playerid] [license]");
			    SendClientMessage(playerid, COLOR_WHITE, "Available names: Driving, Pilots, Sailing, Weapon.");
				return 1;
			}
			if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    GetPlayerName(id, giveplayer, sizeof(giveplayer));
		    if(strcmp(x_nr,"driving",true) == 0)
			{
	            format(string, sizeof(string), "* You've given a Drivers License to %s.",giveplayer);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		        format(string, sizeof(string), "* Admin %s has given you a Drivers License.",sendername);
		        SendClientMessage(id, COLOR_LIGHTBLUE, string);
		        PlayerInfo[id][pCarLic] = 1;
		        PlayerInfo[id][pCarLicT] = 100;
				PlayerInfo[id][pCarLicSuspend] = 0;
				Update(id, pCarLicSuspendx);
				new str[128];
				mysql_format(SQL,str,128,"UPDATE users SET `CarLic`='1',`CarLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
		        return 1;
			}
			else if(strcmp(x_nr,"pilots",true) == 0)
			{
	            format(string, sizeof(string), "* You've given a Pilots License to %s.",giveplayer);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		        format(string, sizeof(string), "* Admin %s has given you a Pilots License.",sendername);
		        SendClientMessage(id, COLOR_LIGHTBLUE, string);
		        PlayerInfo[id][pFlyLic] = 1;
		        PlayerInfo[id][pFlyLicT] = 100;
				new str[128];
				mysql_format(SQL,str,128,"UPDATE users SET `FlyLic`='1',`FlyLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
		        return 1;
			}
			else if(strcmp(x_nr,"sailing",true) == 0)
			{
	            format(string, sizeof(string), "* You've given a Sailing License to %s.",giveplayer);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		        format(string, sizeof(string), "* Admin %s has given you a Sailing License.",sendername);
		        SendClientMessage(id, COLOR_LIGHTBLUE, string);
		        PlayerInfo[id][pBoatLic] = 1;
		        PlayerInfo[id][pBoatLicT] = 100;
				new str[128];
				mysql_format(SQL,str,128,"UPDATE users SET `BoatLic`='1',`BoatLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
		        return 1;
			}
			else if(strcmp(x_nr,"weapon",true) == 0)
			{
	            format(string, sizeof(string), "* You've given a Weapon License to %s.",giveplayer);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		        format(string, sizeof(string), "* Admin %s has given you a Weapon License.",sendername);
		        SendClientMessage(id, COLOR_LIGHTBLUE, string);
		        PlayerInfo[id][pGunLic] = 1;
		        PlayerInfo[id][pGunLicT] = 100;
				PlayerInfo[id][pGunLicSuspend] = 0;
				Update(id, pGunLicSuspendx);
				new str[128];
				mysql_format(SQL,str,128,"UPDATE users SET `GunLic`='1',`GunLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
		        return 1;
			}
        }
        else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
    }
    return 1;
}
CMD:carcolortemp(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new color1,color2;
	if(sscanf(params, "ii",color1,color2)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /carcolortemp [color 1] [color 2]");
    if(color1 < 0 || color1 > 255) return SendClientMessage(playerid, COLOR_GREY, "Wrong color id.");
    if(color2 < 0 || color2 > 255) return SendClientMessage(playerid, COLOR_GREY, "Wrong color id.");
    new vehid = GetPlayerVehicleID(playerid);
    if(IsPlayerInVehicle(playerid, vehid))
    {
        ChangeVehicleColor(vehid, color1, color2);
		return 1;
    }
    else
    {
		SendClientMessage(playerid, COLOR_WHITE, "You are not in a car.");
	}
    return 1;
}
CMD:togvip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pPremiumAccount] == 2)
	{
		if(TogVIP[playerid] == 0)
		{
			TogVIP[playerid] = 1;
			SS(playerid, COLOR_LIGHTRED2, "Ai activat chatul VIP.", "You enabled the VIP chat.");
		}
		else
		{
			TogVIP[playerid] = 0;
			SS(playerid, COLOR_LIGHTRED2, "Ai dezactivat chatul VIP.", "You disabled the VIP chat.");
		}
	}
	else return SS(playerid, COLOR_LIGHTGREEN3, "EROARE! Nu esti un user VIP.", "ERROR! You are not a VIP user.");
	return 1;
}
CMD:vip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pPremiumAccount] == 2)
	{
		if(TogVIP[playerid] == 0) return SS(playerid, COLOR_LIGHTGREEN3, "Foloseste /togvip pentru a activa chatul VIP.", "Use /togvip to enable the VIP chat.");
		new text[128],string[128],sendername[25];
		if(sscanf(params, "s[128]",text)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vip [message]");
		GetPlayerName(playerid,sendername,sizeof(sendername));
		format(string, sizeof(string), "VIP %s: %s", sendername, text);
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPremiumAccount] == 2 && TogVIP[i] == 1) SendClientMessage(i, COLOR_LIGHTRED2, string);
		}
		new var100[300],resulttt[128],strr[128];
		format(strr, sizeof(strr),"VIP %s: %s", sendername, text);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','vip')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
	}
	else return SS(playerid, COLOR_LIGHTGREEN3, "EROARE! Nu esti un user VIP.", "ERROR! You are not a VIP user.");
	return 1;
}
CMD:vipColors(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pPremiumAccount] == 2)
	{
		ShowPlayerDialog(playerid, 6268, DIALOG_STYLE_LIST, "Nickname color", "White\nCool Red\nDark Red\nLight Red", "Choose", "Cancel");
	}
	else return SS(playerid, COLOR_LIGHTGREEN3, "Nu ai cont VIP.", "You are not a VIP.");
	return 1;
}
CMD:o(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 6)
    {
		new text[256],string[300];
		if(sscanf(params, "s[256]",text)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /o [message]");
		if(PlayerInfo[playerid][pAdmin] >= 6)
		{
			format(string, sizeof(string), "Admin %s: %s", PlayerInfo[playerid][pNormalName], text);
			ABroadCast(COLOR_LIGHTRED2, string, 6);
		}
	}
	return 1;
}
CMD:anno2(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
		new text[256],string[300];
		if(sscanf(params, "s[256]",text)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /anno2 [message]");
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			format(string, sizeof(string), "(( %s: %s ))", PlayerInfo[playerid][pNormalName], text);
			foreach(new x : Player)
			{
				SendSplitMessage(x, COLOR_GENANNOUNCE2, string);
			}
			Log(PlayerInfo[playerid][pSQLID], string, "anno2");
		}
	}
	return 1;
}
CMD:anno(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
		new text[256],string[300];
		if(sscanf(params, "s[256]",text)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /anno [message]");
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			format(string, sizeof(string), "(( %s says: %s ))", PlayerInfo[playerid][pNormalName], text);
			foreach(new x : Player)
			{
				SendSplitMessage(x, COLOR_GENANNOUNCE,string);
			}
			Log(PlayerInfo[playerid][pSQLID], string, "anno");
		}
	}
	return 1;
}
CMD:announce(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_anno(playerid, params);
}
CMD:count(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
	    new sendername[30],range,string[256],count=0;
	    if(sscanf(params, "i", range)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /count [range]");
	    {
     		GetPlayerName(playerid, sendername, sizeof(sendername));
 			if(countdown == 0)
    		{
    			foreach(new i : Player)
    			{
 		    		if(IsPlayerConnected(i))
					{
	    				if(ProxDetectorS(range, playerid, i))
				    	{
							SetTimerEx("CountDownCheck3", 1000, 0, "i", i);
							SetTimer("CountDownFinalize", 5000, 0);
   							countdown = 1;
   							count++;
						}
					}
				}
				format(string,sizeof(string),"{FFFFCC}Admin %s has started the countdown for %d players(range: %d).",sendername,count,range);
				ABroadCast(COLOR_WHITE, string,1);
			}
			else return SendClientMessage(playerid,COLOR_WHITE, "Countdown is already started.");
		}
	}
	else return SendClientMessage(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:contract(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
   	{
		new id,moneys,string[256],giveplayer[30];
		if(sscanf(params, "ui",id,moneys)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /contract [name/playerid] [money]");
		if(moneys < 10000 || moneys > 10000000) return SendClientMessage(playerid, COLOR_GREY, "Contract money must be atleast $10,000, and not more then $10,000,000.");
		if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "You must be level 3 to place a Contract.");
	    if(id != INVALID_PLAYER_ID)
	    {
			if(PlayerInfo[id][pAdmin] > 0) return SCM(playerid,COLOR_GREY,"Cannot place contracts on Admin.");
			if(PlayerInfo[id][pMember] == 11) return SendClientMessage(playerid, COLOR_GREY, "Cannot place contracts on hitmans.");
            if(PlayerInfo[playerid][pMember] == 11) return SendClientMessage(playerid, COLOR_GREY, "You can't place a contract because you are a hitman.");
		    if(IsACop(id) && moneys < 100000) return SendClientMessage(playerid, COLOR_GREY, "Only $100,000 can be placed as a contract on cops.");
		    if(id == playerid) return SendClientMessage(playerid, COLOR_GREY, "You cannot contract yourself.");
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			if(GetPlayerCash(playerid) >= moneys)
			{
				GivePlayerCash(playerid, -moneys);
				PlayerInfo[id][pHeadValue] += moneys;
				format(string, sizeof(string), "New hit available! Target: %s. Price: unknown.", giveplayer);
				SendFamilyMessage(11, COLOR_CYAN, string);
				SendClientMessage(playerid, COLOR_GREY, "Contract placed! The hitmans will kill your target soon!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new str[184];
				Update(playerid, pCashx);
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `HeadValue`='%d' WHERE `name`='%s'",PlayerInfo[id][pHeadValue],PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Invalid transaction amount.");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:pay(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
    if(IsPlayerConnected(playerid))
    {
		new id,moneys,sendername[25],giveplayer[25],string[256];
		if(sscanf(params, "ui",id,moneys)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /pay [name/playerid] [money]");
		if(moneys > 1000 && PlayerInfo[playerid][pLevel] < 5) return SS(playerid, COLOR_GREY, "Nu poti transfera mai mult de $1,000 daca nu ai level 5.", "You can't /pay more than $1,000 if you don't have level 5.");
		if(moneys < 1 || moneys > 50000 && PlayerInfo[playerid][pPremiumAccount] < 1) return SS(playerid, COLOR_GREY, "Nu ai cont premium pentru a transfera mai mult de $50.000.", "You don't have premium account to /pay more than $50,000.");
		if(moneys < 1 || moneys > 1000000 && PlayerInfo[playerid][pPremiumAccount] > 0) return SS(playerid, COLOR_GREY, "Suma transferata poate fi intre $1 si $1,000,000.", "The /pay ammount must be between $1 and $100,000.");
		if(id == playerid) return SCM(playerid, COLOR_GREY, "You can't /pay yourself.");
	    if(id != INVALID_PLAYER_ID)
	    {
	        if(payala[playerid] == 1) return 1;
			if (ProxDetectorS(5.0, playerid, id))
			{
				if(Spectate[id] != -1) return SCM(playerid, COLOR_GREY, "This player is not near you.");
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new playermoney;
				playermoney = GetPlayerCash(playerid);
				if (moneys > 0 && playermoney >= moneys)
				{
				    SetTimerEx("payala2", 3000, 0, "i", playerid);
				    payala[playerid] = 1;
					GivePlayerCash(playerid, -moneys);
					GivePlayerCash(id, moneys);
					format(string, sizeof(string), "You have paid $%s to %s.",FormatNumber(moneys),giveplayer);
					SendClientMessage(playerid, COLOR_WHITE, string);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "%s has paid you $%s.",sendername,FormatNumber(moneys));
					SendClientMessage(id, COLOR_WHITE, string);
					PlayerPlaySound(id, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "%s takes out $%s in cash, and hands it to %s.",sendername,FormatNumber(moneys),giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					new var100[256],string2[256],string3[256];
					format(string2,sizeof(string2),"%s[user:%d] /pay $%s to %s[user:%d].",sendername,PlayerInfo[playerid][pSQLID],FormatNumber(moneys),giveplayer,PlayerInfo[id][pSQLID]);
 					mysql_real_escape_string(string2, string3);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],string3);
					mysql_tquery(SQL,var100,"","");
					Update(id, pCashx);
					Update(playerid, pCashx);
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Invalid transaction amount.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "This player is not near you.");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:number(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pPhoneBook] == 1)
		{
			new id,string[128],sendername[25];
			if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /number [name/playerid]");
		    if(id != INVALID_PLAYER_ID)
		    {
		        GetPlayerName(id, sendername, sizeof(sendername));
		        if(PlayerInfo[id][pPnumber] == 0)
		        {
					format(string, 256, "Name: {CECECE}%s {FFFFFF}| Number: {CECECE}None",sendername);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
				else
				{
				    format(string, 256, "Name: {CECECE}%s {FFFFFF}| Number: {CECECE}%d",sendername,PlayerInfo[id][pPnumber]);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You do not have a phonebook.");
	}
	return 1;
}
CMD:tognews(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (!gNews[playerid])
		{
			gNews[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD1, "News chat channel Disabled.");
		}
		else if (gNews[playerid])
		{
			gNews[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD1, "News chat channel Enabled.");
		}
	}
	return 1;
}
CMD:togf(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
    	if(PlayerInfo[playerid][pMember] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not a part of a faction.");
		if (!gFam[playerid])
		{
			gFam[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Family chat disabled.");
		}
		else if (gFam[playerid])
		{
			gFam[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Family chat enabled.");
		}
	}
	return 1;
}
CMD:togwhisper(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pPremiumAccount] > 0 || PlayerInfo[playerid][pAdmin] >= 1)
        {
			if (!HidePM[playerid])
			{
				HidePM[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD1, "Whisper chat channel Disabled.");
			}
			else if (HidePM[playerid])
			{
				HidePM[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD1, "Whisper chat channel Enabled.");
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Your are not admin or you don't have premium account.");
	}
	return 1;
}
CMD:togw(playerid, params[])
{
    return cmd_togwhisper(playerid, params);
}
CMD:changepass(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Trebuie sa fii logat pentru a folosi comenzi.");
	if(IsPlayerConnected(playerid))
	{
	    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Trebuie sa fii logat pentru a folosi comenzi.");
		ShowPlayerDialog(playerid, DIALOG_NEWPASS,DIALOG_STYLE_INPUT, "Change password:","Type in box your new password:","Done","Close");
		return 1;
	}
	return 1;
}
CMD:me(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		new string[250],result[250],sendername[25];
        if(PlayerInfo[playerid][pMuted] == 1)
        {
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
			else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /me [action]");
		format(string, sizeof(string), "* (/me) %s %s", sendername, result);
		ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new var100[300],resulttt[300],strr[300];
		format(strr, sizeof(strr),"* %s %s", sendername, result);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','me')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
	}
	return 1;
}
CMD:do(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    new test = 1;
	if(test == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			new string[250],result[250],sendername[25];
			if(PlayerInfo[playerid][pMuted] == 1)
			{
				if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
				else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
				SendClientMessage(playerid, COLOR_DARKPINK, string);
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /do [action]");
			format(string, sizeof(string), "* %s (( %s )) ", result, sendername);
			ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new var100[300],resulttt[300],strr[300];
			format(strr, sizeof(strr),"* %s (( %s ))", result, sendername);
			mysql_real_escape_string(strr, resulttt);
			mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','do')", PlayerInfo[playerid][pSQLID], resulttt);
			mysql_tquery(SQL,var100,"","");
		}
	}
	else return SS(playerid, COLOR_WHITE, "Comanda dezactivata temporar.", "Command disabled.");
	return 1;
}
CMD:advertise(playerid, params[])
{
    return cmd_ad(playerid, params);
}
CMD:ad(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		new string[256],sendername[30],message[256],idx,adss=0,time,time2;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(AdvPlayer[playerid] != 0)
		{
			SendClientMessage(playerid, COLOR_DARKPINK, "Your ad:");
			SendClientMessage(playerid, COLOR_DARKPINK, AdvMSG[playerid]);
			SendClientMessage(playerid, COLOR_DARKPINK, "Pentru a-ti sterge anuntul, foloseste /deletemyad.");
			return 1;
		}
		if(PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, COLOR_GREY, "You don't have level 5.");
        if(!PlayerToPoint(5.0, playerid, BizzInfo[28][bEntranceX],BizzInfo[28][bEntranceY],BizzInfo[28][bEntranceZ]) && !PlayerToPoint(5.0, playerid, BizzInfo[52][bEntranceX],BizzInfo[52][bEntranceY],BizzInfo[52][bEntranceZ])) return SendClientMessage(playerid, COLOR_WHITE, "You are not near CNN.");
		if(PlayerInfo[playerid][pMuted] == 1)
        {
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
			else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
			return 1;
		}
		if(sscanf(params, "s[256]",message)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /ad [message]");
		new length = strlen(params);
		while ((idx < length) && (params[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[264];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = params[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		new payout = idx * 150;
		if(GetPlayerCash(playerid) < payout) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
		GivePlayerCash(playerid, -payout);
		foreach(new i : Player)
		{
			if(AdvPlayer[i] != 0)
			{
				adss++;
			}
		}
		if(adss >= 20) return SendClientMessage(playerid, COLOR_WHITE, "There are 20 ads placed, come back later.");
		if(adss > 0) { time = (adss+1)*30*1000; time2 = (adss+1)*30; }
		else if(adss == 0) { time = 30000; time2 = 30; }
		format(AdvMSG[playerid], 256, "%s",message);
		format(string, sizeof(string),"{D78E10}Preview Ad - {D78E10}Ad by %s ({D78E10}%d{D78E10}): {D78E10}%s",sendername,playerid,message);
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pHelper] > 0)
			{
				SendSplitMessage(i, COLOR_ADV, string);
			}
		}
		new var100[300],resulttt[300],strr[300];
		format(strr, sizeof(strr),"Ad by %s: %s", sendername, message);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','ad')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
		AdvPlayer[playerid] = 1;
		AdvTimer[playerid] = SetTimerEx("PlaceAD", time, false, "i", playerid);
        format(string, sizeof(string), "Ai platit $%d pentru anunt. Anuntul tau va fi afisat in %d secunde.", payout, time2);
        SendClientMessage(playerid, COLOR_DARKPINK, string);
		new str[128];
		if(IsPlayerInRangeOfPoint(playerid, 5.0,BizzInfo[28][bEntranceX],BizzInfo[28][bEntranceY],BizzInfo[28][bEntranceZ]))
		{
			BizzInfo[28][bTill] += payout;
			mysql_format(SQL,str,128,"UPDATE bizz SET `Till`='%d' WHERE `ID`='28'",BizzInfo[28][bTill]);
			mysql_tquery(SQL,str,"","");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0,BizzInfo[52][bEntranceX],BizzInfo[52][bEntranceY],BizzInfo[52][bEntranceZ]))
		{
			BizzInfo[52][bTill] += payout;
			mysql_format(SQL,str,128,"UPDATE bizz SET `Till`='%d' WHERE `ID`='52'",BizzInfo[52][bTill]);
			mysql_tquery(SQL,str,"","");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0,BizzInfo[56][bEntranceX],BizzInfo[56][bEntranceY],BizzInfo[56][bEntranceZ]))
		{
			BizzInfo[56][bTill] += payout;
			mysql_format(SQL,str,128,"UPDATE bizz SET `Till`='%d' WHERE `ID`='56'",BizzInfo[56][bTill]);
			mysql_tquery(SQL,str,"","");
		}
	}
	return 1;
}
CMD:deletemyad(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(AdvPlayer[playerid] != 0)
		{
			KillTimer(AdvTimer[playerid]);
			AdvPlayer[playerid] = 0;
			format(AdvMSG[playerid], 256, "");
			SendClientMessage(playerid, COLOR_DARKPINK, "Ad-ul tau a fost sters.");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You don't have an ad placed.");
	}
	return 1;
}
CMD:da(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
		{
			new id,string[256],sendername[30],giveplayer[30];
			if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /da [name/playerid]");
			if(IsPlayerConnected(id))
			{
				if(AdvPlayer[id] != 0)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					KillTimer(AdvTimer[id]);
					AdvPlayer[id] = 0;
					format(AdvMSG[id], 256, "");
					format(string, sizeof(string),"/deletead: Admin %s has deleted %s's (%d) /ad.",sendername,giveplayer,id);
					ABroadCast(COLOR_ADMCOMMANDS,string,1);
					format(string, sizeof(string),"Admin %s deleted your /ad.",sendername);
					SendClientMessage(id, COLOR_LIGHTRED, string);
				}
				else return SendClientMessage(playerid, COLOR_GREY, "This player don't have an ad placed.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin/helper.");
	}
	return 1;
}
CMD:deletead(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_da(playerid, params);
}
CMD:shout(playerid, params[])
{
    return cmd_s(playerid, params);
}
CMD:s(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		new string[250],result[250],sendername[25];
	    if(PlayerInfo[playerid][pMuted] == 1)
        {
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
			else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /s [message]");
		format(string, sizeof(string), "%s shouts: %s!", sendername, result);
		ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
		format(string, sizeof(string), "(shouts) \"%s!\"", params);
		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 30.0, 10000);
		new var100[300],resulttt[300],strr[300];
		format(strr, sizeof(strr),"%s shouts: %s!", sendername, result);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','s')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
		for(new adm = 0; adm<=MAX_PLAYERS;adm++)
		{
			if(IsPlayerConnected(adm))
			{
				if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
 				{
 					format(string, sizeof(string), "%s shouts: %s!",sendername,result);
					SendClientMessage(adm,  COLOR_YELLOW, string);
 				}
			}
		}
	}
	return 1;
}
CMD:b(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		new string[250],result[250],sendername[25];
	    if(PlayerInfo[playerid][pMuted] == 1)
        {
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
			else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /b [message]");
		format(string, sizeof(string), "%s says: (( %s ))", sendername, result);
		ProxDetector(35.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
		new var100[300],resulttt[300],strr[300];
		format(strr, sizeof(strr),"%s says: (( %s ))", sendername, result);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','b')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
		for(new adm = 0; adm<=MAX_PLAYERS;adm++)
		{
			if(IsPlayerConnected(adm))
			{
				if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
 				{
 					format(string, sizeof(string), "%s says: (( %s ))",sendername,result);
					SendClientMessage(adm,  COLOR_YELLOW, string);
 				}
			}
		}
	}
	return 1;
}
CMD:low(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		new string[250],result[250],sendername[25];
	    if(PlayerInfo[playerid][pMuted] == 1)
        {
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
			else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /low [message]");
		format(string, sizeof(string), "%s says quietly: %s", sendername, result);
		ProxDetector(3.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
		format(string, sizeof(string), "(quietly) \"%s\"", params);
		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 3.0, 10000);
		new var100[300],resulttt[300],strr[300];
		format(strr, sizeof(strr),"%s says quietly: %s", sendername, result);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','low')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
		for(new adm = 0; adm<=MAX_PLAYERS;adm++)
		{
			if(IsPlayerConnected(adm))
			{
				if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
 				{
 					format(string, sizeof(string), "%s says quietly: %s",sendername,result);
					SendClientMessage(adm,  COLOR_YELLOW, string);
 				}
			}
		}
	}
	return 1;
}
CMD:fish(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pJob] != 13) return SCM(playerid,COLOR_WHITE,"You are not a fisherman.");
	if(VaildFishPlace(playerid) && !IsPlayerInAnyVehicle(playerid))
	{
        if(PlayerInfo[playerid][pFishes] > 0) return SCM(playerid,COLOR_WHITE,"Mergi la un magazin 24/7 pentru a vinde pestele prins inainte de a pescui din nou.");
		if(Fishing[playerid] == 1) return SCM(playerid,COLOR_WHITE,"You are already fishing.");
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid, 0);
		SetPlayerAttachedObject(playerid, 4, 18632, 5, 0.217000, 0.089999, -0.139999, -34.000007, 5.899998, -61.399993);
		ApplyAnimation(playerid, "SAMP", "FishingIdle", 4.0, 0, 1, 1, 1, 0, 1);
		Fishing[playerid] = 1;
		new timer = 20 + random(20);
		FishTimer[playerid] = timer;
		SendClientMessage(playerid, COLOR_WHITE, "You're now fishing. It will take a few seconds to reel your fish in.");
		GetPlayerPos(playerid, LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]);
		FishTimerr[playerid] = SetTimerEx("Fisher", 1000, 1, "i", playerid);
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 4110, 5);
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "You are not in the fishing zone. [/jobs > Fisherman]");
	return 1;
}
CMD:unrentroom(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    if(PlayerInfo[playerid][pSleeping] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "You sleeping, use /sleep first.");
	{
		if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) return SendClientMessage(playerid, COLOR_WHITE, "{B8DBFF}You own this house.");
		if(PlayerInfo[playerid][pRented] == -1) return SCM(playerid, COLOR_WHITE, "{B8DBFF}You don't have rent a house.");
		PlayerInfo[playerid][pPhousekey] = 999;
		SetTimerEx("OnPropTextdrawUpdate", 1000, false, "dd", 1, PlayerInfo[playerid][pRented]);
		PlayerInfo[playerid][pRented] = -1;
		SendClientMessage(playerid, COLOR_DARKPINK, "House unrented!");
		Update(playerid,pCashx);
		Update(playerid,pPhousekeyx);
		Update(playerid,pRentedx);
	}
	return 1;
}
CMD:up(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
	    if (PlayerInfo[playerid][pAdmin] >= 1)
	    {
		    new Float:slx, Float:sly, Float:slz;
	        GetPlayerPos(playerid, slx, sly, slz);
	        SetPlayerPosEx(playerid, slx, sly, slz+5.0);
		}
		else return SCM(playerid,COLOR_LIGHTGREEN3,"You are not an admin.");
	}
	return 1;
}
CMD:fly(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
	    {
	    	new Float:PosX,Float:PosY,Float:PosZ,car = GetPlayerVehicleID(playerid);
	    	if (IsPlayerInAnyVehicle(playerid))
	    	{
	    		GetVehiclePos(car, PosX, PosY, PosZ);
	    		SetVehiclePos(car, PosX, PosY, PosZ+10.0);
	    	}
	    	else
	    	{
				GetPlayerPos(playerid, PosX, PosY, PosZ);
				SetPlayerPosEx(playerid, PosX, PosY, PosZ+10.0);
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin.");
	}
	return 1;
}
CMD:time(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] == 1) return 1;
	new sendername[25],string[256];
	new hour,minute,second;
	gettime(hour,minute,second);
	format(string, sizeof(string), "The current time is %d:%s%d (%d seconds).", hour, (minute < 10) ? ("0") : (""), minute, second);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Connected for %d seconds.", PlayerInfo[playerid][pPayDay]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string, sizeof(string), "* %s raises her hand and looks down at her watch.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
	return 1;
}
CMD:sec(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new string[30];
		format(string, sizeof(string),"%d",OnlineTime[playerid]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}
CMD:ringbell(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
   	{
   		for(new h = 1; h < sizeof(HouseInfo); h++)
		{
			if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
			{
				new string[128],name[30];
				GetPlayerName(playerid, name, sizeof(name));
				format(string, sizeof(string), "* %s presses a button, ringing the doorbell of the house.", name);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				foreach(new i : Player)
				{
					if(InHouse[i] == h)
					{
						SendClientMessage(i, COLOR_PURPLE, "* The doorbell rings.");
					}
				}
			}
		}
   	}
   	return 1;
}
CMD:lockhouse(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
   	{
   		if(PlayerInfo[playerid][pPhousekey] == 999) return SendClientMessage(playerid, COLOR_GREY, "You don't own a house.");
		if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			new x = PlayerInfo[playerid][pPhousekey], str[256];
			if(HouseInfo[x][hLock] == 0)
			{
				HouseInfo[x][hLock] = 1;
				SendClientMessage(playerid, COLOR_WHITE, "House locked.");
			}
			else
			{
				HouseInfo[x][hLock] = 0;
				SendClientMessage(playerid, COLOR_WHITE, "House unlocked.");
			}
			mysql_format(SQL,str,sizeof(str),"UPDATE `houses` SET `Lockk`='%d' WHERE `ID`='%d'", HouseInfo[x][hLock], x);
			mysql_tquery(SQL,str,"","");
			OnPropTextdrawUpdate(1, x);
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You don't own a house.");
   	}
   	return 1;
}
CMD:lockbusiness(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
   	{
   		if(PlayerInfo[playerid][pPbiskey] != 255)
   		{
   			new x = PlayerInfo[playerid][pPbiskey], str[256];
   			if(BizzInfo[x][bLocked] == 0)
   			{
   				BizzInfo[x][bLocked] = 1;
   				SendClientMessage(playerid, COLOR_WHITE, "Business locked.");
   			}
   			else
   			{
   				BizzInfo[x][bLocked] = 0;
   				SendClientMessage(playerid, COLOR_WHITE, "Business unlocked.");
   			}
   			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Locked`='%d' WHERE `ID`='%d'", BizzInfo[x][bLocked], x);
			mysql_tquery(SQL,str,"","");
   			OnPropTextdrawUpdate(2, x);
   		}
   	}
   	return 1;
}
CMD:usedrugs(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
   	{
        if(UsingDrugs[playerid] == 0)
        {
			if(PlayerInfo[playerid][pDrugs] >= 1)
    	    {
				if(DrugTimer[playerid] != 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Poti folosi droguri doar o data la 5 minute.");
    	        PlayerStoned[playerid] += 2;
				new sendername[25],string[128];
                GetPlayerName(playerid, sendername, sizeof(sendername));
		        format(string, sizeof(string), "* %s took some drugs out of his pocket.", sendername);
                ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SendClientMessage(playerid, COLOR_WHITE, "Stai nemiscat 30 de secunde pentru ca drogurile sa-si faca efectul.");
				GetPlayerPos(playerid, LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]);
		        UsingDrugs[playerid] = 1;
				LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
                drug[playerid] = SetTimerEx("DrugEffectGone",30000,false,"d",playerid);
				if(PlayerInfo[playerid][pQuest2] == 6 && PlayerInfo[playerid][pQuestProgress2] == 0)
				{
					PlayerInfo[playerid][pQuestProgress2] = 1;
					Update(playerid, pQuestProgress2x);
					FinishQuest2(playerid, 6);
				}
            }
        	else
          	{
      	    	SendClientMessage(playerid, COLOR_WHITE, "You don't have drugs.");
            }
	    }
        else
		{
            SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are already taking drugs.");
        }
	}//not connected
	return 1;
}
CMD:getdrugs(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pJob] != 4) return SS(playerid, COLOR_WHITE, "Nu ai jobul de dealer de droguri.", "You are not a drug dealer.");
	    new points;
	    new dpoints = PlayerInfo[playerid][pDrugs];
	    if(sscanf(params, "i", points))
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "Usage: /getdrugs [amount]");
	    	SendClientMessage(playerid, COLOR_WHITE, "Price: $1,000 / gram at crack house, $500 / gram at faction HQ.");
	    	return 1;
	    }
	    new totaldrugs = dpoints + points;
	    if(points < 1) return SS(playerid, COLOR_WHITE, "Numar invalid", "Invalid number");
	    if(totaldrugs > 99) return SS(playerid, COLOR_WHITE, "Nu poti detine atat de multe droguri la tine.", "You can't have that amount of drugs.");
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 316.1940,1117.5341,1083.8828))
	    {
		    new money = points * 1000;
			if(GetPlayerCash(playerid) < money) return SS(playerid, COLOR_WHITE, "Nu ai suficienti bani.", "You don't have enough money.");
			PlayerInfo[playerid][pDrugs] += points;
			GivePlayerCash(playerid, -money);
			new string[64],string2[64];
			format(string,sizeof(string),"Ai cumparat %d grame de droguri pentru $%s",points,FormatNumber(money));
			format(string,sizeof(string),"You bought %d grams of drugs for $%s",points,FormatNumber(money));
			SS(playerid, COLOR_WHITE, string, string2);
			new str2[256];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `Money`='%d',`Drugs`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
		}
		else
		{
			if(PlayerInfo[playerid][pMember] >= 1)
			{
				new fid = PlayerInfo[playerid][pMember];
				if(IsPlayerInRangeOfPoint(playerid, 50.0, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]) && GetPlayerVirtualWorld(playerid) == DynamicFactions[fid][fVirtual])
				{
					new money = points * 500;
					if(GetPlayerCash(playerid) < money) return SS(playerid, COLOR_WHITE, "Nu ai suficienti bani.", "You don't have enough money.");
					if(DynamicFactions[fid][fDrugs] < points) return SendClientMessage(playerid, COLOR_WHITE, "Not enough drugs in faction safe.");
					DynamicFactions[fid][fDrugs] -= points;
					PlayerInfo[playerid][pDrugs] += points;
					GivePlayerCash(playerid, -money);
					DynamicFactions[fid][fBank] += money;
					new string[64],string2[64];
					format(string,sizeof(string),"Ai cumparat %d grame de droguri pentru $%s",points,FormatNumber(money));
					format(string,sizeof(string),"You bought %d grams of drugs for $%s",points,FormatNumber(money));
					SS(playerid, COLOR_WHITE, string, string2);
					new str2[256];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `Money`='%d',`Drugs`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str2,"","");
					mysql_format(SQL,str2,sizeof(str2),"UPDATE factions SET `Bank`='%d',`Drugs`='%d' WHERE `ID`='%d'",DynamicFactions[fid][fBank],DynamicFactions[fid][fDrugs],fid);
					mysql_tquery(SQL,str2,"","");
				}
				else return SS(playerid, COLOR_WHITE, "Trebuie sa fi in HQ-ul factiunii sau la crack house pentru a lua droguri.", "You need to be at the crack house or on your faction's HQ to get drugs.");
			}
			else return SS(playerid, COLOR_WHITE, "Trebuie sa fi in HQ-ul factiunii sau la crack house pentru a lua droguri.", "You need to be at the crack house or on your faction's HQ to get drugs.");
		}
		return 1;
	}
	return 1;
}
CMD:selldrugs(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pJob] != 4) return SendClientMessage(playerid, COLOR_WHITE, "You are not a drugs dealer.");
		new playa,needed,string[128],giveplayer[25],sendername[25],money;
		if(sscanf(params, "uii",playa,needed,money)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /selldrugs [name/playerid] [drugs] [price]");
		if(needed < 1 || needed > 50) return SendClientMessage(playerid, COLOR_GREY, "Drugs ammount can't be lower then 1, or above 50.");
		if(money < 1 || money > 500000) return SendClientMessage(playerid, COLOR_GREY, "Price can't be lower then 1$, or above 500,000$.");
    	if(needed > PlayerInfo[playerid][pDrugs]) return SendClientMessage(playerid, COLOR_GREY, "You dont have that ammount of drugs with you.");
    	if(IsPlayerConnected(playa))
    	{
    	    if(playa != INVALID_PLAYER_ID)
		    {
 	     		if (ProxDetectorS(8.0, playerid, playa))
        		{
            	    if(playa == playerid) return SendClientMessage(playerid, COLOR_GREY, "Cant sell to yourself.");
	        	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
	        		GetPlayerName(playerid, sendername, sizeof(sendername));
	        	    format(string, sizeof(string), "You offered %s to buy %d gram of drugs for $%s.", giveplayer, needed, FormatNumber(money));
	        		SendClientMessage(playerid, COLOR_WHITE, string);
	         		format(string, sizeof(string), "Drug dealer %s wants to sell you %d grams of drugs for $%s, type /accept drugs %d to buy them.", sendername, needed, FormatNumber(money),playerid);
		        	SendClientMessage(playa, COLOR_WHITE, string);
		         	DrugOffer[playa] = playerid;
		        	DrugPrice[playa] = money;
		        	DrugGram[playa] = needed;
	    		}
		    	else return SendClientMessage(playerid, COLOR_GREY, "This player is not near you.");
        	}
    	}
     	else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:gotohouse(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1)
	    {
			new housenum,string[128],name[30];
			if(sscanf(params, "d",housenum)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gotohouse [house id]");
			if(housenum < 0 || housenum > 110) return SendClientMessage(playerid, COLOR_GREY, "Invalid house id.");
			GetPlayerName(playerid, name, sizeof(name));
			format(string,sizeof(string),"%s used /gotohouse %d.",name,housenum);
			ABroadCast(COLOR_ADMCOMMANDS,string,1);
			SetPlayerInterior(playerid,HouseInfo[housenum][hInterior]);
			SetPlayerPosEx(playerid,HouseInfo[housenum][hExitx],HouseInfo[housenum][hExity],HouseInfo[housenum][hExitz]);
			PlayerInfo[playerid][pInt] = HouseInfo[housenum][hInterior];
			PlayerInfo[playerid][pLocal] = housenum;
			InHouse[playerid] = housenum;
			SetPlayerVirtualWorld(playerid,HouseInfo[housenum][hVirtual]);
			if(strlen(housestring[InHouse[playerid]]) > 0)
			{
   				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
			}
		}
		else return SCM(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:gotobiz(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1)
	    {
			new housenum,string[128],name[30];
			if(sscanf(params, "d",housenum)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gotobiz [biz id]");
			if(housenum < 0 || housenum > 100) return SendClientMessage(playerid, COLOR_GREY, "Invalid biz id.");
			SetPlayerPosEx(playerid,BizzInfo[housenum][bEntranceX],BizzInfo[housenum][bEntranceY],BizzInfo[housenum][bEntranceZ]);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			GetPlayerName(playerid, name, sizeof(name));
			format(string,sizeof(string),"%s used /gotobiz %d.",name,housenum);
			ABroadCast(COLOR_ADMCOMMANDS,string,1);
		}
		else return SCM(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:gotohq(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
	    {
	    	new hqid, string[128], name[30];
	    	if(sscanf(params, "d", hqid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gotohq [faction id]");
	    	if(hqid < 0 || hqid > 18) return SendClientMessage(playerid, COLOR_GREY, "Invalid hq id.");
	    	SetPlayerPosEx(playerid, DynamicFactions[hqid][fceX], DynamicFactions[hqid][fceY], DynamicFactions[hqid][fceZ]);
	    	SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			GetPlayerName(playerid, name, sizeof(name));
			format(string, sizeof(string), "%s used /gotohq %d.", name, hqid);
			ABroadCast(COLOR_ADMCOMMANDS, string, 1);
	    }
	    else return SCM(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:buylevel(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
        new nxtlevel = PlayerInfo[playerid][pLevel];
		new costlevel;
		new expamount,string[128],sendername[30];
		if(PlayerInfo[playerid][pLevel] == 1 || PlayerInfo[playerid][pLevel] == 2 || PlayerInfo[playerid][pLevel] == 3 || PlayerInfo[playerid][pLevel] == 4)
		{
		    expamount = nxtlevel*2;
		    costlevel = nxtlevel*4000;
		}
		else if(PlayerInfo[playerid][pLevel] >= 5)
		{
		    expamount = nxtlevel*levelexp;
		    costlevel = nxtlevel*levelcost;
		}
		if (gPlayerLogged[playerid] != 0)
		{
		    GetPlayerName(playerid,sendername,sizeof(sendername));
			if(GetPlayerCash(playerid) < costlevel) return SCM(playerid,COLOR_GRAD1,"You do not have enough cash.");
			if(PlayerInfo[playerid][pExp] < expamount) return SCM(playerid,COLOR_GRAD1,"You do not have the necessary number of respect points.");
			GivePlayerCash(playerid, -costlevel);
			PlayerInfo[playerid][pLevel]++;
		    PlayerInfo[playerid][pExp] -= expamount;
		    if(PlayerInfo[playerid][pLanguage] == 2) format(string,sizeof(string),"Felicitari, acum ai level %d!",PlayerInfo[playerid][pLevel]);
		    else format(string,sizeof(string),"Congratulations, you are now level %d!",PlayerInfo[playerid][pLevel]);
			SCM(playerid, 0x3A8EBAFF, string);
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "* %s are acum level %d.",sendername,PlayerInfo[playerid][pLevel]);
			else format(string, sizeof(string), "* %s is now level %d.",sendername,PlayerInfo[playerid][pLevel]);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    new total = PlayerInfo[playerid][pExp];
		    if(total > 0)
		    {
		        PlayerInfo[playerid][pExp] = total;
		    }
		    else
		    {
		        PlayerInfo[playerid][pExp] = 0;
		    }
		    Update(playerid,pCashx);
		    Update(playerid,pRP);
			Update(playerid,pLevelx);
			SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
		}
		else return SendClientMessage(playerid, COLOR_WHITE,"You are not logged in.");
	}
	return 1;
}
CMD:race(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,3.0, -2110.6624,-444.3140,38.7344))
		{
			new string[300],started1[64],started2[64];
			if(racet[0] == 0) format(started1, sizeof(started1), "{01DF01}free to join");
			else if(racet[0] != 0) format(started1, sizeof(started1), "{FF0000}race ongoing");
			if(racet[1] == 0) format(started2, sizeof(started2), "{01DF01}free to join");
			else if(racet[1] != 0) format(started2, sizeof(started2), "{FF0000}race ongoing");
			format(string,sizeof(string),"Car Race [%d/20] %s\nAir Race [%d/20] %s",racep[0],started1,racep[1],started2);
		    ShowPlayerDialog(playerid, DIALOG_RACE1, DIALOG_STYLE_LIST, "Choose Arena", string, "Select", "Close");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You are not at Race Arena.");
	}
	return 1;
}
CMD:paint(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid,3.0, -1863.7480,1069.3790,46.0859))
		{
			new string[256],string1[10],string2[10],string3[10],string4[10];
		    if(PlayerInfo[playerid][pWantedLevel] != 0) return SCM(playerid,COLOR_WHITE,"You can not enter, because you have wanted.");
			if(paintm[1] == 1) { format(string1,sizeof(string1),"rc_arena"); }
			if(paintm[1] == 2) { format(string1,sizeof(string1),"tennis"); }
			if(paintm[1] == 3) { format(string1,sizeof(string1),"farm"); }
			if(paintm[1] == 4) { format(string1,sizeof(string1),"fy_snow"); }
			if(paintm[1] == 5) { format(string1,sizeof(string1),"lspd"); }

			if(paintm[2] == 1) { format(string2,sizeof(string2),"rc_arena"); }
			if(paintm[2] == 2) { format(string2,sizeof(string2),"tennis"); }
			if(paintm[2] == 3) { format(string2,sizeof(string2),"farm"); }
			if(paintm[2] == 4) { format(string2,sizeof(string2),"fy_snow"); }
			if(paintm[2] == 5) { format(string2,sizeof(string2),"lspd"); }

			if(paintm[3] == 1) { format(string3,sizeof(string3),"rc_arena"); }
			if(paintm[3] == 2) { format(string3,sizeof(string3),"tennis"); }
			if(paintm[3] == 3) { format(string3,sizeof(string3),"farm"); }
			if(paintm[3] == 4) { format(string3,sizeof(string3),"fy_snow"); }
			if(paintm[3] == 5) { format(string3,sizeof(string3),"lspd"); }

			if(paintm[4] == 1) { format(string4,sizeof(string4),"rc_arena"); }
			if(paintm[4] == 2) { format(string4,sizeof(string4),"tennis"); }
			if(paintm[4] == 3) { format(string4,sizeof(string4),"farm"); }
			if(paintm[4] == 4) { format(string4,sizeof(string4),"fy_snow"); }
			if(paintm[4] == 5) { format(string4,sizeof(string4),"lspd"); }
		    format(string,sizeof(string),"Classic / Free For All [%d/20] [%s]\nClassic + Armour [%d/20] [%s]\nGun Game [%d/20] [%s]\nDeagle Only [%d/20] [%s]",paintp[1],string1,paintp[2],string2,paintp[3],string3,paintp[4],string4);
		    ShowPlayerDialog(playerid, DIALOG_PAINTBALL, DIALOG_STYLE_LIST, "Choose Arena", string, "Select", "Close");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You are not at Paintball Arena.");
	}
	return 1;
}
CMD:paintleave(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pPaintBallG] > 0)
	    {
	        new string [128],sendername[30];
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        SendClientMessage(playerid, COLOR_WHITE, "Leaving the paintball arena...");
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
			    {
			        format(string,sizeof(string),"%s has left the paintball arena.", sendername);
			        SendClientMessage(i, COLOR_YELLOW, string);
				}
			}
			SetPlayerHealthEx(playerid, 100.0);
			curatj[playerid] = 0;
			for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
			PlayerTextDrawHide(playerid, PaintBallText[playerid]);
			SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
			paintp[PlayerInfo[playerid][pPaintBallG]]--;
	        PlayerInfo[playerid][pPaintBallG] = 0;
	        PlayerInfo[playerid][pPaintBallKills] = 0;
	        PlayerInfo[playerid][pPaintBallVoted] = 0;
	        PlayerInfo[playerid][pPaintBallVoted2] = 0;
	        ResetPlayerWeaponsEx(playerid);
		    ResetPlayerWeapons(playerid);
		    SetPlayerArmourEx(playerid, 0);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerToTeamColor(playerid);
		    SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
		    SetPlayerPos(playerid, -1863.7480,1069.3790,46.0859);
		}
	}
	return 1;
}
CMD:leavepaint(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
	    return cmd_paintleave(playerid, params);
	}
	return 1;
}
CMD:raceleave(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pRaceG] == 0)
	    {
	        new string [128],sendername[30];
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        SendClientMessage(playerid, COLOR_WHITE, "Leaving the race arena...");
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
			    {
			        format(string,sizeof(string),"%s has left the race arena.", sendername);
			        SendClientMessage(i, COLOR_YELLOW, string);
				}
			}
			SetPlayerHealthEx(playerid, 100.0);
			curatj[playerid] = 0;
			for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
			PlayerTextDrawHide(playerid, PaintBallText[playerid]);
			racep[PlayerInfo[playerid][pRaceG]]--;
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid, -2110.6624,-444.3140,38.7344);
			RaceCP[playerid] = 0;
			DisablePlayerRaceCheckpoint(playerid);
			StopAudioStreamForPlayer(playerid);
			DisableRemoteVehicleCollisions(playerid, 0);
			if(racet[PlayerInfo[playerid][pRaceG]] > -1)
			{
				for(new cs; cs < 20; cs++)
				{
					if(rcarid[0][cs] == GetPlayerVehicleID(playerid))
					{
						DestroyVehicle(rcarid[0][cs]);
						rcarid[0][cs] = 0;
					}
				}
				foreach(new x : Player)
				{
					if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && x != playerid)
					{
						if(RacePos[x] > RacePos[playerid]) RacePos[x]--;
					}
				}
			}
			PlayerInfo[playerid][pRaceG] = -1;
			PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
			PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
			PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
			PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
			PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
			PlayerInfo[playerid][pRaceVoted] = 0;
		}
		if(PlayerInfo[playerid][pRaceG] == 1)
	    {
	        new string [128],sendername[30];
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        SendClientMessage(playerid, COLOR_WHITE, "Leaving the race arena...");
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
			    {
			        format(string,sizeof(string),"%s has left the race arena.", sendername);
			        SendClientMessage(i, COLOR_YELLOW, string);
				}
			}
			SetPlayerHealthEx(playerid, 100.0);
			curatj[playerid] = 0;
			for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
			PlayerTextDrawHide(playerid, PaintBallText[playerid]);
			racep[PlayerInfo[playerid][pRaceG]]--;
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid, -2110.6624,-444.3140,38.7344);
			RaceCP[playerid] = 0;
			DisablePlayerRaceCheckpoint(playerid);
			StopAudioStreamForPlayer(playerid);
			DisableRemoteVehicleCollisions(playerid, 0);
			if(racet[PlayerInfo[playerid][pRaceG]] > -1)
			{
				for(new cs; cs < 20; cs++)
				{
					if(rcarid[1][cs] == GetPlayerVehicleID(playerid))
					{
						DestroyVehicle(rcarid[1][cs]);
						rcarid[1][cs] = 0;
					}
				}
				foreach(new x : Player)
				{
					if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && x != playerid)
					{
						if(ARacePos[x] > ARacePos[playerid]) ARacePos[x]--;
					}
				}
			}
			PlayerInfo[playerid][pRaceG] = -1;
			PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
			PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
			PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
			PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
			PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
			PlayerInfo[playerid][pRaceVoted] = 0;
		}
	}
	return 1;
}
CMD:leaverace(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
	    return cmd_raceleave(playerid, params);
	}
	return 1;
}
CMD:voterace(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pRaceG] == -1) return SendClientMessage(playerid, COLOR_WHITE, "You are not at a race.");
	    if(racers[PlayerInfo[playerid][pRaceG]] <= 10) return SendClientMessage(playerid, COLOR_WHITE, "You can't use /voterace now.");
		if(PlayerInfo[playerid][pRaceVoted] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You have already used /voterace.");
		if(PlayerInfo[playerid][pRaceG] == 0)
	    {
		    ShowPlayerDialog(playerid, DIALOG_RACEVOTEMAP, DIALOG_STYLE_LIST, "Vote Race Map", "Auto LS-LV\nChiliad\nThe Forest", "Vote", "Exit");
		}
		if(PlayerInfo[playerid][pRaceG] == 1)
		{
			ShowPlayerDialog(playerid, DIALOG_RACEVOTEMAP2, DIALOG_STYLE_LIST, "Vote Race Map", "LS-LV\nSF-LS", "Vote", "Exit");
		}
	}
	return 1;
}
CMD:votemap(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
	    if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You can't use /votemap when round has started.");
		if(PlayerInfo[playerid][pPaintBallVoted] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You have already voted a map.");
		if(PlayerInfo[playerid][pPaintBallG] > 0)
	    {
		    ShowPlayerDialog(playerid, DIALOG_PAINTBALLMAP, DIALOG_STYLE_LIST, "Vote Paintball Map", "rc_arena\ntennis\nfarm\nfy_snow\nlspd", "Vote", "Exit");
		}
	}
	return 1;
}
CMD:votegun(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pPaintBallG] > 0)
		{
	    	if(PlayerInfo[playerid][pPaintBallG] == 3 || PlayerInfo[playerid][pPaintBallG] == 4) return SendClientMessage(playerid, COLOR_WHITE, "You can't use /votegun at this game type.");
	    	if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You can't use /votegun when round has started.");
	    	if(PlayerInfo[playerid][pPaintBallVoted2] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You have already voted a gun.");
	    	if(PlayerInfo[playerid][pPaintBallG] == 1 || PlayerInfo[playerid][pPaintBallG] == 2)
	    	{
	        	if(paintrs[PlayerInfo[playerid][pPaintBallG]] > 0)
	        	{
	        		ShowPlayerDialog(playerid, DIALOG_PAINTBALLWEAPON, DIALOG_STYLE_LIST, "Vote Paintball Weapon", "Deagle, M4, Grenade & Spray\nBaseball Bat\nChainsaw", "Vote", "Exit");
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "You can't use this command now.");
			}
		}
	}
	return 1;
}
CMD:bigears(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
	    new string[256],sendername[30];
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid,COLOR_LIGHTGREEN3, AdminOnly);
		if (!BigEar[playerid])
		{
			BigEar[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "{999999}Your ears have grown.");
			format(string, sizeof(string), "{FFFFCC}Admin %s has activated /bigears.",sendername);
			ABroadCast(COLOR_WHITE, string,6);
		}
		else if (BigEar[playerid])
		{
			(BigEar[playerid] = 0);
			SendClientMessage(playerid, COLOR_WHITE, "{999999}Your ears have shrank.");
			format(string, sizeof(string), "{FFFFCC}Admin %s has deactivated /bigears.",sendername);
			ABroadCast(COLOR_WHITE, string,6);
		}
	}
	return 1;
}
CMD:gotoa(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] > 0)
		{
	    	SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
	    	SendClientMessage(playerid, COLOR_WHITE, "Welcome to LV airport.");
	    	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1477.1122, 1713.9915, 10.8125);
				GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				OnPlayerGoto(playerid, 0, 0);
			}
			else
			{
				SetPlayerPosEx(playerid, 1477.1122,1713.9915,10.8125);
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:aaa2(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] > 0)
		{
		    SetPlayerVirtualWorld(playerid, 1337);
	    	SetPlayerInterior(playerid, 0);
	    	SendClientMessage(playerid, COLOR_WHITE, "Welcome to LV airport (in virtual world).");
	    	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1477.1122, 1713.9915, 10.8125);
				GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 1337);
				LinkVehicleToInterior(tmpcar, 0);
				OnPlayerGoto(playerid, 0, 1337);
			}
			else
			{
				SetPlayerPosEx(playerid, 1477.1122,1713.9915,10.8125);
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:aaa3(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] > 0)
		{
		    SetPlayerVirtualWorld(playerid, 1338);
	    	SetPlayerInterior(playerid, 0);
	    	SendClientMessage(playerid, COLOR_WHITE, "Welcome to LV airport (in virtual world 1338).");
	    	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1477.1122, 1713.9915, 10.8125);
				GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 1338);
				LinkVehicleToInterior(tmpcar, 0);
				OnPlayerGoto(playerid, 0, 1338);
			}
			else
			{
				SetPlayerPosEx(playerid, 1477.1122,1713.9915,10.8125);
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:toge(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
    	if (PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
		{
			new string[128], name[30];
			GetPlayerName(playerid, name, sizeof(name));
			if(toge[playerid] == 1)
			{
				toge[playerid] = 0;
				format(string, sizeof(string), "[v] %s enabled helper chat.", name);
				ABroadCast(COLOR_ADMIN, string, 1);
	     		HLChat(COLOR_ADMIN, string);
			}
			else
			{
				toge[playerid] = 1;
				format(string, sizeof(string), "[x] %s disabled helper chat.", name);
				ABroadCast(COLOR_ADMIN, string, 1);
	     		HLChat(COLOR_ADMIN, string);
			}
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You are not allowed to use this command.");
    }
    return 1;
}
CMD:e(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
		{
			if(toge[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You have disabled helper chat, use /toge to enable.");
			new string[250],result[250],sendername[25];
			if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /e [message]");
	   		GetPlayerName(playerid, sendername, sizeof(sendername));
	    	if(PlayerInfo[playerid][pAdmin] >= 1)
	    	{
	     		format(string, sizeof(string), "(%d) Admin %s: %s", PlayerInfo[playerid][pAdmin], sendername, result);
	    	}
	    	else if(PlayerInfo[playerid][pHelper] >= 1)
	    	{
	    	    format(string, sizeof(string), "(%d) Helper %s: %s", PlayerInfo[playerid][pHelper], sendername, result);
	    	}
	    	foreach(new i : Player)
	    	{
	    		if(PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pHelper] > 0)
	    		{
	    			if(toge[i] == 0) SendSplitMessage(i, COLOR_ADMIN, string);
	    		}
	    	}
			new var100[300],resulttt[300];
			mysql_real_escape_string(string, resulttt);
			mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','e')", PlayerInfo[playerid][pSQLID], resulttt);
			mysql_tquery(SQL,var100,"","");
        }
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:a(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] > 0)
		{
			new string[250],result[250],sendername[25];
			if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /a [message]");
	   		GetPlayerName(playerid, sendername, sizeof(sendername));
	    	if(PlayerInfo[playerid][pAdmin] > 0)
			{
				format(string, sizeof(string), "(%d) Admin %s: %s", PlayerInfo[playerid][pAdmin], sendername, result);
			}
			ABroadCast(COLOR_ADMCHAT, string,1);
			new var100[300],resulttt[300];
			mysql_real_escape_string(string, resulttt);
			mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','a')", PlayerInfo[playerid][pSQLID], resulttt);
			mysql_tquery(SQL,var100,"","");
        }
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:cw(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerInAnyVehicle(playerid))
    {
		new result[250],sendername[25],string[250];
		if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cw [message]");
		GetPlayerName(playerid, sendername, sizeof(sendername));
	    format(string, sizeof(string), "(Car Whisper) %s[%d]: %s", sendername, playerid, result);
        foreach(new i : Player)
        {
            if(IsPlayerConnected(i))
            {
                if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)))
                {
                    SendClientMessage(i,COLOR_YELLOW, string);
                }
            }
        }
		new var100[300],resulttt[300];
		mysql_real_escape_string(string, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','cw')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
        return 1;
    }
    else
	{
		SendClientMessage(playerid, COLOR_WHITE,"{FFF8C6}You need to be in vehicle.");
	}
    return 1;
}
CMD:skydive(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			GetPlayerPos(playerid, rx, ry, rz);
			if (IsPlayerConnected(playerid))
			{
				GivePlayerWeaponEx(playerid, 46, 0);
				SetPlayerPosEx(playerid,rx, ry, rz+1500);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		}
	}
	return 1;
}
CMD:live(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
		{
			new giveplayerid,count=0;
			if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /live [name/playerid]");
			foreach(new i : Player)
			{
				if(TalkingLive[i] != 0 && PlayerInfo[i][pMember] != 9)
				{
					count++;
				}
			}
			if(!IsANewsCar(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_WHITE, "You are not in a news van/news chopper.");
			if(!IsANewsCar(GetPlayerVehicleID(giveplayerid))) return SendClientMessage(playerid, COLOR_WHITE, "That player is not in a news van/news chopper.");
			if(PlayerInfo[playerid][pRank] >= 1 && PlayerInfo[playerid][pRank] <= 5 && count > 2) return SendClientMessage(playerid, COLOR_WHITE, "You can't invite more than 3 players to a live interview.");
			if(PlayerInfo[playerid][pRank] >= 6 && count > 3) return SendClientMessage(playerid, COLOR_WHITE, "You can't invite more than 4 players to a live interview.");
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_WHITE, "You can't invite yourself to a live interview.");
						if(TalkingLive[giveplayerid] != 0) return SendClientMessage(playerid, COLOR_WHITE, "This player is already in a live interview.");
						new sendername[25],giveplayer[25],string[128];
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "You invited %s to take a live interview.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s has invited you to take a live interview. (to accept the invitation, type '/accept live %d').", sendername,playerid);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						LiveOffer[giveplayerid] = playerid;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE,"This player is not near you.");
					    return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
			    return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "You are not a news reporter.");
		}
	}
	return 1;
}
CMD:endlive(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
		{
			new giveplayerid,string[128],sendername[30],giveplayer[30],count=0;
			if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /endlive [name/playerid]");
			if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_WHITE, "You can't stop live to yourself.");
			if(TalkingLive[giveplayerid] != 0)
		    {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				format(string,sizeof(string),"You have stopped %s live interview!",giveplayer);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string,sizeof(string),"%s has stopped the live interview!",sendername);
		        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
		        TogglePlayerControllable(giveplayerid, 1);
	            TalkingLive[giveplayerid] = 0;
				foreach(new i : Player)
				{
					if(TalkingLive[i] != 0 && PlayerInfo[i][pMember] != 9)
					{
						count++;
					}
				}
				if(count < 1)
				{
					TogglePlayerControllable(playerid, 1);
					TalkingLive[playerid] = 0;
				}
		    }
			else return SendClientMessage(playerid, COLOR_GREY, "This player don't have a live.");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "You are not a news reporter.");
		}
	}
	return 1;
}
CMD:ticket(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
        if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
        new giveplayerid,moneys,giveplayer[25],sendername[25],string[128];
		if(sscanf(params, "ui",giveplayerid,moneys)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /ticket [name/playerid] [money]");
		if(moneys < 1 || moneys > 100000) return SendClientMessage(playerid, COLOR_GREY, "Ticket money can't be below $1 or higher then $100,000.");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(giveplayerid != INVALID_PLAYER_ID)
		    {
		        if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
				    if(IsACop(playerid))
				    {
				    	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s writes up a ticket, and hands it to %s.", sendername, giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						format(string, sizeof(string), "You have issued %s a ticket costing $%d.", giveplayer, moneys);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "%s has issued you a ticket costing $%d - /accept ticket %d to pay the fine.", sendername, moneys, playerid);
						SendClientMessage(giveplayerid, COLOR_GENANNOUNCE, string);
						TicketOffer[giveplayerid] = playerid;
						TicketMoney[giveplayerid] = moneys;
						return 1;
					}
					else return SendClientMessage(playerid, COLOR_GREY, "You are not a cop.");
				}
				else return SendClientMessage(playerid, COLOR_GREY,"This player is not near you.");
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:activateroll(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
 	    if(PlayerInfo[playerid][pAdmin] >= 6)
		{
		    if(IsPlayerInAnyVehicle(playerid)) return 1;
		    new Float:A;
		    GetPlayerFacingAngle(playerid, A);
		    if(GiftBoxActiv < 1)
		    {
		        giftbox3DText = CreateStreamed3DTextLabel("Type /roll and win!",COLOR_NEWS,176.1805,-1859.4982,3.2474+0.25,8.0,0);
		    	SendClientMessage(playerid, COLOR_YELLOW, "Ai activat roll.");
		    	GiftBoxActiv = 1;
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i))
					{
						PlayerInfo[i][pGiftTime] = 0;
					}
				}
			}
			else
			{
            	DestroyDynamic3DTextLabel(giftbox3DText);
		    	SendClientMessage(playerid, COLOR_YELLOW, "Ai dezactivat roll.");
		    	GiftBoxActiv = 0;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
		}
	}
	return 1;
}
CMD:roll(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
 	{
 	    if(GiftBoxActiv > 0)
 	    {
 	        if(floatround(PlayerInfo[playerid][pConnectTime], floatround_round) <= 4) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need 3 played hours to use /getgift.");
 	        if(PlayerInfo[playerid][pGiftTime] > 0)
 	        {
 	            new string[128];
				if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(string,sizeof(string),"Poti folosi /roll peste %d ore",PlayerInfo[playerid][pGiftTime]);
					SendClientMessage(playerid, COLOR_NEWS, string);
					format(string,sizeof(string),"Timpul pe /sleep nu se pune, ore ramase: %d",PlayerInfo[playerid][pGiftTime]);
					SendClientMessage(playerid, COLOR_NEWS, string);
				}
				else
				{
					format(string,sizeof(string),"You will be able /roll in %d hours.",PlayerInfo[playerid][pGiftTime]);
					SendClientMessage(playerid, COLOR_RED, string);
					format(string,sizeof(string),"The time spent on /sleep doesn't count. hours need: %d",PlayerInfo[playerid][pGiftTime]);
					SendClientMessage(playerid, COLOR_RED, string);
				}
 	            return 1;
			}
     		if(IsPlayerInRangeOfPoint(playerid,5.0, 176.1805,-1859.4982,3.2474))
      		{
      			new randgift = random(100),string[256],sendername[30],randmoney,stringg[500],y,m,d,h,mi,s;
    			getdate(y,m,d);
    			gettime(h,mi,s);
      			GetPlayerName(playerid,sendername,sizeof(sendername));
				if(randgift >= 0 && randgift <= 30)
				{
					randmoney = 500000 + random(500000) + random(1000000);
					GivePlayerCash(playerid, randmoney);
					Update(playerid, pCashx);
					format(string, sizeof(string), "%s a castigat $%s",sendername,FormatNumber(randmoney));
					ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Roll", string, "OK", "");
					ProxDetector(30.0, playerid, string,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS);
					mysql_real_escape_string(string, stringg);
					mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`,`time`) VALUES ('%s','%d','%02d/%02d/%d %02d:%02d:%02d')", stringg, PlayerInfo[playerid][pSQLID],d,m,y,h,mi,s);
					mysql_tquery(SQL,string,"","");
				}
				if(randgift >= 31 && randgift <= 59)
				{
					new str[1400];
					PlayerInfo[playerid][pCarLic] = 1;
					PlayerInfo[playerid][pCarLicT] = 500;
					PlayerInfo[playerid][pFlyLic] = 1;
					PlayerInfo[playerid][pFlyLicT] = 500;
					PlayerInfo[playerid][pBoatLic] = 1;
					PlayerInfo[playerid][pBoatLicT] = 500;
					PlayerInfo[playerid][pGunLic] = 1;
					PlayerInfo[playerid][pGunLicT] = 500;
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `CarLic`='1',`CarLicT`='500',`FlyLic`='1',`FlyLicT`='500',`BoatLic`='1',`BoatLicT`='500',`GunLic`='1',`GunLicT`='500' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					format(string,sizeof(string),"%s a castigat licentele pentru 500 ore.",sendername);
					ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Roll", string, "OK", "");
					ProxDetector(30.0, playerid, string,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS);
					mysql_real_escape_string(string, stringg);
					mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`,`time`) VALUES ('%s','%d','%02d/%02d/%d %02d:%02d:%02d')", stringg, PlayerInfo[playerid][pSQLID],d,m,y,h,mi,s);
					mysql_tquery(SQL,string,"","");
				}
				if(randgift >= 60 && randgift <= 69)
				{
					if(PlayerInfo[playerid][pWarns] == 0)
					{
						randmoney = 500000 + random(500000) + random(1000000);
						GivePlayerCash(playerid, randmoney);
						Update(playerid, pCashx);
						format(string, sizeof(string), "%s a castigat $%s",sendername,FormatNumber(randmoney));
						ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Roll", string, "OK", "");
						ProxDetector(30.0, playerid, string,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS);
						mysql_real_escape_string(string, stringg);
						mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`,`time`) VALUES ('%s','%d','%02d/%02d/%d %02d:%02d:%02d')", stringg, PlayerInfo[playerid][pSQLID],d,m,y,h,mi,s);
						mysql_tquery(SQL,string,"","");
					}
					else
					{
						PlayerInfo[playerid][pWarns] = 0;
						Update(playerid, pWarnsx);
						format(string,sizeof(string),"%S a castigat 'sterge warnuri'.",sendername);
						ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Roll", string, "OK", "");
						ProxDetector(30.0, playerid, string,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS);
						mysql_real_escape_string(string, stringg);
						mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`,`time`) VALUES ('%s','%d','%02d/%02d/%d %02d:%02d:%02d')", stringg, PlayerInfo[playerid][pSQLID],d,m,y,h,mi,s);
						mysql_tquery(SQL,string,"","");
					}
				}
				if(randgift >= 70 && randgift <= 79)
				{
					if(PlayerInfo[playerid][pFpunish] == 0)
					{
						randmoney = 500000 + random(500000) + random(1000000);
						GivePlayerCash(playerid, randmoney);
						Update(playerid, pCashx);
						format(string, sizeof(string), "%s a castigat $%s.",sendername,FormatNumber(randmoney));
						ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Roll", string, "OK", "");
						ProxDetector(30.0, playerid, string,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS);
						mysql_real_escape_string(string, stringg);
						mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`,`time`) VALUES ('%s','%d','%02d/%02d/%d %02d:%02d:%02d')", stringg, PlayerInfo[playerid][pSQLID],d,m,y,h,mi,s);
						mysql_tquery(SQL,string,"","");
					}
					else
					{
						PlayerInfo[playerid][pFpunish] = 0;
						Update(playerid, pFpunishx);
						format(string,sizeof(string),"%s a castigat 'sterge faction punish'.",sendername);
						ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Roll", string, "OK", "");
						ProxDetector(30.0, playerid, string,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS);
						mysql_real_escape_string(string, stringg);
						mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`,`time`) VALUES ('%s','%d','%02d/%02d/%d %02d:%02d:%02d')", stringg, PlayerInfo[playerid][pSQLID],d,m,y,h,mi,s);
						mysql_tquery(SQL,string,"","");
					}
				}
				if(randgift >= 80 && randgift <= 89)
				{
					PlayerInfo[playerid][pHiddenColor] += 1;
					Update(playerid, pHiddenColorx);
					format(string,sizeof(string),"(( Roll: {FFFF00}%s {A9C4E4}a castigat o culoare {C2A2DA}hidden {A9C4E4}din roll! Felicitari! ))",sendername);
					SendClientMessageToAll(COLOR_GENANNOUNCE, string);
					ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Roll", "You won a hidden color from the Roll.", "OK", "");
					mysql_real_escape_string(string, stringg);
					mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`,`time`) VALUES ('%s','%d','%02d/%02d/%d %02d:%02d:%02d')", stringg, PlayerInfo[playerid][pSQLID],d,m,y,h,mi,s);
					mysql_tquery(SQL,string,"","");
				}
				if(randgift >= 90 && randgift <= 94)
				{
					new randpoints = 5 + random(31) + random(26),points,str2[128],count;
					PlayerInfo[playerid][pPremiumPoints] += randpoints;
					Update(playerid, pPremiumPointsx);
					format(string,sizeof(string),"(( Roll: {FFFF00}%s {A9C4E4}a castigat {FFFF00}%d puncte premium {A9C4E4}din Roll! Felicitari! ))",sendername,randpoints);
					SendClientMessageToAll(COLOR_GENANNOUNCE, string);
					format(string,sizeof(string),"You won %d premium points.",randpoints);
					ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Roll", string, "OK", "");
					mysql_real_escape_string(string, stringg);
					mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`,`time`,`puncte`) VALUES ('%s','%d','%02d/%02d/%d %02d:%02d:%02d','%d')", stringg, PlayerInfo[playerid][pSQLID],d,m,y,h,mi,s,randpoints);
					mysql_tquery(SQL,string,"","");
					format(str2, sizeof(str2), "SELECT * FROM `giftbox_logs`");
					new Cache: ab = mysql_query(SQL, str2);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						points = cache_get_field_content_int(i, "puncte");
						count += points;
					}
					cache_delete(ab);
					format(string, sizeof(string), "(( Roll: Au fost castigate %d puncte premium. ))",(count+randpoints));
					SendClientMessageToAll(COLOR_GENANNOUNCE, string);
				}
				if(randgift >= 95)
				{
					new total,str2[256],masina=1;
					for(new v; v < MAX_PERSONAL_VEHICLES; v++)
					{
						if(PlayerInfo[playerid][pCar][v] != -1) total++;
					}
					if(total+1 > PlayerInfo[playerid][pCarSlots])
					{
						if(PlayerInfo[playerid][pCarSlots] < MAX_PERSONAL_VEHICLES)
						{
							PlayerInfo[playerid][pCarSlots] += 1;
							mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `CarSlots`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarSlots],PlayerInfo[playerid][pNormalName]);
							mysql_tquery(SQL,str2,"","");
						}
						else
						{
							masina = 0;
						}
					}
					if(masina == 1)
					{
						new result[128],count;
						InsertCar(playerid,104,1);
						format(string,sizeof(string),"(( Roll: {FFFF00}%s {A9C4E4}a castigat o masina {FFFF00}Stretch {A9C4E4}! Felicitari! ))",sendername);
						SendClientMessageToAll(COLOR_GENANNOUNCE, string);
						ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Roll", "You won a Stretch.", "OK", "");
						mysql_real_escape_string(string, stringg);
						mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`,`time`) VALUES ('%s','%d','%02d/%02d/%d %02d:%02d:%02d')", stringg, PlayerInfo[playerid][pSQLID],d,m,y,h,mi,s);
						mysql_tquery(SQL,string,"","");
						format(str2, sizeof(str2), "SELECT * FROM `giftbox_logs`");
						new Cache: ab = mysql_query(SQL, str2);
						for(new i, j = cache_get_row_count (); i != j; ++i)
						{
							cache_get_field_content(i, "text", result);
							if(strfind(result, "Bullet", true) != -1) count++;
						}
						cache_delete(ab);
						format(string, sizeof(string), "(( Roll: Au fost castigate %d masini ))",(count+1));
						SendClientMessageToAll(COLOR_GENANNOUNCE, string);
					}
					else
					{
						randmoney = 500000 + random(500000) + random(1000000);
						GivePlayerCash(playerid, randmoney);
						Update(playerid, pCashx);
						format(string, sizeof(string), "%s a castigat $%s",sendername,FormatNumber(randmoney));
						ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Roll", string, "OK", "");
						ProxDetector(30.0, playerid, string,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS);
						mysql_real_escape_string(string, stringg);
						mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`,`time`) VALUES ('%s','%d','%02d/%02d/%d %02d:%02d:%02d')", stringg, PlayerInfo[playerid][pSQLID],d,m,y,h,mi,s);
						mysql_tquery(SQL,string,"","");
					}
				}
				PlayerInfo[playerid][pGiftTime] += 5;
				Update(playerid, pGiftTimex);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "Nu esti pe plaja.");
			    SendClientMessage(playerid, COLOR_YELLOW, "Mergi la checkpoint-ul de pe minimap pentru a ajunge pe plaja!");
			    SetPlayerCheckpoint(playerid,176.1805,-1859.4982,3.2474,5.0);
				CP[playerid] = 6868;
			    return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_RED, "Sistemul Roll nu este activat.");
	}
	return 1;
}
CMD:hud(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pLevel] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You don't have level 1.");
    if(IsPlayerConnected(playerid))
    {
        new string[256],stringhp[64],stringarm[64],stringfps[64];
        if(PlayerInfo[playerid][pHUD1] != 0)
        {
            if(PlayerInfo[playerid][pHUD1] == 1)
            {
        		format(stringhp,sizeof(stringhp),"{C0C0C0}Grey");
			}
			else if(PlayerInfo[playerid][pHUD1] == 2)
			{
			    format(stringhp,sizeof(stringhp),"{FF0000}Red");
			}
			else if(PlayerInfo[playerid][pHUD1] == 3)
			{
			    format(stringhp,sizeof(stringhp),"{00FF00}Green");
			}
			else if(PlayerInfo[playerid][pHUD1] == 4)
			{
			    format(stringhp,sizeof(stringhp),"{0000FF}Blue");
			}
			else if(PlayerInfo[playerid][pHUD1] == 5)
			{
			    format(stringhp,sizeof(stringhp),"{FFFF00}Yellow");
			}
		}
		else
		{
		    format(stringhp,sizeof(stringhp),"{FF0000}Disabled");
		}
		if(PlayerInfo[playerid][pHUD2] != 0)
        {
            if(PlayerInfo[playerid][pHUD2] == 1)
            {
        		format(stringarm,sizeof(stringarm),"{C0C0C0}Grey");
			}
			else if(PlayerInfo[playerid][pHUD2] == 2)
			{
			    format(stringarm,sizeof(stringarm),"{FF0000}Red");
			}
			else if(PlayerInfo[playerid][pHUD2] == 3)
			{
			    format(stringarm,sizeof(stringarm),"{00FF00}Green");
			}
			else if(PlayerInfo[playerid][pHUD2] == 4)
			{
			    format(stringarm,sizeof(stringarm),"{0000FF}Blue");
			}
			else if(PlayerInfo[playerid][pHUD2] == 5)
			{
			    format(stringarm,sizeof(stringarm),"{FFFF00}Yellow");
			}
		}
		else
		{
		    format(stringarm,sizeof(stringarm),"{FF0000}Disabled");
		}
		if(PlayerInfo[playerid][pHUD3] != 0)
		{
		    format(stringfps,sizeof(stringfps),"{FFFF00}Enabled");
		}
		else
		{
		    format(stringfps,sizeof(stringfps),"{FF0000}Disabled");
		}
        format(string,sizeof(string),"HP Text: %s\n{FFFFFF}Armour Text: %s\n{FFFFFF}Display FPS: %s\nSpecial HUD: %s",stringhp,stringarm,stringfps);
        ShowPlayerDialog(playerid,DIALOG_HUD,DIALOG_STYLE_LIST, "HUD Options", string, "Select","Close");
	}
	return 1;
}
CMD:help(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
        ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_LIST, "SERVER: Commands", "General\nChat\nGroups\nAnimations\nHouses\nJobs\nBusinesses\nHelpers\nVehicles\nBank\nRob", "Select","Exit");
	}
	return 1;
}
CMD:home(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pPhousekey] != 999)
	    {
			if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1)
			{
	            new h;
	            h = PlayerInfo[playerid][pPhousekey];
	            SetPlayerCheckpoint(playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 5.0);
				CP[playerid] = 43;
				SendClientMessage(playerid, COLOR_WHITE, "A checkpoint has been set to your house.");
			}
			else
			{
			    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Anulare Checkpoint", "Esti sigur ca vrei sa anulezi checkpoint-ul curent?", "Da", "Nu");

			}
		}
		else return SCM(playerid, COLOR_WHITE, "You don't have a house.");
	}
	return 1;
}
CMD:stopanim(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You can't use this command in a vehicle.");
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
        ClearAnimations(playerid);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
        PlayerHandsup[playerid] = 0;
    }
    return 1;
}
CMD:tazer(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(IsACop(playerid))
		{
			if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty.");
		    new sendername[30],string[128];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			tazer[playerid] = 1;
			GivePlayerWeaponEx(playerid, 23, 20);
			format(string, sizeof(string), "* %s equiped a taser.", sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    }
		else return SendClientMessage(playerid, COLOR_WHITE, "You are not a cop.");
	}
	return 1;
}
CMD:ta(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_tazer(playerid, params);
}
CMD:cuff(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(IsACop(playerid))
		{
			new giveplayerid,string[256],sendername[25],giveplayer[25];
			if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cuff [name/playerid]");
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(IsACop(giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "You can't cuff cops.");
			        if(PlayerHandsup[giveplayerid] < 1 && !IsPlayerInAnyVehicle(giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "You can't cuff a player who don't have hands up.");
				    if(PlayerCuffed2[giveplayerid] > 0) return SendClientMessage(playerid, COLOR_GREY, "This player is already cuffed.");
					if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_GREY, "You can't cuff yourself.");
						if(IsPlayerInAnyVehicle(giveplayerid))
						{
							TogglePlayerControllable(giveplayerid, 0);
						}
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* You were Cuffed by %s, till uncuff.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* You Cuffed %s, till uncuff.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* %s Hand Cuffs %s, so he wont go anywhere.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(giveplayerid, "~r~~h~Cuffed", 2500, 3);
						PlayerCuffed2[giveplayerid] = 1;
						SetPlayerAttachedObject(giveplayerid, 1, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
                        SetPlayerSpecialAction(giveplayerid,SPECIAL_ACTION_CUFFED);
					}
					else return SendClientMessage(playerid, COLOR_GREY, "This player is not near you.");
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You are not a cop.");
	}
	return 1;
}
CMD:uncuff(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(IsACop(playerid))
		{
			new giveplayerid,giveplayer[25],sendername[25],string[128];
			if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /uncuff [name/playerid]");
			{
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_GREY, "You can't uncuff yourself.");
							if(PlayerCuffed2[giveplayerid] == 1)
							{
								if(IsPlayerInAnyVehicle(giveplayerid))
								{
									TogglePlayerControllable(giveplayerid, 1);
								}
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* You were Uncuffed by %s.", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* You Uncuffed %s.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								GameTextForPlayer(giveplayerid, "~g~Uncuffed", 2500, 3);
					     		PlayerCuffed2[giveplayerid] = 0;
						    	SetPlayerSpecialAction(giveplayerid,SPECIAL_ACTION_NONE);
						    	RemovePlayerAttachedObject(giveplayerid,1);
							}
							else return SendClientMessage(playerid, COLOR_GREY, "This player is not cuffed.");
						}
						else return SendClientMessage(playerid, COLOR_GREY, "This player is not near you.");
					}
					else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "You are not a cop.");
	}
	return 1;
}
CMD:skill(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
        new string[MAX_STRING];
        SendClientMessage(playerid, COLOR_WHITE, "---- Skills: ----");
        if(PlayerInfo[playerid][pRobSkill] < 6)
        {
        	format(string,sizeof(string),"Rob skill: %d/6 (%d robs) | Needed for next skill level: %d",PlayerInfo[playerid][pRobSkill], PlayerInfo[playerid][pRobTimes], PlayerInfo[playerid][pRobRem]);
		}
		else if(PlayerInfo[playerid][pRobSkill] >= 6)
		{
        	format(string,sizeof(string),"Rob skill: %d/6 (%d robs)",PlayerInfo[playerid][pRobSkill], PlayerInfo[playerid][pRobTimes]);
		}
        SendClientMessage(playerid, COLOR_WHITE, string);
        if(PlayerInfo[playerid][pTruckSkill] < 6)
        {
        	format(string,sizeof(string),"Trucker skill: %d/6 (%d trailers delivered) | Needed for next skill level: %d",PlayerInfo[playerid][pTruckSkill], PlayerInfo[playerid][pTruckTimes], PlayerInfo[playerid][pTruckRem]);
		}
		else if(PlayerInfo[playerid][pTruckSkill] >= 6)
		{
        	format(string,sizeof(string),"Trucker skill: %d/6 (%d trailers delivered)",PlayerInfo[playerid][pTruckSkill], PlayerInfo[playerid][pTruckTimes]);
		}
        SendClientMessage(playerid, COLOR_WHITE, string);
		if(PlayerInfo[playerid][pFishSkill] < 6)
        {
        	format(string,sizeof(string),"Fisherman skill: %d/6 (%d fish caught) | Needed for next skill level: %d",PlayerInfo[playerid][pFishSkill], PlayerInfo[playerid][pFishTimes], PlayerInfo[playerid][pFishRem]);
		}
		else if(PlayerInfo[playerid][pFishSkill] >= 6)
		{
        	format(string,sizeof(string),"Fisherman skill: %d/6 (%d fish caught)",PlayerInfo[playerid][pFishSkill], PlayerInfo[playerid][pFishTimes]);
		}
        SendClientMessage(playerid, COLOR_WHITE, string);
		if(PlayerInfo[playerid][pGarbageSkill] < 6)
        {
        	format(string,sizeof(string),"Garbageman skill: %d/6 (%d garbage trucks delivered) | Needed for next skill level: %d",PlayerInfo[playerid][pGarbageSkill], PlayerInfo[playerid][pGarbageTimes], PlayerInfo[playerid][pGarbageRem]);
		}
		else if(PlayerInfo[playerid][pGarbageSkill] >= 6)
		{
        	format(string,sizeof(string),"Garbageman skill: %d/6 (%d shifts completed)",PlayerInfo[playerid][pGarbageSkill], PlayerInfo[playerid][pGarbageTimes]);
		}
        SendClientMessage(playerid, COLOR_WHITE, string);
        if(PlayerInfo[playerid][pFarmSkill] < 6)
        {
        	format(string,sizeof(string),"Farmer skill: %d/6 (%d bags of flour sold) | Needed for next skill level: %d",PlayerInfo[playerid][pFarmSkill], PlayerInfo[playerid][pFarmTimes], PlayerInfo[playerid][pFarmRem]);
		}
		else if(PlayerInfo[playerid][pFarmSkill] >= 6)
		{
        	format(string,sizeof(string),"Farmer skill: %d/6 (%d bags of flour sold)",PlayerInfo[playerid][pFarmSkill], PlayerInfo[playerid][pFarmTimes]);
		}
        SendClientMessage(playerid, COLOR_WHITE, string);
		if(PlayerInfo[playerid][pArmsSkill] < 6)
        {
        	format(string,sizeof(string),"Arms dealer skill: %d/6 (delivered materials %d times) | Needed for next skill level: %d",PlayerInfo[playerid][pArmsSkill], PlayerInfo[playerid][pArmsTimes], PlayerInfo[playerid][pArmsRem]);
		}
		else if(PlayerInfo[playerid][pArmsSkill] >= 6)
		{
        	format(string,sizeof(string),"Arms dealer skill: %d/6 (delivered materials %d times)",PlayerInfo[playerid][pArmsSkill], PlayerInfo[playerid][pArmsTimes]);
		}
        SendClientMessage(playerid, COLOR_WHITE, string);
		if(PlayerInfo[playerid][pPizzaSkill] < 6)
        {
        	format(string,sizeof(string),"Pizza Boy skill: %d/6 (delivered %d pizzas) | Needed for next skill level: %d",PlayerInfo[playerid][pPizzaSkill], PlayerInfo[playerid][pPizzaTimes], PlayerInfo[playerid][pPizzaRem]);
		}
		else if(PlayerInfo[playerid][pPizzaSkill] >= 6)
		{
        	format(string,sizeof(string),"Pizza Boy skill: %d/6 (delivered %d pizzas)",PlayerInfo[playerid][pPizzaSkill], PlayerInfo[playerid][pPizzaTimes]);
		}
        SendClientMessage(playerid, COLOR_WHITE, string);
		if(PlayerInfo[playerid][pBusSkill] < 6)
        {
        	format(string,sizeof(string),"Bus Driver skill: %d/6 (%d shifts completed) | Needed for next skill level: %d",PlayerInfo[playerid][pBusSkill], PlayerInfo[playerid][pBusTimes], PlayerInfo[playerid][pBusRem]);
		}
		else if(PlayerInfo[playerid][pBusSkill] >= 6)
		{
        	format(string,sizeof(string),"Bus Driver skill: %d/6 (%d shifts completed)",PlayerInfo[playerid][pBusSkill], PlayerInfo[playerid][pBusTimes]);
		}
        SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}
CMD:skills(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_skill(playerid, params);
}
CMD:news(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
		{
		    new string[256],sendername[25];
	        if(PlayerInfo[playerid][pMuted] == 1)
            {
				if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
				else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
				SendClientMessage(playerid, COLOR_DARKPINK, string);
				return 1;
		    }
		    new result[250];
		    if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /news [message]");
			if(IsANewsCar(GetPlayerVehicleID(playerid)))
			{
				if(strlen(result) > 14)
				{
					new h,mi,sec;
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "NR %s: %s", sendername, result);
					OOCNews(COLOR_ORANGE,string);
					gettime(h,mi,sec);
					if(mi >= 50 && mi <= 59)
					{
						if(PlayerInfo[playerid][pSession] == 0)
						{
							PlayerInfo[playerid][pSession] = 1;
							Update(playerid, pSessionx);
							new varxx[256];
							mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport3 = Raport3+1 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
							mysql_tquery(SQL,varxx,"","");
						}
						new varxx[256];
						mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport2 = Raport2+1 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,varxx,"","");
					}
					else
					{
						new varxx[256];
						mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport1 = Raport1+1 WHERE name = '%s'",PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,varxx,"","");
					}
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "News-ul trebuie sa contina minim 15 caractere.");
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "You are not in a news van/news chopper.");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You are not a news reporter.");
	}
	return 1;
}
CMD:startq(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pMember] == 9)
		{
			new count;
			foreach(new i : Player)
			{
				if(TalkingLive[i] != 0 && PlayerInfo[i][pMember] != 9)
				{
					count++;
				}
			}
			if(count == 0) return SendClientMessage(playerid, COLOR_WHITE, "Nu este un live in acest moment.");
			if(QuestionsOn == 1) return SendClientMessage(playerid, COLOR_WHITE, "Deja sunt activate intrebarile.");
			QuestionsOn = 1;
			SendClientMessage(playerid, COLOR_DARKPINK, "Acum jucatorii pot pune intrebari folosind /question.");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You are not a news reporter.");
	}
	return 1;
}
CMD:stopq(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pMember] == 9)
		{
			if(QuestionsOn == 0) return SendClientMessage(playerid, COLOR_WHITE, "Intrebarile nu sunt activate.");
			QuestionsOn = 0;
			SendClientMessage(playerid, COLOR_DARKPINK, "Ai dezactivat intrebarile.");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You are not a news reporter.");
	}
	return 1;
}
CMD:question(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new message[128],string[128],name[30];
		if(sscanf(params, "s[128]",message)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /question [message]");
		if(QuestionsOn == 0) return SS(playerid, COLOR_WHITE, "Intrebarile publice sunt dezactivate.", "Public questions are disabled.");
		if(strcmp(LiveQuestion[playerid], "NULL", true)) return SS(playerid, COLOR_WHITE, "Ai dat deja o intrebare. Poti pune o intrebare la 5 minute.", "You can use this command once per 5 minutes.");
		GetPlayerName(playerid, name, sizeof(name));
		format(string, sizeof(string),"Q from %s[%d]: %s", name, playerid, message);
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pMember] == 9)
			{
				SendClientMessage(i, COLOR_YELLOW, string);
			}
		}
		format(string, sizeof(string),"Intrebarea '%s' a fost trimisa reporterilor.",message);
		SendSplitMessage(playerid, COLOR_YELLOW, string);
		format(LiveQuestion[playerid], 128, message);
		TimerQuestion[playerid] = 300;
		new var100[300],resulttt[300],strr[300];
		format(strr, sizeof(strr),"Q from %s: %s", name, message);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','question')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
	}
	return 1;
}
CMD:aq(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		new id,string[256],name[30];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /aq [name/playerid]");
		if(IsPlayerConnected(id))
		{
			if(!strcmp(LiveQuestion[id], "NULL", true)) return SendClientMessage(playerid, COLOR_WHITE, "This player don't have a question.");
			GetPlayerName(id, name, sizeof(name));
			format(string, sizeof(string), "Intrebare de la %s: %s",name,LiveQuestion[id]);
			foreach(new i : Player)
			{
				SendSplitMessage(i, COLOR_LIGHTGREEN, string);
			}
			format(LiveQuestion[id], 128, "NULL");
			TimerQuestion[id] = -1;
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:howner(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 5 || PlayerInfo[playerid][pSupport] == 2)
		{
			new name[25],hid,string[256],playername[30],haveowner;
			if(sscanf(params, "s[25]d", name, hid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /howner [full name] [houseid]");
			format(string, sizeof(string), "SELECT * FROM `users` WHERE `name`='%s'", name);
			new Cache: abc = mysql_query(SQL, string);
			if(cache_get_row_count() == 0)
			{
				cache_delete(abc);
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid player id.");
				return 1;
			}
			cache_delete(abc);
			format(string, sizeof(string), "SELECT * FROM `houses` WHERE `ID`='%d'", hid);
			new Cache: abs = mysql_query(SQL, string);
			if(cache_get_row_count() == 0)
			{
				cache_delete(abs);
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid house id.");
				return 1;
			}
			cache_delete(abs);
			format(string, sizeof(string), "SELECT * FROM `users` WHERE `House`='%d'", hid);
			new Cache: abd = mysql_query(SQL, string);
			if(cache_get_row_count() > 0)
			{
				cache_get_field_content(0, "name", playername);
				haveowner = 1;
			}
			cache_delete(abd);
			HOwnerID[playerid] = hid;
			strmid(HOwnerName[playerid], name, 0, 25, 255);
			if(haveowner == 0) format(string, sizeof(string), "Esti sigur ca vrei sa-i dai lui %s casa %d?\n\nAbuzul de aceasta comanda duce la pierderea functiei!", name, hid);
			else format(string, sizeof(string), "Esti sigur ca vrei sa-i dai lui %s casa %d?\nAceasta casa este detinuta de %s, acesta va ramane fara aceasta.\n\nAbuzul de aceasta comanda duce la pierderea functiei!", name, hid, playername);
			ShowPlayerDialog(playerid, DIALOG_HOWNER, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:bowner(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 5 || PlayerInfo[playerid][pSupport] == 2)
		{
			new name[25],bid,string[256],playername[30],haveowner;
			if(sscanf(params, "s[25]d", name, bid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bowner [full name] [businessid]");
			format(string, sizeof(string), "SELECT * FROM `users` WHERE `name`='%s'", name);
			new Cache: abc = mysql_query(SQL, string);
			if(cache_get_row_count() == 0)
			{
				cache_delete(abc);
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid player id.");
				return 1;
			}
			cache_delete(abc);
			format(string, sizeof(string), "SELECT * FROM `bizz` WHERE `ID`='%d'", bid);
			new Cache: abs = mysql_query(SQL, string);
			if(cache_get_row_count() == 0)
			{
				cache_delete(abs);
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid business id.");
				return 1;
			}
			cache_delete(abs);
			format(string, sizeof(string), "SELECT * FROM `users` WHERE `Bizz`='%d'", bid);
			new Cache: abd = mysql_query(SQL, string);
			if(cache_get_row_count() > 0)
			{
				cache_get_field_content(0, "name", playername);
				haveowner = 1;
			}
			cache_delete(abd);
			HOwnerID[playerid] = bid;
			strmid(HOwnerName[playerid], name, 0, 25, 255);
			if(haveowner == 0) format(string, sizeof(string), "Esti sigur ca vrei sa-i dai lui %s biz-ul %d?\n\nAbuzul de aceasta comanda duce la pierderea functiei!", name, bid);
			else format(string, sizeof(string), "Esti sigur ca vrei sa-i dai lui %s biz-ul %d?\nAcest biz este detinut de %s, acesta va ramane fara acesta.\n\nAbuzul de aceasta comanda duce la pierderea functiei!", name, bid, playername);
			ShowPlayerDialog(playerid, DIALOG_BOWNER, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:vowner(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 5 || PlayerInfo[playerid][pSupport] == 2)
		{
			new name[30],vid,string[256],playername[30],carmodel;
			if(sscanf(params, "s[25]d", name, vid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vowner [full name] [carid]");
			format(string, sizeof(string), "SELECT * FROM `users` WHERE `name`='%s'", name);
			new Cache: abc = mysql_query(SQL, string);
			if(cache_get_row_count() == 0)
			{
				cache_delete(abc);
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid player id.");
				return 1;
			}
			cache_delete(abc);
			format(string, sizeof(string), "SELECT * FROM `cars` WHERE `ID`='%d'", vid);
			new Cache: abs = mysql_query(SQL, string);
			if(cache_get_row_count() == 0)
			{
				cache_delete(abs);
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid car id.");
				return 1;
			}
			else
			{
				carmodel = cache_get_field_content_int(0, "Model");
				cache_get_field_content(0, "Owner", playername);
			}
			cache_delete(abs);
			HOwnerID[playerid] = vid;
			strmid(HOwnerName[playerid], name, 0, 25, 255);
			format(string, sizeof(string), "Esti sigur ca vrei sa-i dai lui %s masina %s(carid:%d)?\nAceasta masina este detinuta de %s, acesta va ramane fara aceasta.\n\nAbuzul de aceasta comanda duce la pierderea functiei!", name, aVehicleNames[carmodel - 400], vid, playername);
			ShowPlayerDialog(playerid, DIALOG_VOWNER, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:vremove(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 5 || PlayerInfo[playerid][pSupport] == 2)
		{
			new vid,string[256],playername[30],carmodel;
			if(sscanf(params, "d", vid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vremove [carid]");
			format(string, sizeof(string), "SELECT * FROM `cars` WHERE `ID`='%d'", vid);
			new Cache: abs = mysql_query(SQL, string);
			if(cache_get_row_count() == 0)
			{
				cache_delete(abs);
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid car id.");
				return 1;
			}
			else
			{
				carmodel = cache_get_field_content_int(0, "Model");
				cache_get_field_content(0, "Owner", playername);
			}
			cache_delete(abs);
			HOwnerID[playerid] = vid;
			format(string, sizeof(string), "Esti sigur ca vrei sa-i stergi lui %s masina %s(carid:%d)?\n\nAbuzul de aceasta comanda duce la pierderea functiei!", playername, aVehicleNames[carmodel - 400], vid);
			ShowPlayerDialog(playerid, DIALOG_VREMOVE, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:halloweenskin(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new y, m, d;
	getdate(y, m, d);
	if(m == 10 && d == 30 || m == 10 && d == 31 || m == 11 && d == 1)
	{
		if(GetPlayerSkin(playerid) == 264) return SS(playerid, COLOR_LIGHTGREEN3, "Folosesti deja skin-ul de halloween.", "You are already using the halloween skin.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You can only use this command while not in a vehicle.");
		SetPlayerSkin(playerid, 264);
		SS(playerid, COLOR_LIGHTGREEN3, "Acum esti un clovn inspaimantator. Skin-ul se va schimba dupa respawn.", "You are now a scary clown. The skin will be reset upon respawn.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You can only use Halloween commands on 30.10, 31.10 and 01.11.");
	return 1;
}
CMD:halloweenhat(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new y, m, d;
	getdate(y, m, d);
	if(m == 10 && d == 30 || m == 10 && d == 31 || m == 11 && d == 1)
	{
		new hid, skin = GetPlayerSkin(playerid);
		if(sscanf(params, "d", hid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /halloweenhat <0/1/2>");
		if(hid == 0) { RemovePlayerAttachedObject(playerid, 0); Hatss[playerid] = 0; }
		else if(hid == 1) { SetPlayerAttachedObject(playerid, 0, 19528, 2, SkinCaps[skin][0], SkinCaps[skin][1], SkinCaps[skin][2], SkinCaps[skin][3],SkinCaps[skin][4], SkinCaps[skin][5], 1.000000, 1.000000, 1.000000); Hatss[playerid] = 1; }
		else if(hid == 2) { SetPlayerAttachedObject(playerid, 0, 19320, 2, SkinCaps[skin][0], SkinCaps[skin][1], SkinCaps[skin][2], SkinCaps[skin][3],SkinCaps[skin][4], SkinCaps[skin][5], 1.000000, 1.000000, 1.000000); Hatss[playerid] = 1; }
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You can only use Halloween commands on 30.10, 31.10 and 01.11.");
	return 1;
}
CMD:santahat(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new y, m, d;
	getdate(y, m, d);
	if(m == 12 && d > 9 || m == 1 && d < 11)
	{
		if(Hatss[playerid] == 1) { RemovePlayerAttachedObject(playerid, 0); Hatss[playerid] = 0; }
		else { SetPlayerAttachedObject(playerid, 0, 19065, 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4); Hatss[playerid] = 1; }
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Command disabled. It will be enabled in the period around Christmas.");
	return 1;
}
CMD:clothes(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 11)
		{
			if(PlayerInfo[playerid][pMember] == 0)
			{
				SetPlayerPos(playerid, 258.4893,-41.4008,1002.0234);
				SetPlayerInterior(playerid, 14);
				SetPlayerCameraPos(playerid, 255.9569,-42.8559,1004.0234);
				SetPlayerCameraLookAt(playerid, 258.4893,-41.4008,1002.0234);
				SetPlayerFacingAngle(playerid, 270.0);
				ForceClassSelection(playerid);
				TogglePlayerSpectating(playerid, 1);
				TogglePlayerSpectating(playerid, 0);
				ChangeClothes[playerid] = 1;
			}
			if(PlayerInfo[playerid][pMember] >= 1)
			{
				SetPlayerPos(playerid, 258.4893,-41.4008,1002.0234);
				SetPlayerInterior(playerid, 14);
				SetPlayerCameraPos(playerid, 255.9569,-42.8559,1004.0234);
				SetPlayerCameraLookAt(playerid, 258.4893,-41.4008,1002.0234);
				SetPlayerFacingAngle(playerid, 270.0);
				SetPlayerSkin(playerid, FactionSkin[PlayerInfo[playerid][pMember]][0]);
				ShowPlayerDialog(playerid, DIALOG_CLOTHES, DIALOG_STYLE_MSGBOX, "Skin selection", "Choose a skin", "Next", "Done");
				SkinSelect[playerid] = 1;
				SendClientMessage(playerid, COLOR_GENANNOUNCE, "-------------------------------------------------");
				SendClientMessage(playerid, COLOR_WHITE, "Please select your style of clothing from the selection below.");
			}
		}
	}
	return 1;
}
CMD:puthat(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
   	{
   	    if(PlayerInfo[playerid][pHats] != 0)
		{
		    if(Hatss[playerid] == 0)
		    {
		    	new skin,sendername[30],string[256];
		    	GetPlayerName(playerid,sendername,sizeof(sendername));
		    	skin = GetPlayerSkin(playerid);
		    	SetPlayerAttachedObject(playerid, 0, PlayerInfo[playerid][pHats], 2, SkinCaps[skin][0], SkinCaps[skin][1], SkinCaps[skin][2], SkinCaps[skin][3],SkinCaps[skin][4], SkinCaps[skin][5], 1.000000, 1.000000, 1.000000);
		    	Hatss[playerid] = 1;
		    	format(string, sizeof(string), "* %s puts on his hat.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have a hat.");
	}
	return 1;
}
CMD:removehat(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
   	{
   	    if(Hatss[playerid] == 1)
		{
		    new sendername[30],string[256];
		    GetPlayerName(playerid,sendername,sizeof(sendername));
		    RemovePlayerAttachedObject(playerid, 0);
		    Hatss[playerid] = 0;
		    format(string, sizeof(string), "* %s takes off his hat.", sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	return 1;
}
CMD:putglasses(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
   	{
   	    if(PlayerInfo[playerid][pGlasses] != 0)
		{
		    if(Sunglasses[playerid] == 0)
		    {
		    	new skin,sendername[30],string[256];
		    	GetPlayerName(playerid,sendername,sizeof(sendername));
		    	skin = GetPlayerSkin(playerid);
		    	SetPlayerHoldingObject(playerid, PlayerInfo[playerid][pGlasses], 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		    	Sunglasses[playerid] = 1;
		    	format(string, sizeof(string), "* %s puts on his sunglasses.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
	}
	return 1;
}
CMD:removeglasses(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
   	{
   	    if(Sunglasses[playerid] == 1)
		{
		    new sendername[30],string[256];
		    GetPlayerName(playerid,sendername,sizeof(sendername));
		    StopPlayerHoldingObject(playerid);
		    Sunglasses[playerid] = 0;
		    format(string, sizeof(string), "* %s takes off his sunglasses.", sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	return 1;
}
CMD:puthelmet(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
   	{
		new model = GetVehicleModel(GetPlayerVehicleID(playerid)), name[30], string[128];
		if(model == 448 || model == 461 || model == 462 || model == 463 || model == 468 || model == 471 || model == 481 || model == 509 || model == 510 || model == 521 || model == 522 || model == 523 || model == 581 || model == 586)
		{
			if(HaveHelmet[playerid] == 0)
			{
				GetPlayerName(playerid, name, sizeof(name));
				HaveHelmet[playerid] = 1;
				SetPlayerAttachedObject(playerid, 5, 18645, 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1);
				format(string, sizeof(string), "* %s puts on his helmet.", name);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "You have already an helmet.");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You can only use that while on a bike.");
	}
	return 1;
}
CMD:ph(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    return cmd_puthelmet(playerid, params);
}
CMD:removehelmet(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
   	{
		new name[30], string[128];
		if(HaveHelmet[playerid] == 1)
		{
			GetPlayerName(playerid, name, sizeof(name));
			HaveHelmet[playerid] = 0;
			RemovePlayerAttachedObject(playerid, 5);
			format(string, sizeof(string), "* %s takes off his helmet.", name);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You can only use this command if you have your helmet on.");
	}
	return 1;
}
CMD:rh(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    return cmd_removehelmet(playerid, params);
}
CMD:buyglasses(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 11)
		{
			if(IsPlayerConnected(playerid))
			{
				if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid,COLOR_LIGHTRED,"You don't have $5000.");
				new sunglasses[31];
				sunglasses[0] = 19006;
				sunglasses[1] = 19007;
				sunglasses[2] = 19008;
				sunglasses[3] = 19009;
				sunglasses[4] = 19010;
				sunglasses[5] = 19011;
				sunglasses[6] = 19012;
				sunglasses[7] = 19013;
				sunglasses[8] = 19014;
				sunglasses[9] = 19015;
				sunglasses[10] = 19016;
				sunglasses[11] = 19017;
				sunglasses[12] = 19018;
				sunglasses[13] = 19019;
				sunglasses[14] = 19020;
				sunglasses[15] = 19021;
				sunglasses[16] = 19022;
				sunglasses[17] = 19023;
				sunglasses[18] = 19024;
				sunglasses[19] = 19025;
				sunglasses[20] = 19026;
				sunglasses[21] = 19027;
				sunglasses[22] = 19028;
				sunglasses[23] = 19029;
				sunglasses[24] = 19030;
				sunglasses[25] = 19031;
				sunglasses[26] = 19032;
				sunglasses[27] = 19033;
				sunglasses[28] = 19034;
				sunglasses[29] = 19035;
				ShowModelSelectionMenuEx(playerid, sunglasses, 31, "Select glasses", 1, 14.0, 0.0, -55.0);
			}
		}
	}
	return 1;
}
CMD:buyhat(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 11)
		{
			if(IsPlayerConnected(playerid))
			{
				if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid,COLOR_LIGHTRED,"You don't have $5000.");
				new hats[18];
				hats[0] = 18926;
				hats[1] = 18927;
				hats[2] = 18928;
				hats[3] = 18929;
				hats[4] = 18930;
				hats[5] = 18931;
				hats[6] = 18932;
				hats[7] = 18933;
				hats[8] = 18934;
				hats[9] = 18935;
				hats[10] = 18944;
				hats[11] = 18945;
				hats[12] = 18946;
				hats[13] = 18947;
				hats[14] = 18948;
				hats[15] = 18949;
				hats[16] = 18950;
				hats[17] = 18951;
				ShowModelSelectionMenuEx(playerid, hats, 18, "Select hat", 2, 90.0, 0.0, 90.0);
			}
		}
	}
	return 1;
}
CMD:frisk(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
        new giveplayerid,sendername[25],giveplayer[25],string[128];
	    if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /frisk [name/playerid]");
		if(IsACop(playerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
				    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_GREY, "You can't frisk yourself.");
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
				    new text1[20], text2[20], text4[20];
				    if(PlayerInfo[giveplayerid][pDrugs] > 0) { text1 = "| Drugs."; } else { text1 = "| Empty Pocket."; }
				    if(PlayerInfo[giveplayerid][pMats] > 0) { text2 = "| Materials."; } else { text2 = "| Empty Pocket."; }
				    if(PlayerInfo[giveplayerid][pPhoneBook] > 0) { text4 = "| Phone Book."; } else { text4 = "| Empty Pocket."; }
				    format(string, sizeof(string), "** Items with {B8DBFF}%s{FFFFFF} **", giveplayer);
			        SendClientMessage(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "%s, Grams:%d", text1,PlayerInfo[giveplayerid][pDrugs]);
					SendClientMessage(playerid, 0xFFFFFFAA, string);
					format(string, sizeof(string), "%s, Materials:%d", text2,PlayerInfo[giveplayerid][pMats]);
					SendClientMessage(playerid, 0xFFFFFFAA, string);
					format(string, sizeof(string), "%s.", text4);
					SendClientMessage(playerid, 0xFFFFFFAA, string);
                    new Player_Weapons[13];
                    new Player_Ammos[13];
                    new i;
                    for(i = 1;i <= 12;i++)
                    {
                        GetPlayerWeaponData(giveplayerid,i,Player_Weapons[i],Player_Ammos[i]);
                        if(Player_Weapons[i] != 0)
                        {
	                        new weaponName[256];
	                        GetWeaponName(Player_Weapons[i],weaponName,255);
	                        format(string,255,"{B8DBFF}* %s, Gun:{FFFFFF} %s{B8DBFF}, Ammo:{FFFFFF} %d",giveplayer,weaponName,Player_Ammos[i]);
	                        SendClientMessage(playerid,0xFFFFFFAA,string);
                        }
                    }
					format(string, sizeof(string), "* %s has frisked %s for any illegal items.", sendername ,giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else return SendClientMessage(playerid, COLOR_GREY, "This player is not near you.");
			}
            else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
		}
        else return SendClientMessage(playerid, COLOR_GREY, "You are not a cop.");
	}
    return 1;
}
CMD:f(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
		new string[300];
	    if(PlayerInfo[playerid][pMuted] == 1)
        {
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
			else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
			return 1;
		}
		new result[250],sendername[25];
    	if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /f [message]");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new member = PlayerInfo[playerid][pMember];
		new leader = PlayerInfo[playerid][pLeader];
		if(member == 4 || leader == 4 || member == 5 || leader == 5 || member == 6 || leader == 6 || member == 9 || leader == 9 || member == 10 || leader == 10 || member == 11 || leader == 11 || member == 12 || leader == 12 || member == 13 || leader == 13 || member == 15 || leader == 15 || member == 17 || leader == 17)
		{
			if(gFam[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You have family chat disabled, use /togf to enable.");
			new rtext[64];
			if(PlayerInfo[playerid][pRank] == 1) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1]);
			else if(PlayerInfo[playerid][pRank] == 2) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2]);
			else if(PlayerInfo[playerid][pRank] == 3) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3]);
			else if(PlayerInfo[playerid][pRank] == 4) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4]);
			else if(PlayerInfo[playerid][pRank] == 5) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5]);
			else if(PlayerInfo[playerid][pRank] == 6) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6]);
			else if(PlayerInfo[playerid][pRank] == 7) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7]);
			format(string, sizeof(string),"# %s %s: %s",rtext,sendername,result);
			if(PlayerInfo[playerid][pRank] >= 1 && PlayerInfo[playerid][pRank] <= 5)
			{
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_MEMBER, string);
			}
			else if(PlayerInfo[playerid][pRank] >= 6)
			{
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LEADER, string);
			}
			new var100[300],resulttt[300];
			mysql_real_escape_string(string, resulttt);
			mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','f')", PlayerInfo[playerid][pSQLID], resulttt);
			mysql_tquery(SQL,var100,"","");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Your group data is invalid.");
	}
	return 1;
}
CMD:fspec(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id,string[128],name[30];
			if(sscanf(params, "d",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fspec [faction id]");
			FactionSpec[playerid] = id;
			GetPlayerName(playerid, name, sizeof(name));
			format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s is now spectating faction %d.", name, id);
			ABroadCast(COLOR_WHITE, string, 1);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin.");
	}
	return 1;
}
CMD:fspecid(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new id,string[128],name[30];
			if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fspecid [playerid/name]");
			FactionSpec[playerid] = PlayerInfo[id][pMember];
			GetPlayerName(playerid, name, sizeof(name));
			format(string, sizeof(string), "({FF6347}AdminStaff{FFFFFF}) %s is now spectating faction %d.", name, PlayerInfo[id][pMember]);
			ABroadCast(COLOR_WHITE, string, 1);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin.");
	}
	return 1;
}
CMD:fchat(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			new message[128],name[30], string[256];
			if(sscanf(params, "s[128]",message)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fchat [message]");
			if(FactionSpec[playerid] > 0)
			{
				GetPlayerName(playerid, name, sizeof(name));
				if(FactionSpec[playerid] > 3 && FactionSpec[playerid] < 7 || FactionSpec[playerid] > 8 && FactionSpec[playerid] < 14)
				{
					format(string, sizeof(string),"# Admin %s: %s", name, message);
					SendFamilyMessage(FactionSpec[playerid], COLOR_LEADER, string);
				}
				else if(FactionSpec[playerid] > 0 && FactionSpec[playerid] < 4 || FactionSpec[playerid] == 8 || FactionSpec[playerid] == 14)
				{
					format(string, sizeof(string),"# Admin %s: %s", name, message);
					SendFamilyMessage(FactionSpec[playerid], COLOR_RADIOCHAT, string);
				}
				new var100[300],resulttt[300],strr[300];
				format(strr, sizeof(strr),"# Admin %s: %s", name, message);
				mysql_real_escape_string(strr, resulttt);
				mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','fchat')", PlayerInfo[playerid][pSQLID], resulttt);
				mysql_tquery(SQL,var100,"","");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "You are not spectating any faction.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin.");
	}
	return 1;
}
CMD:bat(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bat [1-2]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "CRACK", "Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "CRACK", "Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bat [1-2]");
	}
	return 1;
}
CMD:signal(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /signal [1-2]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "POLICE", "CopTraf_Come", 4.0, 0, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "POLICE", "CopTraf_Stop", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /signal [1-2]");
	}
	return 1;
}
CMD:nobreath(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /nobreath [1-3]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "PED", "IDLE_tired", 4.0, 1, 0, 0, 0, 0);
     	case 3: ApplyAnimation(playerid, "FAT", "IDLE_tired", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /nobreath [1-3]");
	}
	return 1;
}
CMD:fallover(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fallover [1-3]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0);
    	case 2: ApplyAnimation(playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 0);
     	case 3: ApplyAnimation(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fallover [1-3]");
	}
	return 1;
}
CMD:pedmove(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /pedmove [1-26]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "PED", "JOG_femaleA", 4.0, 1, 1, 1, 1, 1);
    	case 2: ApplyAnimation(playerid, "PED", "JOG_maleA", 4.0, 1, 1, 1, 1, 1);
	    case 3: ApplyAnimation(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1);
	    case 4: ApplyAnimation(playerid, "PED", "run_fat", 4.0, 1, 1, 1, 1, 1);
	    case 5: ApplyAnimation(playerid, "PED", "run_fatold", 4.0, 1, 1, 1, 1, 1);
	    case 6: ApplyAnimation(playerid, "PED", "run_old", 4.0, 1, 1, 1, 1, 1);
	    case 7: ApplyAnimation(playerid, "PED", "Run_Wuzi", 4.0, 1, 1, 1, 1, 1);
	    case 8: ApplyAnimation(playerid, "PED", "swat_run", 4.0, 1, 1, 1, 1, 1);
     	case 9: ApplyAnimation(playerid, "PED", "WALK_fat", 4.0, 1, 1, 1, 1, 1);
      	case 10: ApplyAnimation(playerid, "PED", "WALK_fatold", 4.0, 1, 1, 1, 1, 1);
       	case 11: ApplyAnimation(playerid, "PED", "WALK_gang1", 4.0, 1, 1, 1, 1, 1);
	    case 12: ApplyAnimation(playerid, "PED", "WALK_gang2", 4.0, 1, 1, 1, 1, 1);
	    case 13: ApplyAnimation(playerid, "PED", "WALK_old", 4.0, 1, 1, 1, 1, 1);
	    case 14: ApplyAnimation(playerid, "PED", "WALK_shuffle", 4.0, 1, 1, 1, 1, 1);
	    case 15: ApplyAnimation(playerid, "PED", "woman_run", 4.0, 1, 1, 1, 1, 1);
	    case 16: ApplyAnimation(playerid, "PED", "WOMAN_runbusy", 4.0, 1, 1, 1, 1, 1);
	    case 17: ApplyAnimation(playerid, "PED", "WOMAN_runfatold", 4.0, 1, 1, 1, 1, 1);
	    case 18: ApplyAnimation(playerid, "PED", "woman_runpanic", 4.0, 1, 1, 1, 1, 1);
	    case 19: ApplyAnimation(playerid, "PED", "WOMAN_runsexy", 4.0, 1, 1, 1, 1, 1);
	    case 20: ApplyAnimation(playerid, "PED", "WOMAN_walkbusy", 4.0, 1, 1, 1, 1, 1);
	    case 21: ApplyAnimation(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1);
	    case 22: ApplyAnimation(playerid, "PED", "WOMAN_walknorm", 4.0, 1, 1, 1, 1, 1);
	    case 23: ApplyAnimation(playerid, "PED", "WOMAN_walkold", 4.0, 1, 1, 1, 1, 1);
     	case 24: ApplyAnimation(playerid, "PED", "WOMAN_walkpro", 4.0, 1, 1, 1, 1, 1);
  		case 25: ApplyAnimation(playerid, "PED", "WOMAN_walksexy", 4.0, 1, 1, 1, 1, 1);
  		case 26: ApplyAnimation(playerid, "PED", "WOMAN_walkshop", 4.0, 1, 1, 1, 1, 1);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /pedmove [1-26]");
	}
	return 1;
}
CMD:getjiggy(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /getjiggy [1-9]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "DANCING", "DAN_Down_A", 4.0, 1, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "DANCING", "DAN_Left_A", 4.0, 1, 0, 0, 0, 0);
     	case 3: ApplyAnimation(playerid, "DANCING", "DAN_Loop_A", 4.0, 1, 0, 0, 0, 0);
      	case 4: ApplyAnimation(playerid, "DANCING", "DAN_Right_A", 4.0, 1, 0, 0, 0, 0);
       	case 5: ApplyAnimation(playerid, "DANCING", "DAN_Up_A", 4.0, 1, 0, 0, 0, 0);
        case 6: ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.0, 1, 0, 0, 0, 0);
       	case 7: ApplyAnimation(playerid, "DANCING", "dnce_M_b", 4.0, 1, 0, 0, 0, 0);
        case 8: ApplyAnimation(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0);
        case 9: ApplyAnimation(playerid, "DANCING", "dnce_M_d", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /getjiggy [1-9]");
	}
	return 1;
}
CMD:stripclub(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /stripclub [1-2]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "STRIP", "PLY_CASH", 4.0, 0, 0, 0, 0, 0);
       	case 2: ApplyAnimation(playerid, "STRIP", "PUN_CASH", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /stripclub [1-2]");
	}
	return 1;
}
CMD:dj(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dj [1-4]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "SCRATCHING", "scdldlp", 4.0, 1, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "SCRATCHING", "scdlulp", 4.0, 1, 0, 0, 0, 0);
     	case 3: ApplyAnimation(playerid, "SCRATCHING", "scdrdlp", 4.0, 1, 0, 0, 0, 0);
     	case 4: ApplyAnimation(playerid, "SCRATCHING", "scdrulp", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dj [1-4]");
	}
	return 1;
}
CMD:reload(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /reload - 1 (Desert Eagle), 2 (SPAS12), 3 (UZI/AK-47/M4A1)");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0);
 		case 3: ApplyAnimation(playerid, "UZI", "UZI_reload", 4.0,0,0,0,0,0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /reload - 1 (Desert Eagle), 2 (SPAS12), 3 (UZI/AK-47/M4A1)");
	}
	return 1;
}
CMD:tag(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /tag [1-2]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 0, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /tag [1-2]");
	}
	return 1;
}
CMD:cheer(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cheer [1-8]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "ON_LOOKERS", "shout_01", 4.0, 0, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "ON_LOOKERS", "shout_02", 4.0, 0, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "ON_LOOKERS", "shout_in", 4.0, 0, 0, 0, 0, 0);
  		case 4: ApplyAnimation(playerid, "RIOT", "RIOT_ANGRY_B", 4.0, 1, 0, 0, 0, 0);
  		case 5: ApplyAnimation(playerid, "RIOT", "RIOT_CHANT", 4.0, 0, 0, 0, 0, 0);
  		case 6: ApplyAnimation(playerid, "RIOT", "RIOT_shout", 4.0, 0, 0, 0, 0, 0);
  		case 7: ApplyAnimation(playerid, "STRIP", "PUN_HOLLER", 4.0, 0, 0, 0, 0, 0);
  		case 8: ApplyAnimation(playerid, "OTB", "wtchrace_win", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cheer [1-8]");
	}
	return 1;
}
CMD:bar(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bar [1-5]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "BAR", "Barcustom_get", 4.0, 0, 1, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BAR", "Barserve_bottle", 4.0, 0, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "BAR", "Barserve_give", 4.0, 0, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 0, 0, 0, 0);
	    case 5: ApplyAnimation(playerid, "BAR", "BARman_idle", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bar [1-5]");
	}
	return 1;
}
CMD:showoff(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "Freeweights", "gym_free_celebrate", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:goggles(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:cry(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "GRAVEYARD", "mrnF_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:throw(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:robbed(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "SHOP", "SHP_Rob_GiveCash", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:hurt(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:handwash(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:stop(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "PED", "endchat_01", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:robman(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:finger(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:blob(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "CRACK", "crckidle1", 4.0, 0, 1, 1, 1, -1);
	return 1;
}
CMD:opendoor(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "AIRPORT", "thrw_barl_thrw", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:wavedown(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "BD_FIRE", "BD_Panic_01", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:cpr(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:dive(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "DODGE", "Crush_Jump", 4.0, 0, 1, 1, 1, 0);
	return 1;
}
CMD:box(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	LoopingAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
	return 1;
}
CMD:handsup(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(PlayerInfo[playerid][pPaintBallG] > 0) return SCM(playerid,COLOR_WHITE,"{FFF8C6}Command is not currently accessible.");
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
		PlayerHandsup[playerid] = 1;
	}
	return 1;
}
CMD:laugh(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:lookout(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    OnePlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:crossarms(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    new anim;
   	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /crossarms [1-4]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
  		case 2: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "GRAVEYARD", "mrnM_loop", 4.0, 1, 0, 0, 0, 0);
  		case 4: ApplyAnimation(playerid, "GRAVEYARD", "prst_loopa", 4.0, 1, 0, 0, 0, 0);
  		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /crossarms [1-4]");
	}
	return 1;
}
CMD:lay(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /lay [1-3]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
  		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /lay [1-3]");
	}
	return 1;
}
CMD:hide(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:vomit(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:wave(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	new anim;
	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /wave [1-3]");
    switch(anim)
	{
		case 1: LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "KISSING", "gfwave2", 4.0, 1, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid, "PED", "endchat_03", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /wave [1-3]");
	}
	return 1;
}
CMD:salute(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:slapass(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    OnePlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:deal(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    new anim;
   	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /deal [1-2]");
	switch(anim) {

  		case 1: ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
  		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /deal [1-2]");
 	}
	return 1;
}
CMD:crack(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:wank(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid,"PAULNMAC", "wank_loop", 1.800001, 1, 0, 0, 1, 600);
	return 1;
}
CMD:gro(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:rap(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
	new anim;
   	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /rap [1-3]");
	switch(anim)
	{

  		case 1: ApplyAnimation(playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "RAPPING", "RAP_B_Loop", 4.0, 1, 0, 0, 0, 0);
     	case 3: ApplyAnimation(playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 0, 0, 0, 0);
      	default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /rap [1-3]");
   	}
    return 1;
}
CMD:pee(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	if(PlayerInfo[playerid][pPaintBallG] > 0) return SCM(playerid,COLOR_WHITE,"{FFF8C6}Command is not currently accessible.");
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
	}
	return 1;
}
CMD:crabs(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"MISC","Scratchballs_01", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:sit(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	new anim;
   	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sit [1-6]");
	switch(anim) {

  		case 1: ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
  		case 5: ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
  		case 6: ApplyAnimation(playerid, "PED", "SEAT_down", 4.0, 0, 1, 1, 1, 0);
  		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sit [1-6]");
 	}
	return 1;
}
CMD:siteat(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	new anim;
   	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /siteat [1-2]");
	switch(anim) {

  		case 1: ApplyAnimation(playerid, "FOOD", "FF_Sit_Eat3", 4.0, 1, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "FOOD", "FF_Sit_Eat2", 4.0, 1, 0, 0, 0, 0);
  		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /siteat [1-2]");
 	}
	return 1;
}
CMD:drunk(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"PED","WALK_DRUNK",4.0,1,1,1,1,0);
	return 1;
}
CMD:bomb(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
   	ClearAnimations(playerid);
   	OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:chat(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    new anim;
	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /chat [1-7]");
	switch(anim) {

  		case 1: ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.0, 0, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkB", 4.0, 0, 0, 0, 0, 0);
  		case 4: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.0, 0, 0, 0, 0, 0);
  		case 5: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkF", 4.0, 0, 0, 0, 0, 0);
  		case 6: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkG", 4.0, 0, 0, 0, 0, 0);
	    case 7: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkH", 4.0, 0, 0, 0, 0, 0);
  		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /chat [1-7]");
 	}
	return 1;
}
CMD:taichi(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
	return 1;
}
CMD:dance(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
	if(PlayerInfo[playerid][pPaintBallG] > 0) return SCM(playerid,COLOR_WHITE,"Command is not currently accessible.");
	{
		new anim;
		if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dance [1-4]");
		switch(anim)
		{
			case 1: SetPlayerSpecialAction(playerid, 5);
			case 2: SetPlayerSpecialAction(playerid, 6);
			case 3: SetPlayerSpecialAction(playerid, 7);
			case 4: SetPlayerSpecialAction(playerid, 8);
			default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dance [1-4]");
		}
	}
	return 1;
}
CMD:smoke(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	if(PlayerInfo[playerid][pPaintBallG] > 0) return SCM(playerid,COLOR_WHITE,"{FFF8C6}Command is not currently accessible.");
	{
		new anim;
		if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /smoke [1-2]");
		switch(anim)
		{
		    case 1: ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.0, 0, 0, 0, 0, 0);
		    case 2: ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
			default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /smoke [1-2]");
		}
	}
	return 1;
}
CMD:gesture(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	if(PlayerInfo[playerid][pPaintBallG] > 0) return SCM(playerid,COLOR_WHITE,"{FFF8C6}Command is not currently accessible.");
	{
		new anim;
		if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gesture [1-15]");
		switch(anim) {

			case 1: ApplyAnimation(playerid, "GHANDS", "gsign1", 4.0, 0, 0, 0, 0, 0);
			case 2: ApplyAnimation(playerid, "GHANDS", "gsign1LH", 4.0, 0, 0, 0, 0, 0);
			case 3: ApplyAnimation(playerid, "GHANDS", "gsign2", 4.0, 0, 0, 0, 0, 0);
			case 4: ApplyAnimation(playerid, "GHANDS", "gsign2LH", 4.0, 0, 0, 0, 0, 0);
			case 5: ApplyAnimation(playerid, "GHANDS", "gsign3", 4.0, 0, 0, 0, 0, 0);
			case 6: ApplyAnimation(playerid, "GHANDS", "gsign3LH", 4.0, 0, 0, 0, 0, 0);
			case 7: ApplyAnimation(playerid, "GHANDS", "gsign4", 4.0, 0, 0, 0, 0, 0);
			case 8: ApplyAnimation(playerid, "GHANDS", "gsign4LH", 4.0, 0, 0, 0, 0, 0);
			case 9: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0);
			case 10: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0);
			case 11: ApplyAnimation(playerid, "GHANDS", "gsign5LH", 4.0, 0, 0, 0, 0, 0);
			case 12: ApplyAnimation(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0);
			case 13: ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0);
			case 14: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkD", 4.0, 0, 0, 0, 0, 0);
			case 15: ApplyAnimation(playerid, "GANGS", "smkcig_prtl", 4.0, 0, 0, 0, 0, 0);
			default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gesture [1-15]");
		}
	}
	return 1;
}
CMD:bbalance(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey], string[128];
		if (bouse == 255) return SendClientMessage(playerid, COLOR_WHITE, "You don't own a business.");
		format(string, sizeof(string), "Business Vault Balance: $%d", BizzInfo[bouse][bTill]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}
CMD:bizwithdraw(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255) return SendClientMessage(playerid, COLOR_WHITE, "You don't own a business.");
		new cashdeposit,string[64];
		if(sscanf(params, "d",cashdeposit)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bwithdraw [money]");
		if(cashdeposit < 1) return 1;
		if (cashdeposit > BizzInfo[bouse][bTill]) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money in your vauld.");
		if (!PlayerToPoint(5.0, playerid,BizzInfo[bouse][bEntranceX],BizzInfo[bouse][bEntranceY],BizzInfo[bouse][bEntranceZ])) return SS(playerid, COLOR_WHITE, "Poti folosi aceasta comanda doar daca esti in apropierea biz-ului tau.", "You need to be near your business to use this command.");
		else
		{
			GivePlayerCash(playerid,cashdeposit);
			BizzInfo[bouse][bTill] -= cashdeposit;
			format(string, sizeof(string), "You have withdrawn $%d from your business vault.", cashdeposit);
			SendClientMessage(playerid, COLOR_WHITE, string);
	        new str1[184];
			mysql_format(SQL,str1,sizeof(str1),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bouse][bTill],bouse);
			mysql_tquery(SQL,str1,"","");
			Update(playerid, pCashx);
			return 1;
		}
	}
	return 1;
}
CMD:bwithdraw(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	return cmd_bizwithdraw(playerid, params);
}
CMD:bizfee(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255) return SendClientMessage(playerid, COLOR_WHITE, "You don't own a business.");
		new fee,string[64];
		if(sscanf(params, "d",fee)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bizfee [money]");
		if(fee < 1 || fee > 2000) return SendClientMessage(playerid, COLOR_GREY, "Minimum fee is $1 and maximum fee is $2000.");
		BizzInfo[bouse][bEntranceCost] = fee;
		format(string, sizeof(string), "Business fee set to $%d.", BizzInfo[bouse][bEntranceCost]);
        new str1[184];
		mysql_format(SQL,str1,sizeof(str1),"UPDATE `bizz` SET `EntranceCost`='%d' WHERE `ID`='%d'",BizzInfo[bouse][bEntranceCost],bouse);
		mysql_tquery(SQL,str1,"","");
		OnPropTextdrawUpdate(2,bouse);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}
CMD:bizname(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255) return SendClientMessage(playerid, COLOR_WHITE, "You don't own a business.");
		new result[60],string[128];
		if(sscanf(params, "s[60]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bizname [name]");
		new maxc = strlen(result);
		if(maxc > 20) return SCM(playerid,COLOR_GREY,"Maximum caracters is 20.");
		new result2[60];
		mysql_real_escape_string(result, result2);
		strmid(BizzInfo[bouse][bMessage], result, 0, 64, 255);
		format(string, sizeof(string), "Business name set to %s.", BizzInfo[bouse][bMessage]);
        new str1[184];
		mysql_format(SQL,str1,sizeof(str1),"UPDATE bizz SET Message='%s' WHERE ID='%d'", result2, bouse);
		mysql_tquery(SQL,str1,"","");
		OnPropTextdrawUpdate(2, bouse);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}
CMD:sellbizto(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
    if(IsPlayerConnected(playerid))
    {
		new money,giveplayerid,sendername[25],giveplayer[25],string[150],playername[25],other[128];
		GetPlayerName(playerid, playername, sizeof(playername));
	    if(PlayerInfo[playerid][pPbiskey] == 255) return SendClientMessage(playerid, COLOR_WHITE, "You don't own a bussines.");
		if(sscanf(params, "uiS(NULL)[128]",giveplayerid,money,other)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellbizto [name/playerid] [price]");
		if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_LIGHTGREEN3, "Nu folosi spatii in pret.", "Don't use spaces in the price.");
		if(money < 1 || money > 5000000000) return SendClientMessage(playerid, COLOR_GREY,"Price can't be lower than $1 - $5,000,000,000.");
		if(PlayerInfo[giveplayerid][pPbiskey] != 255) return SendClientMessage(playerid, COLOR_GREY, "This player have a business.");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(giveplayerid != INVALID_PLAYER_ID)
		    {
		        if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					if(PlayerInfo[giveplayerid][pLevel] < BizzInfo[PlayerInfo[playerid][pPbiskey]][bLevelNeeded]) return SCM(playerid,COLOR_WHITE,"{FFF8C6}This player don't have needed level.");
					if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_WHITE, "{FFF8C6}You can't sell Bussines to yourself.");
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "You offered to %s to buy your business for $%s.", giveplayer, FormatNumber(money));
					SendClientMessage(playerid, COLOR_DARKPINK, string);
					format(string, sizeof(string), "%s wants to sell his business to you for $%s, (type /accept biz %d) to accept.", sendername, FormatNumber(money),playerid);
					SendClientMessage(giveplayerid, COLOR_DARKPINK, string);
					bizid[giveplayerid] = PlayerInfo[playerid][pPbiskey];
					bizprice[giveplayerid] = money;
					bizoffer[giveplayerid] = playerid;
					return 1;
				}
    			else return SCM(playerid,COLOR_GREY,"This player is not near you.");
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	}
	return 1;
}
CMD:sellbiztostate(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pPbiskey] == 255) return SendClientMessage(playerid, COLOR_WHITE, "You don't own a bussines.");
		if(strcmp(PlayerInfo[playerid][pNormalName], BizzInfo[PlayerInfo[playerid][pPbiskey]][bOwner], true) == 0)
		{
			SellHouseID[playerid] = PlayerInfo[playerid][pPbiskey];
			if(PlayerInfo[playerid][pLanguage] == 2) ShowPlayerDialog(playerid, DIALOG_SELLBIZTOSTATE, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca vrei sa-ti vinzi biz-ul pentru $3.000.000?", "Da", "Nu");
			else ShowPlayerDialog(playerid, DIALOG_SELLBIZTOSTATE, DIALOG_STYLE_MSGBOX, "Are you sure?", "Are you sure you want to sell your biz for $3.000.000?", "Yes", "No");
		}
		else return SCM(playerid,COLOR_WHITE,"You don't own a business.");
	}
	return 1;
}
CMD:forum(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerConnected(playerid))
    {
	    SendClientMessage(playerid, COLOR_YELLOW,"Forumul este FORUM.ForEver RPG.RO");
	}
	return 1;
}
CMD:hprice(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if (PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	new cashdeposit,string[356];
	if(sscanf(params, "d",cashdeposit)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /hprice [money]");
    for(new i = 1; i < sizeof(HouseInfo); i++)
	{
		if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
		{
			HouseInfo[i][hValue] = cashdeposit;
	        mysql_format(SQL, string, sizeof(string), "UPDATE houses SET `Value`='%d' WHERE ID=%d",cashdeposit,i);
	        mysql_tquery(SQL,string,"","");
	        OnPropTextdrawUpdate(1,i);
		}
	}
	return 1;
}
CMD:bprice(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if (PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	new cashdeposit,string[356];
	if(sscanf(params, "d",cashdeposit)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bprice [money]");
	for(new i = 1; i < sizeof(BizzInfo); i++)
	{
		if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
		{
			BizzInfo[i][bBuyPrice] = cashdeposit;
	        mysql_format(SQL, string, sizeof(string), "UPDATE bizz SET `BuyPrice`='%d' WHERE ID=%d",cashdeposit,i);
	        mysql_tquery(SQL,string,"","");
	        OnPropTextdrawUpdate(2,i);
		}
	}
	return 1;
}
CMD:hlevel(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if (PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	new cashdeposit,string[356];
	if(sscanf(params, "d",cashdeposit)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /hlevel [level]");
    for(new i = 1; i < sizeof(HouseInfo); i++)
	{
		if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
		{
			HouseInfo[i][hLevel] = cashdeposit;
	        mysql_format(SQL, string, sizeof(string), "UPDATE houses SET `Level`='%d' WHERE ID=%d",cashdeposit,i);
	        mysql_tquery(SQL,string,"","");
	        OnPropTextdrawUpdate(1,i);
		}
	}
	return 1;
}
CMD:blevel(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if (PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	new cashdeposit,string[356];
	if(sscanf(params, "d",cashdeposit)) return SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /blevel [level]");
	for(new i = 1; i < sizeof(BizzInfo); i++)
	{
		if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
		{
			BizzInfo[i][bLevelNeeded] = cashdeposit;
	        mysql_format(SQL, string, sizeof(string), "UPDATE bizz SET `LevelNeeded`='%d' WHERE ID=%d",cashdeposit,i);
	        mysql_tquery(SQL,string,"","");
	        OnPropTextdrawUpdate(2,i);
		}
	}
	return 1;
}
CMD:eat(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerConnected(playerid))
	{
		if(BizzInfo[InBussines[playerid]][bType] == 7 || BizzInfo[InBussines[playerid]][bType] == 9 || BizzInfo[InBussines[playerid]][bType] == 14)
		{
		    new bid = InBussines[playerid],str[256],name[30];
			if(GetPlayerCash(playerid) < 100) return SCM(playerid,COLOR_GREY,"You don't have enough money.");
		 	new Float:health;
    		GetPlayerHealth(playerid,health);
			if(health >= 75)
			{
                SetPlayerHealthEx(playerid, 100);
                ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
                GivePlayerCash(playerid, -100);
                GameTextForPlayer(playerid, "~r~-100$", 5000, 1);
				BizzInfo[bid][bTill] += 100;
				Update(playerid,pCashx);
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
				GetPlayerName(playerid, name, sizeof(name));
				format(str, sizeof(str),"* %s ate some food.",name);
				ProxDetector(30.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				SetPlayerHealthEx (playerid, health+25);
				ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				GivePlayerCash(playerid, -100);
				GameTextForPlayer(playerid, "~r~-100$", 5000, 1);
				BizzInfo[bid][bTill] += 100;
				Update(playerid,pCashx);
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
				GetPlayerName(playerid, name, sizeof(name));
				format(str, sizeof(str),"* %s ate some food.",name);
				ProxDetector(30.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		return 1;
	}
	return 1;
}
CMD:buyfood(playerid, params[])
{
	return cmd_eat(playerid, params);
}
CMD:elevator(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(!IsACop(playerid)) return SCM(playerid,COLOR_WHITE,"You are not a cop.");
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1568.5184,-1690.2205,5.8906))
	{
	    SetPlayerPosEx(playerid,1564.8662,-1666.4962,28.3956);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1564.8662,-1666.4962,28.3956))
	{
	    SetPlayerPosEx(playerid,1568.5184,-1690.2205,5.8906);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2340.2810,2456.5625,14.9688))
	{
	    SetPlayerPosEx(playerid,2339.3237,2461.2197,38.6837);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2339.3237,2461.2197,38.6837))
	{
	    SetPlayerPosEx(playerid,2340.2810,2456.5625,14.9688);
	}
	return 1;
}

// OnPlayerCommandText
public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(TutTime[playerid] >= 1 || RegistrationStep[playerid] >= 1) return 0;
	if(iGMXTick > 0) return 0;
	new string[256];
	// -- ANTI SPAM -- //
	if(strfind(cmdtext, "/s ", true) != -1 || strfind(cmdtext, "/b ", true) != -1 || strfind(cmdtext, "/low ", true) != -1 || strfind(cmdtext, "/sms ", true) != -1 || strfind(cmdtext, "/reply ", true) != -1 || strfind(cmdtext, "/me ", true) != -1 || strfind(cmdtext, "/wt ", true) != -1 || strfind(cmdtext, "/do ", true) != -1)
	{
		if(!strcmp(cmdtext, LastText[playerid]) && strlen(LastText[playerid]) > 0) return 0;
		strcpy(LastText[playerid], cmdtext, 128);
	}
    if(LastTextTime[playerid] >= GetTickCount())
    {
    	TextCount[playerid]++;
    	if(TextCount[playerid] > 5)
    	{
    		PlayerInfo[playerid][pMuted] = 1;
			PlayerInfo[playerid][pMuteTime] += 10;
    		TextCount[playerid] = 0;
    		mysql_format(SQL,string,sizeof(string),"UPDATE users SET `Muted`='1',`MuteTime`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pMuteTime], PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,string,"","");
    		SendClientMessage(playerid, COLOR_DARKPINK, "You have been auto-muted for spamming. You will be unmuted in 10 seconds.");
    		return 0;
    	}
    }
    LastTextTime[playerid] = GetTickCount() + 1000*3;
	// -- ANTI SPAM -- //
	//---- Anti Reclama ----//
	new word[30];
	new Cache: adv = mysql_query(SQL, "SELECT * FROM `adv`");
	for(new ix, jx = cache_get_row_count (); ix != jx; ++ix)
	{
		cache_get_field_content(ix, "word", word);
		if(strfind(cmdtext, word, true) != -1)
		{
			if(PlayerInfo[playerid][pAdmin] < 6)
			{
				new name[30];
				GetPlayerName(playerid, name, sizeof(name));
				format(string, sizeof(string), "%s (%d, level %d) may be server advertising (word found %s):", name, playerid, PlayerInfo[playerid][pLevel], word);
				ABroadCast(COLOR_RED2, string, 1);
				ABroadCast(COLOR_RED2, cmdtext, 1);
				SS(playerid, COLOR_LIGHTGREEN3, "Este interzis sa discuti despre alte servere sau sa faci reclama altor servere.", "You are not allowed to advertise other servers!");
				return 0;
			}
		}
	}
	cache_delete(adv);
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(success)
	{
		SpamCheck[playerid] = GetTickCount();
	}
	if(!success) return SCM(playerid, COLOR_WHITE, "SERVER: COMANDA GRESITA!");
	return 1;
}

public HouseLevel(playerid)
{
	new h = PlayerInfo[playerid][pPhousekey];
	if(h == 999)
	{
		return 0;
	}
	if(h <= 4)
	{
		return 1;
	}
	if(h >= 5 && h <= 9)
	{
		return 2;
	}
	if(h >= 10 && h <= 18)
	{
		return 3;
	}
	if(h >= 19 && h <= 22)
	{
		return 4;
	}
	if(h >= 23 && h <= 25)
	{
		return 5;
	}
	if(h == 26)
	{
		return 6;
	}
	if(h == 27)
	{
		return 7;
	}
	if(h >= 28 && h <= 31)
	{
		return 7;
	}
	return 0;
}

public CHouseLevel(houseid)
{
	if(houseid <= 4)
	{
		return 3;
	}
	if(houseid >= 29 && houseid <= 30)
	{
		return 4;
	}
	if(houseid >= 5 && houseid <= 9)
	{
		return 5;
	}
	if(houseid >= 10 && houseid <= 18 || houseid == 28)
	{
		return 7;
	}
	if(houseid >= 19 && houseid <= 22)
	{
		return 8;
	}
	if(houseid >= 23 && houseid <= 25)
	{
		return 9;
	}
	if(houseid == 26)
	{
		return 10;
	}
	if(houseid == 27)
	{
		return 11;
	}
	if(houseid >= 28 && houseid <= 31)
	{
		return 12;
	}
	return 0;
}

public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		foreach(new i : Player)
		{
			if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendSplitMessage(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendSplitMessage(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendSplitMessage(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendSplitMessage(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendSplitMessage(i, col5, string);
					}
				}
				else
				{
					SendSplitMessage(i, col1, string);
				}
			}
		}
	}
	return 1;
}

public ChatMessage(Float:radi, playerid, string[])
{
	if(IsPlayerConnected(playerid))
	{
		new playername[30], stringg[256], Distance2;
		new Float: posx, Float: posy, Float: posz, Float: Distance;
		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerPos(playerid, posx, posy, posz);
		foreach(new i : Player)
		{
			if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
			{
				if(!BigEar[i])
				{
					Distance = GetPlayerDistanceFromPoint(i, posx, posy, posz);
					Distance2 = floatround(Distance, floatround_round);
					if (Distance2 >= 0 && Distance2 <= 14)
					{
						if(PlayerInfo[playerid][pColors] == 0) format(stringg, sizeof(stringg), "{CECECE}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 1) format(stringg, sizeof(stringg), "{0087FE}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 2) format(stringg, sizeof(stringg), "{4700C2}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 3) format(stringg, sizeof(stringg), "{EBFF00}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 4) format(stringg, sizeof(stringg), "{EF00FF}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 5) format(stringg, sizeof(stringg), "{40FF00}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 6) format(stringg, sizeof(stringg), "{9CFF29}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 7) format(stringg, sizeof(stringg), "{0E7F03}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 8) format(stringg, sizeof(stringg), "{FF9A00}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 9) format(stringg, sizeof(stringg), "{6E6E6E}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 10) format(stringg, sizeof(stringg), "{FF4C9D}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 11) format(stringg, sizeof(stringg), "{F4FA58}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 12) format(stringg, sizeof(stringg), "{00BFFF}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 13) format(stringg, sizeof(stringg), "{819FF7}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 14) format(stringg, sizeof(stringg), "{FE9A2E}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 15) format(stringg, sizeof(stringg), "{FA8258}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 16) format(stringg, sizeof(stringg), "{00FF40}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 17) format(stringg, sizeof(stringg), "{D358F7}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 18) format(stringg, sizeof(stringg), "{4169E1}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 19) format(stringg, sizeof(stringg), "{9ACD32}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 20) format(stringg, sizeof(stringg), "{F0E68C}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 21) format(stringg, sizeof(stringg), "{BDB76B}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 22) format(stringg, sizeof(stringg), "{FF1493}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 23) format(stringg, sizeof(stringg), "{9966CC}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 24) format(stringg, sizeof(stringg), "{F0B2B2}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 25) format(stringg, sizeof(stringg), "{DB7093}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 26) format(stringg, sizeof(stringg), "{E70031}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 27) format(stringg, sizeof(stringg), "{AB0000}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 28) format(stringg, sizeof(stringg), "{FF6347}%s:{FFFFFF} %s", playername, string);
						SendClientMessage(i, COLOR_WHITE, stringg);
					}
					else if (Distance2 >= 15 && Distance2 <= 19)
					{
						format(stringg, sizeof(stringg), "%s: %s", playername, string);
						SendClientMessage(i, COLOR_FADE3, stringg);
					}
					else if (Distance2 >= 20 && Distance2 <= 25)
					{
						format(stringg, sizeof(stringg), "%s: %s", playername, string);
						SendClientMessage(i, COLOR_FADE4, stringg);
					}
				}
				else
				{
					if(PlayerInfo[playerid][pColors] == 0) format(stringg, sizeof(stringg), "{CECECE}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 1) format(stringg, sizeof(stringg), "{0087FE}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 2) format(stringg, sizeof(stringg), "{4700C2}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 3) format(stringg, sizeof(stringg), "{EBFF00}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 4) format(stringg, sizeof(stringg), "{EF00FF}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 5) format(stringg, sizeof(stringg), "{40FF00}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 6) format(stringg, sizeof(stringg), "{9CFF29}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 7) format(stringg, sizeof(stringg), "{0E7F03}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 8) format(stringg, sizeof(stringg), "{FF9A00}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 9) format(stringg, sizeof(stringg), "{6E6E6E}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 10) format(stringg, sizeof(stringg), "{FF4C9D}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 11) format(stringg, sizeof(stringg), "{F4FA58}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 12) format(stringg, sizeof(stringg), "{00BFFF}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 13) format(stringg, sizeof(stringg), "{819FF7}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 14) format(stringg, sizeof(stringg), "{FE9A2E}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 15) format(stringg, sizeof(stringg), "{FA8258}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 16) format(stringg, sizeof(stringg), "{00FF40}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 17) format(stringg, sizeof(stringg), "{D358F7}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 18) format(stringg, sizeof(stringg), "{4169E1}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 19) format(stringg, sizeof(stringg), "{9ACD32}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 20) format(stringg, sizeof(stringg), "{F0E68C}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 21) format(stringg, sizeof(stringg), "{BDB76B}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 22) format(stringg, sizeof(stringg), "{FF1493}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 23) format(stringg, sizeof(stringg), "{9966CC}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 24) format(stringg, sizeof(stringg), "{F0B2B2}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 25) format(stringg, sizeof(stringg), "{DB7093}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 26) format(stringg, sizeof(stringg), "{EE1C1C}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 27) format(stringg, sizeof(stringg), "{A40000}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 28) format(stringg, sizeof(stringg), "{FF5252}%s:{FFFFFF} %s", playername, string);
					SendClientMessage(i, COLOR_WHITE, stringg);
				}
			}
		}
	}
	return 1;
}

public SS(playerid, color, ro[], en[])
{
	switch(PlayerInfo[playerid][pLanguage])
	{
		case 1: SendSplitMessage(playerid, color, en);
		case 2: SendSplitMessage(playerid, color, ro);
		default: SendSplitMessage(playerid, color, ro);
	}
	return 1;
}

public BlockedMessage(playerid)
{
	SS(playerid, COLOR_RED2, "Contul tau este limitat pentru 72 de ore (3 zile) pentru ca te-ai logat dintr-o locatie diferita. In acest timp nu poti cumpara/vinde nimic.", "Your account is limited for 72 hours (3 days) because your logged in from a different location. In this time you can't buy/sell/trade goods or transfer money.");
	SS(playerid, COLOR_RED2, "Nu trebuie sa faci nimic pentru deblocarea contului. Va fi deblocat automat dupa 72 de ore.", "You don't need to do anything in order to get your account limit removed. Just wait 72 hours.");
	return 1;
}

public CrimInRange(Float:radi, playerid,copid)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(copid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(copid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public payala2(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    payala[playerid] = 0;
	}
	return 0;
}
public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public OnPropTextdrawUpdate(update, h)
{
	new PropertyString[256];
	if(update == 1)
	{
		new type[10],locked[20];
		if(HouseInfo[h][hInteriorType] == 0) format(type, sizeof(type),"Small");
		if(HouseInfo[h][hInteriorType] == 1) format(type, sizeof(type),"Medium");
		if(HouseInfo[h][hInteriorType] == 2) format(type, sizeof(type),"Big");
		if(HouseInfo[h][hLock] == 1) format(locked, sizeof(locked), "\n(locked)");
		if(HouseInfo[h][hOwned] == 0)
		{
			DestroyDynamic3DTextLabel(HouseLabel[h]);
			format(PropertyString, sizeof(PropertyString),"{FFFFFF}House {B40404}%d \n{B40404}%s \n{FFFFFF}Size: {B40404}%s \n{FFFFFF}Price: {B40404}$%s (/buyhouse) \n{FFFFFF}Level: {B40404}%d %s",h,HouseInfo[h][hDiscription],type,FormatNumber(HouseInfo[h][hValue]),HouseInfo[h][hLevel],locked);
			HouseLabel[h] = CreateDynamic3DTextLabel(PropertyString, 0x9C0000F7, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			DestroyDynamicPickup(HousePickup[h]);
			HousePickup[h] = CreateDynamicPickup(1273, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
		}
		else if(HouseInfo[h][hOwned] == 1)
		{
			new tenants=0,query[256],selltext[64];
			format(query, sizeof(query), "SELECT * FROM `users` WHERE `Rented` = '%d' AND `Status`='1'", h);
			new Cache: membresult = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				tenants++;
			}
			cache_delete(membresult);
			if(HouseInfo[h][hPrice] > 0)
			{
				format(selltext, sizeof(selltext),"\n{FFFFFF}Price: {B40404}$%s (/buyhouse)",FormatNumber(HouseInfo[h][hPrice]));
			}
			if(HouseInfo[h][hRentabil] == 1)
			{
				DestroyDynamic3DTextLabel(HouseLabel[h]);
				format(PropertyString, sizeof(PropertyString),"{FFFFFF}House {B40404}%d \n{B40404}%s \n{FFFFFF}Owner: {B40404}%s \n{FFFFFF}Tenants: {B40404}%d \n{FFFFFF}Size: {B40404}%s \n{FFFFFF}Rent: {B40404}$%d (/rentroom) %s %s",h,HouseInfo[h][hDiscription],HouseInfo[h][hOwner],tenants,type,HouseInfo[h][hRent],selltext,locked);
				HouseLabel[h] = CreateDynamic3DTextLabel(PropertyString, 0x9C0000F7, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
				DestroyDynamicPickup(HousePickup[h]);
				HousePickup[h] = CreateDynamicPickup(1272, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			}
			else
			{
				DestroyDynamic3DTextLabel(HouseLabel[h]);
				format(PropertyString, sizeof(PropertyString),"{FFFFFF}House {B40404}%d \n{B40404}%s \n{FFFFFF}Owner: {B40404}%s \n{FFFFFF}Tenants: {B40404}%d \n{FFFFFF}Size: {B40404}%s %s %s",h,HouseInfo[h][hDiscription],HouseInfo[h][hOwner], tenants, type, selltext, locked);
				HouseLabel[h] = CreateDynamic3DTextLabel(PropertyString, 0x9C0000F7, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
				DestroyDynamicPickup(HousePickup[h]);
				HousePickup[h] = CreateDynamicPickup(1272, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			}
		}
	}
	else if(update == 2)
	{
		if(BizzInfo[h][bOwned] == 0)
		{
			DestroyDynamic3DTextLabel(BizzLabel[h]);
			if(BizzInfo[h][bLocked] == 0) format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n {EEEEEE}Price: {0068CF}$%s (/buybusiness) \n{EEEEEE}Level: {0068CF}%d",BizzInfo[h][bMessage],h,FormatNumber(BizzInfo[h][bBuyPrice]),BizzInfo[h][bLevelNeeded]);
			else format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n {EEEEEE}Price: {0068CF}$%s (/buybusiness) \n{EEEEEE}Level: {0068CF}%d \n(locked)",BizzInfo[h][bMessage],h,FormatNumber(BizzInfo[h][bBuyPrice]),BizzInfo[h][bLevelNeeded]);
			BizzLabel[h] = CreateDynamic3DTextLabel(PropertyString, 0x0053CFD1, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
		}
		else if(BizzInfo[h][bOwned] == 1)
		{
			DestroyDynamic3DTextLabel(BizzLabel[h]);
			if(BizzInfo[h][bPrice] > 0)
			{
				if(BizzInfo[h][bLocked] == 0) format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n{EEEEEE}Owner: {0068CF}%s \n{EEEEEE}Fee: {0068CF}$%s \n{EEEEEE}Price: {0068CF}$%s (/buybusiness)",BizzInfo[h][bMessage],h,BizzInfo[h][bOwner],FormatNumber(BizzInfo[h][bEntranceCost]), FormatNumber(BizzInfo[h][bPrice]));
				else format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n{EEEEEE}Owner: {0068CF}%s \n{EEEEEE}Fee: {0068CF}$%s \n{EEEEEE}Price: {0068CF}$%s (/buybusiness) \n(locked)",BizzInfo[h][bMessage],h,BizzInfo[h][bOwner],FormatNumber(BizzInfo[h][bEntranceCost]), FormatNumber(BizzInfo[h][bPrice]));
			}
			else
			{
				if(BizzInfo[h][bLocked] == 0) format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n{EEEEEE}Owner: {0068CF}%s \n{EEEEEE}Fee: {0068CF}$%s",BizzInfo[h][bMessage],h,BizzInfo[h][bOwner],FormatNumber(BizzInfo[h][bEntranceCost]));
				else format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n{EEEEEE}Owner: {0068CF}%s \n{EEEEEE}Fee: {0068CF}$%s \n(locked)",BizzInfo[h][bMessage],h,BizzInfo[h][bOwner],FormatNumber(BizzInfo[h][bEntranceCost]));
			}
			BizzLabel[h] = CreateDynamic3DTextLabel(PropertyString, 0x0053CFD1, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
		}
	}
	return 1;
}

stock Carspeed(playerid)
{
    new Float:Speed[3];
    GetVehicleVelocity(GetPlayerVehicleID(playerid),Speed[0],Speed[1],Speed[2]);
    return floatround(1.61*floatsqroot(floatpower(floatabs(Speed[0]), 2.0) + floatpower(floatabs(Speed[1]), 2.0) + floatpower(floatabs(Speed[2]), 2.0)) * 99.38);
}

stock SetVehicleToRespawnEx2(carid)
{
	foreach(new i : Player)
	{
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
			if(PlayerInfo[i][pCarID][v] == carid)
			{
				new engine,lights,alarm,doors,bonnet,boot,objective,Float:PosX,Float:PosY,Float:PosZ;
				GetVehiclePos(carid, PosX, PosY, PosZ);
				DestroyVehicle(PlayerInfo[i][pCarID][v]);
				PlayerInfo[i][pCarID][v] = CreateVehicle(PlayerInfo[i][pCarModel][v],PosX,PosY,PosZ,PlayerInfo[i][pCarAngle][v],PlayerInfo[i][pCarColor1][v],PlayerInfo[i][pCarColor2][v],-1);
				SetVehicleNumberPlate(PlayerInfo[i][pCarID][v], CarPlate[i][v]);
				SetVehicleHealth(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarHP][v]);
				UpdateVehicleDamageStatus(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarDamage1][v], PlayerInfo[i][pCarDamage2][v], PlayerInfo[i][pCarDamage3][v], PlayerInfo[i][pCarDamage4][v]);
				Gas[PlayerInfo[i][pCarID][v]] = PlayerInfo[i][pCarGas][v];
				if(PlayerInfo[i][pCarLock][v] == 0)
				{
					GetVehicleParamsEx(PlayerInfo[i][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(PlayerInfo[i][pCarID][v],VEHICLE_PARAMS_OFF,lights,alarm,0,bonnet,boot,objective);
				}
				else
				{
					GetVehicleParamsEx(PlayerInfo[i][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(PlayerInfo[i][pCarID][v],VEHICLE_PARAMS_OFF,lights,alarm,1,bonnet,boot,objective);
				}
				for(new d; d < 17; d++)
				{
					if(CarMod[i][v][d] != 0) AddVehicleComponent(PlayerInfo[i][pCarID][v],CarMod[i][v][d]);
				}
				ChangeVehiclePaintjob(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarPaintJ][v]);
				vehEngine[PlayerInfo[i][pCarID][v]] = 0;
				if(strlen(CarVipName[i][v]) > 0)
				{
					SetVipText(i, v);
				}
			}
		}
	}
	return 1;
}

stock SetVehicleToRespawnEx(carid)
{
	new found;
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid)
		{
			new str[30];
			DestroyVehicle(carid);
			if(VehicleInfo[x][vehGroup] == 8 && VehicleInfo[x][vehModel] == 411 || VehicleInfo[x][vehGroup] == 2 && VehicleInfo[x][vehModel] == 541 || VehicleInfo[x][vehGroup] == 1 && VehicleInfo[x][vehModel] == 411 || VehicleInfo[x][vehGroup] == 8 && VehicleInfo[x][vehModel] == 468 || VehicleInfo[x][vehGroup] == 8 && VehicleInfo[x][vehModel] == 470)
			{
				VehicleInfo[x][vehCarID] = CreateVehicle(VehicleInfo[x][vehModel], VehicleInfo[x][vehPosX], VehicleInfo[x][vehPosY], VehicleInfo[x][vehPosZ], VehicleInfo[x][vehRotation], VehicleInfo[x][vehColor1], VehicleInfo[x][vehColor2], 1800, 1);
			}
			else
			{
				VehicleInfo[x][vehCarID] = CreateVehicle(VehicleInfo[x][vehModel], VehicleInfo[x][vehPosX], VehicleInfo[x][vehPosY], VehicleInfo[x][vehPosZ], VehicleInfo[x][vehRotation], VehicleInfo[x][vehColor1], VehicleInfo[x][vehColor2], 1800);
			}
			if(VehicleInfo[x][vehGroup] == 0)
			{
				format(str,sizeof(str),"BGZ %d",VehicleInfo[x][vehCarID]);
				SetVehicleNumberPlate(VehicleInfo[x][vehCarID],str);
			}
			else if(VehicleInfo[x][vehGroup] > 0)
			{
				if(VehicleInfo[x][vehGroup] > 9)
				{
					format(str,sizeof(str),"F%d %d",VehicleInfo[x][vehGroup],VehicleInfo[x][vehCarID]);
					SetVehicleNumberPlate(VehicleInfo[x][vehCarID],str);
				}
				else if(VehicleInfo[x][vehGroup] < 10)
				{
					format(str,sizeof(str),"F0%d %d",VehicleInfo[x][vehGroup],VehicleInfo[x][vehCarID]);
					SetVehicleNumberPlate(VehicleInfo[x][vehCarID],str);
				}
			}
			if(VehicleInfo[x][vehGroup] == 13)
			{
				if(VehicleInfo[x][vehModel] != 438)
				{
					new taxiobj = CreateObject(19308, 0.00000, 0.00000, 0.00000,0.00000, 0.00000, 0.00000);
					AttachObjectToVehicle(taxiobj, VehicleInfo[x][vehCarID], 0.000000, -0.249999, 0.949999, 0.000000, 0.000001, 90.449951);
				}
			}
			if(VehicleInfo[x][vehGroup] == 8 || VehicleInfo[x][vehGroup] == 2 || VehicleInfo[x][vehGroup] == 1)
			{
				if(VehicleInfo[x][vehModel] == 411)
				{
					object = CreateObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(object, VehicleInfo[x][vehCarID],  0.010000, -0.060000, 0.689999, 0.000000, 0.000000, 0.000000);
					new policecar = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
					SetObjectMaterialText(policecar, "POLICE", 0, OBJECT_MATERIAL_SIZE_256x128, "Arial", 40, 1, -16777216, 0, 1);
					AttachObjectToVehicle(policecar, VehicleInfo[x][vehCarID], 0.000000, -1.984998, 0.229999, -85.424964, 0.000000, 0.000000);
				}
			}
			found = 1;
		}
	}
	if(found == 0)
	{
		if(IsAnOwnableCar(carid))
		{
			foreach(new i : Player)
			{
				for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				{
					if(PlayerInfo[i][pCarID][v] == carid)
					{
						new engine,lights,alarm,doors,bonnet,boot,objective;
						DestroyVehicle(PlayerInfo[i][pCarID][v]);
						PlayerInfo[i][pCarID][v] = CreateVehicle(PlayerInfo[i][pCarModel][v],PlayerInfo[i][pCarLocX][v],PlayerInfo[i][pCarLocY][v],PlayerInfo[i][pCarLocZ][v],PlayerInfo[i][pCarAngle][v],PlayerInfo[i][pCarColor1][v],PlayerInfo[i][pCarColor2][v],-1);
						SetVehicleNumberPlate(PlayerInfo[i][pCarID][v], CarPlate[i][v]);
						SetVehicleHealth(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarHP][v]);
						UpdateVehicleDamageStatus(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarDamage1][v], PlayerInfo[i][pCarDamage2][v], PlayerInfo[i][pCarDamage3][v], PlayerInfo[i][pCarDamage4][v]);
						Gas[PlayerInfo[i][pCarID][v]] = PlayerInfo[i][pCarGas][v];
						if(PlayerInfo[i][pCarLock][v] == 0)
						{
							GetVehicleParamsEx(PlayerInfo[i][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(PlayerInfo[i][pCarID][v],VEHICLE_PARAMS_OFF,lights,alarm,0,bonnet,boot,objective);
						}
						else
						{
							GetVehicleParamsEx(PlayerInfo[i][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(PlayerInfo[i][pCarID][v],VEHICLE_PARAMS_OFF,lights,alarm,1,bonnet,boot,objective);
						}
						for(new d; d < 17; d++)
						{
							if(CarMod[i][v][d] != 0) AddVehicleComponent(PlayerInfo[i][pCarID][v],CarMod[i][v][d]);
						}
						ChangeVehiclePaintjob(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarPaintJ][v]);
						vehEngine[PlayerInfo[i][pCarID][v]] = 0;
						if(strlen(CarVipName[i][v]) > 0)
						{
							SetVipText(i, v);
						}
					}
				}
			}
		}
		else
		{
			SetVehicleToRespawn(carid);
		}
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(TutTime[playerid] >= 1 || RegistrationStep[playerid] >= 1) return 0;
    new string[256];
    if(PlayerInfo[playerid][pMuted] == 1)
    {
	    if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 0;
	}
    // -- ANTI SPAM -- //
    if(!strcmp(text, LastText[playerid]) && strlen(LastText[playerid]) > 0) return 0;
    strcpy(LastText[playerid], text, 128);
    if(LastTextTime[playerid] >= GetTickCount())
    {
    	TextCount[playerid]++;
    	if(TextCount[playerid] > 5)
    	{
    		PlayerInfo[playerid][pMuted] = 1;
			PlayerInfo[playerid][pMuteTime] += 10;
    		TextCount[playerid] = 0;
    		mysql_format(SQL,string,sizeof(string),"UPDATE users SET `Muted`='1',`MuteTime`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pMuteTime], PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,string,"","");
    		SendClientMessage(playerid, COLOR_DARKPINK, "You have been auto-muted for spamming. You will be unmuted in 10 seconds.");
    		return 0;
    	}
    }
    LastTextTime[playerid] = GetTickCount() + 1000*3;
    // -- ANTI SPAM -- //
	///----- CHAT LOGS -----///
	new var100[300],resulttt[300],result3[300],namename[30];
	GetPlayerName(playerid, namename, sizeof(namename));
	if(Mobile[playerid] != -1)
	{
		format(result3, sizeof(result3),"(cellphone) %s: %s", namename, text);
	}
	else
	{
		format(result3, sizeof(result3),"%s: %s", namename, text);
	}
	mysql_real_escape_string(result3, resulttt);
 	mysql_format(SQL, var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','chat')", PlayerInfo[playerid][pSQLID], resulttt);
	mysql_tquery(SQL,var100,"","");
	///----- CHAT LOGS -----///
    new word[30];
    new Cache: adv = mysql_query(SQL, "SELECT * FROM `adv`");
	for(new ix, jx = cache_get_row_count (); ix != jx; ++ix)
	{
		cache_get_field_content(ix, "word", word);
		if(strfind(text, word, true) != -1)
		{
			if(PlayerInfo[playerid][pAdmin] < 6)
			{
				new strrr[128],nameee[30];
				GetPlayerName(playerid, nameee, sizeof(nameee));
				format(strrr, sizeof(strrr), "%s (%d, level %d) may be server advertising (word found %s):", nameee, playerid, PlayerInfo[playerid][pLevel], word);
				ABroadCast(COLOR_RED2, strrr, 1);
				ABroadCast(COLOR_RED2, text, 1);
				SS(playerid, COLOR_LIGHTGREEN3, "Este interzis sa discuti despre alte servere sau sa faci reclama altor servere.", "You are not allowed to advertise other servers!");
				return 0;
			}
		}
	}
	cache_delete(adv);

	new sendername[MAX_PLAYER_NAME];
	new tmp[256];
	format(string, sizeof(string), "\"%s\"", text);
	SetPlayerChatBubble(playerid, text, COLOR_CHATBUBBLE, 10.0, 10000);
	if(TalkingLive[playerid] != 0)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pMember] == 9)
		{
		    format(string, sizeof(string), "NR %s: %s", sendername, text);
			OOCNews(COLOR_LIGHTGREEN, string);
		}
		else
		{
		    format(string, sizeof(string), "LivePlayer %s: %s", sendername, text);
			OOCNews(COLOR_LIGHTGREEN, string);
		}
		return 0;
	}
	if(Mobile[playerid] != -1)
	{
		new idx;
		tmp = strtok(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "(cellphone) %s: %s", sendername, text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		if(Mobile[playerid] != -2 && Mobile[playerid] != -3 && Mobile[playerid] != -4)
		{
			if(IsPlayerConnected(Mobile[playerid]))
			{
			    if(Mobile[Mobile[playerid]] == playerid)
			    {
					if(PlayerInfo[Mobile[playerid]][pSpeaker] == 1)
					{
						ProxDetector(20.0, Mobile[playerid], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					}
					else
					{
					    SendClientMessage(Mobile[playerid], COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_YELLOW,"Theres nobody there.");
			}
		}
		else
		{
			if(Mobile[playerid] == -2)
			{
				if(!strcmp(text, "LSPD", true) || !strcmp(text, "police", true))
				{
					Mobile[playerid] = -3;
					SendClientMessage(playerid, COLOR_WHITE, "(cellphone) 112: You have reached the Los Santos Police emergency hotline; can you describe the crime?");
				}
				else if(!strcmp(text, "LSFMD", true) || !strcmp(text, "medic", true) || !strcmp(text, "ambulance", true))
				{
					Mobile[playerid] = -4;
					SendClientMessage(playerid, COLOR_WHITE, "(cellphone) 112: This is the Los Santos Fire & Medic Department emergency hotline; describe the emergency, please.");
				}
				else SendClientMessage(playerid, COLOR_WHITE, "(cellphone) 112: Sorry, I didn't quite understand that... speak again?");
			}
			else if(Mobile[playerid] == -3)
			{
				new location[MAX_ZONE_NAME], name[30], strings[128];
				GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "Dispatch: %s has reported: '%s' (10-20 %s)", name, text, location);
				SendTeamMessage(8, COLOR_LIGHTBLUE, strings);
				SendTeamMessage(3, COLOR_LIGHTBLUE, strings);
				SendTeamMessage(2, COLOR_LIGHTBLUE, strings);
				SendTeamMessage(1, COLOR_LIGHTBLUE, strings);
				SendClientMessage(playerid, COLOR_WHITE, "(cellphone) 112: Thank you for reporting this incident; a patrol unit is now on its way.");
				SendClientMessage(playerid, COLOR_WHITE, "Your call has been terminated by the other party.");
				RemovePlayerAttachedObject(playerid, 4);
				Mobile[playerid] = -1;
				CellTime[playerid] = 0;
				PlayerInfo[playerid][pSpeaker] = 0;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			}
			else if(Mobile[playerid] == -4)
			{
				new location[MAX_ZONE_NAME], name[30], strings[128];
				GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "Dispatch: %s has reported '%s' (10-20 %s)", name, text, location);
				SendTeamMessage(14, COLOR_ALLDEPT, strings);
				SendClientMessage(playerid, COLOR_WHITE, "(cellphone) 112: Thank you for reporting this incident; we are on our way.");
				SendClientMessage(playerid, COLOR_WHITE, "Your call has been terminated by the other party.");
				RemovePlayerAttachedObject(playerid, 4);
				Mobile[playerid] = -1;
				CellTime[playerid] = 0;
				PlayerInfo[playerid][pSpeaker] = 0;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			}
		}
		format(string, sizeof(string), "(cellphone) \"%s\"", text);
		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
		return 0;
	}
	if (realchat)
	{
		if(gPlayerLogged[playerid] == 0)
		{
				return 0;
		}
		//GetPlayerName(playerid, sendername, sizeof(sendername));
		//format(string, sizeof(string), "%s: %s", sendername, text);
		//ProxDetector(20.0, playerid,string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);

		new szMessage[1000];
		new szPlayerName[32];
		GetPlayerName(playerid, szPlayerName, 32);
		if(PlayerInfo[playerid][pPaintBallG] > 0)
		{
			format(szMessage,sizeof(szMessage),"{BA3FC1}%s [%d kills]{FFFFFF}: %s",szPlayerName,PlayerInfo[playerid][pPaintBallKills],text);
			foreach(new idd : Player)
			{
				if(PlayerInfo[idd][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				{
					SendSplitMessage(idd, COLOR_WHITE, szMessage);
				}
			}
		}
		if(PlayerInfo[playerid][pPaintBallG] == 0)
		{
			if(AdminDuty[playerid] > 0 && PlayerInfo[playerid][pAdmin] > 0)
			{
				format(szMessage, sizeof(szMessage), "(( Admin %s says: %s ))", szPlayerName, text);
				ProxDetector(100.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			}
			else
			{
				format(szMessage, sizeof(szMessage), "%s",text);
				//MESSAGE SPLIT
				new len = strlen(szMessage),
					_iL = len / EX_SPLITLENGTHH;
				if( ( len % EX_SPLITLENGTHH ) ) _iL++;
				new _Line[EX_SPLITLENGTHH+5];
				new _:_i@Index;
				while( _i@Index < _iL )
				{
					if( _i@Index == 0 )
						strmid( _Line, szMessage, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );
					else
						strmid( _Line, szMessage, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );

					if( _iL > 1 )
					{
						if( _i@Index > 0 )
						{
							format( _Line, sizeof _Line, "... %s", _Line );
						}
					}
					ChatMessage(25.0, playerid, _Line);
					_i@Index++;
				}
			}
		}
		format(szMessage, sizeof(szMessage), "\"%s\"", text);
		SetPlayerChatBubble(playerid, szMessage, COLOR_CHATBUBBLE, 15.0, 10000);
		return 0;
	}
	return 1;
}

public FixHour(hour)
{
	hour = timeshift+hour;
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

public RobFunc(playerid)
{
	KillTimer(RobTimer[playerid]);
	BusinessRob[playerid] = 2;
	RobTime[playerid] = 0;
	new rand = random(sizeof(gRandomRob));
	SetPlayerCheckpoint(playerid, gRandomRob[rand][0],gRandomRob[rand][1],gRandomRob[rand][2], 4.0);
	SendClientMessage(playerid, COLOR_ROB,"Mergi la checkpoint-ul de pe minimap pentru a ascunde banii furati.");
    return 1;
}

public UnFreezeStation(playerid)
{
    PlayerTextDrawHide(playerid, Bus1[playerid]);
    PlayerTextDrawHide(playerid, Bus2[playerid]);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

public Fisher(playerid)
{
	FishTimer[playerid]--;
	switch(FishTimer[playerid]) {
		case 1: {
		    new string[MAX_STRING],sendername[30],money,string2[128];
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    KillTimer(FishTimerr[playerid]);
		    Fishing[playerid] = 0;
		    FishTimer[playerid] = 0;
			ClearAnimations(playerid);
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
		 	TogglePlayerControllable(playerid, 1);
			RemovePlayerAttachedObject(playerid, 4);
		    if(TipPeste[playerid] == 1)
			{
				money = 5000 + random(10000);
				PlayerInfo[playerid][pFishPrice] = money;
			    SS(playerid, COLOR_DARKPINK, "Ai prins un peste obisnuit!", "You caught a COMMON fish!");
			    format(string,sizeof(string),"Pestele prins de tine valoreaza $%s!", FormatNumber(money));
			    format(string2, sizeof(string2), "The value of the fish you caught is $%s!", FormatNumber(money));
			    SS(playerid, COLOR_DARKPINK, string, string2);
			    SS(playerid, COLOR_WHITE, "Pentru a vinde pestele, mergi la un magazin 24/7.", "To sell the fish, go to a 24/7 store.");
		     	format(string,sizeof(string),"* %s caught a common fish that can be sold for about $%s.", sendername, FormatNumber(money));
        		ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				PlayerInfo[playerid][pFishes] = 1;
			}
			else if(TipPeste[playerid] == 2)
			{
				money = 15000 + random(20000);
				PlayerInfo[playerid][pFishPrice] = money;
			    SS(playerid, COLOR_BLUE, "Ai prins un peste rar!", "You caught a RARE fish!");
			    format(string,sizeof(string),"Pestele prins de tine valoreaza $%s!", FormatNumber(money));
			    format(string2, sizeof(string2), "The value of the fish you caught is $%s!", FormatNumber(money));
			    SS(playerid, COLOR_DARKPINK, string, string2);
			    SS(playerid, COLOR_WHITE, "Pentru a vinde pestele, mergi la un magazin 24/7.", "To sell the fish, go to a 24/7 store.");
		     	format(string,sizeof(string),"* %s caught a rare fish that can be sold for about $%s.", sendername, FormatNumber(money));
        		ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				PlayerInfo[playerid][pFishes] = 1;
			}
			else if(TipPeste[playerid] == 3)
			{
				if(SvarInfo[2][svValue] == 0)
				{
					money = 50000 + random(200000);
					PlayerInfo[playerid][pFishPrice] = money;
				    SS(playerid, COLOR_YELLOW, "Ai prins un peste foarte rar!", "You caught a VERY RARE fish!");
				    format(string,sizeof(string),"Pestele prins de tine valoreaza $%s!", FormatNumber(money));
				    format(string2, sizeof(string2), "The value of the fish you caught is $%s!", FormatNumber(money));
			   		SS(playerid, COLOR_DARKPINK, string, string2);
				    SS(playerid, COLOR_WHITE, "Pentru a vinde pestele, mergi la un magazin 24/7.", "To sell the fish, go to a 24/7 store.");
			     	format(string,sizeof(string),"* %s caught a very rare fish that can be sold for about $%s.", sendername, FormatNumber(money));
	        		ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					PlayerInfo[playerid][pFishes] = 1;
				}
				else
				{
					new x = random(99);
					if(x >= 0 && x <= 49)
					{
						money = 50000 + random(200000);
						PlayerInfo[playerid][pFishPrice] = money;
					    SS(playerid, COLOR_YELLOW, "Ai prins un peste foarte rar!", "You caught a VERY RARE fish!");
					    format(string,sizeof(string),"Pestele prins de tine valoreaza $%s!", FormatNumber(money));
					    format(string2, sizeof(string2), "The value of the fish you caught is $%s!", FormatNumber(money));
			    		SS(playerid, COLOR_DARKPINK, string, string2);
					    SS(playerid, COLOR_WHITE, "Pentru a vinde pestele, mergi la un magazin 24/7.", "To sell the fish, go to a 24/7 store.");
				     	format(string,sizeof(string),"* %s caught a very rare fish that can be sold for about $%s.", sendername, FormatNumber(money));
		        		ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						PlayerInfo[playerid][pFishes] = 1;
					}
					else if(x >= 50)
					{
						money = 500000 + random(2000000);
						PlayerInfo[playerid][pFishPrice] = money;
						SS(playerid, COLOR_YELLOW, "Ai prins un peste special de Craciun!", "You caught a SPECIAL CHRISTMAS fish!");
						format(string,sizeof(string),"Pestele prins de tine valoreaza $%s!", FormatNumber(money));
					    format(string2, sizeof(string2), "The value of the fish you caught is $%s!", FormatNumber(money));
			    		SS(playerid, COLOR_DARKPINK, string, string2);
					    SS(playerid, COLOR_WHITE, "Pentru a vinde pestele, mergi la un magazin 24/7.", "To sell the fish, go to a 24/7 store.");
					    format(string,sizeof(string),"* %s caught a special Christmas fish that can be sold for about $%s.", sendername, FormatNumber(money));
		        		ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						PlayerInfo[playerid][pFishes] = 1;
					}
				}
			}
			TipPeste[playerid] = 0;
		}
	    case 2: {
		 	new randfish = random(99);
		 	if(PlayerInfo[playerid][pFishSkill] == 1)
		 	{
				if(randfish >= 0 && randfish <= 87) TipPeste[playerid] = 1;
				else if(randfish >= 88 && randfish <= 98) TipPeste[playerid] = 2;
				else if(randfish >= 99) TipPeste[playerid] = 3;
			}
			else if(PlayerInfo[playerid][pFishSkill] == 2)
		 	{
				if(randfish >= 0 && randfish <= 83) TipPeste[playerid] = 1;
				else if(randfish >= 84 && randfish <= 97) TipPeste[playerid] = 2;
				else if(randfish >= 98) TipPeste[playerid] = 3;
			}
			else if(PlayerInfo[playerid][pFishSkill] == 3)
		 	{
				if(randfish >= 0 && randfish <= 79) TipPeste[playerid] = 1;
				else if(randfish >= 80 && randfish <= 96) TipPeste[playerid] = 2;
				else if(randfish >= 97) TipPeste[playerid] = 3;
			}
			else if(PlayerInfo[playerid][pFishSkill] == 4)
		 	{
				if(randfish >= 0 && randfish <= 75) TipPeste[playerid] = 1;
				else if(randfish >= 76 && randfish <= 95) TipPeste[playerid] = 2;
				else if(randfish >= 96) TipPeste[playerid] = 3;
			}
			else if(PlayerInfo[playerid][pFishSkill] == 5)
		 	{
				if(randfish >= 0 && randfish <= 71) TipPeste[playerid] = 1;
				else if(randfish >= 72 && randfish <= 94) TipPeste[playerid] = 2;
				else if(randfish >= 95) TipPeste[playerid] = 3;
			}
			else if(PlayerInfo[playerid][pFishSkill] >= 6)
		 	{
				if(randfish >= 0 && randfish <= 67) TipPeste[playerid] = 1;
				else if(randfish >= 68 && randfish <= 93) TipPeste[playerid] = 2;
				else if(randfish >= 94) TipPeste[playerid] = 3;
			}
	    }
	    case 7: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 4110, 5);
	    case 12: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 4110, 5);
	    case 19: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 4110, 5);
		case 26: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 4110, 5);
		case 33: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 4110, 5);
	}
 	return 1;
}

public Fisher2(playerid)
{
	Fishing[playerid] = 0;
	SCM(playerid,COLOR_WHITE,"{999999}Now you can fish again.");
	return 1;
}

public RespawnTruck(playerid)
{
    if(!IsVehicleOccupied(TruckID[playerid]))
    {
		SetVehicleToRespawn(TruckID[playerid]);
		TruckID[playerid] = 0;
	}
	else
	{
	    TruckID[playerid] = 0;
	}
	DisablePlayerCheckpoint(playerid);
	DestroyVehicle(viddd[playerid]);
	viddd[playerid] = 0;
	Trucker[playerid] = 0;
	KillTimer(restruck[playerid]);
}

public TowAgain(playerid)
{
	TowAcc[playerid] = 0;
	SCM(playerid,COLOR_GREY,"Job reload time ended.");
	return 1;
}
public lspdgateclose()
{
    MoveObject(gatelspd, 1592.67676, -1638.05225, 14.95110, 1.5, -1000.0, -1000.0, -1000.0);
    return 1;
}
public lvpdgateclose()
{
    MoveDynamicObject(gatelvpd, 2335.89282, 2444.87451, 7.29770, 1.5, -1000.0, -1000.0, -1000.0);
    return 1;
}

public lvpdgateclose2()
{
    MoveDynamicObject(gatelvpd2, 2294.02222, 2503.16650, 4.70800, 1.5, -1000.0, -1000.0, -1000.0);
    return 1;
}

public nggateclose()
{
    MoveDynamicObject(gateng, 135.2833, 1941.3331, 21.6932, 1.5, -1000.0, -1000.0, -1000.0);
    return 1;
}
public lspdbarclose()
{
    MoveDynamicObject(lspdbar, 1544.7007, -1630.7527, 13.2983, 1.5,0.0000, 90.0200, 90.0000);
    return 1;
}
public lvpdbarclose()
{
    MoveDynamicObject(lvpdbar, 2238.22021, 2450.44312, 10.58781, 1.5,0.0000, 90.0200, 90.0000);
    return 1;
}
stock strvalEx( const string[] )
{
   if( strlen( string ) >= 50 ) return 0;
   return strval(string);
}

public OnVehicleDeath(vehicleid)
{
 	new engine,lights,alarm,doors,bonnet,boot,objective;
 	vehEngine[vehicleid] = 0;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
 	SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
    if(IsAnOwnableCar(vehicleid))
 	{
		foreach(new i : Player)
		{
			for(new v; v < MAX_PERSONAL_VEHICLES; v++)
			{
				if(PlayerInfo[i][pCarID][v] == vehicleid)
				{
					PlayerInfo[i][pCarHP][v] = 1000.0;
					if(PlayerInfo[i][pCarIns][v] != 0)
					{
						PlayerInfo[i][pCarIns][v]--;
					}
					cUpdate(i, v, cInsurancecarx);
					cUpdate(i, v, cKMx);
					cUpdate(i, v, cHPx);
				}
			}
		}
 	}
 	if(Destroycar == 1)
 	{
		if(Carspawn[vehicleid] != 0)
		{
			DestroyVehicle(Carspawn[vehicleid]);
			Carspawn[vehicleid] = 0;
		}
	}
	StopAudioStreamForPlayersInCar(vehicleid);
 	return 1;
}

public Float:GetDistance(playerid, Float:x, Float:y)
{
	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid, x2, y2, z2);
	x = x - x2;
	y = y - y2;
	return floatsqroot(x*x+y*y);
}

stock BanCheck(playerid)
{
	new playername[30],name[30],playerip[16],admin[30],reason[128],ip[16],permanent,string[256],qstr[612],time,date[6],banid;
	GetPlayerName(playerid, playername, sizeof(playername));
	GetPlayerIp(playerid, playerip, sizeof(playerip));
	format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `PlayerName`='%s' AND `Active`='1'",playername);
    new Cache: banuri = mysql_query(SQL,qstr);
    if(cache_get_row_count() > 0)
    {
        cache_get_field_content(0, "PlayerName", name, SQL, 30);
		cache_get_field_content(0, "AdminName", admin, SQL, 30);
		cache_get_field_content(0, "Reason", reason, SQL, 128);
    	cache_get_field_content(0, "IP", ip, SQL, 16);
    	permanent                    	= cache_get_field_content_int(0, "Permanent");
    	time                            = cache_get_field_content_int(0, "Time");
		banid							= cache_get_field_content_int(0, "ID");

		if(gettime() < time || permanent > 0)
		{
		    if(permanent > 0)
			{
				format(string,sizeof(string),"This account (%s) is banned!",playername);
				SendClientMessage(playerid, COLOR_RED, string);
				format(string,sizeof(string),"Banned by: %s, reason: %s.",admin,reason);
				SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
				SendClientMessage(playerid, COLOR_GENANNOUNCE, "This is a permanent ban.");
				SendClientMessage(playerid, COLOR_GENANNOUNCE, "Poti posta o cerere de unban pe http://ForEver RPG.ro daca consideri ca ai luat ban degeaba.");
				GameTextForPlayer(playerid, "Banned", 5000, 2);
				KickEx(playerid);
			}
			else
			{
				format(string,sizeof(string),"This account (%s) is banned!",playername);
				SendClientMessage(playerid, COLOR_RED, string);
				format(string,sizeof(string),"Banned by: %s, reason: %s.",admin,reason);
				SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
				TimestampToDate(time,date[0],date[1],date[2],date[3],date[4],date[5],2);
				format(string,sizeof(string),"Ban will expire on %02d.%02d.%02d-%02d:%02d:%02d.",date[2],date[1],date[0],date[3],date[4],date[5]);
				SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
				SendClientMessage(playerid, COLOR_GENANNOUNCE, "Poti posta o cerere de unban pe http://ForEver RPG.ro daca consideri ca ai luat ban degeaba.");
				GameTextForPlayer(playerid, "Banned", 5000, 2);
				KickEx(playerid);
			}
		}
		else
		{
			new str2[128];
			mysql_format(SQL, str2, sizeof(str2), "UPDATE bans SET `Active`='0' WHERE `ID`='%d'",banid);
			mysql_tquery(SQL,str2,"","");
			IPBanCheck(playerid);
		}
	}
	else
	{
		IPBanCheck(playerid);
	}
	cache_delete(banuri);
	return 1;
}

stock IPBanCheck(playerid)
{
	new name[30],playerip[16],admin[30],reason[128],ip[16],permanent,string[256],qstr[612],ipban,time,date[6],banid;
	GetPlayerIp(playerid, playerip, sizeof(playerip));
	format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `IP`='%s' AND `Active`='1'",playerip);
    new Cache: banuri = mysql_query(SQL,qstr);
    if(cache_get_row_count() > 0)
    {
        cache_get_field_content(0, "PlayerName", name, SQL, 30);
		cache_get_field_content(0, "AdminName", admin, SQL, 30);
		cache_get_field_content(0, "Reason", reason, SQL, 128);
    	cache_get_field_content(0, "IP", ip, SQL, 16);
    	permanent                    	= cache_get_field_content_int(0, "Permanent");
    	ipban                           = cache_get_field_content_int(0, "IPBan");
    	time                          	= cache_get_field_content_int(0, "Time");
		banid							= cache_get_field_content_int(0, "ID");

		if(ipban == 1)
		{
			if(gettime() < time || permanent > 0)
			{
			    if(permanent > 0)
				{
		    		format(string,sizeof(string),"This IP (%s) is banned!",playerip);
		    		SendClientMessage(playerid, COLOR_RED, string);
		    		format(string,sizeof(string),"Banned by: %s, reason: %s.",admin,reason);
		    		SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
		    		SendClientMessage(playerid, COLOR_GENANNOUNCE, "This is a permanent ban.");
		    		SendClientMessage(playerid, COLOR_GENANNOUNCE, "Poti posta o cerere de unban pe http://ForEver RPG.ro daca consideri ca ai luat ban degeaba.");
            		GameTextForPlayer(playerid, "Banned", 5000, 2);
					KickEx(playerid);
				}
				else
				{
		    		format(string,sizeof(string),"This IP (%s) is banned!",playerip);
		    		SendClientMessage(playerid, COLOR_RED, string);
		    		format(string,sizeof(string),"Banned by: %s, reason: %s.",admin,reason);
		    		SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
					TimestampToDate(time,date[0],date[1],date[2],date[3],date[4],date[5],2);
	   				format(string,sizeof(string),"Ban will expire on %02d.%02d.%02d-%02d:%02d:%02d.",date[2],date[1],date[0],date[3],date[4],date[5]);
	   				SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
   					SendClientMessage(playerid, COLOR_GENANNOUNCE, "Poti posta o cerere de unban pe http://ForEver RPG.ro daca consideri ca ai luat ban degeaba.");
            		GameTextForPlayer(playerid, "Banned", 5000, 2);
					KickEx(playerid);
				}
			}
			else
			{
		    	new str2[128];
		    	mysql_format(SQL, str2, sizeof(str2), "UPDATE bans SET `Active`='0' WHERE `ID`='%d'",banid);
      			mysql_tquery(SQL,str2,"","");
      			// PLAYER LOGIN
				new pnamee[25];
				GetPlayerName(playerid, pnamee, sizeof(pnamee));
				format(qstr,sizeof(qstr),"SELECT * FROM users WHERE `name`='%s'",pnamee);
				new Cache: abcd = mysql_query(SQL,qstr);
				if(cache_get_row_count() > 0)
				{
					gPlayerAccount[playerid] = 1;
				}
				else
				{
					gPlayerAccount[playerid] = 0;
				}
				cache_delete(abcd);
			}
		}
		else
		{
   			// PLAYER LOGIN
			new pnamee[25];
			GetPlayerName(playerid, pnamee, sizeof(pnamee));
			format(qstr,sizeof(qstr),"SELECT * FROM users WHERE `name`='%s'",pnamee);
			new Cache: abcd = mysql_query(SQL,qstr);
			if(cache_get_row_count() > 0)
			{
				gPlayerAccount[playerid] = 1;
			}
			else
			{
				gPlayerAccount[playerid] = 0;
			}
			cache_delete(abcd);
		}
	}
	else
	{
		// PLAYER LOGIN
		new pnamee[25];
		GetPlayerName(playerid, pnamee, sizeof(pnamee));
		format(qstr,sizeof(qstr),"SELECT * FROM users WHERE `name`='%s'",pnamee);
		new Cache: abcd = mysql_query(SQL,qstr);
		if(cache_get_row_count() > 0)
		{
			gPlayerAccount[playerid] = 1;
		}
		else
		{
			gPlayerAccount[playerid] = 0;
		}
		cache_delete(abcd);
	}
	cache_delete(banuri);
	return 1;
}

stock strtok2(const string[], &idx)
{
    new length = strlen(string);
	while ((idx < length) && (string[idx] <= ' '))
	{
		idx++;
	}
	new offset = idx;
	new result[128];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
		result[idx - offset] = string[idx];
		idx++;
	}
	result[idx - offset] = EOS;
	return result;
}

// OnDialogResponse
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
	new sendername[30];
	new string[300];
	if(strfind(inputtext, "%", true) != -1)
	{
		SendClientMessage(playerid, COLOR_GENANNOUNCE, "SERVER: Invalid dialog input. You can't use %%.");
		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Invalid dialog input", "Invalid dialog input", "OK", "Exit");
		return 1;
	}
	if(dialogid == DIALOG_CHOOSECLANNAME)
	{
	    if(response)
	    {
			if(strlen(inputtext) >= 3 && strlen(inputtext) <= 20)
			{
				new clanname[25],strings[128];
				mysql_real_escape_string(inputtext, clanname);
				strcpy(ClanInfo[PlayerInfo[playerid][pClan]][cClanName], clanname, sizeof(clanname));
				mysql_format(SQL, string, sizeof(string), "UPDATE clans SET `clanName`='%s' WHERE `clanID`='%d'", clanname, PlayerInfo[playerid][pClan]);
				mysql_tquery(SQL,string,"","");
				format(strings, sizeof(strings), "Clan name: %s.", clanname);
				SendClientMessage(playerid, COLOR_GENANNOUNCE, strings);
				ShowPlayerDialog(playerid, DIALOG_CHOOSECLANTAG, DIALOG_STYLE_INPUT, "Clan tag", "Insert clan tag in the box below:\n(You can't change it after that!)", "Ok", "");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_CHOOSECLANNAME, DIALOG_STYLE_INPUT, "Clan name", "Insert clan name in the box below:\nMinimum 3 characters and maximum 20 characters.\n(You can't change it after that!)", "Ok", "");
				return 1;
			}
		}
	}
	if(dialogid == DIALOG_CHOOSECLANTAG)
	{
	    if(response)
	    {
			if(strlen(inputtext) >= 2 && strlen(inputtext) <= 15)
			{
				new clanname[25],strings[256];
				mysql_real_escape_string(inputtext, clanname);
				strcpy(ClanInfo[PlayerInfo[playerid][pClan]][cClanTag], clanname, sizeof(clanname));
				mysql_format(SQL, strings, sizeof(strings), "UPDATE clans SET `clanTag`='%s' WHERE `clanID`='%d'", clanname, PlayerInfo[playerid][pClan]);
				mysql_tquery(SQL,strings,"","");
				format(strings, sizeof(strings), "Clan tag: %s.", clanname);
				SendClientMessage(playerid, COLOR_GENANNOUNCE, strings);
				mysql_format(SQL, strings, sizeof(strings), "SELECT * FROM `clans`");
				mysql_tquery(SQL, strings, "LoadClanInfo", "");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_CHOOSECLANTAG, DIALOG_STYLE_INPUT, "Clan tag", "Insert clan tag in the box below:\nMinimum 2 characters and maximum 15 characters.\n(You can't change it after that!)", "Ok", "");
				return 1;
			}
		}
	}
	if(dialogid == 6267)
	{
	    if(response)
		{
		    switch(listitem)
		    {
		        case 0:
		        {
		            PlayerInfo[playerid][pColors] = 0;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{CECECE}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		        case 1:
		        {
		            PlayerInfo[playerid][pColors] = 1;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{4169E1}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		        case 2:
		        {
		            PlayerInfo[playerid][pColors] = 2;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{662BBE}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 3:
		        {
		            PlayerInfo[playerid][pColors] = 3;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{FFE600}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 4:
		        {
		            PlayerInfo[playerid][pColors] = 4;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{FF00FF}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		        case 5:
		        {
		            PlayerInfo[playerid][pColors] = 5;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{3FFF3F}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		        case 6:
		        {
		            PlayerInfo[playerid][pColors] = 6;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{83D553}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 7:
		        {
		            PlayerInfo[playerid][pColors] = 7;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{187700}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 8:
		        {
		            PlayerInfo[playerid][pColors] = 8;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{FF9A00}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		        case 9:
		        {
		            PlayerInfo[playerid][pColors] = 9;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{222222}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 10:
		        {
		            PlayerInfo[playerid][pColors] = 10;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{FF2C9D}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 11:
		        {
		            PlayerInfo[playerid][pColors] = 11;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{F4FA58}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 12:
		        {
		            PlayerInfo[playerid][pColors] = 12;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{00BFFF}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 13:
		        {
		            PlayerInfo[playerid][pColors] = 13;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{819FF7}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 14:
		        {
		            PlayerInfo[playerid][pColors] = 14;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{FE9A2E}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 15:
		        {
		            PlayerInfo[playerid][pColors] = 15;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{FA8258}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 16:
		        {
		            PlayerInfo[playerid][pColors] = 16;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{00FF40}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 17:
		        {
		            PlayerInfo[playerid][pColors] = 17;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{D358F7}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 18:
		        {
		            PlayerInfo[playerid][pColors] = 18;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{4169E1}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 19:
		        {
		            PlayerInfo[playerid][pColors] = 19;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{9ACD32}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 20:
		        {
		            PlayerInfo[playerid][pColors] = 20;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{F0E68C}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 21:
		        {
		            PlayerInfo[playerid][pColors] = 21;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{BDB76B}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 22:
		        {
		            PlayerInfo[playerid][pColors] = 22;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{FF1493}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 23:
		        {
		            PlayerInfo[playerid][pColors] = 23;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{9966CC}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 24:
		        {
		            PlayerInfo[playerid][pColors] = 24;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{F0B2B2}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 25:
		        {
		            PlayerInfo[playerid][pColors] = 25;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{DB7093}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		    }
		}
	}
	if(dialogid == 6268)
	{
		if(response)
		{
			switch(listitem)
		    {
		        case 0:
		        {
					PlayerInfo[playerid][pColors] = 0;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{CECECE}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
				}
				case 1:
		        {
					PlayerInfo[playerid][pColors] = 26;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{E70031}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
				}
				case 2:
		        {
					PlayerInfo[playerid][pColors] = 27;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{AB0000}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
				}
				case 3:
		        {
					PlayerInfo[playerid][pColors] = 28;
					Update(playerid, pColorsx);
		            SCM(playerid, COLOR_WHITE,"{FF6347}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
				}
			}
		}
	}
	if(dialogid == DIALOG_AIAPLICATIE)
	{
	    if(!response) return 1;
	    new sqlcheck2[256];
		mysql_format(SQL, sqlcheck2, sizeof(sqlcheck2), "DELETE FROM `aplicatii` WHERE `playerid`='%d'", PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, sqlcheck2, "", "");
		mysql_format(SQL, sqlcheck2, sizeof(sqlcheck2), "UPDATE `users` SET `aplicatie`='0' WHERE `id`='%d'", PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, sqlcheck2, "", "");
		SCM(playerid, COLOR_RED, "Aplicatia a fost stearsa cu succes.");
	}
	if(dialogid == DIALOG_APLICATII)
	{
	    if(response)
	    {
	        new idaplicant, checkmysql[1200], level,numeaplicant[60],ore,result[2000],stringmsg[3800];
	        if(listitem >= 0)
	        {
	            idaplicant = Selected[playerid][listitem];
				mysql_format(SQL, checkmysql, sizeof(checkmysql), "SELECT * FROM `users` WHERE `id`='%d'", idaplicant);
				new Cache: verificare = mysql_query(SQL, checkmysql);
				for(new i, c = cache_get_row_count(); i != c; i++)
				{
				    level = cache_get_field_content_int(i, "Level");
				    ore = cache_get_field_content_int(i, "ConnectedTime");
				    cache_get_field_content(i, "name", result); format(numeaplicant,30, result);
				}
				cache_delete(verificare);
				mysql_format(SQL, checkmysql, sizeof(checkmysql), "SELECT * FROM `aplicatii` WHERE `playerid`='%d'", idaplicant);
				new Cache: verificare2 = mysql_query(SQL, checkmysql);
				for(new i, c = cache_get_row_count(); i != c; i++)
				{
					cache_get_field_content(i, "r1", result); format(raspunsfactiune[playerid], 2000, result);
					cache_get_field_content(i, "r2", result); format(raspunsfactiune2[playerid], 2000, result);
					cache_get_field_content(i, "r3", result); format(raspunsfactiune3[playerid], 2000, result);
					cache_get_field_content(i, "r4", result); format(raspunsfactiune4[playerid], 2000, result);
					cache_get_field_content(i, "r5", result); format(raspunsfactiune5[playerid], 2000, result);
					cache_get_field_content(i, "r6", result); format(raspunsfactiune6[playerid], 2000, result);
					cache_get_field_content(i, "r7", result); format(raspunsfactiune7[playerid], 2000, result);
					cache_get_field_content(i, "r8", result); format(raspunsfactiune8[playerid], 2000, result);
					cache_get_field_content(i, "r9", result); format(raspunsfactiune9[playerid], 2000, result);
					appfactiune[playerid] = cache_get_field_content_int(i, "factionid");
				}
				cache_delete(verificare2);
				format(stringmsg, sizeof(stringmsg), "%s\nNumele aplicantului: %s\nLevelul aplicantului: %d\nOrele aplicantului: %d\n\n",stringmsg,numeaplicant,level,ore);
				format(stringmsg, sizeof(stringmsg), "%s\nDe ce vrei sa intri in %s (minim 10 cuvinte): %s\nMotivul iesirii din ultima factiune: %s\nAi fost vreodata banat?, daca da, care a fost motivul? (raspunde sincer): %s",stringmsg,DynamicFactions[appfactiune[playerid]][fName],raspunsfactiune[playerid],raspunsfactiune2[playerid],raspunsfactiune3[playerid]);
				format(stringmsg, sizeof(stringmsg), "%s\nAti mai facut parte din %s?Daca da , de ce ati parasit aceasta factiune?: %s\nCat timp petreci pe SA:MP fara AFK(ore): %s\nEsti de acord sa stai in %s minim 14zile?: %s", stringmsg, DynamicFactions[appfactiune[playerid]][fName], raspunsfactiune4[playerid], raspunsfactiune5[playerid],DynamicFactions[appfactiune[playerid]][fName], raspunsfactiune6[playerid]);
				format(stringmsg, sizeof(stringmsg), "%s\nAti avut / aveti probleme cu cineva din factiunea %s?: %s\nVei respecta liderul si membrii cu rank mai mare din %s?: %s\nCum te-ai descrie in realitate(minim 10 cuvinte): %s\n\n\n",stringmsg, DynamicFactions[appfactiune[playerid]][fName], raspunsfactiune7[playerid],DynamicFactions[appfactiune[playerid]][fName],raspunsfactiune8[playerid],raspunsfactiune9[playerid]);
				ShowPlayerDialog(playerid, DIALOG_APLICATIE, DIALOG_STYLE_MSGBOX, "Acceptarea / respingerea aplicatiei...",stringmsg, "Accepta", "Respinge");
                appfactiune[playerid] = idaplicant;
			}
	    }
	}
	if(dialogid == DIALOG_APLICATIE)
	{
	    new checkmysql[1200];
		if(response)
		{
		    if(GetFactionMembers(PlayerInfo[playerid][pLeader]) >= DynamicFactions[PlayerInfo[playerid][pLeader]][fMaxMembers]) return SCM(playerid, COLOR_ERROR, "Nu mai sunt sloturi disponibile...");
		    for(new i; i < MAX_PLAYERS; i++)
		    {
		    	if(PlayerInfo[i][pSQLID] == appfactiune[playerid])
	   			{
					PlayerInfo[i][pMember] = PlayerInfo[playerid][pLeader];
					PlayerInfo[i][pRank] = 1;
					SpawnPlayer(i);
	   			}
		    }
		    mysql_format(SQL, checkmysql, sizeof(checkmysql), "UPDATE `users` SET `Member`='%d', `Rank`='1',`aplicatie`='0' WHERE `id`='%d'", PlayerInfo[playerid][pMember],appfactiune[playerid]);
		    mysql_tquery(SQL, checkmysql, "","");
		    mysql_format(SQL, checkmysql, sizeof(checkmysql), "INSERT INTO emails (`playerid`,`Message`) VALUES ('%d', 'Ai fost acceptat in factiunea %s de catre liderul %s.')",appfactiune[playerid], DynamicFactions[PlayerInfo[playerid][pLeader]][fName],PlayerInfo[playerid][pNormalName]);
		    mysql_tquery(SQL, checkmysql, "","");
		    mysql_format(SQL, checkmysql, sizeof(checkmysql), "DELETE FROM `aplicatii` WHERE `playerid`='%d'", appfactiune[playerid]);
			mysql_tquery(SQL, checkmysql, "","");
			SCM(playerid, COLOR_ERROR, "Aplicantul a fost acceptat si a fost invitat in factiune, aplicatia acestuia a fost stearsa din baza de date...");
		}
		else
  		{
  		    mysql_format(SQL, checkmysql, sizeof(checkmysql), "UPDATE `users` SET `aplicatie`='0' WHERE `id`='%d'", appfactiune[playerid]);
		    mysql_tquery(SQL, checkmysql, "", "");
	     	mysql_format(SQL, checkmysql, sizeof(checkmysql), "INSERT INTO emails (`playerid`,`Message`) VALUES ('%d', 'Ai fost respins pentru factiunea %s de catre liderul %s.')",appfactiune[playerid], DynamicFactions[PlayerInfo[playerid][pLeader]][fName],PlayerInfo[playerid][pNormalName]);
		    mysql_tquery(SQL, checkmysql, "","");
		    mysql_format(SQL, checkmysql, sizeof(checkmysql), "DELETE FROM `aplicatii` WHERE `playerid`='%d'", appfactiune[playerid]);
			mysql_tquery(SQL, checkmysql, "","");
			SCM(playerid, COLOR_ERROR, "Aplicantul a fost respins, aplicatia acestuia a fost stearsa din baza de date...");
  		}
	}
	if(dialogid == DIALOG_APLICA)
	{
	    if(response)
	    {
	        new factiune;
	        if(listitem < 6)
		 	{
  	 			factiune = listitem+1;
	        }
	        else
	        {
         		factiune = listitem+2;
	        }
	        if(listitem >= 0)
		 	{
		 	    new checkmysql[1200], strr[276], time, count;
		 	    format(strr, sizeof(strr), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", PlayerInfo[playerid][pSQLID]);
				new Cache: salut = mysql_query(SQL, strr);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					if(count < 30)
					{
						time += cache_get_field_content_int(i, "time");
						count++;
					}
				}
				cache_delete(salut);
				//if(time < 36000) return SS(playerid, COLOR_RED, "Trebuie sa ai 10 ore jucate in ultimele 30 de zile (fara AFK/sleep) pentru a aplica la aceasta factiune.", "You need 10 played hours in last 30 days (without AFK/sleep) to apply this factions.");
		 	    if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0) return SCM(playerid, COLOR_ERROR, "Nu poti accesa aceasta comanda deoarece faci parte dintr-o factiune");
				mysql_format(SQL, checkmysql, sizeof(checkmysql), "SELECT * FROM `users` WHERE `id`='%d' and `aplicatie`='0'",PlayerInfo[playerid][pSQLID]);
				new Cache: verificare = mysql_query(SQL, checkmysql);
				if(cache_get_row_count() < 1) return ShowPlayerDialog(playerid, DIALOG_AIAPLICATIE, DIALOG_STYLE_MSGBOX, "Server: Aplicatie", "Ai deja o aplicatie la o factiune, pentru a putea continua este nevoie sa o stergi.", "Sterge", "Anuleaza");
				cache_delete(verificare);
		 	    if(DynamicFactions[factiune][fApplication] < 1) return SCM(playerid, COLOR_ERROR, "Aplicatiile pentru aceasta factiune sunt inchise");
				if(GetFactionMembers(factiune) >= DynamicFactions[factiune][fMaxMembers]) return SCM(playerid, COLOR_ERROR, "Nu mai sunt sloturi disponibile...");
				format(MGLOBAL, sizeof(MGLOBAL), "Ai nevoie de minim nivel %d pentru a aplica in factiunea %s!",DynamicFactions[factiune][fMinLevel],DynamicFactions[factiune][fName]);
				if(PlayerInfo[playerid][pLevel] < DynamicFactions[factiune][fMinLevel]) return SCM(playerid, COLOR_ERROR, MGLOBAL);
				format(MGLOBAL, sizeof(MGLOBAL), "Ai ales sa aplici pentru factiunea %s\nEsti pregatit?", DynamicFactions[factiune][fName]);
				ShowPlayerDialog(playerid, DIALOG_APLICAQ, DIALOG_STYLE_MSGBOX, "Intrebarea 1 din 10", MGLOBAL, "da","nu");
                appfactiune[playerid] = factiune;
			}
	    }
	}
	if(dialogid == DIALOG_APLICAQ)
	{
	    if(response)
	    {
	        format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nDe ce vrei sa intri in %s (minim 10 cuvinte):",DynamicFactions[appfactiune[playerid]][fName]);
	        ShowPlayerDialog(playerid, DIALOG_APLICAQ2, DIALOG_STYLE_INPUT, "Intrebarea 2 din 10", MGLOBAL, "Trimite", "");
	    }
	}
	if(dialogid == DIALOG_APLICAQ2)
	{
	    if(response)
	    {
	        if(strlen(inputtext) >= 10)
	        {
	            format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nMotivul iesirii din ultima factiune:");
	        	ShowPlayerDialog(playerid, DIALOG_APLICAQ3, DIALOG_STYLE_INPUT, "Intrebarea 3 din 10", MGLOBAL, "Trimite", "");
	        	strcpy(raspunsfactiune[playerid],inputtext,512);
	        }
	        else
	        {
	            format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nDe ce vrei sa intri in %s (minim 10 cuvinte):",DynamicFactions[appfactiune[playerid]][fName]);
	        	ShowPlayerDialog(playerid, DIALOG_APLICAQ2, DIALOG_STYLE_INPUT, "Intrebarea 2 din 10", MGLOBAL, "Trimite", "");
	        }
	    }
	}
	if(dialogid == DIALOG_APLICAQ3)
	{
	    if(response)
	    {
	        if(strlen(inputtext) < 1)
			{
				format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nMotivul iesirii din ultima factiune:");
       			ShowPlayerDialog(playerid, DIALOG_APLICAQ3, DIALOG_STYLE_INPUT, "Intrebarea 3 din 10", MGLOBAL, "Trimite", "");
				return 1;
			}
			strcpy(raspunsfactiune2[playerid],inputtext,512);
			format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nAi fost vreodata banat?, daca da, care a fost motivul? (raspunde sincer):");
       		ShowPlayerDialog(playerid, DIALOG_APLICAQ4, DIALOG_STYLE_INPUT, "Intrebarea 4 din 10", MGLOBAL, "Trimite", "");
		}
	}
	if(dialogid == DIALOG_APLICAQ4)
	{
	    if(response)
	    {
			if(strlen(inputtext) < 1)
			{
				format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nAi fost vreodata banat?, daca da, care a fost motivul? (raspunde sincer):");
       			ShowPlayerDialog(playerid, DIALOG_APLICAQ4, DIALOG_STYLE_INPUT, "Intrebarea 4 din 10", MGLOBAL, "Trimite", "");
				return 1;
			}
			strcpy(raspunsfactiune3[playerid],inputtext,512);
			format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nAti mai facut parte din %s?Daca da , de ce ati parasit aceasta factiune?:",DynamicFactions[appfactiune[playerid]][fName]);
       		ShowPlayerDialog(playerid, DIALOG_APLICAQ5, DIALOG_STYLE_INPUT, "Intrebarea 5 din 10", MGLOBAL, "Trimite", "");
		}
	}
	if(dialogid == DIALOG_APLICAQ5)
	{
	    if(response)
	    {
			if(strlen(inputtext) < 1)
			{
			    format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nAti mai facut parte din %s?Daca da , de ce ati parasit aceasta factiune?:",DynamicFactions[appfactiune[playerid]][fName]);
       			ShowPlayerDialog(playerid, DIALOG_APLICAQ5, DIALOG_STYLE_INPUT, "Intrebarea 5 din 10", MGLOBAL, "Trimite", "");
       			return 1;
			}
			strcpy(raspunsfactiune4[playerid],inputtext,512);
			format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nCat timp petreci pe SA:MP fara AFK(ore):");
       		ShowPlayerDialog(playerid, DIALOG_APLICAQ6, DIALOG_STYLE_INPUT, "Intrebarea 6 din 10", MGLOBAL, "Trimite", "");
	    }
	}
	if(dialogid == DIALOG_APLICAQ6)
	{
	    if(response)
	    {
            if(strlen(inputtext) < 1)
			{
			    format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nCat timp petreci pe SA:MP fara AFK(ore):");
       			ShowPlayerDialog(playerid, DIALOG_APLICAQ6, DIALOG_STYLE_INPUT, "Intrebarea 6 din 10", MGLOBAL, "Trimite", "");
				return 1;
			}
			strcpy(raspunsfactiune5[playerid],inputtext,512);
			format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nEsti de acord sa stai in %s minim 14zile?:",DynamicFactions[appfactiune[playerid]][fName]);
			ShowPlayerDialog(playerid, DIALOG_APLICAQ7, DIALOG_STYLE_INPUT, "Intrebarea 7 din 10", MGLOBAL, "Trimite", "");
	    }
	}
	if(dialogid == DIALOG_APLICAQ7)
	{
	    if(response)
	    {
            if(strlen(inputtext) < 1)
			{
			    format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nEsti de acord sa stai in %s minim 14zile?:",DynamicFactions[appfactiune[playerid]][fName]);
				ShowPlayerDialog(playerid, DIALOG_APLICAQ7, DIALOG_STYLE_INPUT, "Intrebarea 7 din 10", MGLOBAL, "Trimite", "");
				return 1;
			}
			strcpy(raspunsfactiune6[playerid],inputtext,512);
			format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nAti avut / aveti probleme cu cineva din factiunea %s?:",DynamicFactions[appfactiune[playerid]][fName]);
			ShowPlayerDialog(playerid, DIALOG_APLICAQ8, DIALOG_STYLE_INPUT, "Intrebarea 8 din 10", MGLOBAL, "Trimite", "");
	    }
	}
	if(dialogid == DIALOG_APLICAQ8)
	{
	    if(response)
	    {
            if(strlen(inputtext) < 1)
			{
			    format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nAti avut / aveti probleme cu cineva din factiunea %s?:",DynamicFactions[appfactiune[playerid]][fName]);
				ShowPlayerDialog(playerid, DIALOG_APLICAQ8, DIALOG_STYLE_INPUT, "Intrebarea 8 din 10", MGLOBAL, "Trimite", "");
				return 1;
			}
			strcpy(raspunsfactiune7[playerid],inputtext,512);
			format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nVei respecta liderul si membrii cu rank mai mare din %s?:",DynamicFactions[appfactiune[playerid]][fName]);
			ShowPlayerDialog(playerid, DIALOG_APLICAQ9, DIALOG_STYLE_INPUT, "Intrebarea 9 din 10", MGLOBAL, "Trimite", "");
	    }
	}
	if(dialogid == DIALOG_APLICAQ9)
	{
	    if(response)
	    {
            if(strlen(inputtext) < 1)
			{
			    format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nVei respecta liderul si membrii cu rank mai mare din %s?:",DynamicFactions[appfactiune[playerid]][fName]);
				ShowPlayerDialog(playerid, DIALOG_APLICAQ9, DIALOG_STYLE_INPUT, "Intrebarea 9 din 10", MGLOBAL, "Trimite", "");
				return 1;
			}
			strcpy(raspunsfactiune8[playerid],inputtext,512);
			format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nCum te-ai descrie in realitate(minim 10 cuvinte):");
			ShowPlayerDialog(playerid, DIALOG_APLICAQ10, DIALOG_STYLE_INPUT, "Intrebarea 10 din 10", MGLOBAL, "Trimite", "");
	    }
	}
	if(dialogid == DIALOG_APLICAQ10)
	{
	    if(response)
	    {
	        new stringmsg[3800];
            if(strlen(inputtext) < 10)
			{
			    format(MGLOBAL, sizeof(MGLOBAL), "(!) Te rog sa raspunzi la aceasta intrebare cat mai citibil si cat mai strans (!)\nCum te-ai descrie in realitate(minim 10 cuvinte):");
				ShowPlayerDialog(playerid, DIALOG_APLICAQ10, DIALOG_STYLE_INPUT, "Intrebarea 10 din 10", MGLOBAL, "Trimite", "");
				return 1;
			}
			strcpy(raspunsfactiune9[playerid],inputtext,512);
			format(stringmsg, sizeof(stringmsg), "%s, asa arata aplicatia ta pentru factiunea %s, vrei sa o trimiti spre verificare sau sa o stergi?\n\n",PlayerInfo[playerid][pNormalName], DynamicFactions[appfactiune[playerid]][fName]);
			format(stringmsg, sizeof(stringmsg), "%s\nNumele aplicantului: %s\nLevelul aplicantului: %d\nOrele aplicantului: %d\n\n",stringmsg,PlayerInfo[playerid][pNormalName],PlayerInfo[playerid][pLevel],PlayerInfo[playerid][pConnectTime]);
			format(stringmsg, sizeof(stringmsg), "%s\nDe ce vrei sa intri in %s (minim 10 cuvinte): %s\nMotivul iesirii din ultima factiune: %s\nAi fost vreodata banat?, daca da, care a fost motivul? (raspunde sincer): %s",stringmsg,DynamicFactions[appfactiune[playerid]][fName],raspunsfactiune[playerid],raspunsfactiune2[playerid],raspunsfactiune3[playerid]);
			format(stringmsg, sizeof(stringmsg), "%s\nAti mai facut parte din %s?Daca da , de ce ati parasit aceasta factiune?: %s\nCat timp petreci pe SA:MP fara AFK(ore): %s\nEsti de acord sa stai in %s minim 14zile?: %s", stringmsg, DynamicFactions[appfactiune[playerid]][fName], raspunsfactiune4[playerid], raspunsfactiune5[playerid],DynamicFactions[appfactiune[playerid]][fName], raspunsfactiune6[playerid]);
			format(stringmsg, sizeof(stringmsg), "%s\nAti avut / aveti probleme cu cineva din factiunea %s?: %s\nVei respecta liderul si membrii cu rank mai mare din %s?: %s\nCum te-ai descrie in realitate(minim 10 cuvinte): %s\n\n\n",stringmsg, DynamicFactions[appfactiune[playerid]][fName], raspunsfactiune7[playerid],DynamicFactions[appfactiune[playerid]][fName],raspunsfactiune8[playerid],raspunsfactiune9[playerid]);
			format(stringmsg, sizeof(stringmsg), "%s{FFFFFF}({FF0000}!{FFFFFF}) Atentie daca vei apasa pe butonul 'Trimite' nu vei mai putea aplica pentru o factiune pana aplicatia nu este respinsa / acceptata. {FFFFFF}({FF0000}!{FFFFFF})",stringmsg);
			ShowPlayerDialog(playerid, DIALOG_APLICAQ11, DIALOG_STYLE_MSGBOX, "Trimitere aplicatie...",stringmsg, "Trimite", "Sterge");
	    }
	}
	if(dialogid == DIALOG_APLICAQ11)
	{
	    if(response)
	    {
	        new stringsql[3800];
			SCM(playerid, COLOR_ERROR, "Aplicatia a fost trimisa, aceasta este in curs de verificare vei primi o notificare (/email) cand vei fi respins / acceptat.");
			mysql_format(SQL, stringsql, sizeof(string), "INSERT INTO aplicatii (`factionid`,`playerid`) VALUES ('%d','%d')",appfactiune[playerid],PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, stringsql, "", "");
			mysql_format(SQL, stringsql, sizeof(stringsql), "UPDATE `aplicatii` SET `r1`='%s',`r2`='%s',`r3`='%s' WHERE `playerid`='%d' AND `factionid`='%d'",raspunsfactiune[playerid],raspunsfactiune2[playerid],raspunsfactiune3[playerid],PlayerInfo[playerid][pSQLID],appfactiune[playerid]);
			mysql_tquery(SQL, stringsql, "", "");
			mysql_format(SQL, stringsql, sizeof(stringsql), "UPDATE `aplicatii` SET `r4`='%s',`r5`='%s',`r6`='%s' WHERE `playerid`='%d' AND `factionid`='%d'",raspunsfactiune4[playerid],raspunsfactiune5[playerid],raspunsfactiune6[playerid],PlayerInfo[playerid][pSQLID], appfactiune[playerid]);
            mysql_tquery(SQL, stringsql, "", "");
            mysql_format(SQL, stringsql, sizeof(stringsql), "UPDATE `aplicatii` SET `r7`='%s',`r8`='%s',`r9`='%s' WHERE `playerid`='%d' AND `factionid`='%d'",raspunsfactiune7[playerid],raspunsfactiune8[playerid],raspunsfactiune9[playerid],PlayerInfo[playerid][pSQLID], appfactiune[playerid]);
            mysql_tquery(SQL, stringsql, "", "");
            mysql_format(SQL, stringsql, sizeof(stringsql), "UPDATE `users` SET `aplicatie`='%d' WHERE `id`='%d'", appfactiune[playerid],PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, stringsql, "", "");
		}
	    else
	    {
	        SCM(playerid, COLOR_ERROR, "Aplicatia a fost stearsa!");
	    }
	}
	if(dialogid == DIALOG_VEHSPAWN)
	{
		if(response)
		{
			if(listitem < PlayerInfo[playerid][pCarSlots])
			{
				if(PlayerInfo[playerid][pCar][listitem] != -1)
				{
					new titlestring[128],s=listitem;
					format(titlestring,sizeof(titlestring),"Manage your %s (%d)",aVehicleNames[PlayerInfo[playerid][pCarModel][s] - 400],PlayerInfo[playerid][pCar][s]);
					SelectedCar[playerid] = s;
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWNCAR,DIALOG_STYLE_LIST,titlestring,"{FFFFFF}Vehicle Info\nTow Vehicle (/park)\nTow Vehicle (last known location)\nFind Vehicle\nBuy Insurance\nClear Age and KM - {FFFF00}20 premium points\nUpgrade to VIP vehicle - {FFFF00}100 premium points\nUnstuck Vehicle","Select","Close");
				}
			}
			else
			{
				if(PlayerInfo[playerid][pCarSlots] <= 9)
				{
					if(PlayerInfo[playerid][pPremiumPoints] <= 19) return SS(playerid, COLOR_LIGHTGREEN3, "Nu ai suficiente puncte premium.", "You don't have enough premium points.");
					if(PlayerInfo[playerid][pLanguage] == 2) ShowPlayerDialog(playerid, DIALOG_BUYSLOT, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca vrei sa platesti 20 puncte premium pentru a-ti cumpara un slot de vehicule?","Da","Nu");
					else ShowPlayerDialog(playerid, DIALOG_BUYSLOT, DIALOG_STYLE_MSGBOX, "Vehicle slot", "Do you want to pay 20 premium points to buy a vehicle slot?","Yes","No");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHSPAWNCAR)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new i = SelectedCar[playerid],strings[256];
				new speed = MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]);
				if(PlayerInfo[playerid][pCarBlock][i] > 0) format(strings,sizeof(strings),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed: %d km/h\nBlocked for: %d hours",PlayerInfo[playerid][pCarModel][i],PlayerInfo[playerid][pCarKM][i],GetDaysFromTimestamp(PlayerInfo[playerid][pCarBuyTime][i]),FormatNumber(PlayerInfo[playerid][pCarInsPrice][i]),PlayerInfo[playerid][pCarIns][i],speed,PlayerInfo[playerid][pCarBlock][i]);
				else format(strings,sizeof(strings),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed: %d km/h",PlayerInfo[playerid][pCarModel][i],PlayerInfo[playerid][pCarKM][i],GetDaysFromTimestamp(PlayerInfo[playerid][pCarBuyTime][i]),FormatNumber(PlayerInfo[playerid][pCarInsPrice][i]),PlayerInfo[playerid][pCarIns][i],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",strings,"Close","");
			}
			if(listitem == 1)
			{
				new i = SelectedCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective;
				if(IsTrailerAttachedToVehicle(PlayerInfo[playerid][pCarID][i])) return SendClientMessage(playerid, COLOR_WHITE, "On a mission right now, can't use this command.");
				if(!CarTow(PlayerInfo[playerid][pCarID][i]) && PlayerInfo[playerid][pCarID][i] != 0) return SendClientMessage(playerid, COLOR_GREY, "The car is in use and it can't be towed.");
				if(PlayerInfo[playerid][pCarID][i] != 0) DestroyVehicle(PlayerInfo[playerid][pCarID][i]);
				LoadCar(playerid);
				PlayerInfo[playerid][pCarID][i] = CreateVehicle(PlayerInfo[playerid][pCarModel][i],PlayerInfo[playerid][pCarLocX][i],PlayerInfo[playerid][pCarLocY][i],PlayerInfo[playerid][pCarLocZ][i],PlayerInfo[playerid][pCarAngle][i],PlayerInfo[playerid][pCarColor1][i],PlayerInfo[playerid][pCarColor2][i],-1);
				SetVehicleNumberPlate(PlayerInfo[playerid][pCarID][i], CarPlate[playerid][i]);
				SetVehicleHealth(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarHP][i]);
				UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarDamage1][i], PlayerInfo[playerid][pCarDamage2][i], PlayerInfo[playerid][pCarDamage3][i], PlayerInfo[playerid][pCarDamage4][i]);
				Gas[PlayerInfo[playerid][pCarID][i]] = PlayerInfo[playerid][pCarGas][i];
				if(PlayerInfo[playerid][pCarLock][i] == 0)
				{
					GetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],engine,lights,alarm,doors,bonnet,boot,objective);
			    	SetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],VEHICLE_PARAMS_OFF,lights,alarm,0,bonnet,boot,objective);
				}
				else
				{
					GetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],engine,lights,alarm,doors,bonnet,boot,objective);
			    	SetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],VEHICLE_PARAMS_OFF,lights,alarm,1,bonnet,boot,objective);
				}
				for(new d; d < 17; d++)
				{
					if(CarMod[playerid][i][d] != 0) AddVehicleComponent(PlayerInfo[playerid][pCarID][i],CarMod[playerid][i][d]);
				}
				ChangeVehiclePaintjob(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarPaintJ][i]);
				vehEngine[PlayerInfo[playerid][pCarID][i]] = 0;
				if(strlen(CarVipName[playerid][i]) > 0)
				{
					SetVipText(playerid, i);
				}
				SendClientMessage(playerid, COLOR_GREY, "Your car has been respawned.");
			}
			if(listitem == 2)
			{
				new i = SelectedCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective;
				if(IsTrailerAttachedToVehicle(PlayerInfo[playerid][pCarID][i])) return SendClientMessage(playerid, COLOR_WHITE, "On a mission right now, can't use this command.");
				if(!CarTow(PlayerInfo[playerid][pCarID][i]) && PlayerInfo[playerid][pCarID][i] != 0) return SendClientMessage(playerid, COLOR_GREY, "The car is in use and it can't be towed.");
				if(PlayerInfo[playerid][pCarID][i] != 0) DestroyVehicle(PlayerInfo[playerid][pCarID][i]);
				LoadCar(playerid);
				PlayerInfo[playerid][pCarID][i] = CreateVehicle(PlayerInfo[playerid][pCarModel][i],PlayerInfo[playerid][pCarLLocX][i],PlayerInfo[playerid][pCarLLocY][i],PlayerInfo[playerid][pCarLLocZ][i],PlayerInfo[playerid][pCarAngle2][i],PlayerInfo[playerid][pCarColor1][i],PlayerInfo[playerid][pCarColor2][i],-1);
				SetVehicleNumberPlate(PlayerInfo[playerid][pCarID][i], CarPlate[playerid][i]);
				SetVehicleHealth(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarHP][i]);
				UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarDamage1][i], PlayerInfo[playerid][pCarDamage2][i], PlayerInfo[playerid][pCarDamage3][i], PlayerInfo[playerid][pCarDamage4][i]);
				Gas[PlayerInfo[playerid][pCarID][i]] = PlayerInfo[playerid][pCarGas][i];
				if(PlayerInfo[playerid][pCarLock][i] == 0)
				{
					GetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],engine,lights,alarm,doors,bonnet,boot,objective);
			    	SetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],VEHICLE_PARAMS_OFF,lights,alarm,0,bonnet,boot,objective);
				}
				else
				{
					GetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],engine,lights,alarm,doors,bonnet,boot,objective);
			    	SetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],VEHICLE_PARAMS_OFF,lights,alarm,1,bonnet,boot,objective);
				}
				for(new d; d < 17; d++)
				{
					if(CarMod[playerid][i][d] != 0) AddVehicleComponent(PlayerInfo[playerid][pCarID][i],CarMod[playerid][i][d]);
				}
				ChangeVehiclePaintjob(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarPaintJ][i]);
				vehEngine[PlayerInfo[playerid][pCarID][i]] = 0;
				if(strlen(CarVipName[playerid][i]) > 0)
				{
					SetVipText(playerid, i);
				}
				SendClientMessage(playerid, COLOR_GREY, "Your car has been respawned.");
			}
			if(listitem == 3)
			{
				new i = SelectedCar[playerid];
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_WHITE, "{FFF8C6}On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_WHITE,"You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
					if(PlayerInfo[playerid][pCarID][i] != 0)
					{
						LocateCar(PlayerInfo[playerid][pCarID][i],playerid);
					}
					else return SendClientMessage(playerid, COLOR_WHITE, "This vehicle is not spawned.");
				}
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Anulare Checkpoint", "Esti sigur ca vrei sa anulezi checkpoint-ul curent?", "Da", "Nu");
				}
			}
			if(listitem == 4)
			{
				new i = SelectedCar[playerid];
				new inscarpricee = PlayerInfo[playerid][pCarInsPrice][i],stringul[200];
			    if(PlayerInfo[playerid][pCarIns][i] < 5)
			    {
			        if(GetPlayerCash(playerid) >= inscarpricee)
	      			{
	      			    format(stringul,sizeof(stringul),"You want to buy 1 insurance for $%d?",inscarpricee);
	      			    ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", stringul, "Yes", "No");
					}
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 5)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				ShowPlayerDialog(playerid, DIALOG_BUYCLEARKM2, DIALOG_STYLE_MSGBOX, "Clear KM & Days", "Do you want to pay 20 premium points to clear your car km and days?","Yes","No");
			}
			if(listitem == 6)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 99) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points.\nNu ai suficiente puncte premium.", "Ok", "");
				new idcar = SelectedCar[playerid];
				if(PlayerInfo[playerid][pCarVIP][idcar] == 1) return SS(playerid, COLOR_LIGHTGREEN3, "Acest vehicul este deja VIP.", "This vehicle is already VIP.");
				if(PlayerInfo[playerid][pCarModel][idcar] != 411 && PlayerInfo[playerid][pCarModel][idcar] != 541 && PlayerInfo[playerid][pCarModel][idcar] != 560 && PlayerInfo[playerid][pCarModel][idcar] != 451 && PlayerInfo[playerid][pCarModel][idcar] != 480) return SS(playerid, COLOR_LIGHTGREEN3, "Momentan doar vehiculele Infernus, Turismo, Bullet si Sultan pot fi upgradate.", "This option can only be used for Infernus, Turismo, Bullet and Sultan vehicles.");
				ShowPlayerDialog(playerid, DIALOG_BUYVIPCAR, DIALOG_STYLE_MSGBOX, "VIP Vehicle", "Do you want to pay 100 premium points to make this vehicle VIP?","Yes","No");
			}
			if(listitem == 7)
			{
				new i = SelectedCar[playerid];
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_WHITE, "{FFF8C6}On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_WHITE,"You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
					if(PlayerInfo[playerid][pCarID][i] != 0)
					{
						if(PlayerInfo[playerid][pLanguage] == 1) ShowPlayerDialog(playerid, DIALOG_UNSTUCK, DIALOG_STYLE_MSGBOX, "Unstuck car", "This option was created for those who can't find the car using /findcar.\nUsing this option your car will be spawned in a parking lot in LV.\n\nAre you sure you want to do this?", "Yes", "No");
						else if(PlayerInfo[playerid][pLanguage] == 2) ShowPlayerDialog(playerid, DIALOG_UNSTUCK, DIALOG_STYLE_MSGBOX, "Unstuck car", "Aceasta optiune a fost creata pentru cei care nu-si pot gasi masina folosind /findcar.\nFolosind aceasta optiune vei avea masina spawnata intr-o parcare din LV.\n\nEsti sigur ca vrei sa faci asta?", "Da", "Nu");
					}
					else return SendClientMessage(playerid, COLOR_WHITE, "This vehicle is not spawned.");
				}
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Anulare Checkpoint", "Esti sigur ca vrei sa anulezi checkpoint-ul curent?", "Da", "Nu");
				}
			}
		}
	}
	if(dialogid == DIALOG_UNSTUCK)
	{
		if(response)
		{
			new i = SelectedCar[playerid];
			PlayerInfo[playerid][pCarLocX][i] = 2350.6128;
			PlayerInfo[playerid][pCarLocY][i] = 1405.0007;
			PlayerInfo[playerid][pCarLocZ][i] = 42.5548;
			PlayerInfo[playerid][pCarAngle][i] = 90.0;
			cUpdate(playerid, i, cLocationxx);
			cUpdate(playerid, i, cLocationyx);
			cUpdate(playerid, i, cLocationzx);
			cUpdate(playerid, i, cAnglex);
			SetVehicleToRespawnEx(PlayerInfo[playerid][pCarID][i]);
			SetPlayerCheckpoint(playerid,2350.6128,1405.0007,42.5548,4.0);
			CP[playerid] = 1012;
			SS(playerid, COLOR_YELLOW, "Masina ta a fost spawnata intr-o parcare din LV. Mergi la checkpoint pentru a o gasi.", "Your car was respawned in a parking lot in LV. Go to checkpoint to find your car.");

		}
		return 1;
	}
	if(dialogid == DIALOG_UNLOADTRASH)
	{
		if(response)
		{
			if(listitem == 0)
			{
				SetPlayerCheckpoint(playerid, 2781.27173, -2531.82104, 17.73810, 20.0);
				CP[playerid] = 10973;
				SS(playerid, COLOR_YELLOW, "Mergi la checkpoint pentru a descarca gunoiul.", "Follow the checkpoint to reach the unload trash.");
			}
			if(listitem == 1)
			{
				SetPlayerCheckpoint(playerid, 2523.44312, 2812.48975, 14.94440, 20.0);
				CP[playerid] = 10973;
				SS(playerid, COLOR_YELLOW, "Mergi la checkpoint pentru a descarca gunoiul.", "Follow the checkpoint to reach the unload trash.");
			}
			if(listitem == 2)
			{
				SetPlayerCheckpoint(playerid, -1899.72314, -1736.72607, 25.87010, 20.0);
				CP[playerid] = 10973;
				SS(playerid, COLOR_YELLOW, "Mergi la checkpoint pentru a descarca gunoiul.", "Follow the checkpoint to reach the unload trash.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_JOBULETES)
	{
	    if(response)
	    {
	        UsedFind[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			foreach(new i : Player)
			{
				if(IsACop(playerid))
				{
					if(caser[playerid] == i)
					{
						cased[i] --;
						caser[playerid] = 1001;
					}
				}

			}
			PlayerTextDrawHide(playerid, FindTXD[playerid][0]);
			PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
			DisablePlayerCheckpoint(playerid);
 			DisablePlayerRaceCheckpoint(playerid);
			SCM(playerid,COLOR_DARKPINK,"Checkpoint anulat!");
			CP[playerid] = 0;
			if(GotoMats[playerid] > 0)
			{
			    DisablePlayerCheckpoint(playerid);
			    GotoMats[playerid] = 0;
			}
			if(IsATruck(GetPlayerVehicleID(playerid)))
			{
			    RemovePlayerFromVehicle(playerid);
	    		restruck[playerid] = SetTimerEx("RespawnTruck", 1, 0, "i",playerid);
			}

    		if(TakingLesson[playerid] == 1)
    		{
        		PlayerTextDrawHide(playerid, DMVexam[playerid]);
        		PlayerTextDrawHide(playerid, DMVcheck[playerid]);
				DestroyVehicle(examcar[playerid]);
				DisableRemoteVehicleCollisions(playerid, 0);
				examcar[playerid] = -1;
        		TakingLesson[playerid] = 0;
	    		DisablePlayerRaceCheckpoint(playerid);
    		}
			if(farmerc[playerid] == 1)
			{
				farmerc[playerid] = 0;
				farmertime[playerid] = 1;
				PlayerTextDrawHide(playerid, farmjob[playerid]);
				PlayerTextDrawHide(playerid, farmbox[playerid]);
				PlayerTextDrawHide(playerid, farmtime[playerid]);
				PlayerTextDrawHide(playerid, farmspeed[playerid]);
				PlayerTextDrawHide(playerid, farmwanted[playerid]);
				KillTimer(timerfarmm[playerid]);
			}
			if(CarJacker[playerid] > 0)
			{
		    	DisablePlayerCheckpoint(playerid);
		    	CarJacker[playerid] = 0;
		    	JackAcc[playerid] = 0;
			}
			if(Trucker[playerid] >= 1)
			{
			    RemovePlayerFromVehicle(playerid);
		   		Trucker[playerid] = 0;
	        	Trucker2[playerid] = 0;
	        	DestroyVehicle(viddd[playerid]);
	        	viddd[playerid] = 0;
	        	SetVehicleToRespawn(TruckID[playerid]);
	        	TruckID[playerid] = 0;
	        	DisablePlayerCheckpoint(playerid);
	    		restruck[playerid] = SetTimerEx("RespawnTruck", 1, 0, "i",playerid);
			}
			if(busc[playerid] == 1)
			{
		    	busc[playerid] = 0;
		    	PlayerTextDrawHide(playerid, BusJob[playerid]);
		    	PlayerTextDrawHide(playerid, BusCheck[playerid]);
		    	KillTimer(timerbus[playerid]);
		    	DisablePlayerRaceCheckpoint(playerid);
		    	if(JobStep[playerid] >= 1)
		    	{
      				JobStep[playerid] = 0;
	    			GivePlayerCash(playerid, -2500);
		    		SS(playerid, COLOR_GREEN, "(-) Ai platit $2.500 companiei de autobuze pentru taxe.", "(-) You paid $2.500 for taxes.");
				}
			}
			if(MatsHolding[playerid] > 0)
			{
			    MatsHolding[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			    DisablePlayerRaceCheckpoint(playerid);
			    CP[playerid] = 0;
			}
			if(CheckBus[playerid] > 0)
			{
			    busc[playerid] = 0;
				CheckBus[playerid] = 0;
			}
			if(CP[playerid] == 34)
			{
			    new towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
				SetVehicleToRespawn(towedcar);
				CP[playerid] = 0;
			}
			if(CP[playerid] == 340 || CP[playerid] == 341 || CP[playerid] == 342 || CP[playerid] == 343 || CP[playerid] == 344 || CP[playerid] == 345 || CP[playerid] == 346 || CP[playerid] == 347)
			{
 				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0;
			}

		}
		return 1;
	}
	if(dialogid == DIALOG_INSURANCEBUY)
	{
	    if(response)
	    {
			new i = SelectedCar[playerid];
	        new inscarpricee = PlayerInfo[playerid][pCarInsPrice][i];
	        PlayerInfo[playerid][pCarIns][i] += 1;
        	format(string, sizeof(string), "Car insurance purchased for $%s.", FormatNumber(inscarpricee));
        	SCM(playerid, COLOR_WHITE, string);
        	GivePlayerCash(playerid, - inscarpricee);
			Update(playerid, pCashx);
			cUpdate(playerid, i, cInsurancecarx);
		}
		return 1;
	}
	if(dialogid == DIALOG_EMAILS)
	{
	    if(response)
	    {
	        new query[256],read,message[256],result[256],message2[500],timex[64];
			format(query, sizeof(query), "SELECT * FROM `emails` WHERE `ID` = '%d'", EmailId[playerid][listitem]);
			new Cache: emailresult = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
			    cache_get_field_content(i, "Message", result); format(message, sizeof(message), result);
			    cache_get_field_content(i, "Time", result); format(timex, sizeof(timex), result);
		    	read                    = cache_get_field_content_int(i, "EmailRead");
		    	if(read > 0 && PlayerInfo[playerid][pBlockedAcc] == 0)
		    	{
		    	    mysql_format(SQL, query, sizeof(query), "UPDATE `emails` SET `EmailRead`='0'");
					mysql_tquery(SQL,query,"","");
				}
			}
			cache_delete(emailresult);
			PlayerInfo[playerid][pNextNotification] = 0;
			format(message2, sizeof(message2), "%s\n\nSent at: %s", message, timex);
			ShowPlayerDialog(playerid,DIALOG_EMAILS2,DIALOG_STYLE_MSGBOX,"Read email",message2,"Back","Exit");
		}
		return 1;
	}
	if(dialogid == DIALOG_EMAILS2)
	{
	    if(response)
	    {
	        new result[300],message[300],stringy[5000],read,message2[100],finalmessage[100],query[500],emailid,idd=0;
	    	format(query, sizeof(query), "SELECT * FROM `emails` WHERE `playerid` = '%d' ORDER BY `ID` DESC LIMIT 10", PlayerInfo[playerid][pSQLID]);
			new Cache: emailresult = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
		    	cache_get_field_content(i, "Message", result); format(message, sizeof(message), result);
		    	read                    = cache_get_field_content_int(i, "EmailRead");
		    	emailid                 = cache_get_field_content_int(i, "ID");
		    	EmailId[playerid][idd] = emailid;
		    	idd++;
		    	if(strlen(message) > 49)
		    	{
		    		strmid(message2, message, 0, 50, sizeof(message2));
      				format(finalmessage,sizeof(finalmessage), "%s...",message2);
				}
		   	 	if(read > 0)
		    	{
		    		if(PlayerInfo[playerid][pLanguage] == 2)
		    		{
		    			format(stringy, sizeof(stringy), "%s[NECITIT]%s\n", stringy, finalmessage);
		    		}
		    		else
		    		{
		    			format(stringy, sizeof(stringy), "%s[UNREAD]%s\n", stringy, finalmessage);
		    		}
				}
				else
				{
			    	format(stringy, sizeof(stringy), "%s%s\n", stringy, finalmessage);
				}
			}
			cache_delete(emailresult);
       	 	ShowPlayerDialog(playerid,DIALOG_EMAILS,DIALOG_STYLE_LIST,"Emails",stringy,"Read","Exit");
		}
	}
	if(dialogid == DIALOG_NOSTOCK)
	{
	    if(response)
	    {
	        hidePlayerDialog(playerid);
	        BuyCar[playerid] = 0;
 		}
 		return 1;
	}
	if(dialogid == DIALOG_CARBUY5)
	{
	    if(response)
		{
		    new num = BuyCar[playerid];
		    if(GetPlayerCash(playerid) >= Stock[num][vPrice])
		    {
		        if(Stock[num][vStock] > 0)
		        {
		    		InsertCar(playerid,num,0);
				}
				else
				{
				    new stringg[MAX_STRING];
				    format(stringg,sizeof(stringg),"Aceasta masina numai este disponibila in Dealership. Stoc epuizat.\nYou can't buy this vehicle from the dealership. Out of stock.");
			 		ShowPlayerDialog(playerid, DIALOG_NOSTOCK, DIALOG_STYLE_MSGBOX, "Out of stock", stringg, "Close","");
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to purchase this vehicle.");
		}
		else
		{
			BuyCar[playerid] = -1;
			ShowPlayerDialog(playerid,DIALOG_CARBUY, DIALOG_STYLE_LIST, "Buy a car", "Cheap cars\nRegular cars\nExpensive cars\nPremium cars", "Select", "Close");
		}
	}
	if(dialogid == DIALOG_CARBUY2)
	{
	    if(response)
	    {
	    	new num = listitem + 1;
    		BuyCar[playerid] = num;
			new string33[256], stringtitle[256];
			format(stringtitle, sizeof(stringtitle), "%s ($%s) - %d available", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock]);
			format(string33, sizeof(string33), "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %d\nTop speed: %s km/h", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock], FormatNumber(Stock[num][vSpeed]));
			ShowPlayerDialog(playerid, DIALOG_CARBUY5, DIALOG_STYLE_MSGBOX, stringtitle, string33, "Buy car", "Back");
	    }
	    return 1;
	}
	if(dialogid == DIALOG_CARBUY3)
	{
	    if(response)
	    {
	        new cheapcars;
	        for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
			{
			    if(Stock[xf][vPrice] > 0 && Stock[xf][vPrice] <= 5200000)
			    {
			        cheapcars = xf;
				}
			}
	    	new num = listitem + cheapcars + 1;
 	    	BuyCar[playerid] = num;
			new string33[256], stringtitle[256];
			format(stringtitle, sizeof(stringtitle), "%s ($%s) - %d available", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock]);
			format(string33, sizeof(string33), "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %d\nTop speed: %s km/h", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock], FormatNumber(Stock[num][vSpeed]));
			ShowPlayerDialog(playerid, DIALOG_CARBUY5, DIALOG_STYLE_MSGBOX, stringtitle, string33, "Buy car", "Back");
		}
		return 1;
	}
	if(dialogid == DIALOG_CARBUY4)
	{
	    if(response)
        {
	    	new regcheapcars;
	    	for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
			{
			    if(Stock[xf][vPrice] > 5200000 && Stock[xf][vPrice] <= 17000000)
			    {
       				regcheapcars = xf;
				}
			}
			new num = listitem + regcheapcars + 1;
   			BuyCar[playerid] = num;
			new string33[256], stringtitle[256];
			format(stringtitle, sizeof(stringtitle), "%s ($%s) - %d available", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock]);
			format(string33, sizeof(string33), "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %d\nTop speed: %s km/h", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock], FormatNumber(Stock[num][vSpeed]));
			ShowPlayerDialog(playerid, DIALOG_CARBUY5, DIALOG_STYLE_MSGBOX, stringtitle, string33, "Buy car", "Back");
		}
		return 1;
	}
	if(dialogid == DIALOG_CARBUY)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new stringzz[MAX_STRING],stringy[MAX_STRING];
				for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
				{
				    if(Stock[xf][vPrice] > 0 && Stock[xf][vPrice] <= 5200000)
				    {
						format(stringy, sizeof(stringy), "%s ($%s) - %d in stock\n", Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
  						strcat(stringzz,stringy);
					}
				}
			    ShowPlayerDialog(playerid, DIALOG_CARBUY2, DIALOG_STYLE_LIST, "Buy a car", stringzz, "Select", "Close");
			}
	    	if(listitem == 1)
			{
				new stringzz[MAX_STRING],stringy[MAX_STRING];
				for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
				{
				    if(Stock[xf][vPrice] > 5200000 && Stock[xf][vPrice] <= 17000000)
				    {
						format(stringy, sizeof(stringy), "%s ($%s) - %d in stock\n", Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
  						strcat(stringzz,stringy);
					}
				}
			    ShowPlayerDialog(playerid, DIALOG_CARBUY3, DIALOG_STYLE_LIST, "Buy a car", stringzz, "Select", "Close");
			}
	    	if(listitem == 2)
			{
				new stringzz[MAX_STRING],stringy[MAX_STRING];
				for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
				{
				    if(Stock[xf][vPrice] >= 17000001 && Stock[xf][vPrice] < 90000000)
				    {
						format(stringy, sizeof(stringy), "%s ($%s) - %d in stock\n", Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
  						strcat(stringzz,stringy);
					}
				}
			    ShowPlayerDialog(playerid, DIALOG_CARBUY4, DIALOG_STYLE_LIST, "Buy a car", stringzz, "Select", "Close");
			}
			if(listitem == 3)
			{
				new string2[MAX_STRING];
				format(string2,sizeof(string2),"Sparrow - 220 premium points\nHotring Racer B - 250 premium points\nHotring Racer A - 250 premium points\nVortex - 250 premium points\nHotring Racer - 250 premium points\nMaverick - 300 premium points");
			    ShowPlayerDialog(playerid, DIALOG_CARBUY8, DIALOG_STYLE_LIST, "Buy a car", string2, "Select", "Close");
			}
	    }
	    return 1;
	}
	if(dialogid == DIALOG_CARBUY8)
	{
	    if(response)
        {
	    	new num = listitem + 98;
 	    	BuyCar[playerid] = num;
			new string33[256], stringtitle[256];
			format(stringtitle, sizeof(stringtitle), "%s ($%s) - %d available", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock]);
			format(string33, sizeof(string33), "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %d\nTop speed: %s km/h", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock], FormatNumber(Stock[num][vSpeed]));
			ShowPlayerDialog(playerid, DIALOG_CARBUY9, DIALOG_STYLE_MSGBOX, stringtitle, string33, "Buy car", "Back");
		}
		return 1;
	}
	if(dialogid == DIALOG_CARBUY9)
	{
		if(response)
		{
			new num = BuyCar[playerid],price;
			if(num == 98) price = 220;
			if(num == 99) price = 250;
			if(num == 100) price = 250;
			if(num == 101) price = 250;
			if(num == 102) price = 250;
			if(num == 103) price = 300;
		    if(PlayerInfo[playerid][pPremiumPoints] >= price)
		    {
		        if(Stock[num][vStock] > 0)
		        {
		    		InsertCar(playerid,num,1);
				}
				else
				{
				    new stringg[MAX_STRING];
				    format(stringg,sizeof(stringg),"Aceasta masina numai este disponibila in Dealership. Stoc epuizat.\nYou can't buy this vehicle from the dealership. Out of stock.");
			 		ShowPlayerDialog(playerid, DIALOG_NOSTOCK, DIALOG_STYLE_MSGBOX, "Out of stock", stringg, "Close","");
				}
			}
			else return SS(playerid, COLOR_WHITE, "Nu ai suficiente puncte premium. Detalii despre punctele premium pe http://ForEver RPG.ro/premium", "You don't have enough premium points. Details about premium points here http://ForEver RPG.ro/premium");
		}
		else
		{
			BuyCar[playerid] = -1;
			ShowPlayerDialog(playerid,DIALOG_CARBUY, DIALOG_STYLE_LIST, "Buy a car", "Cheap cars\nRegular cars\nExpensive cars\nPremium cars", "Select", "Close");
		}
	}
	if(dialogid == DIALOG_CARDAMAGE)
	{
	    if(response)
        {
        	new carid = GetPlayerVehicleID(playerid);
			if(carid == 0) return SCM(playerid,COLOR_WHITE,"You are not in vehicle.");
			for(new v; v < 10; v++)
			{
				if(carid == PlayerInfo[playerid][pCarID][v])
        		{
					new inscarp = PlayerInfo[playerid][pCarInsPrice][v];
         			if (PlayerInfo[playerid][pCarIns][v] == 0)
  	        		{
         				if(GetPlayerCash(playerid) >= inscarp)
     			    	{
     		    			PlayerInfo[playerid][pCarIns][v] = 1;
      		    			GivePlayerCash(playerid, - inscarp);
       		    			Update(playerid,pCashx);
							cUpdate(playerid, v, cInsurancecarx);
							SS(playerid, COLOR_GREEN3, "Asigurare platita. Acum iti poti folosi masina.", "Insurance paid. Now you can use your car.");
							return 1;
 						}
     					else
        				{
      	    				SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
         	    			RemovePlayerFromVehicle(playerid);
						}
 					}
     			}
			}
		}
		else return RemovePlayerFromVehicle(playerid);
		return 1;
    }
    if(dialogid == DIALOG_TRADEHOUSEHOUSE)
    {
    	if(response)
    	{
    		new id = SellTradeID[playerid], price = SellTradePrice[playerid], stringe[128];
    		GetPlayerName(playerid, sendername, sizeof(sendername));
    		SS(playerid, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permabanned.");
			SS(id, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permabanned.");
			SS(playerid, COLOR_BLUE, "Oferta trimisa!", "The offer was sent!");
			format(string, sizeof(string), "%s iti ofera casa lui (%d) + $%s pentru casa ta (%d).", sendername, PlayerInfo[playerid][pPhousekey], FormatNumber(price), PlayerInfo[id][pPhousekey]);
			format(stringe, sizeof(stringe), "%s offer his house (%d) + $%s for your house (%d).", sendername, PlayerInfo[playerid][pPhousekey], FormatNumber(price), PlayerInfo[id][pPhousekey]);
			SS(id, COLOR_GREEN2, string, stringe);
			format(string, sizeof(string), "Scrie /accept tradehouseforhouse %d pentru a accepta aceasta oferta", playerid);
			format(stringe, sizeof(stringe), "Type /accept tradehouseforhouse %d to accept this offer", playerid);
			SS(id, COLOR_WHITE, string, stringe);

			tradediff[id] = price;
			tradeofferer[id] = playerid;
			tradecars[id] = PlayerInfo[playerid][pPhousekey];
			tradecars2[id] = PlayerInfo[id][pPhousekey];
			SellTradeID[playerid] = -1;
			SellTradePrice[playerid] = 0;
    	}
    	return 1;
    }
    if(dialogid == DIALOG_TRADEHOUSECAR)
    {
    	if(response)
    	{
    		new id = SellTradeID[playerid], price = SellTradePrice[playerid], stringe[128], idcar = SelectedCar[playerid];
    		GetPlayerName(playerid, sendername, sizeof(sendername));

    		SS(playerid, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permabanned.");
			SS(id, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permabanned.");
			SS(playerid, COLOR_BLUE, "Oferta trimisa!", "The offer was sent!");
			format(string, sizeof(string), "%s iti ofera casa lui (%d) + $%s pentru masina ta (%s).", sendername, PlayerInfo[playerid][pPhousekey], FormatNumber(price), aVehicleNames[PlayerInfo[id][pCarModel][idcar] - 400]);
			format(stringe, sizeof(stringe), "%s offer his house (%d) + $%s for your car (%s).", sendername, PlayerInfo[playerid][pPhousekey], FormatNumber(price), aVehicleNames[PlayerInfo[id][pCarModel][idcar] - 400]);
			SS(id, COLOR_GREEN2, string, stringe);
			format(string, sizeof(string), "Scrie /accept tradehouseforcar %d pentru a accepta aceasta oferta", playerid);
			format(stringe, sizeof(stringe), "Type /accept tradehouseforcar %d to accept this offer", playerid);
			SS(id, COLOR_WHITE, string, stringe);

			tradecars[id] = PlayerInfo[playerid][pPhousekey];
			tradetype[id] = PlayerInfo[id][pCarID][idcar];
			tradetype2[id] = PlayerInfo[id][pCar][idcar];
			tradeofferer[id] = playerid;
			tradediff[id] = price;

			SellTradeID[playerid] = -1;
			SellTradePrice[playerid] = 0;
			SellTradeTimer[playerid] = 120;
    	}
    	return 1;
    }
    if(dialogid == DIALOG_SELLHIDDEN)
    {
    	if(response)
    	{
    		new id = SellHiddenID[playerid], price = SellHiddenPrice[playerid], stringe[128], giveplayer[30];
    		if(IsPlayerConnected(id))
    		{
    			GetPlayerName(playerid, sendername, sizeof(sendername));
    			GetPlayerName(id, giveplayer, sizeof(giveplayer));
    			hiddenoffer[id] = playerid;
				hiddenprice[id] = price;

				format(string, sizeof(string), "%s iti ofera o culoare hidden pentru $%s.", sendername, FormatNumber(price));
				format(stringe, sizeof(stringe), "%s has offered you a hidden color for $%s.", sendername, FormatNumber(price));
				SS(id, COLOR_BLUE2, string, stringe);
				format(string, sizeof(string), "Scrie /accept hidden %d pentru a accepta aceasta oferta", playerid);
				format(stringe, sizeof(stringe), "Type /accept hidden %d to accept this offer", playerid);
				SS(id, COLOR_WHITE, string, stringe);

				format(string, sizeof(string), "I-ai oferit o culoare hidden lui %s pentru $%s.", giveplayer, FormatNumber(price));
				format(stringe, sizeof(stringe), "You offered a hidden color to %s for $%s.", giveplayer, FormatNumber(price));
				SS(playerid, COLOR_BLUE2, string, stringe);

				SellHiddenID[playerid] = -1;
				SellHiddenPrice[playerid] = 0;
				SellTradeTimer[playerid] = 120;
    		}
    		else return SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
    	}
    	return 1;
    }
	if(dialogid == DIALOG_TRADECAR)
	{
		if(response)
		{
			new id = SellTradeID[playerid];
			new idcar1 = SelectedCar[playerid],idcar2 = SelectedCar[id],price = SellTradePrice[playerid],hidden[128],stringe[128];

			if(PlayerInfo[playerid][pCarColor1][idcar1] >= 128 || PlayerInfo[playerid][pCarColor2][idcar1])
			{
				format(hidden, sizeof(hidden),"hidden colors: %d, %d",PlayerInfo[playerid][pCarColor1][idcar1],PlayerInfo[playerid][pCarColor2][idcar1]);
			}
			else
			{
				format(hidden, sizeof(hidden),"no hidden colors");
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
	   	    tradecars[id] = PlayerInfo[playerid][pCarID][idcar1];
			tradecars2[id] = PlayerInfo[id][pCarID][idcar2];

			tradetype[id] = PlayerInfo[playerid][pCar][idcar1];
			tradetype2[id] = PlayerInfo[id][pCar][idcar2];
			tradeofferer[id] = playerid;
			tradediff[id] = price;
			SS(playerid, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permabanned.");
			SS(id, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permabanned.");
			SS(playerid, COLOR_BLUE, "Oferta trimisa!", "The offer was sent!");
			format(string, sizeof(string), "%s iti ofera masina lui {CCFF00}%s{4DAD2B} [age: %d, KM: %.0f, %s] + $%s pentru masina ta (%s).",sendername,aVehicleNames[PlayerInfo[playerid][pCarModel][idcar1] - 400],GetDaysFromTimestamp(PlayerInfo[playerid][pCarBuyTime][idcar1]),PlayerInfo[playerid][pCarKM][idcar1],hidden,FormatNumber(price),aVehicleNames[PlayerInfo[id][pCarModel][idcar2] - 400]);
			format(stringe, sizeof(stringe), "%s offer his car {CCFF00}%s{4DAD2B} [age: %d, KM: %.0f, %s] + $%s for your car (%s).",sendername,aVehicleNames[PlayerInfo[playerid][pCarModel][idcar1] - 400],GetDaysFromTimestamp(PlayerInfo[playerid][pCarBuyTime][idcar1]),PlayerInfo[playerid][pCarKM][idcar1],hidden,FormatNumber(price),aVehicleNames[PlayerInfo[id][pCarModel][idcar2] - 400]);
			SS(id, COLOR_GREEN2, string, stringe);
			format(string, sizeof(string), "Scrie /accept tradecar %d pentru a accepta aceasta oferta",playerid);
			format(stringe, sizeof(stringe), "Type /accept tradecar %d to accept this offer",playerid);
			SS(id, COLOR_WHITE, string, stringe);
			SellTradeID[playerid] = -1;
			SellTradePrice[playerid] = 0;
			SellTradeTimer[playerid] = 120;
		}
		return 1;
	}
	if(dialogid == DIALOG_VIPNAMECOLOR)
	{
		if(response)
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SS(playerid, COLOR_LIGHTGREEN3, "Nu esti intr-un vehicul!", "You are not in a vehicle!");
			new carid = GetPlayerVehicleID(playerid),idcar=-1;
			for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
			{
				if(carid == PlayerInfo[playerid][pCarID][vv])
				{
					idcar = vv;
				}
			}
			if(idcar == -1) return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.", "You can add custom wheels on VIP vehicles.");
			if(carid == PlayerInfo[playerid][pCarID][idcar])
			{
				if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
				{
					PlayerInfo[playerid][pCarVipColors][idcar] = listitem;
					cUpdate(playerid, idcar, cCarVipColorsx);
					SetVipText(playerid, idcar);
				}
				else return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.", "You can add custom text on VIP vehicles.");
			}
			else return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.", "You can add custom text on VIP vehicles.");
		}
		return 1;
	}
	if(dialogid == DIALOG_HIDDEN)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pHiddenColor] <= 0) return SS(playerid, COLOR_WHITE, "Nu ai suficiente puncte premium. Ai nevoie de 20 puncte premium pentru a folosi un hidden (127-256) pe masina.", "You don't have enough premium points. You need 20 premium points to use a hidden on your car.");
			new i = SelectedCar[playerid], veh = GetPlayerVehicleID(playerid), colorid = SellTradeID[playerid], colorpart = SellTradePrice[playerid];
			SelectedCar[playerid] = -1;
			SellTradeID[playerid] = -1;
			SellTradePrice[playerid] = 0;
			if(veh == PlayerInfo[playerid][pCarID][i])
			{
				PlayerInfo[playerid][pHiddenColor] -= 1;
   				Update(playerid, pHiddenColorx);
   				if(PlayerInfo[playerid][pCarBlock][i] > 72) PlayerInfo[playerid][pCarBlock][i] += 72;
   				else PlayerInfo[playerid][pCarBlock][i] = 72;
   				cUpdate(playerid, i, cBlockx);
   				if(colorpart == 1)
   				{
   					PlayerInfo[playerid][pCarColor1][i] = colorid;
   					ChangeVehicleColor(PlayerInfo[playerid][pCarID][i], colorid, PlayerInfo[playerid][pCarColor2][i]);
   					cUpdate(playerid, i, cColorOnex);
   					SendClientMessage(playerid, COLOR_YELLOW, "Vehicle color changed for 20 premium points!");
   				}
   				else if(colorpart == 2)
   				{
   					PlayerInfo[playerid][pCarColor2][i] = colorid;
   					ChangeVehicleColor(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarColor1][i], colorid);
   					cUpdate(playerid, i, cColorTwox);
   					SendClientMessage(playerid, COLOR_YELLOW, "Vehicle color changed for 20 premium points!");
   				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "You are not in your car.");
		}
		return 1;
	}
	if(dialogid == DIALOG_HIDDEN1)
	{
		if(response)
		{
			new i = SelectedCar[playerid], veh = GetPlayerVehicleID(playerid), colorid = SellTradeID[playerid], colorpart = SellTradePrice[playerid];
			SelectedCar[playerid] = -1;
			SellTradeID[playerid] = -1;
			SellTradePrice[playerid] = 0;
			if(veh == PlayerInfo[playerid][pCarID][i])
			{
				if(colorpart == 1)
				{
					if(colorid >= 128)
					{
						if(PlayerInfo[playerid][pPremiumPoints] >= 5 || SvarInfo[1][svValue] == 1)
						{
							PlayerInfo[playerid][pCarColor1][i] = colorid;
			   				ChangeVehicleColor(PlayerInfo[playerid][pCarID][i], colorid, PlayerInfo[playerid][pCarColor2][i]);
							cUpdate(playerid, i, cColorOnex);
							if(SvarInfo[1][svValue] == 0)
							{
								PlayerInfo[playerid][pPremiumPoints] -= 5;
								Update(playerid, pPremiumPointsx);
								SendClientMessage(playerid, COLOR_YELLOW, "Vehicle hidden color changed for 5 premium points!");
							}
							else SendClientMessage(playerid, COLOR_YELLOW, "Vehicle hidden color changed for free!");
						}
						else return SS(playerid, COLOR_WHITE, "Nu ai suficiente punte premium. Ai nevoie de 5 puncte premium pentru a schimba un hidden (127-256) pe masina.", "You don't have enough premium points. You need 5 premium points to change a hidden on your car.");
					}
					else
					{
						PlayerInfo[playerid][pCarColor1][i] = colorid;
		   				ChangeVehicleColor(PlayerInfo[playerid][pCarID][i], colorid, PlayerInfo[playerid][pCarColor2][i]);
						cUpdate(playerid, i, cColorOnex);
						GivePlayerCash(playerid, -5000);
						Update(playerid, pCashx);
						GameTextForPlayer(playerid, "~r~-$5.000", 5000, 1);
						SendClientMessage(playerid,COLOR_WHITE, "Vehicle color changed!");
					}
				}
				else if(colorpart == 2)
				{
					if(colorid >= 128)
					{
						if(PlayerInfo[playerid][pPremiumPoints] >= 5 || SvarInfo[1][svValue] == 1)
						{
							PlayerInfo[playerid][pCarColor2][i] = colorid;
		   					ChangeVehicleColor(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarColor1][i], colorid);
							cUpdate(playerid, i, cColorTwox);
							if(SvarInfo[1][svValue] == 0)
							{
								PlayerInfo[playerid][pPremiumPoints] -= 5;
								Update(playerid, pPremiumPointsx);
								SendClientMessage(playerid, COLOR_YELLOW, "Vehicle hidden color changed for 5 premium points!");
							}
							else SendClientMessage(playerid, COLOR_YELLOW, "Vehicle hidden color changed for free!");
						}
						else return SS(playerid, COLOR_WHITE, "Nu ai suficiente punte premium. Ai nevoie de 5 puncte premium pentru a schimba un hidden (127-256) pe masina.", "You don't have enough premium points. You need 5 premium points to change a hidden on your car.");
					}
					else
					{
						PlayerInfo[playerid][pCarColor2][i] = colorid;
		   				ChangeVehicleColor(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarColor1][i], colorid);
						cUpdate(playerid, i, cColorTwox);
						GivePlayerCash(playerid, -5000);
						Update(playerid, pCashx);
						GameTextForPlayer(playerid, "~r~-$5.000", 5000, 1);
						SendClientMessage(playerid,COLOR_WHITE, "Vehicle color changed!");
					}
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "You are not in your car.");
		}
		return 1;
	}
	if(dialogid == DIALOG_SELLCARTO)
	{
		if(response)
		{
			new idcar = SelectedCar[playerid],id = SellTradeID[playerid],price = SellTradePrice[playerid],giveplayer[30],hidden[128],stringe[128];
			if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_WHITE, "That player is not connected.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			primesccar[id] = PlayerInfo[playerid][pCarID][idcar];
			cartype[id] = PlayerInfo[playerid][pCar][idcar];

			ofercar[id] = playerid;
   			carprice[id] = price;
			SS(id, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permabanned.");
			SS(playerid, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permabanned.");
			format(string, sizeof(string), "* You have offered your car(%s) to %s(%d) for $%s.", aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400],giveplayer,id,FormatNumber(price));
			SendClientMessage(playerid, COLOR_GREEN2, string);
			if(PlayerInfo[playerid][pCarColor1][idcar] >= 128 || PlayerInfo[playerid][pCarColor2][idcar] >= 128)
			{
				format(hidden, sizeof(hidden),"hidden colors: %d, %d",PlayerInfo[playerid][pCarColor1][idcar],PlayerInfo[playerid][pCarColor2][idcar]);
			}
			else
			{
				format(hidden, sizeof(hidden),"no hidden colors");
			}
			format(string, sizeof(string), "* %s vrea sa-ti vanda masina {CCFF00}%s{4DAD2B} [age: %d, km: %.0f, %s] pentru $%s.", sendername, aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400], GetDaysFromTimestamp(PlayerInfo[playerid][pCarBuyTime][idcar]), PlayerInfo[playerid][pCarKM][idcar], hidden, FormatNumber(price));
			format(stringe, sizeof(stringe), "* %s want to sell his car {CCFF00}%s{4DAD2B} [age: %d, km: %.0f, %s] for $%s.", sendername, aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400], GetDaysFromTimestamp(PlayerInfo[playerid][pCarBuyTime][idcar]), PlayerInfo[playerid][pCarKM][idcar], hidden, FormatNumber(price));
			SS(id, COLOR_GREEN2, string, stringe);
			format(string, sizeof(string), "Scrie /accept car %d pentru a accepta",playerid);
			format(stringe, sizeof(stringe), "Type /accept car %d to accept this offer",playerid);
			SS(id, COLOR_GREEN2, string, stringe);
			SellTradeID[playerid] = -1;
			SellTradePrice[playerid] = 0;
			SellTradeTimer[playerid] = 120;
		}
		return 1;
	}
	if(dialogid == DIALOG_VREMOVE)
	{
		if(response)
		{
			new strr[256], owner[30];
			format(strr, sizeof(strr), "SELECT * FROM `cars` WHERE `ID`='%d'", HOwnerID[playerid]);
			new Cache: xd = mysql_query(SQL, strr);
			cache_get_field_content(0, "Owner", owner);
			cache_delete(xd);
			mysql_format(SQL, strr, sizeof(strr), "DELETE FROM `cars` WHERE `ID`='%d'", HOwnerID[playerid]);
			mysql_tquery(SQL, strr, "", "");
			foreach(new i : Player)
			{
				if(strcmp(PlayerInfo[i][pNormalName], owner, true) == 0)
				{
					DespawnCar(i);
					SetTimerEx("LoadCarID", 500, false, "i", i);
				}
			}
			format(strr, sizeof(strr), "Admin %s[admin:%d] has removed %s's car %d.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID], owner, HOwnerID[playerid]);
			ABroadCast(COLOR_RED2, strr, 1);
			Log(PlayerInfo[playerid][pSQLID], strr, "vremove");
		}
		return 1;
	}
	if(dialogid == DIALOG_VOWNER)
	{
		if(response)
		{
			new strr[256], owner[30];
			format(strr, sizeof(strr), "SELECT * FROM `cars` WHERE `ID`='%d'", HOwnerID[playerid]);
			new Cache: xd = mysql_query(SQL, strr);
			cache_get_field_content(0, "Owner", owner);
			cache_delete(xd);
			mysql_format(SQL, strr, sizeof(strr), "UPDATE `cars` SET `Owner`='%s' WHERE `ID`='%d'", HOwnerName[playerid], HOwnerID[playerid]);
			mysql_tquery(SQL, strr, "", "");
			foreach(new i : Player)
			{
				if(strcmp(PlayerInfo[i][pNormalName], owner, true) == 0)
				{
					DespawnCar(i);
					SetTimerEx("LoadCarID", 500, false, "i", i);
				}
			}
			foreach(new i : Player)
			{
				if(strcmp(PlayerInfo[i][pNormalName], HOwnerName[playerid], true) == 0)
				{
					DespawnCar(i);
					SetTimerEx("LoadCarID", 500, false, "i", i);
				}
			}
			format(strr, sizeof(strr), "Admin %s[admin:%d] has set %s owner for car %d.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID], HOwnerName[playerid], HOwnerID[playerid]);
			ABroadCast(COLOR_RED2, strr, 1);
			Log(PlayerInfo[playerid][pSQLID], strr, "vowner");
		}
		return 1;
	}
	if(dialogid == DIALOG_BOWNER)
	{
		if(response)
		{
			new strr[256], pid, oldbid;
			format(strr, sizeof(strr), "SELECT * FROM `users` WHERE `Bizz`='%d'", HOwnerID[playerid]);
			new Cache: xd = mysql_query(SQL, strr);
			if(cache_get_row_count() > 0)
			{
				pid = cache_get_field_content_int(0, "id");
			}
			cache_delete(xd);
			if(pid != 0)
			{
				mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `Bizz`='255' WHERE `id`='%d'", pid);
				mysql_tquery(SQL, strr, "", "");
			}
			format(strr, sizeof(strr), "SELECT * FROM `users` WHERE `name`='%s'", HOwnerName[playerid]);
			new Cache: ddr = mysql_query(SQL, strr);
			if(cache_get_row_count() > 0)
			{
				oldbid = cache_get_field_content_int(0, "Bizz");
			}
			cache_delete(ddr);
			if(oldbid != 255)
			{
				mysql_format(SQL, strr, sizeof(strr), "UPDATE `bizz` SET `Owner`='AdmBot', `Owned`='1', `EntranceCost`='5' WHERE `ID`='%d'", oldbid);
				mysql_tquery(SQL, strr, "", "");
				strmid(BizzInfo[oldbid][bOwner], "AdmBot", 0, 25, 255);
				BizzInfo[oldbid][bOwned] = 1;
				BizzInfo[oldbid][bEntranceCost] = 5;
				mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `Bizz`='%d' WHERE `name`='AdmBot'", oldbid);
				mysql_tquery(SQL, strr, "", "");
				OnPropTextdrawUpdate(2, oldbid);
			}
			mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `Bizz`='%d' WHERE `name`='%s'", HOwnerID[playerid], HOwnerName[playerid]);
			mysql_tquery(SQL, strr, "", "");
			mysql_format(SQL, strr, sizeof(strr), "UPDATE `bizz` SET `Owner`='%s', `Owned`='1' WHERE `ID`='%d'", HOwnerName[playerid], HOwnerID[playerid]);
			mysql_tquery(SQL, strr, "", "");
			BizzInfo[HOwnerID[playerid]][bOwned] = 1;
			strmid(BizzInfo[HOwnerID[playerid]][bOwner], HOwnerName[playerid], 0, 25, 255);
			if(pid != 0)
			{
				foreach(new z : Player)
				{
					if(PlayerInfo[z][pSQLID] == pid)
					{
						PlayerInfo[z][pPbiskey] = 255;
					}
				}
			}
			foreach(new z : Player)
			{
				if(strcmp(PlayerInfo[z][pNormalName], HOwnerName[playerid], true) == 0)
				{
					PlayerInfo[z][pPbiskey] = HOwnerID[playerid];
				}
			}
			format(strr, sizeof(strr), "Admin %s[admin:%d] has set %s owner for business %d.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID], HOwnerName[playerid], HOwnerID[playerid]);
			ABroadCast(COLOR_RED2, strr, 1);
			Log(PlayerInfo[playerid][pSQLID], strr, "bowner");
			OnPropTextdrawUpdate(2, HOwnerID[playerid]);
			HOwnerID[playerid] = 0;
		}
		return 1;
	}
	if(dialogid == DIALOG_HOWNER)
	{
		if(response)
		{
			new strr[256], pid, oldhid;
			format(strr, sizeof(strr), "SELECT * FROM `users` WHERE `House`='%d'", HOwnerID[playerid]);
			new Cache: xd = mysql_query(SQL, strr);
			if(cache_get_row_count() > 0)
			{
				pid = cache_get_field_content_int(0, "id");
			}
			cache_delete(xd);
			if(pid != 0)
			{
				mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `House`='999' WHERE `id`='%d'", pid);
				mysql_tquery(SQL, strr, "", "");
			}
			format(strr, sizeof(strr), "SELECT * FROM `users` WHERE `name`='%s'", HOwnerName[playerid]);
			new Cache: ddr = mysql_query(SQL, strr);
			if(cache_get_row_count() > 0)
			{
				oldhid = cache_get_field_content_int(0, "House");
			}
			cache_delete(ddr);
			if(oldhid != 999)
			{
				mysql_format(SQL, strr, sizeof(strr), "UPDATE `houses` SET `Owner`='AdmBot', `Owned`='1', `Rentabil`='1', `Rent`='5' WHERE `ID`='%d'", oldhid);
				mysql_tquery(SQL, strr, "", "");
				strmid(HouseInfo[oldhid][hOwner], "AdmBot", 0, 25, 255);
				HouseInfo[oldhid][hOwned] = 1;
				HouseInfo[oldhid][hRentabil] = 1;
				HouseInfo[oldhid][hRent] = 5;
				mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `House`='%d' WHERE `name`='AdmBot'", oldhid);
				mysql_tquery(SQL, strr, "", "");
				OnPropTextdrawUpdate(1, oldhid);
			}
			mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `House`='%d', `Rented`='-1' WHERE `name`='%s'", HOwnerID[playerid], HOwnerName[playerid]);
			mysql_tquery(SQL, strr, "", "");
			mysql_format(SQL, strr, sizeof(strr), "UPDATE `houses` SET `Owner`='%s', `Owned`='1' WHERE `ID`='%d'", HOwnerName[playerid], HOwnerID[playerid]);
			mysql_tquery(SQL, strr, "", "");
			HouseInfo[HOwnerID[playerid]][hOwned] = 1;
			strmid(HouseInfo[HOwnerID[playerid]][hOwner], HOwnerName[playerid], 0, 25, 255);
			if(pid != 0)
			{
				foreach(new z : Player)
				{
					if(PlayerInfo[z][pSQLID] == pid)
					{
						PlayerInfo[z][pPhousekey] = 999;
					}
				}
			}
			foreach(new z : Player)
			{
				if(strcmp(PlayerInfo[z][pNormalName], HOwnerName[playerid], true) == 0)
				{
					PlayerInfo[z][pPhousekey] = HOwnerID[playerid];
					PlayerInfo[z][pRented] = -1;
				}
			}
			format(strr, sizeof(strr), "Admin %s[admin:%d] has set %s owner for house %d.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID], HOwnerName[playerid], HOwnerID[playerid]);
			ABroadCast(COLOR_RED2, strr, 1);
			Log(PlayerInfo[playerid][pSQLID], strr, "howner");
			OnPropTextdrawUpdate(1, HOwnerID[playerid]);
			HOwnerID[playerid] = 0;
		}
		return 1;
	}
    if(dialogid == DIALOG_PLATE)
    {
        if(response)
        {
			if(strlen(inputtext) > 10)
			{
				ShowPlayerDialog(playerid, DIALOG_PLATE, DIALOG_STYLE_INPUT, "License plate registration", "{FFFFFF}ERROR: Your license plate exceeded the limit of 10 characters.\n\nPlease enter a license plate for your vehicle.\n\nThere is only two conditions:\n- The license plate must be unique\n- The license can be alphanumerical, but it must consist of only 10 characters.", "Select", "");
				return 1;
			}
			if(strfind(inputtext, "{", true) != -1 || strfind(inputtext, "}", true) != -1) return SendClientMessage(playerid, COLOR_WHITE, "Nu poti folosi caracterul '{' in /carplate.");
	        new idcar = -1;
			for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
			{
				if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pCarID][vv])
				{
					idcar = vv;
				}
			}
			if(idcar == -1) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your car.");
            SetVehicleNumberPlate(idcar,inputtext);
			new plate[25];
            mysql_real_escape_string(inputtext, plate);
            strmid(CarPlate[playerid][idcar], plate, 0, strlen(plate), 999);
       	    GivePlayerCash(playerid, -5000);
            GameTextForPlayer(playerid, "~g~car plate changed~n~~r~-$5000", 5000, 1);
			SS(playerid, COLOR_WHITE, "Placuta de inmatriculare va fi schimbata la urmatorul respawn al masinii.", "Car plate will change at next car respawn.");
			Update(playerid, pCashx);
			cUpdate(playerid, idcar, cLicensex);
		}
		return 1;
    }
    if(dialogid == DIALOG_SELLCARX)
    {
    	if(response)
    	{
    		new query[256],idcar[200],model[200],count,value;
    		format(query, sizeof(query), "SELECT * FROM `cars` WHERE `Owner`='%s'", PlayerInfo[playerid][pNormalName]);
			new Cache: xd = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				idcar[count] = cache_get_field_content_int(i, "ID");
				model[count] = cache_get_field_content_int(i, "Model");
				count++;
			}
			cache_delete(xd);
			format(query, sizeof(query), "SELECT * FROM `stock` WHERE `vid`='%d'", model[listitem]);
			new Cache: result = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				value = cache_get_field_content_int(i, "Price");
			}
			cache_delete(result);
			if(value != 0)
			{
				new cashveh = floatround(floatmul(value,0.60),floatround_ceil);
				format(query, sizeof(query), "Are you sure you want to sell your %s?\nYou will receive: $%s", aVehicleNames[model[listitem] - 400], FormatNumber(cashveh));
			}
			else
			{
				format(query, sizeof(query), "Are you sure you want to sell your %s?\nYou will receive nothing.", aVehicleNames[model[listitem] - 400]);
			}
			SelectedCar[playerid] = listitem;
			ShowPlayerDialog(playerid, DIALOG_SELLCARX2, DIALOG_STYLE_MSGBOX, "Are you sure?", query, "Yes", "No");
    	}
    	return 1;
    }
    if(dialogid == DIALOG_SELLCARX2)
    {
    	if(response)
    	{
    		new query[256],idcar[200],model[200],count,value;
    		format(query, sizeof(query), "SELECT * FROM `cars` WHERE `Owner`='%s'", PlayerInfo[playerid][pNormalName]);
			new Cache: xd = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				idcar[count] = cache_get_field_content_int(i, "ID");
				model[count] = cache_get_field_content_int(i, "Model");
				count++;
			}
			cache_delete(xd);
			format(query, sizeof(query), "SELECT * FROM `stock` WHERE `vid`='%d'", model[SelectedCar[playerid]]);
			new Cache: result = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				value = cache_get_field_content_int(i, "Price");
			}
			cache_delete(result);
			if(value != 0)
			{
				new cashveh = floatround(floatmul(value,0.60),floatround_ceil);
				GivePlayerCash(playerid, cashveh);
				Update(playerid, pCashx);
				format(query, sizeof(query), "You've sold your car for $%s.", FormatNumber(cashveh));
				SendClientMessage(playerid, COLOR_YELLOW, query);
			}
			else
			{
				SendClientMessage(playerid, COLOR_YELLOW, "You've sold your car for $0.");
			}
			mysql_format(SQL, query, sizeof(query), "DELETE FROM `cars` WHERE `ID`='%d'", idcar[SelectedCar[playerid]]);
			mysql_tquery(SQL, query, "", "");
			SetTimerEx("LoadCarID", 500, false, "i", playerid);
			SelectedCar[playerid] = 0;
    	}
    	return 1;
    }
	if(dialogid == DIALOG_CARSELL)
	{
	    if(response)
	    {
			new idcar = GetPlayerVehicleID(playerid);
			new engine,lights,alarm,doors,bonnet,boot,objective;
	    	if(IsPlayerInVehicle(playerid,CarID[playerid]))
	    	{
				if(GetPlayerVehicleID(playerid) == CarID[playerid])
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					for(new v; v < MAX_PERSONAL_VEHICLES; v++)
					{
						if(PlayerInfo[playerid][pCarID][v] == CarID[playerid])
						{
							new strings[256],query[256],value;
							mysql_format(SQL, strings, sizeof(strings),"DELETE FROM `cars` WHERE `ID`='%d'", PlayerInfo[playerid][pCar][v]);
							mysql_query(SQL,strings);
							PlayerInfo[playerid][pCar][v] = -1;

							format(query, sizeof(query), "SELECT * FROM `stock` WHERE `vid`='%d'", PlayerInfo[playerid][pCarModel][v]);
							new Cache: result = mysql_query(SQL, query);
							for(new i, j = cache_get_row_count (); i != j; ++i)
							{
								value = cache_get_field_content_int(i, "Price");
							}
							cache_delete(result);
							vehEngine[idcar] = 0;
							GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
							SetPVarInt(playerid, "Engine", 0);
							DestroyObject(vObject[idcar]);
							vObject[idcar] = 0;
							DestroyVehicle(CarID[playerid]);
							PlayerInfo[playerid][pCarID][v] = 0;
							TogglePlayerControllable(playerid, 1);
							new cashveh = floatround(floatmul(value,0.60),floatround_ceil);
							GivePlayerCash(playerid, cashveh);
							format(string, sizeof(string), "You sold your car (%s) to the DealerShip for $%d!",aVehicleNames[PlayerInfo[playerid][pCarModel][v] - 400],cashveh);
							SendClientMessage(playerid, COLOR_WHITE, string);
							Update(playerid,pCashx);
							CarID[playerid] = -1;
							PlayerInfo[playerid][pCarModel][v] 		= 0;
							PlayerInfo[playerid][pCarLocX][v] 		= 0.0;
							PlayerInfo[playerid][pCarLocY][v] 		= 0.0;
							PlayerInfo[playerid][pCarLocZ][v] 		= 0.0;
							PlayerInfo[playerid][pCarAngle][v] 		= 0.0;
							PlayerInfo[playerid][pCarLLocX][v] 		= 0.0;
							PlayerInfo[playerid][pCarLLocY][v] 		= 0.0;
							PlayerInfo[playerid][pCarLLocZ][v] 		= 0.0;
							PlayerInfo[playerid][pCarAngle2][v] 	= 0.0;
							PlayerInfo[playerid][pCarBuyTime][v]	= 0;
							PlayerInfo[playerid][pCarColor1][v] 	= 1;
							PlayerInfo[playerid][pCarColor2][v] 	= 1;
							PlayerInfo[playerid][pCarLock][v] 		= 0;
							PlayerInfo[playerid][pCarInsPrice][v] 	= 0;
							PlayerInfo[playerid][pCarIns][v] 		= 0;
							PlayerInfo[playerid][pCarKM][v] 		= 0.0;
							PlayerInfo[playerid][pCarKMLast][v]		= 0;
							PlayerInfo[playerid][pCarVIP][v]		= 0;
							PlayerInfo[playerid][pCarVipColors][v]	= 0;
							PlayerInfo[playerid][pCarHP][v] 		= 0.0;
							PlayerInfo[playerid][pCarDamage1][v] 	= 0;
							PlayerInfo[playerid][pCarDamage2][v] 	= 0;
							PlayerInfo[playerid][pCarDamage3][v] 	= 0;
							PlayerInfo[playerid][pCarDamage4][v] 	= 0;
							PlayerInfo[playerid][pCarGas][v] 		= 100;
							PlayerInfo[playerid][pCarPaintJ][v] 	= 6;
							PlayerInfo[playerid][pCarBlock][v]		= 0;
							CarVipName[playerid][v] = "";
							CarPlate[playerid][v] = "";
							CarOwner[playerid][v] = "";
							for(new s; s < 17; s++)
							{
								CarMod[playerid][v][s] = 0;
							}
							cUpdate(playerid, v, cModsx);
							cUpdate(playerid, v, cPaintJx);
							cUpdate(playerid, v, cLocationxx);
							cUpdate(playerid, v, cLocationyx);
							cUpdate(playerid, v, cLocationzx);
							cUpdate(playerid, v, cAnglex);
							cUpdate(playerid, v, cColorOnex);
							cUpdate(playerid, v, cColorTwox);
							cUpdate(playerid, v, cValuex);
							cUpdate(playerid, v, cLicensex);
							cUpdate(playerid, v, cLockx);
							cUpdate(playerid, v, cInscarpricex);
							cUpdate(playerid, v, cInsurancecarx);
							cUpdate(playerid, v, cKMx);
							cUpdate(playerid, v, cDaysx);
							cUpdate(playerid, v, cHPx);
							cUpdate(playerid, v, cDamage1x);
							cUpdate(playerid, v, cDamage2x);
							cUpdate(playerid, v, cDamage3x);
							cUpdate(playerid, v, cDamage4x);
							cUpdate(playerid, v, cGasx);
							LoadCar(playerid);
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "This is not your car.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "You have to sit at your own car to sell it.");
		}
		return 1;
	}
	if(dialogid == DIALOG_JOBS)
	{
		if(response)
	    {
	    	new stringx[128];
	    	if(listitem == 0)
			{
				SetPlayerCheckpoint(playerid,607.8508,-1438.1113,14.0647,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 607.8508, -1438.1113, 14.0647));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 607.8508, -1438.1113, 14.0647));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 1)
			{
				SetPlayerCheckpoint(playerid,2129.9590,-1700.0682,15.0784,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2129.9590, -1700.0682, 15.0784));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2129.9590, -1700.0682, 15.0784));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 2)
			{
				SetPlayerCheckpoint(playerid,2120.0132,-1786.2161,13.5608,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2120.0132, -1786.2161, 13.5608));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2120.0132, -1786.2161, 13.5608));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 3)
			{
				SetPlayerCheckpoint(playerid,1653.6558,-2238.0095,13.5201,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 1653.6558, -2238.0095, 13.5201));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 1653.6558, -2238.0095, 13.5201));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 4)
			{
				SetPlayerCheckpoint(playerid,1621.0037,2210.8643,15.1959,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 1621.0037, 2210.8643, 15.1959));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 1621.0037, 2210.8643, 15.1959));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 5)
			{
				SetPlayerCheckpoint(playerid,1366.9601,-1292.1105,13.5469,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 1366.9601, -1292.1105, 13.5469));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 1366.9601, -1292.1105, 13.5469));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 6)
			{
				SetPlayerCheckpoint(playerid,2510.2173,2794.8362,10.8203,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2510.2173, 2794.8362, 10.8203));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2510.2173, 2794.8362, 10.8203));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 7)
			{
				SetPlayerCheckpoint(playerid,372.0800,-2086.0505,7.8359,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 372.0800, -2086.0505, 7.8359));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 372.0800, -2086.0505, 7.8359));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 8)
			{
				SetPlayerCheckpoint(playerid,-76.8129,-1136.6630,1.0781,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, -76.8129, -1136.6630, 1.0781));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, -76.8129, -1136.6630, 1.0781));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 9)
			{
				SetPlayerCheckpoint(playerid,-366.4417,-1412.7061,25.7266,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, -366.4417, -1412.7061, 25.7266));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, -366.4417, -1412.7061, 25.7266));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
			if(listitem == 10)
			{
				SetPlayerCheckpoint(playerid,2849.8909,891.6392,10.7500,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2849.8909, 891.6392, 10.7500));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2849.8909, 891.6392, 10.7500));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_QUITCLAN)
	{
		if(response)
		{
			new szMessage[256],str1[300];
			if(PlayerInfo[playerid][pCRank] != 7)
			{
				GetPlayerName(playerid,sendername,sizeof(sendername));
				format(szMessage, sizeof(szMessage), "%s has left the clan (quit clan).", sendername);
				SendToClan(PlayerInfo[playerid][pClan], COLOR_YELLOW, szMessage);
				format(szMessage,sizeof(szMessage), "You have left the %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanName]);
				SendClientMessage(playerid,COLOR_WHITE,szMessage);
				format(string, sizeof(string), "%s", PlayerInfo[playerid][pNormalName]);
				format(str1,sizeof(str1),"{%s}[CLAN] %s left the clan (using /quitclan).", ClanInfo[PlayerInfo[playerid][pClan]][cClanColor], sendername);
				SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, str1);
				SetPlayerName(playerid,string);
				PlayerInfo[playerid][pClan] = 0;
				PlayerInfo[playerid][pCRank] = 0;
				PlayerInfo[playerid][pCWarns] = 0;
				mysql_format(SQL, str1, sizeof(str1), "UPDATE users SET `CRank`='0',`Clan`='0',`ClanJoin`='0',`ClanTag`='0',`ClanWarns`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str1,"","");
				mysql_format(SQL, str1, sizeof(str1), "SELECT * FROM `clans`");
				mysql_tquery(SQL, str1, "LoadClanInfo", "");
			}
			else SendClientMessage(playerid, COLOR_GREY, "You can't leave your clan because you are the leader.");
		}
	}
	if(dialogid == DIALOG_QUITGROUP)
	{
		if(response)
		{
			new query[256],fhid,string2[256],string3[256];
			if(PlayerInfo[playerid][pMember] > 0 && PlayerInfo[playerid][pLeader] < 1)
			{
				format(query, 256, "SELECT * FROM `users` WHERE `Member` = '%d' AND `Rank` = '7'", PlayerInfo[playerid][pMember]);
				new Cache: masta = mysql_query(SQL, query);
				if(cache_get_row_count() >= 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(query, sizeof(query), "SELECT * FROM `faction_logs` WHERE `player`='%d' ORDER BY `id` DESC LIMIT 1", PlayerInfo[playerid][pSQLID]);
					new Cache: abx = mysql_query(SQL, query);
					fhid = cache_get_field_content_int(0, "id");
					cache_delete(abx);
					format(string2, sizeof(string2), "* You have left faction %s (rank %d) after %d days, with 20 FP.", NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank], GetDaysFromTimestamp(PlayerInfo[playerid][pFactionJoin]));
					SendClientMessage(playerid, COLOR_YELLOW, string2);
					format(string2, sizeof(string2), "%s left faction %s (rank %d) after %d days using /quitgroup, with 20 FP.", PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],PlayerInfo[playerid][pRank],GetDaysFromTimestamp(PlayerInfo[playerid][pFactionJoin]));
					mysql_real_escape_string(string2, string3);
					mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
					mysql_tquery(SQL,query,"","");
					mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','0')", string3, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,query,"","");
					format(string,sizeof(string),"%s left faction %s (rank %d) after %d days using /quitgroup, WITH 20 FP.",sendername,DynamicFactions[PlayerInfo[playerid][pMember]][fName],PlayerInfo[playerid][pRank],GetDaysFromTimestamp(PlayerInfo[playerid][pFactionJoin]));
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string);
					gTeam[playerid] = 3;
					PlayerInfo[playerid][pTeam] = 3;
					PlayerInfo[playerid][pMember] = 0;
					PlayerInfo[playerid][pRank] = 0;
					PlayerInfo[playerid][pLeader] = 0;
					PlayerInfo[playerid][pFACWarns] = 0;
					PlayerInfo[playerid][pFpunish] = 20;
					PlayerInfo[playerid][pFactionJoin] = 0;
					PlayerInfo[playerid][pModel] = 250;
					tazer[playerid] = 0;
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0);
					SetPlayerSkin(playerid,PlayerInfo[playerid][pModel]);
					SpawnPlayer(playerid);
					mysql_format(SQL,query,sizeof(query),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='20',`FWarn`='0', `FactionJoin`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,query,"","");
				}
				else
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(query, sizeof(query), "SELECT * FROM `faction_logs` WHERE `player`='%d' ORDER BY `id` DESC LIMIT 1", PlayerInfo[playerid][pSQLID]);
					new Cache: abx = mysql_query(SQL, query);
					fhid = cache_get_field_content_int(0, "id");
					cache_delete(abx);
					format(string2, sizeof(string2), "* You have left faction %s (rank %d) after %d days, without FP. The faction had no leader when you left.", NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank], GetDaysFromTimestamp(PlayerInfo[playerid][pFactionJoin]));
					SendClientMessage(playerid, COLOR_YELLOW, string2);
					format(string2, sizeof(string2), "%s left faction %s (rank %d) after %d days using /quitgroup, without FP. The faction had no leader when he/she left.", PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],PlayerInfo[playerid][pRank],GetDaysFromTimestamp(PlayerInfo[playerid][pFactionJoin]));
					mysql_real_escape_string(string2, string3);
					mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
					mysql_tquery(SQL,query,"","");
					mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','0')", string3, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,query,"","");
					format(string,sizeof(string),"%s left faction %s (rank %d) after %d days using /quitgroup, without FP.",sendername,DynamicFactions[PlayerInfo[playerid][pMember]][fName],PlayerInfo[playerid][pRank],GetDaysFromTimestamp(PlayerInfo[playerid][pFactionJoin]));
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string);
					gTeam[playerid] = 3;
					PlayerInfo[playerid][pTeam] = 3;
					PlayerInfo[playerid][pMember] = 0;
					PlayerInfo[playerid][pRank] = 0;
					PlayerInfo[playerid][pLeader] = 0;
					PlayerInfo[playerid][pFACWarns] = 0;
					PlayerInfo[playerid][pFpunish] = 0;
					PlayerInfo[playerid][pFactionJoin] = 0;
					PlayerInfo[playerid][pModel] = 250;
					tazer[playerid] = 0;
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0);
					SetPlayerSkin(playerid,PlayerInfo[playerid][pModel]);
					SpawnPlayer(playerid);
					mysql_format(SQL,query,sizeof(query),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='0',`FWarn`='0', `FactionJoin`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,query,"","");
				}
				cache_delete(masta);
			}
			if(UsedFind[playerid] == 1)
			{
				UsedFind[playerid] = 0;
				targetfind[playerid] = -1;
				DisablePlayerCheckpoint(playerid);
			}
		}
	}
	if(dialogid == DIALOG_FRIENDS)
	{
		if(response)
		{
			if(listitem == 0)
			{
				ShowPlayerDialog(playerid, DIALOG_ADDFRIENDS, DIALOG_STYLE_INPUT, "Add friend", "Type ID of the player you want to add as a friend:", "Add Friend", "Exit");
			}
			if(listitem > 0)
			{
				new query[256],name[30],result[30],idd,status,title[50];
				format(query, sizeof(query), "SELECT name, id, Status FROM `users` WHERE `id`='%d'",Selected[playerid][listitem]);
				new Cache: membresult = mysql_query(SQL,query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					cache_get_field_content(i, "name", result); format(name, 30, result);
					idd = cache_get_field_content_int(i, "id");
					status = cache_get_field_content_int(i, "Status");
					Selected2[playerid] = idd;
					if(status > 0)
					{
						format(title, sizeof(title), "[online] %s", name);
					}
					else if(status == 0)
					{
						format(title, sizeof(title), "[offline] %s", name);
					}
				}
				cache_delete(membresult);
				ShowPlayerDialog(playerid, DIALOG_FRIENDS2, DIALOG_STYLE_LIST, title, "Remove Friend\nView phone number", "Select", "Exit");
			}
		}
	}
	if(dialogid == DIALOG_FRIENDS2)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new str1[200];
				mysql_format(SQL,str1, sizeof(str1), "DELETE FROM `friends` WHERE `FriendID`='%d'", Selected2[playerid]);
	       		mysql_tquery(SQL,str1,"","");
				SendClientMessage(playerid, COLOR_YELLOW, "Friend removed.");
			}
			if(listitem == 1)
			{
				new phone,query[256],name[30],result[30],strings[128];
				format(query, sizeof(query), "SELECT name, PhoneNr FROM `users` WHERE `id`='%d'",Selected2[playerid]);
				new Cache: membresult = mysql_query(SQL,query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					phone = cache_get_field_content_int(i, "PhoneNr");
					cache_get_field_content(i, "name", result); format(name, 30, result);
					if(phone != 0)
					{
						format(strings, sizeof(strings), "Name: {CECECE}%s {FFFFFF}| Number: {CECECE}%d",name,phone);
					}
					else
					{
						format(strings, sizeof(strings), "Name: {CECECE}%s {FFFFFF}| Number: {CECECE}None",name,phone);
					}
					SendClientMessage(playerid, COLOR_WHITE, strings);
				}
				cache_delete(membresult);
			}
		}
	}
	if(dialogid == DIALOG_ADDFRIENDS)
	{
		if(response)
		{
			new text[50];
			mysql_real_escape_string(inputtext, text);
			if(IsNumeric(text))
			{
				new str1[256],id = strval(text);
				if(id == playerid) return SendClientMessage(playerid, COLOR_WHITE, "Nu te poti adauga singur in lista de prieteni.");
				format(str1, sizeof(str1), "SELECT * FROM `friends` WHERE `FriendID`='%d' AND `PlayerID`='%d'",PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID]);
				new Cache: membresult = mysql_query(SQL,str1);
				if(cache_get_row_count () > 0)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Acel jucator este deja in lista ta de prieteni.");
					return 1;
				}
				cache_delete(membresult);
				mysql_format(SQL, str1, sizeof(str1), "INSERT INTO `friends` (`PlayerID`,`FriendID`,`FriendName`) VALUES('%d','%d','%s')",PlayerInfo[playerid][pSQLID],PlayerInfo[id][pSQLID],PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str1,"","");
				SendClientMessage(playerid, COLOR_YELLOW, "Prieten adaugat!");
			}
			else if(!IsNumeric(text))
			{
				new find = 0;
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i))
					{
						if(find == 0)
						{
							new name[30],str1[256];
							GetPlayerName(i, name, sizeof(name));
							if(strfind(name, text) != -1)
							{
								find = 1;
								if(i == playerid) return SendClientMessage(playerid, COLOR_WHITE, "Nu te poti adauga singur in lista de prieteni.");
								format(str1, sizeof(str1), "SELECT * FROM `friends` WHERE `FriendID`='%d' AND `PlayerID`='%d'",PlayerInfo[i][pSQLID],PlayerInfo[playerid][pSQLID]);
								new Cache: membresult = mysql_query(SQL,str1);
								if(cache_get_row_count () > 0)
								{
									SendClientMessage(playerid, COLOR_WHITE, "Acel jucator este deja in lista ta de prieteni.");
									return 1;
								}
								cache_delete(membresult);
								mysql_format(SQL, str1, sizeof(str1), "INSERT INTO `friends` (`PlayerID`,`FriendID`,`FriendName`) VALUES('%d','%d','%s')",PlayerInfo[playerid][pSQLID],PlayerInfo[i][pSQLID],PlayerInfo[i][pNormalName]);
								mysql_tquery(SQL,str1,"","");
								SendClientMessage(playerid, COLOR_YELLOW, "Prieten adaugat!");
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_WHITE, "ID invalid. Poti adauga doar playerii care-s online in lista de prieteni.");
				}
				if(find == 0)
				{
					SendClientMessage(playerid, COLOR_WHITE, "ID invalid. Poti adauga doar playerii care-s online in lista de prieteni.");
				}
			}
		}
	}
	if(dialogid == DIALOG_CLEARSALARIES)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pRank] >= 6)
			{
				new query[256],payday,paydays,suma,nume[30];
				format(query, sizeof(query), "SELECT * FROM `users` WHERE `Member` = '%d' AND `PaydayON` > '0'", PlayerInfo[playerid][pMember]);
				new Cache: result = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					payday = cache_get_field_content_int(i, "PaydayON");
					paydays += payday;
				}
				cache_delete(result);
				mysql_format(SQL,query,sizeof(query),"UPDATE `users` SET `PaydayON` = '0' WHERE `Member` = '%d'", PlayerInfo[playerid][pMember]);
				mysql_tquery(SQL,query,"","");
				foreach(new s : Player)
				{
					if(PlayerInfo[s][pMember] == PlayerInfo[playerid][pMember])
					{
						PlayerInfo[s][pPaydayON] = 0;
					}
				}
				suma = paydays * 10000;
				DynamicFactions[PlayerInfo[playerid][pMember]][fBank] += suma;
				mysql_format(SQL,query,sizeof(query),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'",DynamicFactions[PlayerInfo[playerid][pMember]][fBank],PlayerInfo[playerid][pMember]);
				mysql_tquery(SQL,query,"","");
				GetPlayerName(playerid, nume, sizeof(nume));
				format(query,sizeof(query),"Faction manager %s has deposited $%s in the faction vault (%d salary points).",nume,FormatNumber(suma),paydays);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, query);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_MEMBERS)
	{
		if(response)
		{
			if(listitem >= 0)
			{
				if(PlayerInfo[playerid][pRank] >= 6)
				{
					new name[30],result[30],query[300],test[5],strings[300];
					format(query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%d'",Selected[playerid][listitem]);
					new Cache: membresult = mysql_query(SQL,query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name, 30, result);
						cache_get_field_content(i, "Rank", result); format(test, 5, result);
					}
					cache_delete(membresult);
					Selected2[playerid] = Selected[playerid][listitem];
					format(strings, sizeof(strings),"%s - %s",test,name);
					ShowPlayerDialog(playerid, DIALOG_MEMBERS2, DIALOG_STYLE_LIST, strings, "Change Rank\nFaction Warn\nClear FW\nUninvite - 20 FP\nUninvite - 0 FP", "OK", "Exit");
				}
			}
		}
	}
	if(dialogid == DIALOG_MEMBERS2)
	{
		if(response)
		{
			if(listitem == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Usage: /changerank <id> <rank>");
			}
			if(listitem == 1)
			{
				new string1[256],rank;
				if(PlayerInfo[playerid][pSQLID] == Selected2[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You can't give a fw to yourself.");
				foreach(new i : Player)
				{
					if(PlayerInfo[i][pSQLID] == Selected2[playerid])
					{
						if(PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 7 || PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 6) return SendClientMessage(playerid, COLOR_WHITE, "You can't give a FW to a member with rank 6-7.");
					}
				}
				format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
				new Cache: membresult = mysql_query(SQL,string1);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					rank = cache_get_field_content_int(i, "Rank");
				}
				cache_delete(membresult);
				if(PlayerInfo[playerid][pRank] == 6 && rank == 6 || PlayerInfo[playerid][pRank] == 6 && rank == 7) return SendClientMessage(playerid, COLOR_GREY, "You can't give a FW to a member with rank 6-7.");
				ShowPlayerDialog(playerid, DIALOG_FWARN, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca vrei sa-i dai FW acelui membru?", "Da", "Nu");
			}
			if(listitem == 2)
			{
				if(PlayerInfo[playerid][pRank] != 7) return SendClientMessage(playerid, COLOR_GREY, "Only leaders have acces to fw clear.");
				ShowPlayerDialog(playerid, DIALOG_FUNWARN, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca vrei sa-i stergi FW acelui membru?", "Da", "Nu");
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pRank] != 7) return SendClientMessage(playerid, COLOR_GREY, "Only leaders can uninvite a member.");
				if(PlayerInfo[playerid][pSQLID] == Selected2[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You can't uninvite yourself.");
				new stringtotal[500],string1[256],ftime,result[30],name[30],frank;
				format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
				new Cache: membresult = mysql_query(SQL,string1);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					ftime = cache_get_field_content_int(i, "FactionJoin");
					frank = cache_get_field_content_int(i, "Rank");
					cache_get_field_content(i, "name", result); format(name, 30, result);
				}
				cache_delete(membresult);
				if(frank == 7) return SendClientMessage(playerid, COLOR_WHITE, "You can't uninvite a leader.");
				format(string1, sizeof(string1),"Esti pe cale sa-i dai uninvite lui %s CU 20 FP.\nAcesta are %d zile in factiune.\nScrie motivul pentru uninvite mai jos:", name, GetDaysFromTimestamp(ftime));
				format(stringtotal, sizeof(stringtotal),"Atentie!!! Playerii ce au peste 14 zile se vor da afara fara FP, cu exceptia cazurilor in care acesta incalca regulile factiunii.\n%s", string1);
				ShowPlayerDialog(playerid, DIALOG_FPUNINVITE, DIALOG_STYLE_INPUT, "Uninvite - 20 FP", stringtotal, "Uninvite", "Exit");
			}
			if(listitem == 4)
			{
				if(PlayerInfo[playerid][pRank] != 7) return SendClientMessage(playerid, COLOR_GREY, "Only leaders can uninvite a member.");
				if(PlayerInfo[playerid][pSQLID] == Selected2[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You can't uninvite yourself.");
				new stringtotal[500],string1[256],ftime,result[30],name[30],frank;
				format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
				new Cache: membresult = mysql_query(SQL,string1);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					ftime = cache_get_field_content_int(i, "FactionJoin");
					frank = cache_get_field_content_int(i, "Rank");
					cache_get_field_content(i, "name", result); format(name, 30, result);
				}
				cache_delete(membresult);
				if(frank == 7) return SendClientMessage(playerid, COLOR_WHITE, "You can't uninvite a leader.");
				format(string1, sizeof(string1),"Esti pe cale sa-i dai uninvite lui %s FARA FP.\nAcesta are %d zile in factiune.\nScrie motivul pentru uninvite mai jos:", name, GetDaysFromTimestamp(ftime));
				format(stringtotal, sizeof(stringtotal),"Atentie!!! Playerii ce au sub 14 zile in factiune se vor da afara cu FP, cu exceptia cazurilor in care un owner iti spune ca e ok sa dai uninvite fara FP.\n%s", string1);
				ShowPlayerDialog(playerid, DIALOG_NOUNINVITE, DIALOG_STYLE_INPUT, "Uninvite - 0 FP", stringtotal, "Uninvite", "Exit");
			}
		}
	}
	if(dialogid == DIALOG_FPUNINVITE)
	{
		if(response)
		{
			new string1[300],result[30],name[30],rank,ftime,reason[128],idd,fhid,language,test;
			format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL,string1);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				cache_get_field_content(i, "name", result); format(name, 30, result);
				ftime = cache_get_field_content_int(i, "FactionJoin");
				rank = cache_get_field_content_int(i, "Rank");
				idd = cache_get_field_content_int(i, "id");
				language = cache_get_field_content_int(i, "Language");
			}
			cache_delete(membresult);
			format(string1, sizeof(string1), "SELECT * FROM `faction_logs` WHERE `player`='%d' ORDER BY `id` DESC LIMIT 1", idd);
			new Cache: abx = mysql_query(SQL, string1);
			fhid = cache_get_field_content_int(0, "id");
			cache_delete(abx);
			mysql_real_escape_string(inputtext, reason);
			new string2[300],query[300],string3[300];
			format(string2, sizeof(string2), "%s was uninvited by %s from faction %s (rank %d) after %d days, with FP. Reason: %s.", name,PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],rank,GetDaysFromTimestamp(ftime),reason);
			mysql_real_escape_string(string2, string3);
			mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
			mysql_tquery(SQL,query,"","");
			mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string3, idd, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,query,"","");
			mysql_format(SQL,string1,sizeof(string1),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='20',`FWarn`='0',`FactionJoin`='0' WHERE `id`='%d'",Selected2[playerid]);
			mysql_tquery(SQL,string1,"","");
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pSQLID] == Selected2[playerid])
				{
					gTeam[i] = 3;
					PlayerInfo[i][pTeam] = 3;
					PlayerInfo[i][pMember] = 0;
					PlayerInfo[i][pRank] = 0;
      				PlayerInfo[i][pLeader] = 0;
					PlayerInfo[i][pFACWarns] = 0;
					PlayerInfo[i][pFpunish] = 20;
					PlayerInfo[i][pFactionJoin] = 0;
					PlayerInfo[i][pModel] = 250;
					SetPlayerArmourEx(i, 0);
					tazer[i] = 0;
					OnDuty[i] = 0;
					SetPlayerSkin(i,PlayerInfo[i][pModel]);
					if(PlayerInfo[i][pLanguage] == 2)
					{
						format(string1, sizeof(string1), "Ai fost demis de %s din factiunea din care faceai parte dupa %d zile, cu FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
						ShowPlayerDialog(i, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Inchide", "");
					}
					else
					{
						format(string1, sizeof(string1), "You were uninvited by %s from your faction after %d days, with FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
						ShowPlayerDialog(i, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Close", "");
					}
					test++;
				}
			}
			format(string1, sizeof(string1),"%s was uninvited by %s from faction %s (rank %d) after %d days, with FP. Reason: %s.",name,PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],rank,GetDaysFromTimestamp(ftime),reason);
            Factionlog(PlayerInfo[playerid][pMember],idd,PlayerInfo[playerid][pSQLID],string1);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string1);
			if(test == 0)
			{
				if(language == 2) format(string1, sizeof(string1), "Ai fost demis de %s din factiunea din care faceai parte dupa %d zile, cu FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				else format(string1, sizeof(string1), "You were uninvited by %s from your faction after %d days, with FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				mysql_format(SQL,query, sizeof(query), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", idd, string1);
				mysql_tquery(SQL,query,"","");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_NOUNINVITE)
	{
		if(response)
		{
			new string1[300],result[30],name[30],rank,ftime,reason[128],idd,fhid,language,test;
			format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL,string1);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				cache_get_field_content(i, "name", result); format(name, 30, result);
				ftime = cache_get_field_content_int(i, "FactionJoin");
				rank = cache_get_field_content_int(i, "Rank");
				idd = cache_get_field_content_int(i, "id");
				language = cache_get_field_content_int(i, "Language");
			}
			cache_delete(membresult);
			format(string1, sizeof(string1), "SELECT * FROM `faction_logs` WHERE `player`='%d' ORDER BY `id` DESC LIMIT 1", idd);
			new Cache: abx = mysql_query(SQL, string1);
			fhid = cache_get_field_content_int(0, "id");
			cache_delete(abx);
			mysql_real_escape_string(inputtext, reason);
			new string2[300],query[300],string3[300];
			format(string2, sizeof(string2), "%s was uninvited by %s from faction %s (rank %d) after %d days, without FP. Reason: %s.", name,PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],rank,GetDaysFromTimestamp(ftime),reason);
			mysql_real_escape_string(string2, string3);
			mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
			mysql_tquery(SQL,query,"","");
			mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string3, idd, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,query,"","");
			mysql_format(SQL,string1,sizeof(string1),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='0',`FWarn`='0',`FactionJoin`='0' WHERE `id`='%d'",Selected2[playerid]);
			mysql_tquery(SQL,string1,"","");
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pSQLID] == Selected2[playerid])
				{
					gTeam[i] = 3;
					PlayerInfo[i][pTeam] = 3;
					PlayerInfo[i][pMember] = 0;
					PlayerInfo[i][pRank] = 0;
      				PlayerInfo[i][pLeader] = 0;
					PlayerInfo[i][pFACWarns] = 0;
					PlayerInfo[i][pFpunish] = 0;
					PlayerInfo[i][pFactionJoin] = 0;
					PlayerInfo[i][pModel] = 250;
					SetPlayerArmourEx(i, 0);
					tazer[i] = 0;
					OnDuty[i] = 0;
					SetPlayerSkin(i,PlayerInfo[i][pModel]);
					if(PlayerInfo[i][pLanguage] == 2)
					{
						format(string1, sizeof(string1), "Ai fost demis de %s din factiunea din care faceai parte dupa %d zile, fara FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
						ShowPlayerDialog(i, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Inchide", "");
					}
					else
					{
						format(string1, sizeof(string1), "You were uninvited by %s from your faction after %d days, without FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
						ShowPlayerDialog(i, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Close", "");
					}
					test++;
				}
			}
			format(string1, sizeof(string1),"%s was uninvited by %s from faction %s (rank %d) after %d days, without FP. Reason: %s.",name,PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],rank,GetDaysFromTimestamp(ftime),reason);
            Factionlog(PlayerInfo[playerid][pMember],idd,PlayerInfo[playerid][pSQLID],string1);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string1);
			if(test == 0)
			{
				if(language == 2) format(string1, sizeof(string1), "Ai fost demis de %s din factiunea din care faceai parte dupa %d zile, fara FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				else format(string1, sizeof(string1), "You were uninvited by %s from your faction after %d days, without FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				mysql_format(SQL,query, sizeof(query), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", idd, string1);
				mysql_tquery(SQL,query,"","");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_FWARN)
	{
		if(response)
		{
			new str[256],stringg[128],fwarn,name[30],name2[30],result[30],idd;
			format(stringg, sizeof(stringg), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL,stringg);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				idd = cache_get_field_content_int(i, "id");
				cache_get_field_content(i, "name", result); format(name2, 30, result);
				fwarn = cache_get_field_content_int(i, "FWarn");
			}
			cache_delete(membresult);
			if(fwarn == 2) return SendClientMessage(playerid, COLOR_WHITE, "Pot da maxim 2 FW unui membru, la al 3-lea FW se da uninvite.");
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET FWarn = FWarn+1 WHERE id = %d",Selected2[playerid]);
			mysql_tquery(SQL,str,"","");
			SendClientMessage(playerid, COLOR_WHITE, "Gata! Acel player a primit FW.");
			GetPlayerName(playerid, name, sizeof(name));
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pSQLID] == Selected2[playerid])
				{
					PlayerInfo[i][pFACWarns] += 1;
					format(stringg, sizeof(stringg),"%s ti-a dat un FW (faction warn).",name);
					SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
				}
			}
			format(str,sizeof(str),"%s received a faction warn from %s. FW: %d/3.",name2,name,(fwarn+1));
			Factionlog(PlayerInfo[playerid][pMember],idd,PlayerInfo[playerid][pSQLID],str);
		}
		return 1;
	}
	if(dialogid == DIALOG_FUNWARN)
	{
		if(response)
		{
			new str[256],stringg[128],fwarn,name[30],name2[30],result[30],idd;
			format(stringg, sizeof(stringg), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL,stringg);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				idd = cache_get_field_content_int(i, "id");
				cache_get_field_content(i, "name", result); format(name2, 30, result);
				fwarn = cache_get_field_content_int(i, "FWarn");
			}
			cache_delete(membresult);
			if(fwarn == 0) return SendClientMessage(playerid, COLOR_WHITE, "Acel membru nu are niciun FW.");
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET FWarn = FWarn-1 WHERE id = %d",Selected2[playerid]);
			mysql_tquery(SQL,str,"","");
			SendClientMessage(playerid, COLOR_WHITE, "Gata! Acelui player i-a fost scos un FW.");
			GetPlayerName(playerid, name, sizeof(name));
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pSQLID] == Selected2[playerid])
				{
					PlayerInfo[i][pFACWarns] += 1;
					format(stringg, sizeof(stringg),"%s ti-a scos un FW (faction warn).",name);
					SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
				}
			}
			format(str,sizeof(str),"%s got a FW clear from %s.",name2,name);
			Factionlog(PlayerInfo[playerid][pMember],idd,PlayerInfo[playerid][pSQLID],str);
		}
		return 1;
	}
	if(dialogid == DIALOG_CLAN)
	{
			if(!response)
			{
				hidePlayerDialog(playerid);
			}
			else
			{
				if(PlayerInfo[playerid][pClan] >= 1)
				{
					switch(listitem)
					{
						case 0:
						{
							SendClientMessage(playerid, COLOR_GENANNOUNCE, "Clan help:");
							SendClientMessage(playerid, COLOR_GREY, "/clan - clan menu, /c - clan chat, /cinvite - invite member to clan, /quitclan - quit the clan");
						}
						case 1:
						{
							new aim[569],query[300],warns[5],test[5],result[300],idd,mid=1,aim2[600];
							format(query, sizeof(query), "SELECT * FROM `users` WHERE `Clan` = '%d' ORDER BY `CRank` DESC LIMIT 100",PlayerInfo[playerid][pClan]);
							new Cache: membresult = mysql_query(SQL,query);
							for(new i, j = cache_get_row_count (); i != j; ++i)
							{
								cache_get_field_content(i, "name", result); format(query, 30, result);
								cache_get_field_content(i, "CRank", result); format(test, 5, result);
								cache_get_field_content(i, "ClanWarns", result); format(warns, 5, result);
								idd = cache_get_field_content_int(i, "id");
								Selected[playerid][mid] = idd;
								format(aim, sizeof(aim), "%s[R%s] [%s/3 warns] %s\n",aim, test, warns, query);
								mid++;
							}
							cache_delete(membresult);
							format(aim2,sizeof(aim2),"{F89B0E}[+] Invite a new member\n%s",aim);
							ShowPlayerDialog(playerid, DIALOG_CLANMEMBERS, DIALOG_STYLE_LIST, "Clan Members", aim2, "Select", "Back");
						}
						case 2:
						{
							ShowPlayerDialog(playerid, DIALOG_CLANSETTINGS, DIALOG_STYLE_LIST, "Clan settings", "Clan Rank Names\nChange Clan Chat Color", "Select", "Back");
						}
						case 3:
						{
							new strings[256];
							format(strings,sizeof(strings),"Remove Clan Tag: %s\nUse Clan Tag #1: %s%s\nUse Clan Tag #2: %s%s",PlayerInfo[playerid][pNormalName],ClanInfo[PlayerInfo[playerid][pClan]][cClanTag],PlayerInfo[playerid][pNormalName],PlayerInfo[playerid][pNormalName],ClanInfo[PlayerInfo[playerid][pClan]][cClanTag]);
							ShowPlayerDialog(playerid, DIALOG_CLAN_TAG, DIALOG_STYLE_LIST, "Clan Tag",strings, "Select", "Back");
						}
					}
				}
				else
				{
					hidePlayerDialog(playerid);
				}
			}
		}
	if(dialogid == DIALOG_CLANMEMBERS)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pClan] >= 1)
			{
				if(listitem == 0)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Usage: /cinvite <id>");
				}
				if(listitem > 0)
				{
					new name[30],result[30],query[300],test[5],warns[5],laston[64],clanjoin,strings[300],date[6];
					format(query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%d'",Selected[playerid][listitem]);
					new Cache: membresult = mysql_query(SQL,query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name, 30, result);
						cache_get_field_content(i, "CRank", result); format(test, 5, result);
						cache_get_field_content(i, "ClanWarns", result); format(warns, 5, result);
						cache_get_field_content(i, "lastOn", result); format(laston, 64, result);
						clanjoin = cache_get_field_content_int(i, "ClanJoin");
					}
					cache_delete(membresult);
					TimestampToDate(clanjoin,date[0],date[1],date[2],date[3],date[4],date[5],2);
					Selected2[playerid] = Selected[playerid][listitem];
					format(strings,sizeof(strings),"User: %s\nRank: %s\nWarns: %s/3\nJoined: %02d-%02d-%02d %02d:%02d:%02d\nLast login: %s\nDays in clan: %d",name,test,warns,date[0],date[1],date[2],date[3],date[4],date[5],laston,GetDaysFromTimestamp(clanjoin));
					if(PlayerInfo[playerid][pCRank] > 5)
					{
						ShowPlayerDialog(playerid, DIALOG_CLANMEMBERS2, DIALOG_STYLE_MSGBOX, "Manage user", strings, "Options", "Back");
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_CLANMEMBERS2, DIALOG_STYLE_MSGBOX, "Manage user", strings, "Back", "");
					}
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLANMEMBERS2)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] > 5)
			{
				ShowPlayerDialog(playerid, DIALOG_CLANMEMBERS3, DIALOG_STYLE_LIST, "Manage user", "Set clan rank\nSet clan warn\nUninvite from clan", "Options", "Back");
			}
			else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_WARNS)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] >= 6)
			{
				if(listitem >= 0)
				{
					new name1[30],name2[30],rank,str1[300],result[30],clan = PlayerInfo[playerid][pClan],strings[128],str2[128];
					format(str1, sizeof(str1), "SELECT name, CRank FROM `users` WHERE `id`='%d'",Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL,str1);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name2, 30, result);
						rank = cache_get_field_content_int(i, "CRank");
					}
					cache_delete(membresult);
					if(rank > 5 && PlayerInfo[playerid][pCRank] < 7) return SendClientMessage(playerid, COLOR_WHITE, "Numai liderul (rank 7) poate seta warn levelul membrilor cu rank mai mare de 5.");
					foreach(new i : Player)
					{
						if(PlayerInfo[i][pSQLID] == Selected2[playerid])
						{
							PlayerInfo[i][pWarns] = (listitem);
						}
					}
					GetPlayerName(playerid, name1, sizeof(name1));
					format(str1,sizeof(str1),"{%s}[CLAN] %s changed %s's warn level to %d.", ClanInfo[clan][cClanColor], name1, name2, listitem);
					SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, str1);
					mysql_format(SQL,str1, sizeof(str1), "UPDATE users SET `ClanWarns`='%d' WHERE `id`='%d'", listitem,Selected2[playerid]);
	       			mysql_tquery(SQL,str1,"","");
					format(str1, sizeof(str1), "%s changed %s's warn level to %d.",name1,name2,listitem);
					mysql_real_escape_string(str1, strings);
					mysql_format(SQL,str2,sizeof(str2),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,str2,"","");
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_RANK)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] == 6)
			{
				if(listitem >= 0 && listitem <= 5)
				{
					new name1[30],name2[30],rank,str1[300],result[30],clan = PlayerInfo[playerid][pClan],strings[128],str2[128];
					format(str1, sizeof(str1), "SELECT name, CRank FROM `users` WHERE `id`='%d'",Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL,str1);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name2, 30, result);
						rank = cache_get_field_content_int(i, "CRank");
					}
					cache_delete(membresult);
					if(rank > 5 && PlayerInfo[playerid][pCRank] < 7) return SendClientMessage(playerid, COLOR_WHITE, "Numai liderul (rank 7) poate seta rank-ul membrilor cu rank mai mare de 5.");
					foreach(new i : Player)
					{
						if(PlayerInfo[i][pSQLID] == Selected2[playerid])
						{
							PlayerInfo[i][pCRank] = (listitem+1);
						}
					}
					GetPlayerName(playerid, name1, sizeof(name1));
					format(str1,sizeof(str1),"{%s}[CLAN] %s changed %s's rank to %d.", ClanInfo[clan][cClanColor], name1, name2, (listitem+1));
					SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, str1);
					mysql_format(SQL,str1, sizeof(str1), "UPDATE users SET `CRank`='%d' WHERE `id`='%d'", (listitem+1),Selected2[playerid]);
	       			mysql_tquery(SQL,str1,"","");
					format(str2, sizeof(str2), "%s changed %s's rank to %d.",name1,name2,(listitem+1));
					mysql_real_escape_string(str2, strings);
					mysql_format(SQL,str1,sizeof(str1),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,str1,"","");
				}
				if(listitem > 5) return SendClientMessage(playerid, COLOR_WHITE, "Numai liderul clanului (rank 7) poate acorda rank 6 sau 7.");
			}
			else if(PlayerInfo[playerid][pCRank] == 7)
			{
				if(listitem >= 0 && listitem <= 5)
				{
					new name1[30],name2[30],str1[300],result[30],clan = PlayerInfo[playerid][pClan],str2[128],strings[128];
					mysql_format(SQL,str1, sizeof(str1), "UPDATE users SET `CRank`='%d' WHERE `id`='%d'", (listitem+1),Selected2[playerid]);
	       			mysql_tquery(SQL,str1,"","");
					format(str1, sizeof(str1), "SELECT name FROM `users` WHERE `id`='%d'",Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL,str1);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name2, 30, result);
					}
					cache_delete(membresult);
					foreach(new i : Player)
					{
						if(PlayerInfo[i][pSQLID] == Selected2[playerid])
						{
							PlayerInfo[i][pCRank] = (listitem+1);
						}
					}
					GetPlayerName(playerid, name1, sizeof(name1));
					format(str1,sizeof(str1),"{%s}[CLAN] %s changed %s's rank to %d.", ClanInfo[clan][cClanColor], name1, name2, (listitem+1));
					SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, str1);
					format(str2, sizeof(str2), "%s changed %s's rank to %d.",name1,name2,(listitem+1));
					mysql_real_escape_string(str2, strings);
					mysql_format(SQL,str1,sizeof(str1),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,str1,"","");
				}
				if(listitem == 6)
				{
					new name1[30],name2[30],str1[300],result[30],clan = PlayerInfo[playerid][pClan],str2[128],strings[128];
					mysql_format(SQL,str1, sizeof(str1), "UPDATE users SET `CRank`='7' WHERE `id`='%d'", Selected2[playerid]);
	       			mysql_tquery(SQL,str1,"","");
					mysql_format(SQL,str1, sizeof(str1), "UPDATE users SET `CRank`='6' WHERE `id`='%d'", PlayerInfo[playerid][pSQLID]);
	       			mysql_tquery(SQL,str1,"","");
					format(str1, sizeof(str1), "SELECT name FROM `users` WHERE `id`='%d'",Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL,str1);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name2, 30, result);
					}
					cache_delete(membresult);
					foreach(new i : Player)
					{
						if(PlayerInfo[i][pSQLID] == Selected2[playerid])
						{
							PlayerInfo[i][pCRank] = 7;
						}
					}
					PlayerInfo[playerid][pCRank] = 6;
					GetPlayerName(playerid, name1, sizeof(name1));
					format(str1,sizeof(str1),"{%s}[CLAN] %s changed %s's rank to 7.", ClanInfo[clan][cClanColor], name1, name2);
					SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, str1);
					format(str2, sizeof(str2), "%s changed %s's rank to 7.",name1,name2);
					mysql_real_escape_string(str2, strings);
					mysql_format(SQL,str1,sizeof(str1),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,str1,"","");
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLANMEMBERS3)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pCRank] == 6)
				{
					ShowPlayerDialog(playerid, DIALOG_CLAN_RANK, DIALOG_STYLE_LIST, "Set user rank", "Set rank 1\nSet rank 2\nSet rank 3\nSet rank 4\nSet rank 5", "Select", "Back");
				}
				else if(PlayerInfo[playerid][pCRank] == 7)
				{
					ShowPlayerDialog(playerid, DIALOG_CLAN_RANK, DIALOG_STYLE_LIST, "Set user rank", "Set rank 1\nSet rank 2\nSet rank 3\nSet rank 4\nSet rank 5\nSet rank 6\nSet rank 7 - you will get demoted to rank 6", "Select", "Back");
				}
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pCRank] > 5)
				{
					ShowPlayerDialog(playerid, DIALOG_CLAN_WARNS, DIALOG_STYLE_LIST, "Set user warns", "Warns: 0/3\nWarns: 1/3\nWarns: 2/3", "Select", "Back");
				}
			}
			if(listitem == 2)
			{
				if(PlayerInfo[playerid][pCRank] > 5)
				{
					new str1[300],name1[30],name2[30],rank,clan = PlayerInfo[playerid][pClan],result[30],strings[300],str2[128];
					format(str1, sizeof(str1), "SELECT name, CRank FROM `users` WHERE `id`='%d'",Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL,str1);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name2, 30, result);
						rank = cache_get_field_content_int(i, "CRank");
					}
					cache_delete(membresult);
					if(rank > 5 && PlayerInfo[playerid][pCRank] < 7) return SendClientMessage(playerid, COLOR_WHITE, "Numai liderul (rank 7) poate da afara membrii cu rank mai mare de 5.");
					GetPlayerName(playerid, name1, sizeof(name1));
					foreach(new userID : Player)
					{
						if(PlayerInfo[userID][pSQLID] == Selected2[playerid])
						{
							format(str1,sizeof(str1),"{%s}[CLAN] %s left the clan (uninvited by %s).", ClanInfo[clan][cClanColor], name2, name1);
							SendClientMessage(playerid, COLOR_WHITE, str1);
							SetPlayerName(userID, PlayerInfo[userID][pNormalName]);
							PlayerInfo[userID][pClan] = 0;
							PlayerInfo[userID][pCRank] = 0;
							PlayerInfo[userID][pCWarns] = 0;
						}
					}
					format(str2, sizeof(str2), "%s left the clan (uninvited by %s).",name2,name1);
					mysql_real_escape_string(str2, strings);
					mysql_format(SQL,str1,sizeof(str1),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,str1,"","");
					GetPlayerName(playerid, name1, sizeof(name1));
					mysql_format(SQL, str1, sizeof(str1), "UPDATE users SET `CRank`='0',`Clan`='0',`ClanJoin`='0',`ClanTag`='0',`ClanWarns`='0' WHERE `id`='%d'", Selected2[playerid]);
					mysql_tquery(SQL,str1,"","");
					format(strings,sizeof(strings),"%s te-a dat afara din clan-ul %s.", name1, ClanInfo[PlayerInfo[playerid][pClan]][cClanName]);
					new stringg[300];
					mysql_real_escape_string(strings, stringg);
					mysql_format(SQL, str1, sizeof(str1), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",Selected2[playerid],stringg);
					mysql_tquery(SQL,str1,"","");
					format(str1,sizeof(str1),"{%s}[CLAN] %s left the clan (uninvited by %s).", ClanInfo[clan][cClanColor], name2, name1);
					SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, str1);
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLANSETTINGS)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pCRank] > 5)
				{
					new strings[500],i = PlayerInfo[playerid][pClan];
					format(strings,sizeof(string),"Rank 1: %s\nRank 2: %s\nRank 3: %s\nRank 4: %s\nRank 5: %s\nRank 6: %s\nRank 7: %s",ClanInfo[i][cClanRankName1],ClanInfo[i][cClanRankName2],ClanInfo[i][cClanRankName3],ClanInfo[i][cClanRankName4],ClanInfo[i][cClanRankName5],ClanInfo[i][cClanRankName6],ClanInfo[i][cClanRankName7]);
					ShowPlayerDialog(playerid, DIALOG_CLAN_CHANGERANK, DIALOG_STYLE_LIST, "Change clan ranks", strings, "Change", "Back");
				}
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pCRank] > 5)
				{
					new strings[500];
					format(strings,sizeof(string),"You can go to http://ForEver RPG.ro/html to get html color codes\nEnter the HTML code for the clan color (default FFCC99):");
					ShowPlayerDialog(playerid, DIALOG_CLAN_COLOR, DIALOG_STYLE_INPUT, "Clan color", strings, "Change", "Back");
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_CHANGERANK)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] > 5)
			{
				new strings[256];
				if(listitem == 0)
				{
					format(strings,sizeof(strings),"Current clan rank 1: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName1]);
					Selected2[playerid] = 1;
				}
				if(listitem == 1)
				{
					format(strings,sizeof(strings),"Current clan rank 2: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName2]);
					Selected2[playerid] = 2;
				}
				if(listitem == 2)
				{
					format(strings,sizeof(strings),"Current clan rank 3: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName3]);
					Selected2[playerid] = 3;
				}
				if(listitem == 3)
				{
					format(strings,sizeof(strings),"Current clan rank 4: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName4]);
					Selected2[playerid] = 4;
				}
				if(listitem == 4)
				{
					format(strings,sizeof(strings),"Current clan rank 5: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName5]);
					Selected2[playerid] = 5;
				}
				if(listitem == 5)
				{
					format(strings,sizeof(strings),"Current clan rank 6: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName6]);
					Selected2[playerid] = 6;
				}
				if(listitem == 6)
				{
					format(strings,sizeof(strings),"Current clan rank 7: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName7]);
					Selected2[playerid] = 7;
				}
				ShowPlayerDialog(playerid, DIALOG_CLAN_CHANGERANK2, DIALOG_STYLE_INPUT, "Change clan rank", strings, "Change", "Back");
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_CHANGERANK2)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] > 5)
			{
				if(strlen(inputtext) < 31)
				{
					new ranktext[40],str1[300],strings[128],strings2[128],namex[30];
					GetPlayerName(playerid, namex, sizeof(namex));
					mysql_real_escape_string(inputtext, ranktext);
					if(Selected2[playerid] == 1)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName1], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName1`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 1: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],inputtext);
						format(strings2, sizeof(strings2), "%s changed clan rank 1 to %s.", namex, inputtext);
					}
					else if(Selected2[playerid] == 2)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName2], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName2`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 2: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],inputtext);
						format(strings2, sizeof(strings2), "%s changed clan rank 2 to %s.", namex, inputtext);
					}
					else if(Selected2[playerid] == 3)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName3], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName3`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 3: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],inputtext);
						format(strings2, sizeof(strings2), "%s changed clan rank 3 to %s.", namex, inputtext);
					}
					else if(Selected2[playerid] == 4)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName4], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName4`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 4: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],inputtext);
						format(strings2, sizeof(strings2), "%s changed clan rank 4 to %s.", namex, inputtext);
					}
					else if(Selected2[playerid] == 5)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName5], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName5`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 5: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],inputtext);
						format(strings2, sizeof(strings2), "%s changed clan rank 5 to %s.", namex, inputtext);
					}
					else if(Selected2[playerid] == 6)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName6], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName6`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 6: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],inputtext);
						format(strings2, sizeof(strings2), "%s changed clan rank 6 to %s.", namex, inputtext);
					}
					else if(Selected2[playerid] == 7)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName7], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName7`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 7: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],inputtext);
						format(strings2, sizeof(strings2), "%s changed clan rank 7 to %s.", namex, inputtext);
					}
					SendClientMessage(playerid, COLOR_WHITE, strings);
					mysql_real_escape_string(strings2, strings);
					mysql_tquery(SQL, strings, "", "");
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_COLOR)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] > 5)
			{
				new len = strlen(inputtext),str1[300],colortext[7],strings[128];
				if(len == 6)
				{
					for(new i=0;i<len;i++)
					{
						if((inputtext[i] >= 'A' && inputtext[i] <= 'F') || (inputtext[i] >= '0' && inputtext[i] <= '9'))
						{
							mysql_real_escape_string(inputtext, colortext);
							strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanColor], colortext, 0, strlen(colortext), 64);
							mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanColor`='%s' WHERE `clanName`='%s'", colortext, ClanInfo[PlayerInfo[playerid][pClan]][cClanName]);
							mysql_tquery(SQL,str1,"","");
							format(strings,sizeof(strings),"Clan color changed to {%s}%s{FFFFFF}.",colortext,colortext);
						}
						else return SendClientMessage(playerid, COLOR_WHITE, "Culoare invalida.");
					}
					SendClientMessage(playerid, COLOR_WHITE, strings);
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "Culoare invalida.");
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_TAG)
	{
			if(!response)
			{
				ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag", "Select", "Close");
			}
			else
			{
				if(PlayerInfo[playerid][pClan] >= 1)
				{
					new szName[25],str111[256],str222[256],str333[256],strings[128];
					switch(listitem)
					{
						case 0:
						{
							format(szName, sizeof(szName), "%s", PlayerInfo[playerid][pNormalName]);
							SetPlayerName(playerid, PlayerInfo[playerid][pNormalName]);
							PlayerInfo[playerid][pClanTag] = 0;
                            mysql_format(SQL, str111, sizeof(str111), "UPDATE users SET `ClanTag`='0' WHERE `name`='%s'", PlayerInfo[playerid][pNormalName]);
	       				 	mysql_tquery(SQL,str111,"","");
						}
						case 1:
						{
							format(szName, sizeof(szName), "%s%s", ClanInfo[PlayerInfo[playerid][pClan]][cClanTag], PlayerInfo[playerid][pNormalName]);
                            SetPlayerName(playerid, szName);
							PlayerInfo[playerid][pClanTag] = 1;
                            mysql_format(SQL,str222, sizeof(str222), "UPDATE users SET `ClanTag`='1' WHERE `name`='%s'", PlayerInfo[playerid][pNormalName]);
	       				 	mysql_tquery(SQL,str222,"","");
						}
						case 2:
						{
							format(szName, sizeof(szName), "%s%s", PlayerInfo[playerid][pNormalName], ClanInfo[PlayerInfo[playerid][pClan]][cClanTag]);
                            SetPlayerName(playerid, szName);
							PlayerInfo[playerid][pClanTag] = 2;
                            mysql_format(SQL,str333, sizeof(str333), "UPDATE users SET `ClanTag`='2' WHERE `name`='%s'", PlayerInfo[playerid][pNormalName]);
	       				 	mysql_tquery(SQL,str333,"","");
						}
					}
					format(strings,sizeof(strings),"Your nickname is now: %s",szName);
					SendClientMessage(playerid, COLOR_GENANNOUNCE, strings);
				}
				else
				{
					hidePlayerDialog(playerid);
				}
			}
		}
    if(dialogid == DIALOG_REGISTER)
	{
		if(response)
    	{
		    PlayerInfo[playerid][pLanguage] = 2;
		    SendClientMessage(playerid, COLOR_WHITE, "Limba setata: romana.");
		    SendClientMessage(playerid, COLOR_WHITE, "[EN] To set the language to English, use /eng.");
		    SendClientMessage(playerid, COLOR_YELLOW, "Alege sexul caracterului tau.");
		    ShowPlayerDialog(playerid,DIALOG_REGISTER2,DIALOG_STYLE_LIST,"Alege sexul caracterului","Barbat\nFemeie","Alege","");
		    RegistrationStep[playerid] = 2;
		    SetPlayerSkin(playerid, 250);
			new str1[512];
			mysql_format(SQL,str1,512,"UPDATE users SET `Language`='2' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str1,"","");
		}
		else
		{
		    PlayerInfo[playerid][pLanguage] = 1;
		    SendClientMessage(playerid, COLOR_WHITE, "Language set to english.");
		    SendClientMessage(playerid, COLOR_WHITE, "[RO] Pentru a seta limba romana foloseste /ro.");
		    SendClientMessage(playerid, COLOR_YELLOW, "Choose your gender of your character.");
		    ShowPlayerDialog(playerid,DIALOG_REGISTER2,DIALOG_STYLE_LIST,"Choose your gender of your character","Male\nFemale","Choose","");
		    RegistrationStep[playerid] = 2;
		    SetPlayerSkin(playerid, 216);
			new str1[512];
			mysql_format(SQL,str1,512,"UPDATE users SET `Language`='1' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str1,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_REGISTER2)
	{
	    if(response)
		{
		    if(listitem == 0)
			{
				PlayerInfo[playerid][pSex] = 1;
				new str1[512];
				mysql_format(SQL,str1,512,"UPDATE users SET `Sex`='1',`Model`='250'  WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str1,"","");
				RegistrationStep[playerid] = 3;
				SetPlayerSkin(playerid, 250);
				if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(string, sizeof(string), "Sex setat: barbat.");
					SendClientMessage(playerid, COLOR_YELLOW, string);
					ShowPlayerDialog(playerid, DIALOG_REGISTER3, DIALOG_STYLE_INPUT, "Varsta", "Scrie varsta caracterului tau:", "Ok", "");
				}
				else
				{
				    format(string, sizeof(string), "Good! Gender set to: man.");
					SendClientMessage(playerid, COLOR_YELLOW, string);
					ShowPlayerDialog(playerid, DIALOG_REGISTER3, DIALOG_STYLE_INPUT, "Character age", "Type the age of your character bellow:", "Ok", "");
				}
			}
			if(listitem == 1)
			{
				PlayerInfo[playerid][pSex] = 2;
				new str1[512];
				mysql_format(SQL,str1,512,"UPDATE users SET `Sex`='2',`Model`='216' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str1,"","");
				RegistrationStep[playerid] = 3;
				SetPlayerSkin(playerid, 216);
				if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(string, sizeof(string), "Sex setat: femeie.");
					SendClientMessage(playerid, COLOR_YELLOW, string);
					ShowPlayerDialog(playerid, DIALOG_REGISTER3, DIALOG_STYLE_INPUT, "Varsta", "Scrie varsta caracterului tau:", "Ok", "");
				}
				else
				{
				    format(string, sizeof(string), "Good! Gender set to: female.");
					SendClientMessage(playerid, COLOR_YELLOW, string);
					ShowPlayerDialog(playerid, DIALOG_REGISTER3, DIALOG_STYLE_INPUT, "Character age", "Type the age of your character bellow:", "Ok", "");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_REGISTER3)
	{
        if(response)
	    {
			new tmppass[64];
			mysql_real_escape_string(inputtext, tmppass);
			new age = strval(tmppass);
			if(age > 1 && age < 100 && response)
			{
				PlayerInfo[playerid][pAge] = age;
				new str1[512];
				mysql_format(SQL,str1,512,"UPDATE users SET `Age`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pAge],PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str1,"","");
				RegistrationStep[playerid] = 4;
				if(PlayerInfo[playerid][pLanguage] == 2)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Introdu adresa de email. Daca nu vrei sa-ti setezi email-ul, poti apasa ok.");
					SendClientMessage(playerid, COLOR_WHITE, "Emailul te poate ajuta pentru a-ti recupera parola, in caz ca o uiti.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Type your email. If you don't want to set your email, just click ok.");
					SendClientMessage(playerid, COLOR_WHITE, "The email will help you to recover your password, in case you loose it.");
				}
				ShowPlayerDialog(playerid, DIALOG_REGISTER4, DIALOG_STYLE_INPUT, "Email", "(ex: my_email@yahoo.com)", "Ok", "");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_REGISTER2,DIALOG_STYLE_INPUT,"Your age:","Please enter below the age of your character:","Ok","");
				return 1;
			}
        }
        return 1;
 	}
 	if(dialogid == DIALOG_REGISTER4)
 	{
  		new emailtext[64];
		mysql_real_escape_string(inputtext, emailtext);
		strmid(PlayerInfo[playerid][pEmail], emailtext, 0, strlen(emailtext), 64);
		if(IsMail(inputtext) && response && strlen(inputtext)<30)
 	    {
 	        if(PlayerInfo[playerid][pLanguage] == 2)
 	        {
 	        	format(string, sizeof(string), "Email setat: %s.", PlayerInfo[playerid][pEmail]);
 	        	SendClientMessage(playerid, COLOR_YELLOW, string);
			}
			else
			{
			    format(string, sizeof(string), "Email set to: %s.", PlayerInfo[playerid][pEmail]);
 	        	SendClientMessage(playerid, COLOR_YELLOW, string);
			}
 	    }
 	    else
 	    {
 	        if(PlayerInfo[playerid][pLanguage] == 2)
			{
 	        	SendClientMessage(playerid, COLOR_YELLOW, "Ai ales sa nu introduci emailul. Daca vrei sa-ti setezi un email pe cont in viitor, intra pe panel.ForEver RPG.ro.");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You choosed not to set an email. You can go to panel.ForEver RPG.ro to set an email at a later date, if you want to.");
			}
		}
		RegistrationStep[playerid] = 0;
		TutTime[playerid] = 1;
		TogglePlayerSpectating(playerid, 1);
		new connectplayer[60],stringplayer[128],country[64],bans,stre[256],playerip[16];
 		GetPlayerName(playerid,connectplayer,sizeof(connectplayer));
		GetPlayerCountry(playerid, country, sizeof(country));
		GetPlayerIp(playerid, playerip, sizeof(playerip));
		format(stre, sizeof(stre), "SELECT * FROM `bans` WHERE `IP`='%s'", playerip);
		new Cache: ab = mysql_query(SQL, stre);
		bans = cache_get_row_count();
		cache_delete(ab);
		if(!strcmp(country, "Romania", true))
		{
			if(bans > 0) format(stringplayer,sizeof(stringplayer),"New account: %s (%d) - %d banned accounts with this IP (%s).", connectplayer, playerid, bans, playerip);
			else format(stringplayer,sizeof(stringplayer),"New account: %s (%d).",connectplayer,playerid);
		}
		else
		{
			if(bans > 0) format(stringplayer,sizeof(stringplayer),"New account: %s (%d) - from %s - %d banned accounts with this IP (%s).", connectplayer, playerid, country, bans, playerip);
			else format(stringplayer,sizeof(stringplayer),"New account: %s (%d) - from %s.",connectplayer,playerid,country);
		}
 		HLChat(COLOR_RED2,stringplayer);
  		ABroadCast(COLOR_RED2,stringplayer,1);
		foreach(new iss : Player)
		{
			if(PlayerInfo[iss][pHelper] > 0 || PlayerInfo[iss][pAdmin] > 0)
			{
				KillTimer(deathdeletetime[iss]);
				SendDeathMessageToPlayer(iss, INVALID_PLAYER_ID, playerid, 200);
				deathdeletetime[iss] = SetTimerEx("DeleteDeathMessage",30000,0,"d",iss);
			}
		}
		return 1;
 	}
	if(dialogid == DIALOG_PAINTBALLWEAPON)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvoteg[PlayerInfo[playerid][pPaintBallG]][0]++;
				gunvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted2] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for the weapon set that includes the weapons deagle, m4, grenade & spray.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
			if(listitem == 1)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvoteg[PlayerInfo[playerid][pPaintBallG]][1]++;
				gunvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted2] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for weapon baseball bat.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
			if(listitem == 2)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvoteg[PlayerInfo[playerid][pPaintBallG]][2]++;
				gunvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted2] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for weapon chainsaw.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_RACEVOTEMAP)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new stringg[128],sendernamee[30],strings[600];
	            if(racers[PlayerInfo[playerid][pRaceG]] < 0) return 1;
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				racevotem[PlayerInfo[playerid][pRaceG]][0]++;
				rmapvoted[PlayerInfo[playerid][pRaceG]]++;
				PlayerInfo[playerid][pRaceVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map Auto LS-LV.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
				format(strings, sizeof(strings),"Buffalo\nInfernus\nCheetah\nBanshee\nTurismo\nSanchez\nQuad\nZR-350\nComet\nHotring Racer\nSandking\nBlista Compact\nSuper GT\nNRG-500\nBullet\nMonster A\nMonster B\nSultan\nBandito\nKart\nMower\nClub");
				ShowPlayerDialog(playerid, DIALOG_RACEVOTECAR, DIALOG_STYLE_LIST, "Vote Race Car", strings, "Vote", "");
			}
			if(listitem == 1)
			{
				new stringg[128],sendernamee[30],strings[600];
	            if(racers[PlayerInfo[playerid][pRaceG]] < 0) return 1;
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				racevotem[PlayerInfo[playerid][pRaceG]][1]++;
				rmapvoted[PlayerInfo[playerid][pRaceG]]++;
				PlayerInfo[playerid][pRaceVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map Chiliad.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
				format(strings, sizeof(strings),"Buffalo\nInfernus\nCheetah\nBanshee\nTurismo\nSanchez\nQuad\nZR-350\nComet\nHotring Racer\nSandking\nBlista Compact\nSuper GT\nNRG-500\nBullet\nMonster A\nMonster B\nSultan\nBandito\nKart\nMower\nClub");
				ShowPlayerDialog(playerid, DIALOG_RACEVOTECAR, DIALOG_STYLE_LIST, "Vote Race Vehicle", strings, "Vote", "");
			}
			if(listitem == 2)
			{
				new stringg[128],sendernamee[30],strings[600];
	            if(racers[PlayerInfo[playerid][pRaceG]] < 0) return 1;
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				racevotem[PlayerInfo[playerid][pRaceG]][2]++;
				rmapvoted[PlayerInfo[playerid][pRaceG]]++;
				PlayerInfo[playerid][pRaceVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map The Forest.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
				format(strings, sizeof(strings),"Buffalo\nInfernus\nCheetah\nBanshee\nTurismo\nSanchez\nQuad\nZR-350\nComet\nHotring Racer\nSandking\nBlista Compact\nSuper GT\nNRG-500\nBullet\nMonster A\nMonster B\nSultan\nBandito\nKart\nMower\nClub");
				ShowPlayerDialog(playerid, DIALOG_RACEVOTECAR, DIALOG_STYLE_LIST, "Vote Race Vehicle", strings, "Vote", "");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_RACEVOTEMAP2)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new stringg[128],sendernamee[30],strings[600];
	            if(racers[PlayerInfo[playerid][pRaceG]] < 0) return 1;
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				racevotem[PlayerInfo[playerid][pRaceG]][0]++;
				rmapvoted[PlayerInfo[playerid][pRaceG]]++;
				PlayerInfo[playerid][pRaceVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map LS-LV.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
				format(strings, sizeof(strings),"Leviathan\nSparrow\nRustler\nMaverick\nBeagle\nCropduster\nStunt\nShamal\nCargobob\nRaindance\nDodo");
				ShowPlayerDialog(playerid, DIALOG_RACEVOTECAR2, DIALOG_STYLE_LIST, "Vote Race Vehicle", strings, "Vote", "");
			}
			if(listitem == 1)
			{
				new stringg[128],sendernamee[30],strings[600];
	            if(racers[PlayerInfo[playerid][pRaceG]] < 0) return 1;
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				racevotem[PlayerInfo[playerid][pRaceG]][1]++;
				rmapvoted[PlayerInfo[playerid][pRaceG]]++;
				PlayerInfo[playerid][pRaceVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map SF-LS.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
				format(strings, sizeof(strings),"Leviathan\nSparrow\nRustler\nMaverick\nBeagle\nCropduster\nStunt\nShamal\nCargobob\nRaindance\nDodo");
				ShowPlayerDialog(playerid, DIALOG_RACEVOTECAR2, DIALOG_STYLE_LIST, "Vote Race Vehicle", strings, "Vote", "");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_RACEVOTECAR)
	{
		if(response)
		{
			new stringg[128],sendernamee[30];
	        if(racers[PlayerInfo[playerid][pRaceG]] < 0) return 1;
			GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
			racevotec[PlayerInfo[playerid][pRaceG]][listitem]++;
			carvoted[PlayerInfo[playerid][pRaceG]]++;
			PlayerInfo[playerid][pRaceVoted] = 1;
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				{
					format(stringg,sizeof(stringg),"[VOTE] %s voted for car %s.", sendernamee, aVehicleNames[RaceCar[listitem][0] - 400]);
					SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
				}
			}
			ShowPlayerDialog(playerid, DIALOG_RACEVOTECOL, DIALOG_STYLE_MSGBOX, "Vote Race Collision", "Enable vehicle collisions?", "Yes", "No");
		}
		return 1;
	}
	if(dialogid == DIALOG_RACEVOTECAR2)
	{
		if(response)
		{
			new stringg[128],sendernamee[30];
	        if(racers[PlayerInfo[playerid][pRaceG]] < 0) return 1;
			GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
			racevotec[PlayerInfo[playerid][pRaceG]][listitem]++;
			carvoted[PlayerInfo[playerid][pRaceG]]++;
			PlayerInfo[playerid][pRaceVoted] = 1;
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				{
					format(stringg,sizeof(stringg),"[VOTE] %s voted for car %s.", sendernamee, aVehicleNames[ARaceCar[listitem][0] - 400]);
					SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
				}
			}
			ShowPlayerDialog(playerid, DIALOG_RACEVOTECOL, DIALOG_STYLE_MSGBOX, "Vote Race Collision", "Enable vehicle collisions?", "Yes", "No");
		}
		return 1;
	}
	if(dialogid == DIALOG_RACEVOTECOL)
	{
		if(response)
		{
			new stringg[128],sendernamee[30];
	        if(racers[PlayerInfo[playerid][pRaceG]] < 0) return 1;
			GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
			racevotecol[PlayerInfo[playerid][pRaceG]][0]++;
			if(racevotecol[PlayerInfo[playerid][pRaceG]][0] > racevotecol[PlayerInfo[playerid][pRaceG]][1])
			{
				racecol[PlayerInfo[playerid][pRaceG]] = 0;
			}
			PlayerInfo[playerid][pRaceVoted] = 1;
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				{
					format(stringg,sizeof(stringg),"[VOTE] %s voted for collisions on.", sendernamee);
					SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
				}
			}
		}
		else
		{
			new stringg[128],sendernamee[30];
	        if(racers[PlayerInfo[playerid][pRaceG]] < 0) return 1;
			GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
			racevotecol[PlayerInfo[playerid][pRaceG]][1]++;
			if(racevotecol[PlayerInfo[playerid][pRaceG]][1] > racevotecol[PlayerInfo[playerid][pRaceG]][0])
			{
				racecol[PlayerInfo[playerid][pRaceG]] = 1;
			}
			PlayerInfo[playerid][pRaceVoted] = 1;
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				{
					format(stringg,sizeof(stringg),"[VOTE] %s voted for collisions off.", sendernamee);
					SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
				}
			}
		}
	}
	if(dialogid == DIALOG_PAINTBALLMAP)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return 1;
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvotem[PlayerInfo[playerid][pPaintBallG]][0]++;
				mapvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map rc_arena.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
			if(listitem == 1)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return 1;
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvotem[PlayerInfo[playerid][pPaintBallG]][1]++;
				mapvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map tennis.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
			if(listitem == 2)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvotem[PlayerInfo[playerid][pPaintBallG]][2]++;
				mapvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map farm.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
			if(listitem == 3)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvotem[PlayerInfo[playerid][pPaintBallG]][3]++;
				mapvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map fy_snow.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
			if(listitem == 4)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvotem[PlayerInfo[playerid][pPaintBallG]][4]++;
				mapvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map lspd.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_RACE1)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pCarLic] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a driving licence.");
				if(racers[0] > 10 || racep[0] < 2)
				{
					if(racet[0] > 0) return SendClientMessage(playerid, COLOR_GREY, "Here is already a race ongoing, try to join other race arena or come back later.");
					new sendernamee[30],stringg[128];
					if(racep[0] >= 20) return SendClientMessage(playerid, COLOR_LIGHTRED, "This arena is full.");
					SetPlayerPos(playerid, -40.3110,1508.9723,1000.9155);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("UnFreezeStation", 2000, false, "i", playerid);
					StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/galgrs6abk/Snavs_and_Fabian_Mazur_-_Exhale.mp3");
					SetPlayerVirtualWorld(playerid, 1);
					PlayerInfo[playerid][pRaceG] = 0;
					foreach(new i : Player)
					{
						if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
						{
							GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
							format(stringg,sizeof(stringg),"%s has joined the race arena.", sendernamee);
							SendClientMessage(i, COLOR_YELLOW, stringg);
						 }
					}
					racep[0]++;
					if(racep[0] == 1)
					{
						PlayerTextDrawShow(playerid, PaintBallText[playerid]);
						PlayerTextDrawSetString(playerid, PaintBallText[playerid], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
						GameTextForPlayer(playerid, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
					}
					if(racep[0] == 2)
					{
						racers[0] = 121;
						racet[0] = 0;
						preparerace1 = SetTimer("PrepareRoundRace1", 1000, 1);
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Here is already a race ongoing, try to join other race arena or come back later.");
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pFlyLic] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a flying licence.");
				if(racers[1] > 10 || racep[1] < 2)
				{
					if(racet[1] > 0) return SendClientMessage(playerid, COLOR_GREY, "Here is already a race ongoing, try to join other race arena or come back later.");
					new sendernamee[30],stringg[128];
					if(racep[1] >= 20) return SendClientMessage(playerid, COLOR_LIGHTRED, "This arena is full.");
					SetPlayerPos(playerid, -40.3110,1508.9723,1000.9155);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("UnFreezeStation", 2000, false, "i", playerid);
					StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/gvev0yg9e9/Veorra_-_Set_Free.mp3");
					SetPlayerVirtualWorld(playerid, 2);
					PlayerInfo[playerid][pRaceG] = 1;
					foreach(new i : Player)
					{
						if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
						{
							GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
							format(stringg,sizeof(stringg),"%s has joined the race arena.", sendernamee);
							SendClientMessage(i, COLOR_YELLOW, stringg);
						 }
					}
					racep[1]++;
					if(racep[1] == 1)
					{
						PlayerTextDrawShow(playerid, PaintBallText[playerid]);
						PlayerTextDrawSetString(playerid, PaintBallText[playerid], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
						GameTextForPlayer(playerid, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
					}
					if(racep[1] == 2)
					{
						racers[1] = 121;
						racet[1] = 0;
						preparerace2 = SetTimer("PrepareRoundRace2", 1000, 1);
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Here is already a race ongoing, try to join other race arena or come back later.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_PAINTBALL)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new stringg[128],sendernamee[30];
				if(PlayerInfo[playerid][pGunLic] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a weapon licence.");
	            if(paintp[1] >= 20) return SendClientMessage(playerid, COLOR_LIGHTRED, "This arena is full.");
				if(OnDuty[playerid] == 1)
				{
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0);
				}
	            PlayerInfo[playerid][pPaintBallG] = 1;
	            foreach(new i : Player)
	            {
	                if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
	                {
	                    GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
	                    format(stringg,sizeof(stringg),"%s has joined the paintball arena.", sendernamee);
	                    SendClientMessage(i, COLOR_YELLOW, stringg);
					 }
				}
	            paintp[1]++;
	            if(paintp[1] == 1)
	            {
	                PlayerTextDrawShow(playerid, PaintBallText[playerid]);
					PlayerTextDrawSetString(playerid, PaintBallText[playerid], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   					GameTextForPlayer(playerid, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
				}
	            if(paintp[1] == 2)
				{
					paintrs[1] = 31;
					paintt[1] = 0;
					preparepaint1 = SetTimer("PrepareRoundPaintBall1", 1000, 1);
				}
	            SpawnPlayer(playerid);
			}
			if(listitem == 1)
	        {
	            new stringg[128],sendernamee[30];
				if(PlayerInfo[playerid][pGunLic] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a weapon licence.");
	            if(paintp[2] >= 20) return SendClientMessage(playerid, COLOR_LIGHTRED, "This arena is full.");
                if(OnDuty[playerid] == 1)
				{
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0);
				}
				PlayerInfo[playerid][pPaintBallG] = 2;
	            foreach(new i : Player)
	            {
	                if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
	                {
	                    GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
	                    format(stringg,sizeof(stringg),"%s has joined the paintball arena.", sendernamee);
	                    SendClientMessage(i, COLOR_YELLOW, stringg);
					 }
				}
	            paintp[2]++;
	            if(paintp[2] == 1)
	            {
	                PlayerTextDrawShow(playerid, PaintBallText[playerid]);
					PlayerTextDrawSetString(playerid, PaintBallText[playerid], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   					GameTextForPlayer(playerid, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
				}
	            if(paintp[2] == 2)
				{
					paintrs[2] = 31;
					paintt[2] = 0;
					preparepaint2 = SetTimer("PrepareRoundPaintBall2", 1000, 1);
				}
	            SpawnPlayer(playerid);
			}
			if(listitem == 2)
	        {
	            new stringg[128],sendernamee[30];
				if(PlayerInfo[playerid][pGunLic] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a weapon licence.");
	            if(paintp[3] >= 20) return SendClientMessage(playerid, COLOR_LIGHTRED, "This arena is full.");
                if(OnDuty[playerid] == 1)
				{
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0);
				}
				PlayerInfo[playerid][pPaintBallG] = 3;
	            foreach(new i : Player)
	            {
	                if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
	                {
	                    GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
	                    format(stringg,sizeof(stringg),"%s has joined the paintball arena.", sendernamee);
	                    SendClientMessage(i, COLOR_YELLOW, stringg);
					 }
				}
	            paintp[3]++;
	            if(paintp[3] == 1)
	            {
	                PlayerTextDrawShow(playerid, PaintBallText[playerid]);
					PlayerTextDrawSetString(playerid, PaintBallText[playerid], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   					GameTextForPlayer(playerid, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
				}
	            if(paintp[3] == 2)
				{
					paintrs[3] = 31;
					paintt[3] = 0;
					preparepaint3 = SetTimer("PrepareRoundPaintBall3", 1000, 1);
				}
	            SpawnPlayer(playerid);
			}
			if(listitem == 3)
	        {
	            new stringg[128],sendernamee[30];
				if(PlayerInfo[playerid][pGunLic] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a weapon licence.");
	            if(paintp[4] >= 20) return SendClientMessage(playerid, COLOR_LIGHTRED, "This arena is full.");
                if(OnDuty[playerid] == 1)
				{
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0);
				}
				PlayerInfo[playerid][pPaintBallG] = 4;
	            foreach(new i : Player)
	            {
	                if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
	                {
	                    GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
	                    format(stringg,sizeof(stringg),"%s has joined the paintball arena.", sendernamee);
	                    SendClientMessage(i, COLOR_YELLOW, stringg);
					 }
				}
	            paintp[4]++;
	            if(paintp[4] == 1)
	            {
	                PlayerTextDrawShow(playerid, PaintBallText[playerid]);
					PlayerTextDrawSetString(playerid, PaintBallText[playerid], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   					GameTextForPlayer(playerid, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
				}
	            if(paintp[4] == 2)
				{
					paintrs[4] = 31;
					paintt[4] = 0;
					preparepaint4 = SetTimer("PrepareRoundPaintBall4", 1000, 1);
				}
	            SpawnPlayer(playerid);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_CLOTHES)
	{
		if(response)
		{
			new size;
			for(new cs; cs < 10; cs++)
			{
				if(FactionSkin[PlayerInfo[playerid][pMember]][cs] != 0) size++;
			}
			if(SkinSelect[playerid] >= size) { SetPlayerSkin(playerid, FactionSkin[PlayerInfo[playerid][pMember]][0]); SkinSelect[playerid] = 0; }
			if(SkinSelect[playerid] < size) { SetPlayerSkin(playerid, FactionSkin[PlayerInfo[playerid][pMember]][SkinSelect[playerid]]); SkinSelect[playerid] += 1; }
			ShowPlayerDialog(playerid, DIALOG_CLOTHES, DIALOG_STYLE_MSGBOX, "Skin selection", "Choose a skin", "Next", "Done");
		}
		else
		{
			PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
			new query[184];
			mysql_format(SQL,query, sizeof(query), "UPDATE users SET `Model`='%d' WHERE `name`='%s'",GetPlayerSkin(playerid),PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,query,"","");
			SpawnPlayer(playerid);
			SkinSelect[playerid] = 1;
		}
		return 1;
	}
    if(dialogid == DIALOG_NEWPASS)
	{
		if(response)
    	{
	 		new length = strlen(inputtext);
			if(length == 0 || length > 15)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Please enter another password (maximum 15 characters).");
				ShowPlayerDialog(playerid, DIALOG_NEWPASS,DIALOG_STYLE_INPUT, "Change password:","Type in box your new password:","Done","Close");
				return 1;
			}
	        if(strlen(inputtext) > 1 && strlen(inputtext) < 16)
			{
				new tmppass[64],namee[30],playerip[16];
				mysql_real_escape_string(inputtext, tmppass);
				strmid(PlayerInfo[playerid][pKey], tmppass, 0, strlen(tmppass), 255);
				format(string,sizeof(string),"Your new password is %s.",tmppass);
				SendClientMessage(playerid, COLOR_YELLOW,string);
				GetPlayerName(playerid, namee, sizeof(namee));
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(string,sizeof(string),"%s[user:%d] changed his password. IP: %s",namee,PlayerInfo[playerid][pSQLID],playerip);
				ABroadCast(COLOR_YELLOW, string,1);
				GetPlayerName(playerid,sendername,sizeof(sendername));
				new str2[240];
		        mysql_format(SQL, str2, sizeof(str2), "UPDATE users SET `password`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pKey], PlayerInfo[playerid][pNormalName]);
		        mysql_tquery(SQL,str2,"","");
				return 1;
			}
			else
			{
			    ShowPlayerDialog(playerid, DIALOG_NEWPASS,DIALOG_STYLE_INPUT, "Change password:","Type in box your new password:","Done","Close");
				return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_TRANSFER)
	{
		if(response)
    	{
			new giveplayer[30];
			GetPlayerName(TransferOffer[playerid],giveplayer,sizeof(giveplayer));
			GetPlayerName(playerid,sendername,sizeof(sendername));
			PlayerInfo[playerid][pAccount] -= TransferMoney[playerid];
			PlayerInfo[TransferOffer[playerid]][pAccount] += TransferMoney[playerid];
			format(string, sizeof(string), "(-) You have transferred $%s into %s's account. Your account balance is now $%s.", FormatNumber(TransferMoney[playerid]), giveplayer, FormatNumber(PlayerInfo[playerid][pAccount]));
			SendClientMessage(playerid, COLOR_GREEN, string);
		    format(string, sizeof(string), "(+) %s has transferred $%s into your account. Your account balance is now $%s.", sendername, FormatNumber(TransferMoney[playerid]), FormatNumber(PlayerInfo[TransferOffer[playerid]][pAccount]));
			SendClientMessage(TransferOffer[playerid], COLOR_GREEN, string);
			format(string, sizeof(string), "($) %s has transferd $%s to %s.", sendername, FormatNumber(TransferMoney[playerid]), giveplayer);
			ABroadCast(COLOR_YELLOW,string,1);
			new var100[256],string2[256],string3[256];
			format(string2,sizeof(string2),"%s[user:%d] /transfer-ed $%s to %s[user:%d].",sendername,PlayerInfo[playerid][pSQLID],FormatNumber(TransferMoney[playerid]),giveplayer,PlayerInfo[TransferOffer[playerid]][pSQLID]);
			mysql_real_escape_string(string2, string3);
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[TransferOffer[playerid]][pSQLID],PlayerInfo[playerid][pSQLID],string3);
			mysql_tquery(SQL,var100,"","");
			Update(playerid, pBank);
			Update(TransferOffer[playerid], pBank);
			TransferOffer[playerid] = 999;
			TransferMoney[playerid] = 0;
		}
		return 1;
	}
	if(dialogid == DIALOG_HQS)
	{
	    if(response)
	    {
			if(listitem == 0)
			{
				SetPlayerCheckpoint(playerid,1554.6610,-1675.6371,16.1953,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Los Santos Police Department.", "Checkpoint set on faction Los Santos Police Department.");
			    return 1;
			}
			if(listitem == 1)
			{
				SetPlayerCheckpoint(playerid,200.766,1869.49,13.147,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii National Guard.", "Checkpoint set on faction National Guard.");
			    return 1;
			}
			if(listitem == 2)
			{
				SetPlayerCheckpoint(playerid,1081.0226,-345.1430,73.9839,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Hitman Agency.", "Checkpoint set on faction Hitman Agency.");
			    return 1;
			}
			if(listitem == 3)
			{
				SetPlayerCheckpoint(playerid,627.1133,-572.6523,17.8707,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii FBI.", "Checkpoint set on faction FBI.");
			    return 1;
			}
			if(listitem == 4)
			{
				SetPlayerCheckpoint(playerid,-329.2862,1536.9629,76.6117,4.0);
			    CP[playerid] = 43;
			   	SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii News Reporters.", "Checkpoint set on faction News Reporters.");
			    return 1;
			}
			if(listitem == 5)
			{
				SetPlayerCheckpoint(playerid,2495.2554,-1689.8365,14.6800,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Grove Street.", "Checkpoint set on faction Grove Street.");
			    return 1;
			}
			if(listitem == 6)
			{
				SetPlayerCheckpoint(playerid,1455.0133,750.8113,11.0234,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Ballas.", "Checkpoint set on faction Ballas.");
			    return 1;
			}
			if(listitem == 7)
			{
				SetPlayerCheckpoint(playerid,1457.4807,2772.9023,10.8203,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Los Aztecas.", "Checkpoint set on faction Los Aztecas.");
			    return 1;
			}
			if(listitem == 8)
			{
				SetPlayerCheckpoint(playerid,2435.5708,1671.8771,10.8203,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii School Instructors.", "Checkpoint set on faction School Instructors.");
			    return 1;
			}
			if(listitem == 9)
			{
				SetPlayerCheckpoint(playerid,1614.92480, 1816.09631, 10.91310,4.0);
			    CP[playerid] = 43;
			   	SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Paramedic Department.", "Checkpoint set on faction Paramedic Department.");
			    return 1;
			}
			if(listitem == 10)
			{
				SetPlayerCheckpoint(playerid,725.1876,-1439.7456,13.5318,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Los Vagos.", "Checkpoint set on faction Los Vagos.");
			    return 1;
			}
			if(listitem == 11)
			{
				SetPlayerCheckpoint(playerid,1753.2,-1903.28,13.5633,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Taxi LS.", "Checkpoint set on faction Taxi LS.");
			    return 1;
			}
			if(listitem == 12)
			{
				SetPlayerCheckpoint(playerid,2286.9487,2431.9595,10.8203,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Las Venturas Police Department.", "Checkpoint set on faction Las Venturas Police Department.");
			    return 1;
			}
			if(listitem == 13)
			{
				SetPlayerCheckpoint(playerid,1123.1642,-2037.0461,69.893,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii The Rifa.", "Checkpoint set on faction Las Venturas Police Department.");
			    return 1;
			}
			if(listitem == 14)
			{
				SetPlayerCheckpoint(playerid,-1605.6200,710.4530,13.8672,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii San Fierro Police Department", "Checkpoint set on faction Las Venturas Police Department.");
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == Dialog_gunshop)
	{
	    if(response)
	    {
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        new infostring[512];
	        if(listitem == 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a baseball bat.",sendername);
					ProxDetector(50.0, playerid, infostring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 1000);
					BizzInfo[2][bTill] += 1000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 5, 1);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a baseball bat.",sendername);
					ProxDetector(30.0, playerid, infostring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 1000);
					BizzInfo[9][bTill] += 1000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 5, 1);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a baseball bat.",sendername);
					ProxDetector(50.0, playerid, infostring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 1000);
					BizzInfo[22][bTill] += 1000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 5, 1);
				}
			}
			else if(listitem == 1)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a SD Pistol.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 2000);
					BizzInfo[2][bTill] += 2000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 23, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a SD Pistol.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 2000);
					BizzInfo[9][bTill] += 2000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 23, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a SD Pistol.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 2000);
					BizzInfo[22][bTill] += 2000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 23, 100);
				}
			}
			else if(listitem == 2)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a Desert eagle.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 3000);
					BizzInfo[2][bTill] += 3000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 24, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a Desert eagle.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 3000);
					BizzInfo[9][bTill] += 3000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 24, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a Desert eagle.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 3000);
					BizzInfo[22][bTill] += 3000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 24, 100);
				}
			}
			else if(listitem == 3)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a Shotgun.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4200);
					BizzInfo[2][bTill] += 4200;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 25, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a Shotgun.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4200);
					BizzInfo[9][bTill] += 4200;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 25, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a Shotgun.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4200);
					BizzInfo[22][bTill] += 4200;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 25, 100);
				}
			}
			else if(listitem == 4)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a MP5.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4600);
					BizzInfo[2][bTill] += 4600;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 29, 150);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a MP5.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4600);
					BizzInfo[9][bTill] += 4600;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 29, 150);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a MP5.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4600);
					BizzInfo[22][bTill] += 4600;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 29, 150);
				}
			}
			else if(listitem == 5)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a AK47.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[2][bTill] += 7000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 30, 200);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a AK47.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[9][bTill] += 7000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 30, 200);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a AK47.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[22][bTill] += 7000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 30, 200);
				}
			}
			else if(listitem == 6)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a M4.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[2][bTill] += 7000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 31, 200);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a M4.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[9][bTill] += 7000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 31, 200);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a M4.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[22][bTill] += 7000;
					Update(playerid,pCashx);
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 31, 200);
				}
			}
		}
	}
    if(dialogid == DIALOG_RADIO)
	{
	    if(response)
	    {
			new strings[128],name[30],so;
			GetPlayerName(playerid, name, sizeof(name));
            if(listitem == 0)
			{
				StopAudioStreamForPlayersInCar(vehicleid);
                vehRadio[vehicleid] = 0;
				format(strings, sizeof(strings), "* %s turned off radio.",name);
            }
			if(listitem == 1)
			{
				StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://stream.profm.ro:8012/profm.mp3");
                vehRadio[vehicleid] = 1;
				format(strings, sizeof(strings), "* %s changed the radio station to Pro FM Romania.",name);
            }
			if(listitem == 2)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://live.radiobandit.ro:8000");
                vehRadio[vehicleid] = 2;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Bandit Romania.",name);
            }
			if(listitem == 3)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://radiotaraf.com/live.m3u");
                vehRadio[vehicleid] = 3;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Taraf Romania.",name);
            }
			if(listitem == 4)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://live.radiohot.ro:8000/");
                vehRadio[vehicleid] = 4;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Hot Romania.",name);
            }
			if(listitem == 5)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://dance.radiogangsta.ro:8800");
                vehRadio[vehicleid] = 5;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Gangsta Dance.",name);
            }
            if(listitem == 6)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://live.radiogangsta.ro:8800");
                vehRadio[vehicleid] = 6;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Gangsta Manele.",name);
            }
			if(listitem == 7)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://7619.live.streamtheworld.com:80/977_HITS_SC");
                vehRadio[vehicleid] = 7;
				format(strings, sizeof(strings), "* %s changed the radio station to .977 Hitz.",name);
            }
			if(listitem == 8)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://7639.live.streamtheworld.com:80/977_MIX_SC");
                vehRadio[vehicleid] = 8;
				format(strings, sizeof(strings), "* %s changed the radio station to .977 Mix.",name);
            }
			if(listitem == 9)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://7579.live.streamtheworld.com:80/977_ALTERN_SC");
                vehRadio[vehicleid] = 9;
				format(strings, sizeof(strings), "* %s changed the radio station to .977 Alternative.",name);
            }
			if(listitem == 10)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://www.listenlive.eu/bbcradio1.m3u");
                vehRadio[vehicleid] = 10;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio BBC One UK.",name);
            }
			if(listitem == 11)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://dubstep.fm/128.pls");
                vehRadio[vehicleid] = 11;
				format(strings, sizeof(strings), "* %s changed the radio station to Dubstep.fm.",name);
            }
			if(listitem == 12)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://www.radio-hit.ro/asculta.m3u");
                vehRadio[vehicleid] = 12;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Hit Romania.",name);
            }
			if(listitem == 13)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://live.radioclubmix.ro:9999");
                vehRadio[vehicleid] = 13;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio ClubMix Romania.",name);
            }
			if(listitem == 14)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://80.86.106.136/listen.pls");
                vehRadio[vehicleid] = 14;
				format(strings, sizeof(strings), "* %s changed the radio station to Kiss FM Romania [Audio Plugin].",name);
            }
			if(listitem == 15)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://www.radiozu.ro/live.m3u");
                vehRadio[vehicleid] = 15;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Zu Romania [Audio Plugin].",name);
            }
			if(listitem == 16)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://livemp3.radiopopular.ro:7777");
                vehRadio[vehicleid] = 16;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Popular.",name);
            }
			if(listitem == 17)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://radio.trap.fm/listen128.pls");
                vehRadio[vehicleid] = 17;
				format(strings, sizeof(strings), "* %s changed the radio station to Trap.FM.",name);
            }
            if(listitem == 18)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://radiotequila.ro/hiphop.m3u");
                vehRadio[vehicleid] = 18;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Tequila Hip Hop.",name);
            }
			if(listitem == 19)
			{
                ShowPlayerDialog(playerid, DIALOG_CUSTOMRADIO, DIALOG_STYLE_INPUT, "Custom Url", "Enter a URL:", "Play", "Cancel");
				so = 1;
            }
			if(so != 1)
			{
				ProxDetector(20.0, playerid, strings, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Listening[playerid] = listitem-1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_CUSTOMRADIO)
	{
		if(response)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new stringg[128],length,name[30];
				if(strfind(inputtext, "youtube.com", true) != -1)
				{
					length = strlen(inputtext)-11;
					strdel(inputtext, 0, length);
					format(stringg, sizeof(stringg), "http://youtubeplaylist-mp3.com/download/index/%s",inputtext);
					StopAudioStreamForPlayersInCar(vehicleid);
					PlayAudioStreamForPlayersInCar(vehicleid, stringg);
					format(customRadio[GetPlayerVehicleID(playerid)], 128, stringg);
					vehRadio[GetPlayerVehicleID(playerid)] = 19;
					GetPlayerName(playerid, name, sizeof(name));
					format(stringg, sizeof(stringg), "* %s changed the radio station to Custom URL.",name);
					ProxDetector(20.0, playerid, stringg, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					Listening[playerid] = 18;
				}
				else
				{
					StopAudioStreamForPlayersInCar(vehicleid);
					PlayAudioStreamForPlayersInCar(vehicleid, inputtext);
					format(customRadio[GetPlayerVehicleID(playerid)], 128, inputtext);
					vehRadio[GetPlayerVehicleID(playerid)] = 19;
					GetPlayerName(playerid, name, sizeof(name));
					format(stringg, sizeof(stringg), "* %s changed the radio station to Custom URL.",name);
					ProxDetector(20.0, playerid, stringg, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					Listening[playerid] = 18;
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONS)
	{
	  	if(response)
	    {
			if(listitem == 0)
			{
				SetPlayerCheckpoint(playerid,1219.1234,-1812.3678,16.5938,4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    new string1[MAX_STRING],string2[MAX_STRING],allstring[MAX_STRING];
			    format(string1, sizeof(string1), "24/7 Store (5 businesses)\nClothing Store (3 businesses)\nBar (3 businesses)\nBank (2 businesses)\nRent car (1 business)\nGym (1 business)\nBurger Shot (2 businesses)\nPizza Stack (1 business)");
			    format(string2, sizeof(string2), "Gun Shop (2 businesses)\nCNN (1 business)\nGas Station (4 businesses)\nSex Shop (1 business)\nPay N Spray (4 businesses)\nCar Mod Shop (2 businesses)");
			    format(allstring, sizeof(allstring), "%s\n%s", string1, string2);
				ShowPlayerDialog(playerid, DIALOG_LOCATIONSLS, DIALOG_STYLE_LIST, "Los Santos Locations", allstring, "Find", "Back");
				return 1;
			}
			if(listitem == 2)
			{
			    new string1[MAX_STRING],string2[MAX_STRING],allstring[MAX_STRING];
			    format(string1, sizeof(string1), "24/7 Store (1 business)\nClothing Store (1 business)\nBank (1 business)\nCluckin' Bell (2 businesses)\nBurger Shot (4 businesses)\nGun Shop (1 business)\nCNN (1 business)");
			    format(string2, sizeof(string2), "Gas Station (6 businesses)\nCasino (1 business)\nSex Shop (1 business)\nPay N Spray (2 businesses)\nCar Mod Shop (1 business)");
			    format(allstring, sizeof(allstring), "%s\n%s", string1, string2);
				ShowPlayerDialog(playerid, DIALOG_LOCATIONSLV, DIALOG_STYLE_LIST, "Las Venturas Locations", allstring, "Find", "Back");
				return 1;
			}
			if(listitem == 3)
			{
			    ShowPlayerDialog(playerid, DIALOG_HQS, DIALOG_STYLE_LIST, "SERVER: HQ Locations", "Los Santos Police Department\nNational Guard\nHitman Agency\nFBI\nNews Reporters\nGrove Street\nBallas\nLos Aztecas\nSchool Instructors\nParamedic Department\nLos Vagos\nTaxi LS\nLas Venturas Police Department\nThe Rifa\nSan Fierro Police Department", "Checkpoint", "Back");
			    return 1;
			}
			if(listitem == 4)
			{
			    ShowPlayerDialog(playerid, DIALOG_LOCATIONSMODS, DIALOG_STYLE_LIST, "SERVER: Vehicle Mod Shop Locations", "Tuning LS\nTuning LV\nLowrider Tuning", "Checkpoint", "Back");
			    return 1;
			}
			if(listitem == 5) // PaintBall LS
			{
			    SetPlayerCheckpoint(playerid,-1863.7480,1069.3790,46.0859,4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			/*if(listitem == 5)
			{
			    SetPlayerCheckpoint(playerid,1310.1316,-1367.7863,13.5405,4.0);
			    CP[playerid] = 43;
			    return 1;
			}*/
			if(listitem == 6)
			{
			    SetPlayerCheckpoint(playerid,-1664.1561,1207.6320,7.2546,4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new Float: Position[3];
    			new Float: Distance[6];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[10][bEntranceX], BizzInfo[10][bEntranceY], BizzInfo[10][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[11][bEntranceX], BizzInfo[11][bEntranceY], BizzInfo[11][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[12][bEntranceX], BizzInfo[12][bEntranceY], BizzInfo[12][bEntranceZ]);
	            Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[13][bEntranceX], BizzInfo[13][bEntranceY], BizzInfo[13][bEntranceZ]);
	            Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[14][bEntranceX], BizzInfo[14][bEntranceY], BizzInfo[14][bEntranceZ]);
	            format(string1,sizeof(string1),"24/7 Store (%.1fm away)\n24/7 Store (%.1fm away)\n24/7 Store (%.1fm away)\n24/7 Store (%.1fm away)\n24/7 Store (%.1fm away)",Distance[1],Distance[2],Distance[3],Distance[4],Distance[5]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONS247LS, DIALOG_STYLE_LIST, "24/7 Store (5 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 1)
	        {
	            new Float: Position[3];
    			new Float: Distance[4];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[30][bEntranceX], BizzInfo[30][bEntranceY], BizzInfo[30][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[32][bEntranceX], BizzInfo[32][bEntranceY], BizzInfo[32][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[53][bEntranceX], BizzInfo[53][bEntranceY], BizzInfo[53][bEntranceZ]);
	            format(string1,sizeof(string1),"Clothing Store (%.1fm away)\nClothing Store (%.1fm away)\nClothing Store (%.1fm away)",Distance[1],Distance[2],Distance[3]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCLOTHINGLS, DIALOG_STYLE_LIST, "Clothing Store (3 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 2)
	        {
	            new Float: Position[3];
    			new Float: Distance[4];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[3][bEntranceX], BizzInfo[3][bEntranceY], BizzInfo[3][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[4][bEntranceX], BizzInfo[4][bEntranceY], BizzInfo[4][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[5][bEntranceX], BizzInfo[5][bEntranceY], BizzInfo[5][bEntranceZ]);
	            format(string1,sizeof(string1),"Bar (%.1fm away)\nBar (%.1fm away)\nBar (%.1fm away)",Distance[1],Distance[2],Distance[3]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBARLS, DIALOG_STYLE_LIST, "Bar (3 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 3)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[1][bEntranceX], BizzInfo[1][bEntranceY], BizzInfo[1][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[27][bEntranceX], BizzInfo[27][bEntranceY], BizzInfo[27][bEntranceZ]);
	            format(string1,sizeof(string1),"Bank (%.1fm away)\nBank (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBANKLS, DIALOG_STYLE_LIST, "Bank (2 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 4)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[31][bEntranceX], BizzInfo[31][bEntranceY], BizzInfo[31][bEntranceZ]);
	            format(string1,sizeof(string1),"Rent car (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSRENTLS, DIALOG_STYLE_LIST, "Rent car (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 5)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[25][bEntranceX], BizzInfo[25][bEntranceY], BizzInfo[25][bEntranceZ]);
	            format(string1,sizeof(string1),"Gym (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGYMLS, DIALOG_STYLE_LIST, "Gym (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 6)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[15][bEntranceX], BizzInfo[15][bEntranceY], BizzInfo[15][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[16][bEntranceX], BizzInfo[16][bEntranceY], BizzInfo[16][bEntranceZ]);
	            format(string1,sizeof(string1),"Burger Shot (%.1fm away)\nBurger Shot (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBURGERLS, DIALOG_STYLE_LIST, "Burger Shot (2 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 7)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[26][bEntranceX], BizzInfo[26][bEntranceY], BizzInfo[26][bEntranceZ]);
	            format(string1,sizeof(string1),"Pizza Stack (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSPIZZALS, DIALOG_STYLE_LIST, "Pizza Stack (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 8)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[2][bEntranceX], BizzInfo[2][bEntranceY], BizzInfo[2][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[9][bEntranceX], BizzInfo[9][bEntranceY], BizzInfo[9][bEntranceZ]);
	            format(string1,sizeof(string1),"Gun Shop (%.1fm away)\nGun Shop (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGSLS, DIALOG_STYLE_LIST, "Gun Shop (2 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 9)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[28][bEntranceX], BizzInfo[28][bEntranceY], BizzInfo[28][bEntranceZ]);
	            format(string1,sizeof(string1),"CNN (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCNNLS, DIALOG_STYLE_LIST, "CNN (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 10)
	        {
	            new Float: Position[3];
    			new Float: Distance[5];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[33][bEntranceX], BizzInfo[33][bEntranceY], BizzInfo[33][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[42][bEntranceX], BizzInfo[42][bEntranceY], BizzInfo[42][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[43][bEntranceX], BizzInfo[43][bEntranceY], BizzInfo[43][bEntranceZ]);
	            Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[44][bEntranceX], BizzInfo[44][bEntranceY], BizzInfo[44][bEntranceZ]);
	            format(string1,sizeof(string1),"Gas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)",Distance[1],Distance[2],Distance[3],Distance[4]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGASLS, DIALOG_STYLE_LIST, "Gas Station (4 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 11)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[7][bEntranceX], BizzInfo[7][bEntranceY], BizzInfo[7][bEntranceZ]);
	            format(string1,sizeof(string1),"Sex Shop (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSSEXLS, DIALOG_STYLE_LIST, "Sex Shop (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 12)
	        {
	            new Float: Position[3];
    			new Float: Distance[5];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[34][bEntranceX], BizzInfo[34][bEntranceY], BizzInfo[34][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[35][bEntranceX], BizzInfo[35][bEntranceY], BizzInfo[35][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[36][bEntranceX], BizzInfo[36][bEntranceY], BizzInfo[36][bEntranceZ]);
	            Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[37][bEntranceX], BizzInfo[37][bEntranceY], BizzInfo[37][bEntranceZ]);
	            format(string1,sizeof(string1),"Pay N Spray (%.1fm away)\nPay N Spray (%.1fm away)\nPay N Spray (%.1fm away)\nPay N Spray (%.1fm away)",Distance[1],Distance[2],Distance[3],Distance[4]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSPNSLS, DIALOG_STYLE_LIST, "Pay N Spray (4 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 13)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[38][bEntranceX], BizzInfo[38][bEntranceY], BizzInfo[38][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[39][bEntranceX], BizzInfo[39][bEntranceY], BizzInfo[39][bEntranceZ]);
	            format(string1,sizeof(string1),"Car Mod Shop (%.1fm away)\nCar Mod Shop (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSMODLS, DIALOG_STYLE_LIST, "Car Mod Shop (2 businesses) Locations", string1, "Find", "Back");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[24][bEntranceX], BizzInfo[24][bEntranceY], BizzInfo[24][bEntranceZ]);
	            format(string1,sizeof(string1),"24/7 Store (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONS247LV, DIALOG_STYLE_LIST, "24/7 Store (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 1)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[29][bEntranceX], BizzInfo[29][bEntranceY], BizzInfo[29][bEntranceZ]);
	            format(string1,sizeof(string1),"Clothing Store (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCLOTHINGLV, DIALOG_STYLE_LIST, "Clothing Store (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 2)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[21][bEntranceX], BizzInfo[21][bEntranceY], BizzInfo[21][bEntranceZ]);
	            format(string1,sizeof(string1),"Bank (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBANKLV, DIALOG_STYLE_LIST, "Bank (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 3)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[4][bEntranceX], BizzInfo[4][bEntranceY], BizzInfo[4][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[54][bEntranceX], BizzInfo[54][bEntranceY], BizzInfo[54][bEntranceZ]);
	            format(string1,sizeof(string1),"Cluckin' Bell (%.1fm away)\nCluckin' Bell (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCLUCKINLV, DIALOG_STYLE_LIST, "Cluckin' Bell (2 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 4)
	        {
	            new Float: Position[3];
    			new Float: Distance[5];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[17][bEntranceX], BizzInfo[17][bEntranceY], BizzInfo[17][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[18][bEntranceX], BizzInfo[18][bEntranceY], BizzInfo[18][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[19][bEntranceX], BizzInfo[19][bEntranceY], BizzInfo[19][bEntranceZ]);
	            Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[20][bEntranceX], BizzInfo[20][bEntranceY], BizzInfo[20][bEntranceZ]);
	            format(string1,sizeof(string1),"Burger Shot (%.1fm away)\nBurger Shot (%.1fm away)\nBurger Shot (%.1fm away)\nBurger Shot (%.1fm away)",Distance[1],Distance[2],Distance[3],Distance[4]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBURGERLV, DIALOG_STYLE_LIST, "Burger Shot (4 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 5)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[22][bEntranceX], BizzInfo[22][bEntranceY], BizzInfo[22][bEntranceZ]);
	            format(string1,sizeof(string1),"Gun Shop (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGSLV, DIALOG_STYLE_LIST, "Gun Shop (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 6)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[52][bEntranceX], BizzInfo[52][bEntranceY], BizzInfo[52][bEntranceZ]);
	            format(string1,sizeof(string1),"CNN (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCNNLV, DIALOG_STYLE_LIST, "CNN (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 7)
	        {
	            new Float: Position[3];
    			new Float: Distance[7];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[45][bEntranceX], BizzInfo[45][bEntranceY], BizzInfo[45][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[46][bEntranceX], BizzInfo[46][bEntranceY], BizzInfo[46][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[47][bEntranceX], BizzInfo[47][bEntranceY], BizzInfo[47][bEntranceZ]);
	            Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[48][bEntranceX], BizzInfo[48][bEntranceY], BizzInfo[48][bEntranceZ]);
	            Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[49][bEntranceX], BizzInfo[49][bEntranceY], BizzInfo[49][bEntranceZ]);
	            Distance[6] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[50][bEntranceX], BizzInfo[50][bEntranceY], BizzInfo[50][bEntranceZ]);
	            format(string1,sizeof(string1),"Gas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)",Distance[1],Distance[2],Distance[3],Distance[4],Distance[5],Distance[6]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGASLV, DIALOG_STYLE_LIST, "Gas Station (6 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 8)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[8][bEntranceX], BizzInfo[8][bEntranceY], BizzInfo[8][bEntranceZ]);
	            format(string1,sizeof(string1),"Casino (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCASINOLV, DIALOG_STYLE_LIST, "Casino (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 9)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[23][bEntranceX], BizzInfo[23][bEntranceY], BizzInfo[23][bEntranceZ]);
	            format(string1,sizeof(string1),"Sex Shop (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSSEXLV, DIALOG_STYLE_LIST, "Sex Shop (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 10)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[40][bEntranceX], BizzInfo[40][bEntranceY], BizzInfo[40][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[41][bEntranceX], BizzInfo[41][bEntranceY], BizzInfo[41][bEntranceZ]);
	            format(string1,sizeof(string1),"Pay N Spray (%.1fm away)\nPay N Spray (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSPNSLV, DIALOG_STYLE_LIST, "Pay N Spray (2 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 11)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[51][bEntranceX], BizzInfo[51][bEntranceY], BizzInfo[51][bEntranceZ]);
	            format(string1,sizeof(string1),"Car Mod Shop (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSMODLV, DIALOG_STYLE_LIST, "Car Mod Shop (1 business) Locations", string1, "Find", "Back");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONS247LS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[10][bEntranceX],BizzInfo[10][bEntranceY],BizzInfo[10][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[11][bEntranceX],BizzInfo[11][bEntranceY],BizzInfo[11][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[12][bEntranceX],BizzInfo[12][bEntranceY],BizzInfo[12][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[13][bEntranceX],BizzInfo[13][bEntranceY],BizzInfo[13][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 4)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[14][bEntranceX],BizzInfo[14][bEntranceY],BizzInfo[14][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCLOTHINGLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[30][bEntranceX],BizzInfo[30][bEntranceY],BizzInfo[30][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[32][bEntranceX],BizzInfo[32][bEntranceY],BizzInfo[32][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[53][bEntranceX],BizzInfo[53][bEntranceY],BizzInfo[53][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSRENTLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[31][bEntranceX],BizzInfo[31][bEntranceY],BizzInfo[31][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSSEXLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[7][bEntranceX],BizzInfo[7][bEntranceY],BizzInfo[7][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSMODLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[38][bEntranceX],BizzInfo[38][bEntranceY],BizzInfo[38][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[39][bEntranceX],BizzInfo[39][bEntranceY],BizzInfo[39][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCLOTHINGLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[29][bEntranceX],BizzInfo[29][bEntranceY],BizzInfo[29][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCLUCKINLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[4][bEntranceX],BizzInfo[4][bEntranceY],BizzInfo[4][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[54][bEntranceX],BizzInfo[54][bEntranceY],BizzInfo[54][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCASINOLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[8][bEntranceX],BizzInfo[8][bEntranceY],BizzInfo[8][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSSEXLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[23][bEntranceX],BizzInfo[23][bEntranceY],BizzInfo[23][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSMODLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[51][bEntranceX],BizzInfo[51][bEntranceY],BizzInfo[51][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBARLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[3][bEntranceX],BizzInfo[3][bEntranceY],BizzInfo[3][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[4][bEntranceX],BizzInfo[4][bEntranceY],BizzInfo[4][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[5][bEntranceX],BizzInfo[5][bEntranceY],BizzInfo[5][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBANKLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[1][bEntranceX],BizzInfo[1][bEntranceY],BizzInfo[1][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[27][bEntranceX],BizzInfo[27][bEntranceY],BizzInfo[27][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGYMLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[25][bEntranceX],BizzInfo[25][bEntranceY],BizzInfo[25][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBURGERLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[15][bEntranceX],BizzInfo[15][bEntranceY],BizzInfo[15][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[16][bEntranceX],BizzInfo[16][bEntranceY],BizzInfo[16][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSPIZZALS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[26][bEntranceX],BizzInfo[26][bEntranceY],BizzInfo[26][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGSLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[2][bEntranceX],BizzInfo[2][bEntranceY],BizzInfo[2][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[9][bEntranceX],BizzInfo[9][bEntranceY],BizzInfo[9][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCNNLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[28][bEntranceX],BizzInfo[28][bEntranceY],BizzInfo[28][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGASLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[33][bEntranceX],BizzInfo[33][bEntranceY],BizzInfo[33][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[42][bEntranceX],BizzInfo[42][bEntranceY],BizzInfo[42][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSPNSLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[34][bEntranceX],BizzInfo[34][bEntranceY],BizzInfo[34][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[35][bEntranceX],BizzInfo[35][bEntranceY],BizzInfo[35][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[36][bEntranceX],BizzInfo[36][bEntranceY],BizzInfo[36][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[37][bEntranceX],BizzInfo[37][bEntranceY],BizzInfo[37][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONS247LV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[24][bEntranceX],BizzInfo[24][bEntranceY],BizzInfo[24][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBANKLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[21][bEntranceX],BizzInfo[21][bEntranceY],BizzInfo[21][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBURGERLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[17][bEntranceX],BizzInfo[17][bEntranceY],BizzInfo[17][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[18][bEntranceX],BizzInfo[18][bEntranceY],BizzInfo[18][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[19][bEntranceX],BizzInfo[19][bEntranceY],BizzInfo[19][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[20][bEntranceX],BizzInfo[20][bEntranceY],BizzInfo[20][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGSLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[22][bEntranceX],BizzInfo[22][bEntranceY],BizzInfo[22][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCNNLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[52][bEntranceX],BizzInfo[52][bEntranceY],BizzInfo[52][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGASLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[45][bEntranceX],BizzInfo[45][bEntranceY],BizzInfo[45][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[42][bEntranceX],BizzInfo[42][bEntranceY],BizzInfo[42][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 4)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[45][bEntranceX],BizzInfo[45][bEntranceY],BizzInfo[45][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 5)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[46][bEntranceX],BizzInfo[46][bEntranceY],BizzInfo[46][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSPNSLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[40][bEntranceX],BizzInfo[40][bEntranceY],BizzInfo[40][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[41][bEntranceX],BizzInfo[41][bEntranceY],BizzInfo[41][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSMODS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[38][bEntranceX],BizzInfo[38][bEntranceY],BizzInfo[38][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[52][bEntranceX],BizzInfo[52][bEntranceY],BizzInfo[52][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[39][bEntranceX],BizzInfo[39][bEntranceY],BizzInfo[39][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_FACTIONS)
	{
	    if(response)
		{
			new f = listitem+1;
			SelFac[playerid] = f;
			if(f >= 7)
			{
				f = f+1;
			}
			new szDialogs[512], titledialog[512], lead[MAX_PLAYER_NAME], query[256], result[100];
			format(lead, MAX_PLAYER_NAME, "None");
			format(query, 256, "SELECT * FROM `users` WHERE `Member` = '%d' AND `Rank` = '7'", f);
			new Cache: masta = mysql_query(SQL, query);
			if(cache_get_row_count() >= 1)
			{
				cache_get_field_content(0, "name", result);
				format(lead, MAX_PLAYER_NAME, result);
			}
			cache_delete(masta);
			new onmembers;
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pMember] == f)
				{
					onmembers++;
				}
			}
			if(strlen(lead) >= 1 && strcmp(lead, "None", true))
			{
				format(szDialogs, 512, "ID: %d\nFaction name: %s\nFaction leader: %s\n\nTotal members: %d\nMaximum members: %d\nOnline members: %d", f, DynamicFactions[f][fName], lead, GetFactionMembers(f), DynamicFactions[f][fMaxMembers], onmembers);
			}
			else
			{
				format(szDialogs, 512, "ID: %d\nFaction name: %s\nLeader: None\n\nTotal members: %d\nMaximum members: %d\nOnline members: %d", f, DynamicFactions[f][fName], GetFactionMembers(f), DynamicFactions[f][fMaxMembers], onmembers);
			}
			format(titledialog,sizeof(titledialog),"%s", DynamicFactions[f][fName]);
			ShowPlayerDialog(playerid, DIALOG_FACTIONS2, DIALOG_STYLE_MSGBOX, titledialog, szDialogs, "Back", "Exit");
		}
		else
		{
		    hidePlayerDialog(playerid);
			SelFac[playerid] = 0;
		}
	}
	if(dialogid == DIALOG_FACTIONS2)
	{
	    if(response)
	    {
	        SelFac[playerid] = 0;
	        ShowFactions(playerid);
		}
		else
		{
		    hidePlayerDialog(playerid);
			SelFac[playerid] = 0;
		}
	}
	if(dialogid == DIALOG_GMX)
	{
		if(response)
		{
		    SendClientMessageToAll(COLOR_YELLOW, "---- SERVER RESTART ----");
			ABroadCast(COLOR_WHITE, "({804040}AdminStaff{FFFFFF}) Restarting timer activated.", 1);
			SendClientMessageToAll(COLOR_RED2, "The server will be restarted in 10 seconds.");
		    foreach(new x : Player)
			{
				OnPlayerDateUpdateX2(x);
				Update(x, pPayDayx);
				Update(x, pPayCheckx);
				Update(x, pFpunishx);
				Update(x, pConnectTimex);
				Update(x, pBank);
				Update(x, pCashx);
				Update(x, pRP);
				Update(x, pJailTimex);
				Update(x, pLevelx);
			}
			iGMXTick = 10;
			iGMXTimer = SetTimer("restartTimer", 1000, true);
			new text1[128];
			format(text1, sizeof(text1), "Admin %s initiated a server restart timer.", PlayerInfo[playerid][pNormalName]);
			Log(PlayerInfo[playerid][pSQLID], text1, "gmx");
		}
		else if(!response)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Restart attempt canned.");
		}
		return 1;
	}
	if(dialogid == DIALOG_UPDATERR)
	{
		if(response)
		{
			RestartTimer = 1;
			SendClientMessageToAll(COLOR_GENANNOUNCE, "SERVER: Serverul va fi restartat dupa payday.");
			SendClientMessageToAll(COLOR_GENANNOUNCE, "SERVER: Daca s-a adaugat ceva nou, o sa fie postat pe ForEver RPG.ro/update. Daca nu se posteaza nimic, probabil doar s-au rezolvat unele buguri.");
			new text1[128];
			format(text1, sizeof(text1), "Admin %s initiated a server restart timer after payday.", PlayerInfo[playerid][pNormalName]);
			Log(PlayerInfo[playerid][pSQLID], text1, "updaterr");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Restart attempt canned.");
		}
	}
	if(dialogid == DIALOG_VCREATE)
	{
		if(response)
		{
			if(IsPlayerConnected(CreateVEHID[playerid]))
			{
				if(CreateVEHID[playerid] != INVALID_PLAYER_ID)
				{
					new idcar,total,queryy[256],player = CreateVEHID[playerid],model = CreateVEH[playerid],sname[30],gname[30];
					new Float: plX, Float: plY, Float: plZ;
					for(new v; v < MAX_PERSONAL_VEHICLES; v++)
					{
						if(PlayerInfo[player][pCar][v] != -1) total++;
					}
					if(total+1 > PlayerInfo[player][pCarSlots])
					{
						SendClientMessage(playerid, COLOR_GREY, "This player have all vehicle slots full.");
						return 1;
					}
					for(new v; v < MAX_PERSONAL_VEHICLES; v++)
					{
						if(PlayerInfo[player][pCar][v] == -1)
						{
							idcar = v;
							break;
						}
					}
					mysql_format(SQL, queryy, sizeof(queryy), "INSERT INTO cars (Model) VALUES (%d)", model);
    				new Cache:ids = mysql_query(SQL, queryy);
					new idd = cache_insert_id();
					cache_delete(ids);

					PlayerInfo[player][pCar][idcar] = idd;
					GetPlayerPos(playerid, plX, plY, plZ);

					PlayerInfo[player][pCarLocX][idcar] = plX;
					PlayerInfo[player][pCarLocY][idcar] = plY;
					PlayerInfo[player][pCarLocZ][idcar] = plZ;
					PlayerInfo[player][pCarAngle][idcar] = 45.0;
					PlayerInfo[player][pCarLLocX][idcar] = plX;
					PlayerInfo[player][pCarLLocY][idcar] = plY;
					PlayerInfo[player][pCarLLocZ][idcar] = plZ;
					PlayerInfo[player][pCarAngle2][idcar] = 45.0;
					PlayerInfo[player][pCarModel][idcar] = model;
					PlayerInfo[player][pCarColor1][idcar] = 1;
					PlayerInfo[player][pCarColor2][idcar] = 1;
					strmid(CarOwner[player][idcar], PlayerInfo[player][pNormalName], 0, 50, 255);
					PlayerInfo[player][pCarLock][idcar] = 0;
					PlayerInfo[player][pCarInsPrice][idcar] = 5000;
					PlayerInfo[player][pCarIns][idcar] = 5;
					PlayerInfo[player][pCarKM][idcar] = 0.0;
					PlayerInfo[player][pCarKMLast][idcar] = 0;
					PlayerInfo[player][pCarVIP][idcar] = 0;
					PlayerInfo[player][pCarVipColors][idcar] = 0;
					PlayerInfo[player][pCarHP][idcar] = 1000.0;
					PlayerInfo[player][pCarDamage1][idcar] = 0;
					PlayerInfo[player][pCarDamage2][idcar] = 0;
					PlayerInfo[player][pCarDamage3][idcar] = 0;
					PlayerInfo[player][pCarDamage4][idcar] = 0;
					PlayerInfo[player][pCarGas][idcar] = 100;
					PlayerInfo[player][pCarPaintJ][idcar] = 6;
					PlayerInfo[player][pCarBlock][idcar] = 0;
					for(new s; s < 17; s++)
					{
						CarMod[player][idcar][s] = 0;
					}
					PlayerInfo[player][pCarBuyTime][idcar] = gettime();

					cUpdate(player, idcar, cModsx);
					cUpdate(player, idcar, cPaintJx);
					cUpdate(player, idcar, cLocationxx);
					cUpdate(player, idcar, cLocationyx);
					cUpdate(player, idcar, cLocationzx);
					cUpdate(player, idcar, cAnglex);
					cUpdate(player, idcar, cLocationx2x);
					cUpdate(player, idcar, cLocationy2x);
					cUpdate(player, idcar, cLocationz2x);
					cUpdate(player, idcar, cAngle2x);
					cUpdate(player, idcar, cColorOnex);
					cUpdate(player, idcar, cColorTwox);
					cUpdate(player, idcar, cValuex);
					cUpdate(player, idcar, cLicensex);
					cUpdate(player, idcar, cLockx);
					cUpdate(player, idcar, cInscarpricex);
					cUpdate(player, idcar, cInsurancecarx);
					cUpdate(player, idcar, cKMx);
					cUpdate(player, idcar, cDaysx);
					cUpdate(player, idcar, cHPx);
					cUpdate(player, idcar, cKMLastx);
					cUpdate(player, idcar, cDamage1x);
					cUpdate(player, idcar, cDamage2x);
					cUpdate(player, idcar, cDamage3x);
					cUpdate(player, idcar, cDamage4x);
					cUpdate(player, idcar, cGasx);
					cUpdate(player, idcar, cOwnerx);

					PlayerInfo[player][pCarID][idcar] = CreateVehicle(PlayerInfo[player][pCarModel][idcar],PlayerInfo[player][pCarLocX][idcar],PlayerInfo[player][pCarLocY][idcar],PlayerInfo[player][pCarLocZ][idcar],PlayerInfo[player][pCarAngle][idcar],1,1,-1);

    				GetPlayerName(playerid, sname, sizeof(sname));
    				GetPlayerName(player, gname, sizeof(gname));
    				format(queryy, sizeof(queryy), "Admin %s has created for you a %s.", sname, aVehicleNames[model - 400]);
    				SendClientMessage(player, COLOR_RED2, queryy);

    				format(queryy, sizeof(queryy), "Admin %s[admin:%d] created vehicle %s[car:%d] for %s[user:%d].", sname, PlayerInfo[playerid][pSQLID], aVehicleNames[model - 400], idd, gname, PlayerInfo[player][pSQLID]);
    				ABroadCast(COLOR_RED2, queryy, 1);
    				Log(PlayerInfo[playerid][pSQLID], queryy, "vcreate");

    				new var100[256],string2[256];
					mysql_real_escape_string(queryy, string2);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[player][pSQLID], PlayerInfo[playerid][pSQLID], string2);
					mysql_tquery(SQL, var100, "", "");
					masini++;
				}
			}
		}
		else
		{
			CreateVEH[playerid] = -1;
			CreateVEHID[playerid] = -1;
			SendClientMessage(playerid, COLOR_WHITE, "Vehicle creation canceled.");
			return 1;
		}
	}
/*	if(dialogid == DIALOG_RENTSPAWN)
    {
    	new locc = random(20);
        if(response)
	    {
			switch(listitem)
			{
				case 0:
				{
				    if(stocksentinel < 1) return SCM(playerid, -1, "{00FFFF}Rent: {ffffff}Aceast vehicul nu mai este in Stock");
				    if(GetPlayerCash(playerid) < 10000) return SCM(playerid, -1, "{00FFFF}Rent: {ffffff}Nu ai banii necesari");
				    {
						masinainchiriata[playerid] = CreateVehicle(405, 1714.6454+locc,-1866.6364,13.3398,0.9207, 211, 211, 600);
	   					SCM(playerid, -1, "Ai inchiriat un Stallion pentru 10 minute.");
						stocksentinel -= 1;
						timpinchiriere[playerid] = 600;
						GivePlayerCash(playerid, -10000);
						PutPlayerInVehicle(playerid, masinainchiriata[playerid],0);
						ShowPlayerDialog(playerid, 3427, DIALOG_STYLE_MSGBOX, "Rent Spawn", "{ffffff}Ai inchiriat un {00FFFF}Stallion{ffffff} de la rent cu {00FFFF}10.000{33cc33}${ffffff} timp de {00FFFF}10{ffffff} minute.\nComenzi rent:\n - {00FFFF}/{ffffff}unrentveh\n - {00FFFF}/{ffffff}rentlock\n - {00FFFF}/{ffffff}locaterentveh", "Okey","");
					}
				}
				case 1:
				{
    				if(stockcheetah < 1) return SCM(playerid, -1, "{00FFFF}Rent: {ffffff}Aceast vehicul nu mai este in Stock");
    				if(GetPlayerCash(playerid) < 20000) return SCM(playerid, -1, "{00FFFF}Rent: {ffffff}Nu ai banii necesari");
    				{
						masinainchiriata[playerid] = CreateVehicle(415, 1714.6454+locc,-1866.6364,13.3398,0.9207, 211, 211, 600);
						SCM(playerid, -1, "Ai inchiriat un Cheetach pentru 10 minute.");
						stockcheetah -= 1;
						timpinchiriere[playerid] = 600;
						GivePlayerCash(playerid, -20000);
						PutPlayerInVehicle(playerid, masinainchiriata[playerid],0);
						ShowPlayerDialog(playerid, 3427, DIALOG_STYLE_MSGBOX, "Rent Spawn", "{ffffff}Ai inchiriat un {00FFFF}Cheetah{ffffff} de la rent cu {00FFFF}20.000{33cc33}${ffffff} timp de {00FFFF}10{ffffff} minute.\nComenzi rent:\n - {00FFFF}/{ffffff}unrentveh\n - {00FFFF}/{ffffff}rentlock\n - {00FFFF}/{ffffff}locaterentveh", "Okey","");
    				}
				}
				case 2:
				{
				    if(stockbmx < 1) return SCM(playerid, -1, "{00FFFF}Rent: {ffffff}Aceast vehicul nu mai este in Stock");
				    if(GetPlayerCash(playerid) < 1000) return SCM(playerid, -1, "{00FFFF}Rent: {ffffff}Nu ai banii necesari");
				    {
						masinainchiriata[playerid] = CreateVehicle(481, 1714.6454+locc,-1866.6364,13.3398,0.9207, 211, 211, 60);
	   					SCM(playerid, -1, "Ai inchiriat un BMX timp de 10 minute.");
	   					stockbmx -= 1;
	   					timpinchiriere[playerid] = 600;
	   					GivePlayerCash(playerid, -1000);
	   					PutPlayerInVehicle(playerid, masinainchiriata[playerid],0);
	   					ShowPlayerDialog(playerid, 3427, DIALOG_STYLE_MSGBOX, "Rent Spawn", "{ffffff}Ai inchiriat un {00FFFF}BMX{ffffff} de la rent cu {00FFFF}1.000{33cc33}${ffffff} timp de {00FFFF}10{ffffff} minute.\nComenzi rent:\n - {00FFFF}/{ffffff}unrentveh\n - {00FFFF}/{ffffff}rentlock\n - {00FFFF}/{ffffff}locaterentveh", "Okey","");
					}
				}
				case 3:
				{
                    if(stockfcr < 1) return SCM(playerid, -1, "{00FFFF}Rent: {ffffff}Aceast vehicul nu mai este in Stock");
                    if(GetPlayerCash(playerid) < 15000) return SCM(playerid, -1, "{00FFFF}Rent: {ffffff}Nu ai banii necesari");
                    {
						masinainchiriata[playerid] = CreateVehicle(560, 1714.6454+locc,-1866.6364,13.3398,0.9207, 211, 211, 60);
	 					SCM(playerid, -1, "Ai inchiriat un Sultan timp de 10 minute.");
	 					stockfcr -= 1;
	 					timpinchiriere[playerid] = 600;
	 					GivePlayerCash(playerid, -15000);
	 					PutPlayerInVehicle(playerid, masinainchiriata[playerid],0);
	 					ShowPlayerDialog(playerid, 3427, DIALOG_STYLE_MSGBOX, "Rent Spawn", "Ai inchiriat un Sultan de la rent cu 15.000$ timp de 10 minute.\nComenzi rent:\n/}unrentveh\n/rentlock\n/locaterentveh", "Okey","");
	    			}
				}
			}
	    }
    }
    if(dialogid == DIALOG_INCHIRIERECONT)
    {
        if(response)
	    {
			timpinchiriere[playerid] = 600;
			SCM(playerid, -1, "{00FFFF}Rent: {ffffff}Ai prelungit timpul de inchiriere cu 10 minute.");
	    }
	    else
	    {
	        timpinchiriere[playerid] = 0;
	        DestroyVehicle(masinainchiriata[playerid]);
	        SCM(playerid, -1, "{00FFFF}Rent: {ffffff}Timpul de inchiriere a expirat si n-ai mai vrut sa prelungesti");
	        masinainchiriata[playerid] = 0;
	    }
    }*/
	if(dialogid == DIALOG_HUD)
	{
	    if(response)
		{
		    new stringg[256];
		    if(listitem == 0)
		    {
		        format(stringg,sizeof(stringg),"Disable\n{C0C0C0}Grey\n{FF0000}Red\n{00FF00}Green\n{0000FF}Blue\n{FFFF00}Yellow");
		        ShowPlayerDialog(playerid,DIALOG_HUD1,DIALOG_STYLE_LIST, "HUD Options: HP", stringg, "Select","Close");
			}
			if(listitem == 1)
		    {
		        format(stringg,sizeof(stringg),"Disable\n{C0C0C0}Grey\n{FF0000}Red\n{00FF00}Green\n{0000FF}Blue\n{FFFF00}Yellow");
		        ShowPlayerDialog(playerid,DIALOG_HUD2,DIALOG_STYLE_LIST, "HUD Options: Armour", stringg, "Select","Close");
			}
			if(listitem == 2)
		    {
		        format(stringg,sizeof(stringg),"Disable\n{00FF00}Enable");
		        ShowPlayerDialog(playerid,DIALOG_HUD3,DIALOG_STYLE_LIST, "HUD Options: FPS", stringg, "Select","Close");
			}
			if(listitem == 3)
		    {
		        format(stringg,sizeof(stringg),"Disable\n{00FF00}Enable");
		        ShowPlayerDialog(playerid,DIALOG_HUD4,DIALOG_STYLE_LIST, "Progress Bar: Level", stringg, "Select","Close");
			}
		}
	}
	if(dialogid == DIALOG_HUD1)
	{
	    if(response)
		{
		    if(listitem == 0)
		    {
		        PlayerInfo[playerid][pHUD1] = 0;
		        PlayerTextDrawHide(playerid, HUD[1][playerid]);
			}
			if(listitem == 1)
			{
			    PlayerInfo[playerid][pHUD1] = 1;
			}
			if(listitem == 2)
			{
			    PlayerInfo[playerid][pHUD1] = 2;
			}
			if(listitem == 3)
			{
			    PlayerInfo[playerid][pHUD1] = 3;
			}
			if(listitem == 4)
			{
			    PlayerInfo[playerid][pHUD1] = 4;
			}
			if(listitem == 5)
			{
			    PlayerInfo[playerid][pHUD1] = 5;
			}
			Update(playerid, pHUD1x);
      		SendClientMessage(playerid, COLOR_DARKPINK, "HUD options updated!");
		}
	}
	if(dialogid == DIALOG_HUD2)
	{
	    if(response)
		{
		    if(listitem == 0)
		    {
		        PlayerInfo[playerid][pHUD2] = 0;
		        PlayerTextDrawHide(playerid, HUD[2][playerid]);
			}
			if(listitem == 1)
			{
			    PlayerInfo[playerid][pHUD2] = 1;
			}
			if(listitem == 2)
			{
			    PlayerInfo[playerid][pHUD2] = 2;
			}
			if(listitem == 3)
			{
			    PlayerInfo[playerid][pHUD2] = 3;
			}
			if(listitem == 4)
			{
			    PlayerInfo[playerid][pHUD2] = 4;
			}
			if(listitem == 5)
			{
			    PlayerInfo[playerid][pHUD2] = 5;
			}
			Update(playerid, pHUD2x);
      		SendClientMessage(playerid, COLOR_DARKPINK, "HUD options updated!");
		}
	}
	if(dialogid == DIALOG_HUD3)
	{
	    if(response)
		{
		    if(listitem == 0)
		    {
		        PlayerInfo[playerid][pHUD3] = 0;
		        PlayerTextDrawHide(playerid, HUD[3][playerid]);
			}
			if(listitem == 1)
			{
			    PlayerInfo[playerid][pHUD3] = 1;
			}
			Update(playerid, pHUD3x);
      		SendClientMessage(playerid, COLOR_DARKPINK, "FPS options updated!");
		}
	}
	if(dialogid == DIALOG_HELP)
	{
	    if(response)
		{
  			new stringy[MAX_STRING];
		  	if(listitem == 0)
	   		{
 	    		ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: General Commands", "/stats /accept /eject /ad /admins\n/helpers /time /id /changepass /pay /tie\n/buylevel /fill /fillgascan /gps /shop /unrentvehicle\n/contract /service /buydrink /licenses /ringbell","Back","Exit");
			}
			if(listitem == 1)
			{
   				format(stringy, sizeof(stringy), "/o (global OOC message)\n/n (newbie chat message)\n/sms (OOCly SMS another player)\n/b (local OOC message)\n/w(hisper)\n/low (quiet message)\n/me (action)\n/do (action)\n/wt (walkie talkie)");
  	    		ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Chat Commands", stringy, "Back", "Exit");
			}
			if(listitem == 2)
  			{
				if(PlayerInfo[playerid][pMember] == 0)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", "You're not in a group.", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 1)
				{
					format(stringy, sizeof(stringy), "/mdc /su /arrest /free /ram\n/m(egaphone) /tazer /cuff /untie /confiscate /takedrugs\n/uncuff /frisk /clear /d(epartments) /r(adio) /wanted\n/ticket /duty");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 2)
				{
					format(stringy, sizeof(stringy), "/mdc /su /arrest /free /confiscate /takedrugs /m(egaphone)\n/tazer /cuff /untie /duty /ram /wanted\n/uncuff /frisk /clear /d(epartments) /r(adio)");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 3)
				{
					format(stringy, sizeof(stringy), "/mdc /su /arrest /free /confiscate /takedrugs /wanted\n/m(egaphone) /tazer /cuff /untie /duty /ram\n/uncuff /frisk /clear /d(epartments) /r(adio)");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 4)
				{
				    format(stringy, sizeof(stringy), "/order /attack /f\n /tie /untie");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 5)
				{
				    format(stringy, sizeof(stringy), "/order /attack /f\n /tie /untie");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 6)
				{
				    format(stringy, sizeof(stringy), "/order /attack /f\n /tie /untie");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 8)
				{
				    format(stringy, sizeof(stringy), "/mdc /su /arrest /free /ram\n/m(egaphone) /tazer /cuff /untie /confiscate /takedrugs\n/uncuff /frisk /clear /d(epartments) /r(adio) /wanted\n/ticket /duty");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 9)
				{
    				format(stringy, sizeof(stringy), "/news /live /endlive");
    				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 10)
				{
				    format(stringy, sizeof(stringy), "/order /attack /f\n /tie /untie");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 11)
				{
    				format(stringy, sizeof(stringy), "/undercover /f");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 12)
				{
    				format(stringy, sizeof(stringy), "/givelicense /startlesson /stoplesson /f");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 13)
				{
    				format(stringy, sizeof(stringy), "/fare /accept taxi /f");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 14)
				{
    				format(stringy, sizeof(stringy), "/heal /f");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 15)
				{
				    format(stringy, sizeof(stringy), "/order /attack /f\n /tie /untie");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
			}
			if(listitem == 3)
  			{
			    format(stringy, sizeof(stringy), "/handsup /drunk /bomb /rob /laugh /lookout /robman /crossarms /sit /siteat /hide /vomit /eat\n/wave /slapass /deal /taichi /crack /smoke /chat /dance /finger /taichi /drinkwater /pedmove /bat");
				strcat(stringy, "\n/checktime /sleep /blob /opendoor /wavedown /reload /cpr /dive /showoff /box /tag /salute\n/goggles /cry /dj /cheer /throw /robbed /hurt /nobreath /bar /getjiggy /fallover /rap /piss\n/crabs /handwash /signal /stop /gesture /masturbate");
    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Animations Commands", stringy, "Back", "Exit");
			}
			if(listitem == 4)
  			{
				if(PlayerInfo[playerid][pLanguage] == 1)
				{
					format(stringy, sizeof(stringy), "{FFFFFF}General Commands:\n/home - checkpoint to your house\n/buyhouse - buy a house\n\nHouse Owner Commands\n/sellhouse - set the house for sale (anyone can buy it!)\n/sellhouseto <playerid> - sells the house to a specific player\n/lockhouse - locks the house");
					strcat(stringy, "\n/houserent - sets the rent price\n/sellhousetostate - sell house to the state\n/tradehouseforcar - trade your house for a car\n/tenants - list of the online players that pay rent to you\n/evict <playerid> - evicts a tenant from your house\n/evictall - evict all the tenants");
					strcat(stringy, "\n/hwithdraw - withdraws money from your house safe\n/hbalance - displays how much money you have in your house safe");
				}
				else if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(stringy, sizeof(stringy), "{FFFFFF}Comenzi Generale:\n/home - pune un checkpoint pe minimap catre casa detinuta sau casa unde ai rent\n/buyhouse - cumpara o casa\n\nComenzi pentru detinatorii de case:\n/sellhouseto <playerid> - vinzi casa catre un anumit player");
					strcat(stringy, "\n/open - inchide/deschide casa\n/setrent - seteaza pretul chiriei\n/sellhousetostate - vinzi casa statului(cu 70 la suta din pret)\n/tenants - afiseaza playerii ce au chirie(rent) la casa ta\n/evict <playerid> - da un player afara din casa ta");
					strcat(stringy, "\n/evictall - da afara toti playerii din casa ta(care au chirie)\n/housewithdraw - retrage bani din seiful casei\n/housename - setezi numele casei\n/setrentable - setezi daca se poate/nu se poate inchiria casa\n/heal - iti incarci viata si armura(daca are casa)\n/hu - cumperi viata/armura care se ia cu comanda /heal");
    			}
				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: House Commands", stringy, "Back", "Exit");
			}
			if(listitem == 5)
  			{
				if(PlayerInfo[playerid][pJob] == 0)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "You don't have a public job or your job does not have any commands.", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 1)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/find /cancel find", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 2)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/dropcar", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 4)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/selldrugs /getdrugs", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 5)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/pizza", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 6)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "You don't have a public job or your job does not have any commands.", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 7)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "You don't have a public job or your job does not have any commands.", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 8)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/refill /repair /tow", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 9)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/sellgun /matsinfo /sellmaterials /getmats", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 10)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/collecttrash /unloadtrash", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 13)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/fish", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 14)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "You don't have a public job or your job does not have any commands.", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 15)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "You don't have a public job or your job does not have any commands.", "Back", "Exit");
				}
			}
			if(listitem == 6)
  			{
 				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Business Commands", "/bizfee /bizname /lockbusiness /sellbizto /sellbiztostate /sellbusiness /bwithdraw /bbalance", "Back", "Exit");
			}
			if(listitem == 7)
  			{
  			    if(PlayerInfo[playerid][pHelper] == 0)
  			    {
  			        SendClientMessage(playerid, COLOR_GREY, "You aren't an official helper.");
  			        return 1;
				}
  			    if(PlayerInfo[playerid][pHelper] == 1)
  			    {
					format(stringy, sizeof(stringy), "/e /re /pm /hduty /spec /n /ndelete /nmute /nskip /nnext /nqueue /nreport /slap /spawn /spawnhere /deletead");
 					ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Helper Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pHelper] == 2)
  			    {
					format(stringy, sizeof(stringy), "/e /re /pm /hduty /spec /n /ndelete /nmute /nskip /nnext /nqueue /nreport /slap /spawn /spawnhere /deletead /mute /cc /kick");
 					ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Helper Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pHelper] == 3)
  			    {
					format(stringy, sizeof(stringy), "/e /re /pm /hduty /spec /n /ndelete /nmute /nskip /nnext /nqueue /nreport /slap /spawn /spawnhere /deletead /mute /cc /kick");
 					ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Helper Commands", stringy, "Back", "Exit");
				}
			}
			if(listitem == 8)
  			{
				if(PlayerInfo[playerid][pLanguage] == 1)
				{
					format(stringy, sizeof(stringy), "{FFFFFF}You need level 3 to buy a car. To buy a car you can go to the car dealership. If you don't know where the dealership is located, use /where.");
					strcat(stringy, "\n\nGeneral Commands:\n/lock - locks/unlocks the car doors\n/findcar - places a checkpoint on the minimap to help you find your car\n/park - sets the place where your car will be respawned\n/towcar - respawns your car in the place you have last /park-ed it");
					strcat(stringy, "\n/engine (key 2) - starts/stops the engine of a vehicle\n/trunk, /hood (keys: NUMPAD 2 and NUMPAD 8) - opens and closes the hood and the trunk of a vehicle\n/carradio (key R) - sets a radio station for a vehicle\n/eject - ejects someone from your vehicle");
					strcat(stringy, "\n/carcolor - changes the color of your vehicle. use /colors to see a list of colors that can be used\n/removetuning - removes the tuning of your vehicle\n/carplate - changes the number plate of your vehicle\n/Car selling commands:\n{FF0000}(scamming is NOT allowed on our server){FFFFFF}");
					strcat(stringy, "\n/sellcar - sells the car to the dealership for 60%% of the initial price\n/sellcarto <playerid> <price> - sells the car to a player\n/tradecar <playerid> <difference> - trade cars with other another player\n/tradehouseforcar - can be used by house owners. trades a house for a car");
					strcat(stringy, "\n\nOther commands:\n/givekey - gives the key to your car to another player. the key is lost when the player leaves the game or when you use /changelock\n/cars - displays a list of your cars. you can tow and find your cars from this menu\nInsurance, Vehicle Age, Distance Traveled:");
					strcat(stringy, "\nEvery time your car gets destroyed (explodes or falls in water) the car loses one insurance point.\nWhen the car reaches 0 insurance points, you must pay the insurance to be able to drive it.\nYou can buy insurance for your car using /cars\n\nWhen you buy the car, one insurance point costs %5.000.");
					strcat(stringy, "\nFor every 1000km traveled by your car, the insurance price increases by $100. For every day, the insurance increases by $50.\nSo if you buy a car and travel 2000km with it, the insurance price will be $5200.\nIf you have a car with 2000km traveled that is 3 days old, the insurance price will be $5500.");
					strcat(stringy, "\n\nHidden colors:\nHidden colors are colors that look nicer than regular colors and can only be bought with premium points (for more info about premium points, use /shop -> info).\nYou can see a list of the premium colors using /colors.");
				}
				else if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(stringy, sizeof(stringy), "{FFFFFF}Ai nevoie de level 3 pentru a cumpara o masina. Masinile pot fi cumparate de la Dealership. Poti folosi /where daca nu stii unde e dealership-ul.");
					strcat(stringy, "\n\nComenzi generale:\n/lock - inchide/deschide usile masinii\n/findcar - este setat un checkpoint pe minimap in locul unde iti poti gasi masina\n/park - seteaza locul unde masina ta se va spawna(unde va aparea) dupa ce va fi distrusa\n/towcar - respawneaza masina in locul unde ai parcat-o (/park)");
					strcat(stringy, "\n/engine (tasta 2) - porneste/opreste motorul masinii\n/trunk, /hood (NUMPAD 2, NUMPAD 8) - deschide/inchide capota/portbagajul masinii\n/carradio (tasta R) - seteaza post de radio pentru masina\n/eject - da un player afara din masina");
					strcat(stringy, "\n/carcolor - schimba culoarea masinii. foloseste /colors pentru a vedea o lista cu culorile ce pot fi folosite\n/removetuning - scoate modificarile facute la masina(tunning)\n/carplate - schimba placuta de inmatriculare a masinii\n\nComenzi pentru vanzari/schimburi de vehicule:");
					strcat(stringy, "\n{FF0000}(inselatoriile sunt interzise pe server)\n{FFFFFF}/sellcar - vinde masina la dealership pentru 60%% din pretul initial\n/sellcarto <playerid> <price> - vinde masina unui player\n/tradecar <playerid> <difference> - comanda folosita pentru schimb de masini cu un player");
					strcat(stringy, "\n/tradehouseforcar - comanda folosita de cei ce au case. schimba o casa pentru o masina cu un player.\n\nAlte comenzi:\n/givekey - oferi cheia masinii unui alt player. cheia este pierduta cand playerul iese din joc sau cand folosesti /changelock.\n/cars - afiseaza o lista cu masinile tale.");
					strcat(stringy, "\n\nAsigurare (insurance), Vechime, KM parcusi:\nDe fiecare data cand masina ta este distrusa (explodeaza sau cade in apa), masina pierde 1 insurance point (punct de asigurare).\nCand masina ajunge la 0 insurance points, trebuie sa platesti asigurarea pentru a o putea conduce in continuare.");
					strcat(stringy, "\nPoti cumpara insurance points folosind /cars.\n\nCand cumperi masina, un punct de asigurare costa $5.000.\nPentru fiecare 1000km parcursi de masina ta, pretul asigurarii creste cu $100. Pentru fiecare zi, pretul asigurarii creste cu $50.\nDe ex. daca ai o masina cu 2000km parcursi, pretul asigurarii va fi $5200.");
					strcat(stringy, "\nDaca ai o masina cu 2000km parcursi care are o vechime de 3 zile, asigurarea va costa $5500.\n\nCulori hidden:\nCulorile 'hidden' sunt culori ce arata mai bine decat culorile normale.\nCulorile hidden pot fi cumparate doar cu puncte premium (foloseste /shop > info pentru informatii despre punctele premium)");
 				}
				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Vehicle Commands", stringy,"Back","Exit");
			}
			if(listitem == 9)
			{
 				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Bank Commands", "/balance /withdraw /deposit", "Back", "Exit");
			}
			if(listitem == 10)
			{
				if(PlayerInfo[playerid][pLanguage] == 1)
				{
					format(stringy, sizeof(stringy), "You can use /rob starting at level 3. To rob, you need to go inside a business and use command /rob.\n\nYour rob skill increases with the number of successful robs.\nSkill 1: 0-25 robs\nSkill 2: 26-60 robs\nSkill 3: 61-110 robs\nSkill 4: 111-200 robs\nSkill 5: 201-300 robs");
					strcat(stringy, "\nSkill 6: 300+ robs\n\nMoney earned from a rob: $180.000 + $0 - $70.000 (random).\nFor each skill you get $50.000 extra.");
				}
				else if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(stringy, sizeof(stringy), "Se poate da /rob incepand cu level 3. Pentru a da rob va trebui sa mergi in banca si sa folosesti comanda /rob.\nSkill-ul la rob este calculat in functie de rob-uri date cu succes.\nSkill 1: 0-25 roburi\nSkill 2: 26-60 roburi\nSkill 3: 61-110 roburi\nSkill 4: 111-200 roburi\nSkill 5: 201-300 roburi");
					strcat(stringy, "\nSkill 6: 300+ roburi\n\nBanii la rob se calculeaza astfel: $180.000 + intre $0 si $70.000 (random).\nPentru fiecare skill se primesc $50.000 in plus.");
				}
				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Rob", stringy, "Back", "Exit");
			}
		}
	}
	if(dialogid == DIALOG_HELP2)
	{
	    if(response)
			{
			    ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_LIST, "SERVER: Commands", "General\nChat\nGroups\nAnimations\nHouses\nJobs\nBusinesses\nHelpers\nVehicles\nBank\nRob", "Select","Exit");
		}
		return 1;
	}
	if(dialogid == DIALOG_WANTEDON)
	{
		if(response)
		{
			if(IsACop(playerid))
			{
				new id = Selectat[listitem][playerid];
				UsedFind[playerid] = 1;
				new Float:X,Float:Y,Float:Z;
				new galciala[MAX_PLAYER_NAME];
				GetPlayerName(id, galciala, sizeof(galciala));
				GetPlayerPos(id, X,Y,Z);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, X,Y,Z, 3.5);
				targetfind[playerid] = id;
				foreach(new i : Player)
				{
					if(IsACop(playerid))
					{
						if(caser[playerid] == i)
						{
							cased[i] --;
						}
					}
				}
				if(IsACop(playerid))
				{
					cased[id] ++;
					caser[playerid] = id;
				}
				format(string,sizeof(string),"{FFFF00}Checkpoint-ul va afisa locatia playerului %s. Distanta pana la player: %.0f.",galciala,GetDistanceBetweenPlayers(playerid, id));
				SCM(playerid,COLOR_WHITE,string);
				GetPlayerName(id, sendername, sizeof(sendername));
				format(string, sizeof(string), "-- MDC [ID %d - %s][{FFFF00}W:%d{FFFFFF}][Chased by %d cops][Wanted expires in %d mins]",id, galciala, PlayerInfo[id][pWantedLevel], cased[id], wantedlost[id]/60+1);
				SendClientMessage(playerid, COLOR_WHITE,string);
				if(strcmp(PlayerInfo[id][pCrime1],  "Fara Crima", false) == 0) { }
				else
				{
					format(string, sizeof(string), "%s", PlayerInfo[id][pCrime1]);
					SendClientMessage(playerid,COLOR_WHITE,string);
				}
				if(strcmp(PlayerInfo[id][pCrime2],  "Fara Crima", false) == 0) { }
				else
				{
					format(string, sizeof(string), "%s", PlayerInfo[id][pCrime2]);
					SendClientMessage(playerid, COLOR_WHITE,string);
				}
				if(strcmp(PlayerInfo[id][pCrime3], "Fara Crima", false) == 0) { }
				else
				{
					format(string, sizeof(string), "%s", PlayerInfo[id][pCrime3]);
					SendClientMessage(playerid, COLOR_WHITE,string);
				}
			}
		}
	}
	if(dialogid == DIALOG_BUYSLOT)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 19) return SS(playerid, COLOR_LIGHTGREEN3, "Nu ai suficiente puncte premium.", "You don't have enough premium points.");
			if(PlayerInfo[playerid][pCarSlots] >= 10) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You can't buy more than 10 vehicle slots.");
			PlayerInfo[playerid][pPremiumPoints] -= 20;
			PlayerInfo[playerid][pCarSlots] += 1;
			new str2[300],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d',`CarSlots`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pCarSlots],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 20 puncte premium pentru a primi un slot pentru masini.", "You paid 20 premium points to get a vehicle slot.");
			format(strings, sizeof(strings), "%s[user:%d] paid 20 premium points to buy a vehicle slot.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,6);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYPREMIUM)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 59) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			if(PlayerInfo[playerid][pPremiumAccount] > 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You have already a premium account.");
			PlayerInfo[playerid][pPremiumPoints] -= 60;
			PlayerInfo[playerid][pPremiumAccount] = 1;
			if(PlayerInfo[playerid][pCarSlots] <= 8)
			{
				PlayerInfo[playerid][pCarSlots] += 2;
			}
			if(PlayerInfo[playerid][pCarSlots] == 9)
			{
				PlayerInfo[playerid][pCarSlots] += 1;
			}
			new str[300],strings[200],name[30],stringss[200];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Premium`='1',`PremiumPoints`='%d',`CarSlots`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pCarSlots],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SS(playerid, COLOR_COOLRED, "Acum ai cont premium!", "Now you have premium account!");
			SS(playerid, COLOR_YELLOW, "Daca vrei sa primesti cont premium si pe forum, mergi pe panel.ForEver RPG.ro!", "If you want to get premium account on forum, go to panel.ForEver RPG.ro!");
			GetPlayerName(playerid, name, sizeof(name));
			format(strings, sizeof(strings), "%s[user:%d] paid 60 premium points to buy a premium account.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,6);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYCLEARFP)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 14) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			if(PlayerInfo[playerid][pFpunish] <= 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have faction punish.");
			new strings[200],stringss[200];
			format(strings, sizeof(strings), "%s[user:%d] paid 15 premium points to clear his FP.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,6);
			PlayerInfo[playerid][pPremiumPoints] -= 15;
			PlayerInfo[playerid][pFpunish] = 0;
			new str[300];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `FPunish`='%d',`PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFpunish],PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 15 puncte premium pentru a sterge FP-ul.", "You paid 15 premium points to clear your FP.");
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYCLEARWARNS)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			if(PlayerInfo[playerid][pWarns] <= 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have any warn.");
			PlayerInfo[playerid][pPremiumPoints] -= 20;
			PlayerInfo[playerid][pWarns] = 0;
			new str[300],strings[200],stringss[200];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Warnings`='0',`PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 20 puncte premium pentru a sterge warn-urile.", "You paid 20 premium points to clear your warns.");
			format(strings, sizeof(strings), "%s[user:%d] paid 20 premium points to clear his warns.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,6);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYCLEARKM)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			new idcar=-1;
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your car.");
			for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
			{
				if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pCarID][vv])
				{
					idcar = vv;
				}
			}
			if(idcar == -1) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your car.");
			PlayerInfo[playerid][pPremiumPoints] -= 20;
			PlayerInfo[playerid][pCarKM][idcar] = 0.0;
			PlayerInfo[playerid][pCarKMLast][idcar] = 0;
			PlayerInfo[playerid][pCarBuyTime][idcar] = gettime();
			cUpdate(playerid, idcar, cKMx);
			cUpdate(playerid, idcar, cKMLastx);
			cUpdate(playerid, idcar, cDaysx);
			new str[300],strings[200],stringss[200];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 20 puncte premium pentru a sterge KM si zilele masinii.", "You paid 20 premium points to clear your car KM & days.");
			format(strings, sizeof(strings), "%s[user:%d] paid 20 premium points to clear his car KM & days.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,6);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYCLEARKM2)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			new idcar = SelectedCar[playerid];
			PlayerInfo[playerid][pPremiumPoints] -= 20;
			PlayerInfo[playerid][pCarKM][idcar] = 0.0;
			PlayerInfo[playerid][pCarKMLast][idcar] = 0;
			PlayerInfo[playerid][pCarBuyTime][idcar] = gettime();
			cUpdate(playerid, idcar, cKMx);
			cUpdate(playerid, idcar, cKMLastx);
			cUpdate(playerid, idcar, cDaysx);
			new str[300],strings[200],stringss[200];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 20 puncte premium pentru a sterge KM si zilele masinii.", "You paid 20 premium points to clear your car KM & days.");
			format(strings, sizeof(strings), "%s[user:%d] paid 20 premium points to clear his car KM & days.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,6);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYVIPCAR)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 99) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points.\nNu ai suficiente puncte premium.", "Ok", "");
			new idcar = SelectedCar[playerid];
			new str2[256], strings[128], stringss[128];
			if(PlayerInfo[playerid][pCarVIP][idcar] == 1) return SS(playerid, COLOR_LIGHTGREEN3, "Acest vehicul este deja VIP.", "This vehicle is already VIP.");
			if(PlayerInfo[playerid][pCarModel][idcar] != 411 && PlayerInfo[playerid][pCarModel][idcar] != 541 && PlayerInfo[playerid][pCarModel][idcar] != 560 && PlayerInfo[playerid][pCarModel][idcar] != 451 && PlayerInfo[playerid][pCarModel][idcar] != 480) return SS(playerid, COLOR_LIGHTGREEN3, "Momentan doar vehiculele Infernus, Bullet si Sultan pot fi upgradate.", "This option can only be used for Infernus, Bullet and Sultan vehicles.");
			PlayerInfo[playerid][pPremiumPoints] -= 100;
			PlayerInfo[playerid][pCarVIP][idcar] = 1;
			SS(playerid, COLOR_YELLOW, "Ai platit 100 puncte premium pentru a face acest vehicul VIP.", "You paid 100 premium points to make this vehicle VIP.");
			format(strings, sizeof(strings), "%s[user:%d] paid 100 premium points to make his car VIP.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW, strings, 6);
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			mysql_format(SQL,str2,sizeof(str2),"UPDATE cars SET `VIP`='1' WHERE `ID`='%d'", PlayerInfo[playerid][pCar][idcar]);
			mysql_tquery(SQL,str2,"","");
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')", PlayerInfo[playerid][pSQLID], stringss);
			mysql_tquery(SQL,str2,"","");

		}
		return 1;
	}
	if(dialogid == DIALOG_BUYHIDDEN)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			PlayerInfo[playerid][pPremiumPoints] -= 20;
			PlayerInfo[playerid][pHiddenColor] += 1;
			Update(playerid, pHiddenColorx);
			new str2[300],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 20 puncte premium pentru a cumpara o culoare hidden.", "You paid 20 premium points to buy a hidden color.");
			format(strings, sizeof(strings), "%s[user:%d] paid 20 premium points to buy a hidden color.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,6);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYFIREWORKS)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 0) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			PlayerInfo[playerid][pPremiumPoints] -= 1;
			PlayerInfo[playerid][pFWorks] += 5;
			new str2[300],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d',`FWorks`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pFWorks], PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 1 punct premium pentru a cumpara 5 artificii.", "You paid 1 premium point to buy 5 fireworks.");
			format(strings, sizeof(strings), "%s[user:%d] paid 1 premium point to buy 5 fireworks.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,6);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYMONEY1)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 0) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			PlayerInfo[playerid][pPremiumPoints] -= 1;
			GivePlayerCash(playerid, 300000);
			Update(playerid, pCashx);
			new str2[300],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 1 punct premium pentru a cumpara $300.000.", "You paid 1 premium point to buy $300.000.");
			format(strings, sizeof(strings), "%s[user:%d] paid 1 premium point to buy $300.000.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,6);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYMONEY2)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 9) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			PlayerInfo[playerid][pPremiumPoints] -= 10;
			GivePlayerCash(playerid, 3000000);
			Update(playerid, pCashx);
			new str2[300],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 10 puncte premium pentru a cumpara $3.000.000.", "You paid 10 premium points to buy $3.000.000.");
			format(strings, sizeof(strings), "%s[user:%d] paid 10 premium points to buy $3.000.000.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,6);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYMONEY3)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 49) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			PlayerInfo[playerid][pPremiumPoints] -= 50;
			GivePlayerCash(playerid, 15000000);
			Update(playerid, pCashx);
			new str2[300],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 50 puncte premium pentru a cumpara $15.000.000.", "You paid 50 premium points to buy $15.000.000.");
			format(strings, sizeof(strings), "%s[user:%d] paid 50 premium points to buy $15.000.000.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,6);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYMONEY4)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 99) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			PlayerInfo[playerid][pPremiumPoints] -= 100;
			GivePlayerCash(playerid, 30000000);
			Update(playerid, pCashx);
			new str2[300],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 100 puncte premium pentru a cumpara $30.000.000.", "You paid 100 premium points to buy $30.000.000.");
			format(strings, sizeof(strings), "%s[user:%d] paid 100 premium points to buy $30.000.000.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,6);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_TREBUYMONEY1)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pTreasurePoints] <= 99) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			PlayerInfo[playerid][pTreasurePoints] -= 100;
			GivePlayerCash(playerid, 30000000);
			Update(playerid, pCashx);
			new str2[300],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `TreasurePoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pTreasurePoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 100 treasure points pentru a cumpara $30.000.000.", "You paid 100 treasure points to buy $30.000.000.");
			format(strings, sizeof(strings), "%s[user:%d] paid 100 treasure points to buy $30.000.000.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,6);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYCLEARFH)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 49) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			if(PlayerInfo[playerid][pMember] != 0) return SS(playerid, COLOR_LIGHTGREEN3, "Trebuie sa fi civil.", "You need to be a civilian.");
			PlayerInfo[playerid][pPremiumPoints] -= 50;
			new str2[256],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			mysql_format(SQL,str2,sizeof(str2),"UPDATE faction_logs SET `deleted`='1' WHERE `player`='%d'", PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 50 puncte premium pentru a sterge FH-ul.", "You paid 50 premium points to clear your FH.");
			format(strings, sizeof(strings), "%s[user:%d] paid 50 premium points to buy clear FH.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,6);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}

	if(dialogid == DIALOG_VIPWHEELS)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new idcar=-1, carid = GetPlayerVehicleID(playerid);
				for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
				{
					if(carid == PlayerInfo[playerid][pCarID][vv])
					{
						idcar = vv;
					}
				}
				if(idcar == -1) return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.", "You can add custom wheels on VIP vehicles.");
				if(carid == PlayerInfo[playerid][pCarID][idcar])
				{
					if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
					{
						AddVehicleComponent(GetPlayerVehicleID(playerid), 1080); CarMod[playerid][idcar][15] = 1080;
					}
				}
			}
			if(listitem == 1)
			{
				new idcar=-1, carid = GetPlayerVehicleID(playerid);
				for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
				{
					if(carid == PlayerInfo[playerid][pCarID][vv])
					{
						idcar = vv;
					}
				}
				if(idcar == -1) return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.", "You can add custom wheels on VIP vehicles.");
				if(carid == PlayerInfo[playerid][pCarID][idcar])
				{
					if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
					{
						AddVehicleComponent(GetPlayerVehicleID(playerid), 1083); CarMod[playerid][idcar][15] = 1083;
					}
				}
			}
			if(listitem == 2)
			{
				new idcar=-1, carid = GetPlayerVehicleID(playerid);
				for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
				{
					if(carid == PlayerInfo[playerid][pCarID][vv])
					{
						idcar = vv;
					}
				}
				if(idcar == -1) return SS(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.", "You can add custom wheels on VIP vehicles.");
				if(carid == PlayerInfo[playerid][pCarID][idcar])
				{
					if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
					{
						AddVehicleComponent(GetPlayerVehicleID(playerid), 1073); CarMod[playerid][idcar][15] = 1073;
					}
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYWALKIE)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 14) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			if(IsNumeric(inputtext))
			{
			    if(strlen(inputtext) == 3)
				{
				    new numb = strval(inputtext);
					if((inputtext[0] != '0'))
					{
						new str2[256],strings[200],stringss[200];
						format(str2, sizeof(str2), "SELECT * FROM `frequencies` WHERE `freqid`='%d'", numb);
						new Cache: xd = mysql_query(SQL, str2);
						if(cache_get_row_count() > 0)
						{
							cache_delete(xd);
							SendClientMessage(playerid, COLOR_LIGHTGREEN3, "This frequency number exist.");
							return 1;
						}
						cache_delete(xd);
						PlayerInfo[playerid][pPremiumPoints] -= 15;
						mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str2,"","");
						mysql_format(SQL, str2, sizeof(str2),"INSERT INTO `frequencies` (`freqid`,`ownerid`) VALUES ('%d','%d')", numb, PlayerInfo[playerid][pSQLID]);
						mysql_tquery(SQL, str2, "", "");
						if(PlayerInfo[playerid][pLanguage] == 2) format(strings, sizeof(strings), "Ai cumparat frecventa #%d pentru 15 puncte premium.", numb);
						else format(strings, sizeof(strings), "You bought frequency #%d for 15 premium points.", numb);
						SendClientMessage(playerid, COLOR_YELLOW, strings);
						format(strings, sizeof(strings), "You are now broadcasting at the frequency of #%d khz.", numb);
					    SendClientMessage(playerid, COLOR_WHITE, strings);
						WTChannel[playerid] = numb;
						mysql_format(SQL,str2,sizeof(str2),"UPDATE `users` SET `WTChannel` = '%d' WHERE `name` = '%s'", WTChannel[playerid], PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str2,"","");
						format(strings, sizeof(strings), "%s[user:%d] paid 15 premium points to buy a private walkie-talkie frequency.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
						ABroadCast(COLOR_YELLOW,strings,6);
						mysql_real_escape_string(strings, stringss);
						mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
						mysql_tquery(SQL,str2,"","");
					}
					else return SendClientMessage(playerid, COLOR_GREY, "Frequency number must be between 100 and 999.");
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Frequency number must be between 100 and 999.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Frequency number must be between 100 and 999.");
		}
		return 1;
	}
	if(dialogid == DIALOG_TREWALKIE)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pTreasurePoints] <= 14) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			if(IsNumeric(inputtext))
			{
			    if(strlen(inputtext) == 3)
				{
				    new numb = strval(inputtext);
					if((inputtext[0] != '0'))
					{
						new str2[256],strings[200],stringss[200];
						format(str2, sizeof(str2), "SELECT * FROM `frequencies` WHERE `freqid`='%d'", numb);
						new Cache: xd = mysql_query(SQL, str2);
						if(cache_get_row_count() > 0)
						{
							cache_delete(xd);
							SendClientMessage(playerid, COLOR_LIGHTGREEN3, "This frequency number exist.");
							return 1;
						}
						cache_delete(xd);
						PlayerInfo[playerid][pTreasurePoints] -= 15;
						mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `TreasurePoints`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pTreasurePoints], PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str2,"","");
						mysql_format(SQL, str2, sizeof(str2),"INSERT INTO `frequencies` (`freqid`,`ownerid`) VALUES ('%d','%d')", numb, PlayerInfo[playerid][pSQLID]);
						mysql_tquery(SQL, str2, "", "");
						if(PlayerInfo[playerid][pLanguage] == 2) format(strings, sizeof(strings), "Ai cumparat frecventa #%d pentru 15 treasure points.", numb);
						else format(strings, sizeof(strings), "You bought frequency #%d for 15 treasure points.", numb);
						SendClientMessage(playerid, COLOR_YELLOW, strings);
						format(strings, sizeof(strings), "You are now broadcasting at the frequency of #%d khz.", numb);
					    SendClientMessage(playerid, COLOR_WHITE, strings);
						WTChannel[playerid] = numb;
						mysql_format(SQL,str2,sizeof(str2),"UPDATE `users` SET `WTChannel` = '%d' WHERE `name` = '%s'", WTChannel[playerid], PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str2,"","");
						format(strings, sizeof(strings), "%s[user:%d] paid 15 treasure points to buy a private walkie-talkie frequency.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
						ABroadCast(COLOR_YELLOW,strings,6);
						mysql_real_escape_string(strings, stringss);
						mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
						mysql_tquery(SQL,str2,"","");
					}
					else return SendClientMessage(playerid, COLOR_GREY, "Frequency number must be between 100 and 999.");
				}
				else return SendClientMessage(playerid, COLOR_GREY, "Frequency number must be between 100 and 999.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Frequency number must be between 100 and 999.");
		}
		return 1;
	}
	if(dialogid == DIALOG_TRESHOP)
	{
	    if(response)
	    {
				if(listitem == 0)
				{
					if(PlayerInfo[playerid][pTreasurePoints] <= 14) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					ShowPlayerDialog(playerid, DIALOG_TREWALKIE, DIALOG_STYLE_INPUT, "Buy frequency", "Type the frequency that you want to buy bellow. You can only buy a frequency 3 number frequency (100-999).\nYou'll be able to set a password for your frequency.\nPrice: 15 premium points.", "Buy", "Close");
				}
				if(listitem == 1)
				{
					if(PlayerInfo[playerid][pTreasurePoints] <= 9) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					if(PlayerInfo[playerid][pPhone] == 1) return SendClientMessage(playerid, COLOR_GREY, "You have already an iPhone.");
					new strings[500];
					format(strings,sizeof(strings),"Avantaje iPhone:\n- numar de telefon din 4 cifre la alegere.\n- poti dezactiva apelurile daca vrei sa primesti doar SMS-uri.\n- in chat va aparea `* Player turns of his iPhone`.\n- optiune de /reply raspunde la ultimul SMS primit.\n- optiune /block pentru a bloca temporar un numar de telefon.\n\nChoose a phone number:");
					ShowPlayerDialog(playerid, DIALOG_TREIPHONE, DIALOG_STYLE_INPUT, "iPhone", strings, "Ok", "Cancel");
				}
				if(listitem == 2)
				{
					if(PlayerInfo[playerid][pTreasurePoints] <= 99) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					ShowPlayerDialog(playerid, DIALOG_TREBUYMONEY1, DIALOG_STYLE_MSGBOX, "Money", "Do you want to pay 100 premium points to buy $30,000,000?","Yes","No");
				}
	    }
	    return 1;
	}
	if(dialogid == DIALOG_SHOP)
	{
	    if(response)
			{
			  	if(listitem == 0)
			   	{
					new string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],string5[2400];
			        format(string1, sizeof(string1), "Playerii ce vor sa ajute comunitatea pot cumpara puncte premium (cu bani reali).");
			        format(string2, sizeof(string2), "Se pot cumpara puncte premium folosind paysafecard sau paypal.");
			        format(string3, sizeof(string3), "62 puncte premium - 25 lei, 125 puncte premium - 50 lei, 250 puncte premium - 100 lei, 750 puncte premium - 300 lei");
			        format(string4, sizeof(string4), "Cu punctele premium se pot cumpara unele chestii din /shop si unele masini premium din Dealership. Pentru detalii acceseaza FORUM.ForEver RPG.RO.");
			        format(string5, sizeof(string5), "%s\n%s\n\n%s\n%s", string1, string2, string3, string4);
			        ShowPlayerDialog(playerid, DIALOG_SHOP2, DIALOG_STYLE_MSGBOX, "Info", string5, "Close", "");
				}
				if(listitem == 1)
				{
					if(PlayerInfo[playerid][pPremiumPoints] <= 59) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    if(PlayerInfo[playerid][pPremiumAccount] > 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You have already a premium account.");
					ShowPlayerDialog(playerid, DIALOG_BUYPREMIUM, DIALOG_STYLE_MSGBOX, "Premium", "Do you want to pay 60 premium points to get Premium Account status?","Yes","No");
				}
				if(listitem == 2)
				{
				    if(PlayerInfo[playerid][pPremiumPoints] <= 14) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					ShowPlayerDialog(playerid, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "Change name:", "Please enter your desired name below:", "Ok", "Cancel");
				}
				if(listitem == 3)
				{
					if(PlayerInfo[playerid][pPremiumPoints] <= 14) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    if(PlayerInfo[playerid][pFpunish] <= 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have faction punish.");
				    ShowPlayerDialog(playerid, DIALOG_BUYCLEARFP, DIALOG_STYLE_MSGBOX, "Clear FP", "Do you want to pay 15 premium points to clear your FP?","Yes","No");
				}
				if(listitem == 4)
				{
					if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				    if(PlayerInfo[playerid][pWarns] <= 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have any warn.");
				    ShowPlayerDialog(playerid, DIALOG_BUYCLEARWARNS, DIALOG_STYLE_MSGBOX, "Clear Warns", "Do you want to pay 20 premium points to clear your warns?","Yes","No");
				}
				if(listitem == 5)
				{
					if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					new idcar=-1;
					if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your car.");
					for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
					{
						if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pCarID][vv])
						{
							idcar = vv;
						}
					}
					if(idcar == -1) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your car.");
					ShowPlayerDialog(playerid, DIALOG_BUYCLEARKM, DIALOG_STYLE_MSGBOX, "Clear KM & Days", "Do you want to pay 20 premium points to clear your car km and days?","Yes","No");
				}
				if(listitem == 6)
				{
					if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					ShowPlayerDialog(playerid, DIALOG_BUYHIDDEN, DIALOG_STYLE_MSGBOX, "Hidden color", "Do you want to pay 20 premium points to buy a hidden color?","Yes","No");
				}
				if(listitem == 7)
				{
					if(PlayerInfo[playerid][pPremiumPoints] <= 0) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					ShowPlayerDialog(playerid, DIALOG_BUYFIREWORKS, DIALOG_STYLE_MSGBOX, "Fireworks", "Do you want to pay 1 premium point to buy 5 fireworks?","Yes","No");
				}
				if(listitem == 8)
				{
					if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					if(PlayerInfo[playerid][pCarSlots] >= 10) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You can't buy more than 10 vehicle slots.");
					ShowPlayerDialog(playerid, DIALOG_BUYSLOT, DIALOG_STYLE_MSGBOX, "Vehicle slot", "Do you want to pay 20 premium points to buy a vehicle slot?","Yes","No");
				}
				if(listitem == 9)
				{
					if(PlayerInfo[playerid][pPremiumPoints] <= 14) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					ShowPlayerDialog(playerid, DIALOG_BUYWALKIE, DIALOG_STYLE_INPUT, "Buy frequency", "Type the frequency that you want to buy bellow. You can only buy a frequency 3 number frequency (100-999).\nYou'll be able to set a password for your frequency.\nPrice: 15 premium points.", "Buy", "Close");
				}
				if(listitem == 10)
				{
					if(PlayerInfo[playerid][pPremiumPoints] <= 9) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					if(PlayerInfo[playerid][pPhone] == 1) return SendClientMessage(playerid, COLOR_GREY, "You have already an iPhone.");
					new strings[500];
					format(strings,sizeof(strings),"Avantaje iPhone:\n- numar de telefon din 4 cifre la alegere.\n- poti dezactiva apelurile daca vrei sa primesti doar SMS-uri.\n- in chat va aparea `* Player turns of his iPhone`.\n- optiune de /reply raspunde la ultimul SMS primit.\n- optiune /block pentru a bloca temporar un numar de telefon.\n\nChoose a phone number:");
					ShowPlayerDialog(playerid, DIALOG_IPHONE, DIALOG_STYLE_INPUT, "iPhone", strings, "Ok", "Cancel");
				}
				if(listitem == 11)
				{
					if(PlayerInfo[playerid][pPremiumPoints] <= 0) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					ShowPlayerDialog(playerid, DIALOG_BUYMONEY1, DIALOG_STYLE_MSGBOX, "Money", "Do you want to pay 1 premium point to buy $300,000?","Yes","No");
				}
				if(listitem == 12)
				{
					if(PlayerInfo[playerid][pPremiumPoints] <= 9) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					ShowPlayerDialog(playerid, DIALOG_BUYMONEY2, DIALOG_STYLE_MSGBOX, "Money", "Do you want to pay 10 premium points to buy $3,000,000?","Yes","No");
				}
				if(listitem == 13)
				{
					if(PlayerInfo[playerid][pPremiumPoints] <= 49) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					ShowPlayerDialog(playerid, DIALOG_BUYMONEY3, DIALOG_STYLE_MSGBOX, "Money", "Do you want to pay 50 premium points to buy $15,000,000?","Yes","No");
				}
				if(listitem == 14)
				{
					if(PlayerInfo[playerid][pPremiumPoints] <= 99) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					ShowPlayerDialog(playerid, DIALOG_BUYMONEY4, DIALOG_STYLE_MSGBOX, "Money", "Do you want to pay 100 premium points to buy $30,000,000?","Yes","No");
				}
		    	if(listitem == 15)
				{
					if(PlayerInfo[playerid][pPremiumPoints] <= 49) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
					if(PlayerInfo[playerid][pMember] != 0) return SS(playerid, COLOR_LIGHTGREEN3, "Trebuie sa fi civil.", "You need to be a civilian.");
					ShowPlayerDialog(playerid, DIALOG_BUYCLEARFH, DIALOG_STYLE_MSGBOX, "Clear FH", "Do you want to pay 50 premium points to clear your faction history?","Yes","No");
	            }
	        	if(listitem == 16)
				{
					new i,stringyy[500];
					if(PlayerInfo[playerid][pPremiumPoints] >= 100)
					{
						if(PlayerInfo[playerid][pClan] == 0)
						{
							PlayerInfo[playerid][pPremiumPoints] -= 100;
							format(stringyy, sizeof(stringyy), "You have bought a clan! (-100 premium points)");
							SendClientMessage(playerid, COLOR_YELLOW, stringyy);
							PlayerInfo[playerid][pCRank] = 7;

							new Cache: resultoccc = mysql_query(SQL,  "INSERT INTO `clans` (`clanName`) VALUES('New Clan')");

							print("Trece de primul query");
							i = cache_insert_id();
        					cache_delete(resultoccc);

							ClanInfo[i][cClanExpire] = gettime() + (90*86400);

							PlayerInfo[playerid][pClan] = i;

							mysql_format(SQL, stringyy, sizeof(stringyy), "UPDATE `clans` SET `clanExpire`='%d' WHERE `clanID`='%d'",ClanInfo[i][cClanExpire],i);
							mysql_tquery(SQL, stringyy, "", "");
							print("Trece de al 2-lea query");

							mysql_format(SQL, stringyy, sizeof(stringyy), "UPDATE users SET `CRank`='7',`Clan`='%d',`PremiumPoints`='%d',`ClanJoin`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pClan], PlayerInfo[playerid][pPremiumPoints], gettime(), PlayerInfo[playerid][pNormalName]);
        					mysql_tquery(SQL,stringyy,"","");

							print("Trece de al 3-lea query");

							new strings[200];
							format(strings, sizeof(strings), "/shop: %s created a new clan.", GetName(playerid));
							ABroadCast(COLOR_YELLOW, strings, 6);
							ShowPlayerDialog(playerid, DIALOG_CHOOSECLANNAME, DIALOG_STYLE_INPUT, "Clan name", "Insert clan name in the box below:\n(You can't change it after that!)", "Ok", "");
						}
						else return SCM(playerid,COLOR_WHITE,"You already are in a clan! Use /quitclan first.");
					}
					else return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				}
			}
		}
	if(dialogid == DIALOG_SAVEVEHICLE)
	{
		if(response)
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in a vehicle to save it.");
			new Float:vPos[4],strquery[300],i;

			GetVehiclePos(GetPlayerVehicleID(playerid), vPos[0], vPos[1], vPos[2]);
		    GetVehicleZAngle(GetPlayerVehicleID(playerid), vPos[3]);

			format(strquery, sizeof(strquery), "INSERT INTO vehicles (Model, PosX, PosY, PosZ, Rotation) VALUES('%d', '%f', '%f', '%f', '%f')", GetVehicleModel(GetPlayerVehicleID(playerid)), vPos[0], vPos[1], vPos[2], vPos[3]);
		    new Cache: ab = mysql_query(SQL, strquery);

			i = cache_insert_id();
			cache_delete(ab);
			SendClientMessage(playerid, COLOR_YELLOW, "Vehicle saved.");

			VehicleInfo[i][vehModel] = GetVehicleModel(GetPlayerVehicleID(playerid));
			VehicleInfo[i][vehPosX] = vPos[0];
			VehicleInfo[i][vehPosY] = vPos[1];
			VehicleInfo[i][vehPosZ] = vPos[2];
			VehicleInfo[i][vehRotation] = vPos[3];
			VehicleInfo[i][vehGroup] = 0;
			VehicleInfo[i][vehRank] = 0;
			VehicleInfo[i][vehCarID] = GetPlayerVehicleID(playerid);
			for(new x = 0; x < MAX_VEHICLES; x++)
			{
		    	if(Carspawn[x] == GetPlayerVehicleID(playerid))
				{
		    	    Carspawn[x] = 0;
		    	}
		    }
			VehicleInfo[i][vehCarID] = GetPlayerVehicleID(playerid);
			Vehicless++;
		}
	}
	if(dialogid == DIALOG_DELETEVEHICLE)
	{
		if(response)
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in a vehicle to save it.");
			for(new x; x < MAX_VEHICLES; x++)
			{
				if(VehicleInfo[x][vehCarID] == GetPlayerVehicleID(playerid))
				{
					new strx[256];
					mysql_format(SQL, strx, sizeof(strx), "DELETE FROM `vehicles` WHERE `ID`='%d'", VehicleInfo[x][vehCarIDD]);
					mysql_tquery(SQL, strx, "", "");

					DestroyVehicle(VehicleInfo[x][vehCarID]);

					SendClientMessage(playerid, COLOR_YELLOW, "Vehicle deleted.");
					VehicleInfo[x][vehModel] = GetVehicleModel(GetPlayerVehicleID(playerid));
					VehicleInfo[x][vehPosX] = 0.0;
					VehicleInfo[x][vehPosY] = 0.0;
					VehicleInfo[x][vehPosZ] = 0.0;
					VehicleInfo[x][vehRotation] = 0.0;
					VehicleInfo[x][vehGroup] = 0;
					VehicleInfo[x][vehRank] = 0;
					VehicleInfo[x][vehCarID] = 0;
					VehicleInfo[x][vehCarIDD] = 0;
					Vehicless--;
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_GO)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, DIALOG_GO1, DIALOG_STYLE_LIST, "SERVER: House Interiors", "Madd Doggs'\nCJ's House\nRyder's House\nTiger Skin Brothel\nColonel Fuhrberger's\nCrack Den\nDenise's Room\nKatie's Room", "Select", "Cancel");
	            case 1: ShowPlayerDialog(playerid, DIALOG_GO2, DIALOG_STYLE_LIST, "SERVER: Race Tracks", "Dirt Track\nVice Stadium\nBloodbowl Stadium\n8-Track Stadium\nKickstart Stadium", "Select", "Cancel");
	            case 2: ShowPlayerDialog(playerid, DIALOG_GO3, DIALOG_STYLE_LIST, "SERVER: City Locations", "Los Santos\nSan Fierro\nLas Venturas", "Select", "Cancel");
	            case 3: ShowPlayerDialog(playerid, DIALOG_GO4, DIALOG_STYLE_LIST, "SERVER: Popular Locations", "Bank (exterior)\nGym (exterior)\nAll Saints Hospital\nCounty General Hospital\nNewbie Spawn\n", "Select", "Cancel");
	            case 4: ShowPlayerDialog(playerid, DIALOG_GO6, DIALOG_STYLE_LIST, "SERVER: Gym Interiors", "Ganton Gym (LS)\nCobra Martial Arts (SF)\nBelow the Belt Gym (LV)", "Select", "Cancel");
	            case 5: ShowPlayerDialog(playerid, DIALOG_GO5, DIALOG_STYLE_LIST, "SERVER: Other Locations", "RC Battlefield\nArea 69\nWarehouse 1\nWarehouse 2\nMeat Factory\nSherman Dam\n", "Select", "Cancel");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_GO1)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 5);
		            SetPlayerPos(playerid, 1267.663208, -781.323242, 1091.906250);
		        }
		        case 1: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 3);
		            SetPlayerPos(playerid, 2496.049804, -1695.238159, 1014.742187);
		        }
		        case 2: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 2);
		            SetPlayerPos(playerid, 2454.717041, -1700.871582, 1013.515197);
		        }
		        case 3: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 3);
		            SetPlayerPos(playerid, 964.106994, -53.205497, 1001.124572);
		        }
		        case 4: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 8);
		            SetPlayerPos(playerid, 2807.619873, -1171.899902, 1025.570312);
		        }
		        case 5: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 5);
		            SetPlayerPos(playerid, 318.564971, 1118.209960, 1083.882812);
		        }
		        case 6: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 1);
		            SetPlayerPos(playerid, 244.411987, 305.032989, 999.148437);
		        }
		        case 7: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 2);
		            SetPlayerPos(playerid, 271.884979, 306.631988, 999.148437);
		        }
		    }
		}
	}
	if(dialogid == DIALOG_GO2)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 4);
		            SetPlayerPos(playerid, -1444.645507, -664.526000, 1053.572998);
		        }
		        case 1: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 1);
		            SetPlayerPos(playerid, -1401.829956, 107.051300, 1032.273437);
		        }
		        case 2: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 15);
		            SetPlayerPos(playerid, -1398.103515, 937.631164, 1036.479125);
		        }
		        case 3: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 7);
		            SetPlayerPos(playerid, -1398.065307, -217.028900, 1051.115844);
		        }
		        case 4: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 14);
		            SetPlayerPos(playerid, -1465.268676, 1557.868286, 1052.531250);
		        }
			}
		}
	}
	if(dialogid == DIALOG_GO3)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 0);
		            SetPlayerPos(playerid, 1550.2311, -1675.4509, 15.3155);
		        }
		        case 1: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 0);
		            SetPlayerPos(playerid, -1641.9742, 431.1623, 7.1102);
		        }
		        case 2: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 0);
		            SetPlayerPos(playerid, 1699.2, 1435.1, 10.7);
		        }
			}
		}
	}
	if(dialogid == DIALOG_GO4)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 0);
		            SetPlayerPos(playerid, 595.5443,-1250.3405,18.2836);
		        }
		        case 1: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 0);
		            SetPlayerPos(playerid, 2222.6714, -1724.8436, 13.5625);
		        }
		        case 2: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 0);
		            SetPlayerPos(playerid, 1172.359985, -1323.313110, 15.402919);
		        }
		        case 3: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 0);
		            SetPlayerPos(playerid, 2034.196166, -1402.591430, 17.295030);
		        }
		        case 4: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 0);
		            SetPlayerPos(playerid, 738.9963, -1417.2211, 13.5234);
		        }
			}
		}
	}
	if(dialogid == DIALOG_GO5)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: {
				   	SetPlayerVirtualWorld(playerid, 0);
				    SetPlayerInterior(playerid, 10);
				    SetPlayerPos(playerid, -975.975708, 1060.983032, 1345.671875);
				}
				case 1: {
				   	SetPlayerVirtualWorld(playerid, 0);
				    SetPlayerInterior(playerid, 0);
					SetPlayerPos(playerid, 223.431976, 1872.400268, 13.734375);
				}
				case 2: {
					SetPlayerVirtualWorld(playerid, 0);
				    SetPlayerInterior(playerid, 1);
				    SetPlayerPos(playerid, 1412.639892, -1.787510, 1000.924377);
		     	}
				case 3: {
					SetPlayerVirtualWorld(playerid, 0);
				    SetPlayerInterior(playerid, 18);
				    SetPlayerPos(playerid, 1302.519897, -1.787510, 1001.028259);
				}
				case 4: {
					SetPlayerVirtualWorld(playerid, 0);
				    SetPlayerInterior(playerid, 1);
				    SetPlayerPos(playerid, 963.418762, 2108.292480, 1011.030273);
				}
				case 5: {
					SetPlayerVirtualWorld(playerid, 0);
				    SetPlayerInterior(playerid, 17);
				    SetPlayerPos(playerid, -959.564392, 1848.576782, 9.000000);
				}
			}
		}
	}
	if(dialogid == DIALOG_GO6)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 5);
		            SetPlayerPos(playerid, 772.111999, -3.898649, 1000.728820);
		        }
		        case 1: {
           			SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 6);
		            SetPlayerPos(playerid, 774.213989, -48.924297, 1000.585937);
		        }
		        case 2: {
		            SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 7);
		            SetPlayerPos(playerid, 773.579956, -77.096694, 1000.655029);
		        }
			}
		}
	}
	if(dialogid == DIALOG_RAMHQ)
	{
		if(response)
		{
			new name[30], string2[128], fid = BreachID[playerid];
			GetPlayerName(playerid, name, sizeof(name));
			format(string2, sizeof(string2), "* %s breaks down the door and enters the building.", name);
			ProxDetector(30.0, playerid, string2, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPlayerPosEx(playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]);
	        SetPlayerInterior(playerid, DynamicFactions[fid][fInterior]);
	        SetPlayerVirtualWorld(playerid, DynamicFactions[fid][fVirtual]);
	        InHQ[playerid] = fid;
	        if(PlayerInfo[playerid][pMember] == 11)
		   	{
		   		if(PlayerInfo[playerid][pWantedLevel] < 6)
		   		{
		   			WantedPoints[playerid] += 2;
		   		}
		   		if(WantedPoints[playerid] > 13)
				{
					WantedPoints[playerid] = 13;
				}
				SetPlayerCriminal(playerid, -1, "breaking the door");
				ClearWanted(playerid);
		   	}
		}
		return 1;
	}
	if(dialogid == DIALOG_RAMHOUSE)
	{
		if(response)
		{
			new name[30], string2[128], i = BreachID[playerid];
			GetPlayerName(playerid, name, sizeof(name));
			format(string2, sizeof(string2), "* %s breaks down the door and enters the house.", name);
			ProxDetector(30.0, playerid, string2, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPlayerInterior(playerid,HouseInfo[i][hInterior]);
		   	SetPlayerPosEx(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
			PlayerInfo[playerid][pInt] = HouseInfo[i][hInterior];
			PlayerInfo[playerid][pLocal] = i;
		   	SetPlayerVirtualWorld(playerid,HouseInfo[i][hVirtual]);
		  	InHouse[playerid] = i;
		   	if(strlen(housestring[InHouse[playerid]]) > 0)
		   	{
			 	StopAudioStreamForPlayer(playerid);
		       	PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
		   	}
		   	if(PlayerInfo[playerid][pMember] == 11)
		   	{
		   		if(PlayerInfo[playerid][pWantedLevel] < 6)
		   		{
		   			WantedPoints[playerid] += 2;
		   		}
		   		if(WantedPoints[playerid] > 13)
				{
					WantedPoints[playerid] = 13;
				}
				SetPlayerCriminal(playerid, -1, "breaking the door");
				ClearWanted(playerid);
		   	}
		}
		return 1;
	}
	if(dialogid == DIALOG_RAMBIZ)
	{
		if(response)
		{
			new name[30], string2[128], i = BreachID[playerid];
			GetPlayerName(playerid, name, sizeof(name));
			format(string2, sizeof(string2), "* %s breaks down the door and enters the business.", name);
			ProxDetector(30.0, playerid, string2, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPlayerInterior(playerid, BizzInfo[i][bInterior]);
		   	SetPlayerPosEx(playerid, BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]);
		   	PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior];
		   	PlayerInfo[playerid][pLocal] = i+99;
	       	SetPlayerVirtualWorld(playerid, BizzInfo[i][bVirtual]);
		   	InBussines[playerid] = i;
		   	if(PlayerInfo[playerid][pMember] == 11)
		   	{
		   		if(PlayerInfo[playerid][pWantedLevel] < 6)
		   		{
		   			WantedPoints[playerid] += 2;
		   		}
		   		if(WantedPoints[playerid] > 13)
				{
					WantedPoints[playerid] = 13;
				}
				SetPlayerCriminal(playerid, -1, "breaking the door");
				ClearWanted(playerid);
		   	}
		}
		return 1;
	}
	if(dialogid == DIALOG_ATM_MENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new strx[128];
				format(strx, sizeof(strx), "Your bank account balance is currently standing at $%s.", FormatNumber(PlayerInfo[playerid][pAccount]));
				ShowPlayerDialog(playerid, DIALOG_ATM_BALANCE, DIALOG_STYLE_MSGBOX, "SERVER: Automated Teller Machine", strx, "OK", "");
			}
			if(listitem == 1)
			{
				ShowPlayerDialog(playerid, DIALOG_ATM_WITHDRAW, DIALOG_STYLE_INPUT, "SERVER: ATM", "Please specify the amount of money that you'd like to withdraw.\n\nYou can withdraw up to $10,000 from this ATM.\n\nNote: This ATM charges $10 from any withdrawals you make.", "OK", "Cancel");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_ATM_WITHDRAW)
	{
		if(response)
		{
			new suma = strval(inputtext);
			if(suma < 2 || suma > 10000)
			{
				SendClientMessage(playerid, COLOR_GREY, "You do not have enough money to withdraw this amount.");
				ShowPlayerDialog(playerid, DIALOG_ATM_WITHDRAW, DIALOG_STYLE_INPUT, "SERVER: ATM", "Please specify the amount of money that you'd like to withdraw.\n\nYou can withdraw up to $10,000 from this ATM.\n\nNote: This ATM charges $2 from any withdrawals you make.", "OK", "Cancel");
				return 1;
			}
			GivePlayerCash(playerid, suma);
			PlayerInfo[playerid][pAccount] -= suma;
			Update(playerid, pCashx);
			Update(playerid, pBank);
			ShowPlayerDialog(playerid, DIALOG_ATM_BALANCE, DIALOG_STYLE_MSGBOX, "SERVER: Automated Teller Machine", "Your money has been withdrawn.\n\nThank you for using our ATM today!", "OK", "");
		}
		return 1;
	}
	if(dialogid == DIALOG_SELLHOUSETOSTATE)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPhousekey] != SellHouseID[playerid]) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't own this house anymore.");
			new house = PlayerInfo[playerid][pPhousekey];
			HouseInfo[house][hHel] = 0;
			HouseInfo[house][hMusic] = 0;
			HouseInfo[house][hLock] = 0;
			HouseInfo[house][hOwned] = 1;
			HouseInfo[house][hRentabil] = 1;
			HouseInfo[house][hRent] = 5;
            PlayerInfo[playerid][pRented] = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			strmid(HouseInfo[house][hOwner], "AdmBot", 0, strlen("AdmBot"), 255);
			ConsumingMoney[playerid] = 1;
			GivePlayerCash(playerid, 2000000);
			SendClientMessage(playerid, COLOR_WHITE, "You have sold your house to state for $2.000.000.");
			PlayerInfo[playerid][pPhousekey] = 999;
			PlayerInfo[playerid][pRented] = -1;
			if(PlayerInfo[playerid][pLocal] == house)
			{
				SetPlayerInterior(playerid,0);
				SetPlayerPosEx(playerid,HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]);
				PlayerInfo[playerid][pInt] = 0;
			}
			Update(playerid,pCashx);
			Update(playerid,pRentedx);
			Update(playerid,pPhousekeyx);
			new str2[256];
			mysql_format(SQL, str2, sizeof(str2), "UPDATE `houses` SET `Hel`='0',`Arm`='0',`Lockk`='0',`Owned`='1',`Owner`='AdmBot',`Rentabil`='1',`Rent`='5' WHERE `ID`='%d'", HouseInfo[house][hID]);
			mysql_tquery(SQL, str2, "", "");
			mysql_format(SQL, str2, sizeof(str2), "UPDATE `users` SET `House`='%d' WHERE `name`='AdmBot'", house);
			mysql_tquery(SQL, str2, "", "");
			OnPropTextdrawUpdate(1,house);
		}
		return 1;
	}
	if(dialogid == DIALOG_SELLBIZTOSTATE)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPbiskey] != SellHouseID[playerid]) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't own this business anymore.");
			new bouse = PlayerInfo[playerid][pPbiskey];
			BizzInfo[bouse][bLocked] = 1;
			BizzInfo[bouse][bOwned] = 1;
			BizzInfo[bouse][bEntranceCost] = 5;
			strmid(BizzInfo[bouse][bOwner], "AdmBot", 0, strlen("AdmBot"), 255);
			GivePlayerCash(playerid, 3000000);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, COLOR_WHITE, "You have sold your business for $3.000.000.");
			PlayerInfo[playerid][pPbiskey] = 255;
            new str1[184];
			mysql_format(SQL, str1, sizeof(str1), "UPDATE `bizz` SET `Locked`='0',`Owned`='1',`Till`='0',`Owner`='AdmBot',`EntranceCost`='5' WHERE `ID`='%d'", bouse);
			mysql_tquery(SQL, str1, "", "");
			mysql_format(SQL, str1, sizeof(str1), "UPDATE `users` SET `Bizz`='%d' WHERE `name`='AdmBot'", bouse);
			Update(playerid,pCashx);
			Update(playerid,pPbiskeyx);
			OnPropTextdrawUpdate(2,bouse);
		}
		return 1;
	}
	if(dialogid == DIALOG_HUPGRADE)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if (PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
				{
					if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hHel] == 1) return SendClientMessage(playerid, COLOR_GREY, "You have already this house upgrade.");
					if(GetPlayerCash(playerid) >= 50000)
					{
						if(PlayerInfo[playerid][pLanguage] == 2) ShowPlayerDialog(playerid, DIALOG_HUPGRADE1, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Vrei sa platesti $50,000 pentru a putea folosi /eat in casa?\n{FF0000}Atentie! {FFFFFF}Upgrade-ul va fi pierdut la vanzarea casei.", "Da", "Nu");
						else ShowPlayerDialog(playerid, DIALOG_HUPGRADE1, DIALOG_STYLE_MSGBOX, "Are you sure?", "Do you want to pay $50,000 to use /eat in your house?\n{FF0000}Atention! {FFFFFF}The upgrade will be lost when you sell the house.", "Yes", "No");
					}
					else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have enough money.");
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
			}
			if(listitem == 1)
			{
				if (PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
				{
					if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hMusic] == 1) return SendClientMessage(playerid, COLOR_GREY, "You have already this house upgrade.");
					if(PlayerInfo[playerid][pPremiumPoints] >= 15)
					{
						if(PlayerInfo[playerid][pLanguage] == 2) ShowPlayerDialog(playerid, DIALOG_HUPGRADE2, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Vrei sa platesti 15 puncte premium pentru a putea folosi /hmusic in casa?\n{FF0000}Atentie! {FFFFFF}Upgrade-ul va fi pierdut la vanzarea casei.", "Da", "Nu");
						else ShowPlayerDialog(playerid, DIALOG_HUPGRADE2, DIALOG_STYLE_MSGBOX, "Are you sure?", "Do you want to pay 15 premium points to use /hmusic in your house?\n{FF0000}Atention! {FFFFFF}The upgrade will be lost when you sell the house.", "Yes", "No");
					}
					else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have enough premium points.");
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_HUPGRADE1)
	{
		if(response)
		{
			if (PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				if(GetPlayerCash(playerid) >= 50000)
				{
					HouseInfo[PlayerInfo[playerid][pPhousekey]][hHel] = 1;
					GivePlayerCash(playerid,-50000);
					Update(playerid, pCashx);
					new str2[128];
					mysql_format(SQL, str2, sizeof(str2), "UPDATE `houses` SET `Hel`='1' WHERE `ID`='%d'", PlayerInfo[playerid][pPhousekey]);
					mysql_tquery(SQL, str2, "", "");
					SendClientMessage(playerid, COLOR_YELLOW, "You bought the house food upgrade for your house.");
				}
				else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have enough money.");
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
		}
		return 1;
	}
	if(dialogid == DIALOG_HUPGRADE2)
	{
		if(response)
		{
			if (PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				if(PlayerInfo[playerid][pPremiumPoints] >= 15)
				{
					HouseInfo[PlayerInfo[playerid][pPhousekey]][hMusic] = 1;
					PlayerInfo[playerid][pPremiumPoints] -= 15;
					Update(playerid, pPremiumPointsx);
					new str2[128];
					mysql_format(SQL, str2, sizeof(str2), "UPDATE `houses` SET `Music`='1' WHERE `ID`='%d'", PlayerInfo[playerid][pPhousekey]);
					mysql_tquery(SQL, str2, "", "");
					SendClientMessage(playerid, COLOR_YELLOW, "You bought the music upgrade for your house.");
					format(str2, sizeof(str2), "%s[user:%d] has paid 15 premium points for house music upgrade.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
					ABroadCast(COLOR_YELLOW, str2, 1);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have enough premium points.");
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
		}
		return 1;
	}
	if(dialogid == DIALOG_HMUSIC)
	{
		if(response)
		{
			new strings[128],name[30],so,link[128];
			GetPlayerName(playerid, name, sizeof(name));
            if(listitem == 0)
			{
				format(link, sizeof(link), "off");
				format(strings, sizeof(strings), "* %s turned off the stereo.", name);
            }
			if(listitem == 1)
			{
				format(link, sizeof(link), "http://stream.profm.ro:8012/profm.mp3");
				format(strings, sizeof(strings), "* %s set the stereo to play Pro FM Romania.",name);
            }
			if(listitem == 2)
			{
				format(link, sizeof(link), "http://live.radiobandit.ro:8000");
				format(strings, sizeof(strings), "* %s set the stereo to play Radio Bandit Romania.",name);
            }
			if(listitem == 3)
			{
                format(link, sizeof(link), "http://radiotaraf.com/live.m3u");
				format(strings, sizeof(strings), "* %s set the stereo to play Radio Taraf Romania.",name);
            }
			if(listitem == 4)
			{
				format(link, sizeof(link), "http://live.radiohot.ro:8000/");
				format(strings, sizeof(strings), "* %s set the stereo to play Radio Hot Romania.",name);
            }
			if(listitem == 5)
			{
				format(link, sizeof(link), "http://dance.radiogangsta.ro:8800");
				format(strings, sizeof(strings), "* %s set the stereo to play Radio Gangsta Dance.",name);
            }
            if(listitem == 6)
			{
                format(link, sizeof(link), "http://live.radiogangsta.ro:8800");
				format(strings, sizeof(strings), "* %s set the stereo to play Radio Gangsta Manele.",name);
            }
			if(listitem == 7)
			{
				format(link, sizeof(link), "http://7619.live.streamtheworld.com:80/977_HITS_SC");
				format(strings, sizeof(strings), "* %s set the stereo to .977 Hitz.",name);
            }
			if(listitem == 8)
			{
				format(link, sizeof(link), "http://7639.live.streamtheworld.com:80/977_MIX_SC");
				format(strings, sizeof(strings), "* %s set the stereo to .977 Mix.",name);
            }
			if(listitem == 9)
			{
				format(link, sizeof(link), "http://7579.live.streamtheworld.com:80/977_ALTERN_SC");
				format(strings, sizeof(strings), "* %s set the stereo to .977 Alternative.",name);
            }
			if(listitem == 10)
			{
				format(link, sizeof(link), "http://www.listenlive.eu/bbcradio1.m3u");
				format(strings, sizeof(strings), "* %s set the stereo to Radio BBC One UK.",name);
            }
			if(listitem == 11)
			{
				format(link, sizeof(link), "http://dubstep.fm/128.pls");
				format(strings, sizeof(strings), "* %s set the stereo to Dubstep.fm.",name);
            }
			if(listitem == 12)
			{
				format(link, sizeof(link), "http://www.radio-hit.ro/asculta.m3u");
				format(strings, sizeof(strings), "* %s set the stereo to Radio Hit Romania.",name);
            }
			if(listitem == 13)
			{
				format(link, sizeof(link), "http://live.radioclubmix.ro:9999");
				format(strings, sizeof(strings), "* %s set the stereo to Radio ClubMix Romania.",name);
            }
			if(listitem == 14)
			{
				format(link, sizeof(link), "http://80.86.106.136/listen.pls");
				format(strings, sizeof(strings), "* %s set the stereo to Kiss FM Romania [Audio Plugin].",name);
            }
			if(listitem == 15)
			{
				format(link, sizeof(link), "http://www.radiozu.ro/live.m3u");
				format(strings, sizeof(strings), "* %s set the stereo to Radio Zu Romania [Audio Plugin].",name);
            }
			if(listitem == 16)
			{
				format(link, sizeof(link), "http://livemp3.radiopopular.ro:7777");
				format(strings, sizeof(strings), "* %s set the stereo to Radio Popular.",name);
            }
			if(listitem == 17)
			{
				format(link, sizeof(link), "http://radio.trap.fm/listen128.pls");
				format(strings, sizeof(strings), "* %s set the stereo to Trap.FM.",name);
            }
            if(listitem == 18)
			{
				format(link, sizeof(link), "http://radiotequila.ro/hiphop.m3u");
				format(strings, sizeof(strings), "* %s set the stereo to Radio Tequila Hip Hop.",name);
            }
			if(listitem == 19)
			{
                ShowPlayerDialog(playerid, DIALOG_CUSTOMRADIOH, DIALOG_STYLE_INPUT, "Custom Url", "Enter a URL:", "Play", "Cancel");
				so = 1;
            }
            format(housestring[InHouse[playerid]], 256, "%s", link);
			if(so != 1)
			{
				foreach(new i : Player)
				{
				    if(InHouse[playerid] == InHouse[i])
				    {
				        StopAudioStreamForPlayer(i);
						PlayAudioStreamForPlayer(i, link);
					}
				}
				ProxDetector(20.0, playerid, strings, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BJ_ACTION)
	{
	    if(response)
		{
		    switch(listitem)
		    {
				case 0: //HIT
				{
					if(BJMatch[playerid] == 0) return SS(playerid, COLOR_WHITE, "Nu esti intr-o partida de BlackJack!", "You are not in a match of BlackJack!");
					BlackJackFunction(playerid, 1);
				}
				case 1: //STAND
				{
					if(BJMatch[playerid] == 0) return SS(playerid, COLOR_WHITE, "Nu esti intr-o partida de BlackJack!", "You are not in a match of BlackJack!");
					do
					{
						new rand = random(85), numb;
						if(rand >= 0 && rand <= 5) numb = 1;
						else if(rand >= 6 && rand <= 12) numb = 2;
						else if(rand >= 13 && rand <= 20) numb = 3;
						else if(rand >= 21 && rand <= 30) numb = 4;
						else if(rand >= 31 && rand <= 38) numb = 5;
						else if(rand >= 39 && rand <= 45) numb = 6;
						else if(rand >= 46 && rand <= 55) numb = 7;
						else if(rand >= 56 && rand <= 59) numb = 8;
						else if(rand >= 60 && rand <= 66) numb = 9;
						else if(rand >= 67 && rand <= 72) numb = 10;
						else if(rand >= 73 && rand <= 75) numb = 12;
						else if(rand >= 76 && rand <= 79) numb = 13;
						else if(rand >= 80) numb = 14;

						BDealerCard[playerid][BDealerCards[playerid]] = numb;
						BDealerScore[playerid] += numb;

						BDealerCards[playerid]++;
					}
					while(BDealerScore[playerid] < 16 && BDealerCards[playerid] < 5);

					new pb = 0, text[128], namee[30];
					GetPlayerName(playerid, namee, sizeof(namee));
					if(BlackJackPlayerScore[playerid] > 21)
					{
						PlayerTextDrawShow(playerid, BJWinText[playerid]);
						PlayerTextDrawSetString(playerid, BJWinText[playerid], "~r~DEALER WINS!");
						format(text, sizeof(text), "** %s a pierdut $%s la Black Jack **.", namee, FormatNumber(BDeal[playerid]));
						ProxDetector(40.0, playerid, text, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						pb++;
					}
					if(BDealerScore[playerid] > 21 && BlackJackPlayerScore[playerid] <= 21)
					{
						new sum[100];
						format(sum, sizeof(sum), "~g~PLAYER WINS!~n~+%s$", FormatNumber(BDeal[playerid]));
						PlayerTextDrawShow(playerid, BJWinText[playerid]);
						PlayerTextDrawSetString(playerid, BJWinText[playerid], sum);
						GivePlayerCash(playerid, BDeal[playerid]*2);
						Update(playerid, pCashx);
						format(text, sizeof(text), "** %s a castigat $%s la Black Jack **.", namee, FormatNumber(BDeal[playerid]));
						ProxDetector(40.0, playerid, text, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						pb++;
						PlayerPlaySound(playerid, 4201, 0.0, 0.0, 0.0);
					}

					if(pb == 0)
					{
						if(BlackJackPlayerScore[playerid] > BDealerScore[playerid])
						{
							new sum[100];
							format(sum, sizeof(sum), "~g~PLAYER WINS!~n~+%s$", FormatNumber(BDeal[playerid]));
							PlayerTextDrawShow(playerid, BJWinText[playerid]);
							PlayerTextDrawSetString(playerid, BJWinText[playerid], sum);
							GivePlayerCash(playerid, BDeal[playerid]*2);
							Update(playerid, pCashx);
							format(text, sizeof(text), "** %s a castigat $%s la Black Jack **", namee, FormatNumber(BDeal[playerid]));
							ProxDetector(40.0, playerid, text, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
							PlayerPlaySound(playerid, 4201, 0.0, 0.0, 0.0);
						}
						else if(BDealerScore[playerid] > BlackJackPlayerScore[playerid])
						{
							PlayerTextDrawShow(playerid, BJWinText[playerid]);
							PlayerTextDrawSetString(playerid, BJWinText[playerid], "~r~DEALER WINS!");
							format(text, sizeof(text), "** %s a pierdut $%s la Black Jack **", namee, FormatNumber(BDeal[playerid]));
							ProxDetector(40.0, playerid, text, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						}
						else if(BDealerScore[playerid] == BlackJackPlayerScore[playerid])
						{
							PlayerTextDrawShow(playerid, BJWinText[playerid]);
							PlayerTextDrawSetString(playerid, BJWinText[playerid], "TIE!");
							GivePlayerCash(playerid, BDeal[playerid]);
							Update(playerid, pCashx);
						}
					}

					BlackJackUpdateTable(playerid);
					CloseBMatch[playerid] = 3;
				}
				case 2: //CLEAR BET
				{
					if(BJMatch[playerid] == 0)
					{
						BDeal[playerid] = 0;
						PlayerTextDrawSetString(playerid, BJDealAmountText[playerid], "0$");
					}
					else SS(playerid, COLOR_WHITE, "Nu poti folosi Clear Bet cat timp esti intr-o partida de BlackJack!", "You can't Clear Bet while you are in a match of BlackJack!");
				}
			}
		}
	}
	if(dialogid == DIALOG_BJ_BET)
		{
			if(response)
			{
				if(IsNumeric(inputtext))
				{
					new sum = strval(inputtext), suma[30];
					if(GetPlayerCash(playerid) >= sum)
					{
						if(sum >= 10000 && sum <= 500000000)
						{
							BDeal[playerid] = sum;
							format(suma, sizeof(suma), "%s$", FormatNumber(BDeal[playerid]));
							PlayerTextDrawSetString(playerid, BJDealAmountText[playerid], suma);
						}
						else ShowPlayerDialog(playerid, DIALOG_BJ_BET, DIALOG_STYLE_INPUT, "Blackjack: Introdu suma", "Nu poti depasi suma minima sau maxima!\nIntrodu in casuta de mai jos suma pe care vrei sa o pariezi inainte de a incepe jocul\nMinim 10.000$ - Maxim 500.000.000$", "Bet", "Close");
					}
					else ShowPlayerDialog(playerid, DIALOG_BJ_BET, DIALOG_STYLE_INPUT, "Blackjack: Introdu suma", "Nu ai aceasta suma de bani!\nIntrodu in casuta de mai jos suma pe care vrei sa o pariezi inainte de a incepe jocul\nMinim 10.000$ - Maxim 500.000.000$", "Bet", "Close");
				}
				else ShowPlayerDialog(playerid, DIALOG_BJ_BET, DIALOG_STYLE_INPUT, "Blackjack: Introdu suma", "Foloseste doar cifre!\nIntrodu in casuta de mai jos suma pe care vrei sa o pariezi inainte de a incepe jocul\nMinim 10.000$ - Maxim 500.000.000$", "Bet", "Close");
			}
		}
	if(dialogid == DIALOG_CUSTOMRADIOH)
	{
		if(response)
		{
			new stringg[128],length,name[30];
			if(strfind(inputtext, "youtube.com", true) != -1)
			{
				length = strlen(inputtext)-11;
				strdel(inputtext, 0, length);
				format(stringg, sizeof(stringg), "http://youtubeplaylist-mp3.com/download/index/%s",inputtext);
				foreach(new i : Player)
				{
				    if(InHouse[playerid] == InHouse[i])
				    {
				        StopAudioStreamForPlayer(i);
						PlayAudioStreamForPlayer(i, stringg);
					}
				}
				GetPlayerName(playerid, name, sizeof(name));
				format(stringg, sizeof(stringg), "* %s set the stereo to Custom URL.",name);
				ProxDetector(20.0, playerid, stringg, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				foreach(new i : Player)
				{
				    if(InHouse[playerid] == InHouse[i])
				    {
				        StopAudioStreamForPlayer(i);
						PlayAudioStreamForPlayer(i, inputtext);
					}
				}
				GetPlayerName(playerid, name, sizeof(name));
				format(stringg, sizeof(stringg), "* %s set the stereo to Custom URL.", name);
				ProxDetector(20.0, playerid, stringg, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BID)
	{
		if(response)
		{
			new countx, name[30], string2[128];
 			if(TogBid[playerid] == 0) TogBid[playerid] = 1;
 			if(WantToBid[playerid] <= BidAmount)
			{
				if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Trebuie sa licitezi minim %d milioane.", (BidAmount2+1));
				else format(string, sizeof(string), "You need to bid a minimum of %d millions.", (BidAmount2+1));
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
				return 1;
			}
			if(PlayerInfo[playerid][pAccount] >= WantToBid[playerid])
			{
				foreach(new i : Player)
				{
					if(PlayerInfo[i][pSQLID] == TopBidder)
					{
						PlayerInfo[i][pAccount] += BidAmount;
						Update(i, pBank);
						countx++;
					}
				}
				if(countx == 0)
				{
					if(TopBidder != -1)
					{
						mysql_format(SQL, string, sizeof(string), "UPDATE users SET Bank = Bank+%d WHERE id = %d", BidAmount, TopBidder);
						mysql_tquery(SQL, string, "", "");
					}
				}
				TopBidder = PlayerInfo[playerid][pSQLID];
				BidAmount = WantToBid[playerid];
				BidAmount2 = WantToBid2[playerid];
				PlayerInfo[playerid][pAccount] -= WantToBid[playerid];
				Update(playerid, pBank);
				GetPlayerName(playerid, name, sizeof(name));
				if(IsABid == 1)
				{
					format(string, sizeof(string), "> %s a licitat suma de $%s pentru casa (house) %d.", name, FormatNumber(BidAmount), IsAtBid);
					format(string2, sizeof(string2), "> %s placed a bid of $%s for casa (house) %d.", name, FormatNumber(BidAmount), IsAtBid);
				}
				else if(IsABid == 2)
				{
					format(string, sizeof(string), "> %s a licitat suma de $%s pentru BIZ %d.", name, FormatNumber(BidAmount), IsAtBid);
					format(string2, sizeof(string2), "> %s placed a bid of $%s for BIZ %d.", name, FormatNumber(BidAmount), IsAtBid);
				}
				foreach(new i : Player)
				{
					if(TogBid[i] == 1)
					{
						if(PlayerInfo[i][pLanguage] == 2) SendClientMessage(i, COLOR_BID, string);
						else SendClientMessage(i, COLOR_BID, string2);
					}
				}
				BidTime = 3;
			}
			else SS(playerid, COLOR_LIGHTGREEN3, "Nu ai suficienti bani in banca pentru a licita.", "You don't have enough money in bank to bid.");
		}
		return 1;
	}
	if(dialogid == DIALOG_IPHONE)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
			{
			    if(strlen(inputtext) == 4)
				{
				    new numb = strval(inputtext);
					if((inputtext[0] != '0'))
					{
						new query[256];
						format(query, 256, "SELECT * FROM `users` WHERE `PhoneNr` = '%d' ORDER BY `id` ASC", numb);
						new Cache: res = mysql_query(SQL, query);
						if(cache_get_row_count() != 0)
						{
							SendClientMessage(playerid, COLOR_WHITE, "Acel numar de telefon este folosit de un alt player. Alege altul.");
							return 1;
						}
						else
						{
							PlayerInfo[playerid][pPremiumPoints] -= 10;
							PlayerInfo[playerid][pPhone] = 1;
							PlayerInfo[playerid][pPnumber] = numb;
							new str2[300],stringss[200];
							mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d',`Phone`='1' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
							mysql_tquery(SQL,str2,"","");
							if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Ai cumparat un iPhone pentru 10 puncte premium. Numarul tau de telefon e %d.", numb);
							else format(string, sizeof(string), "You bought an iPhone with 10 premium points. Your phone number is %d.", numb);
							SendClientMessage(playerid, COLOR_GREEN, string);
							SS(playerid, COLOR_GREEN, "Pentru a dezactiva apelurile si a primi doar SMS-uri, foloseste /turn off calls.", "To deactivate calls and receive only SMS, use /turn off calls.");
							SS(playerid, COLOR_GREEN, "Pentru a raspunde la ultimul SMS primit, foloseste /reply [text].", "To respond to last SMS received, use /reply [text].");
							mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PhoneNr`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPnumber],PlayerInfo[playerid][pNormalName]);
							mysql_tquery(SQL,str2,"","");
							format(str2, sizeof(str2), "%s[user:%d] paid 10 premium points to buy an iPhone with number %d.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID], PlayerInfo[playerid][pPnumber]);
							ABroadCast(COLOR_YELLOW,str2,6);
							mysql_real_escape_string(str2, stringss);
							mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
							mysql_tquery(SQL,str2,"","");
						}
						cache_delete(res);
					}
					else return SendClientMessage(playerid, COLOR_WHITE, "Numar de telefon invalid. Poti alege un numar de telefon intre 1000 si 9999.");
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "Numar de telefon invalid. Poti alege un numar de telefon intre 1000 si 9999.");
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Numar de telefon invalid. Poti alege un numar de telefon intre 1000 si 9999.");
		}
	}
	if(dialogid == DIALOG_IPHONE)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
			{
			    if(strlen(inputtext) == 4)
				{
				    new numb = strval(inputtext);
					if((inputtext[0] != '0'))
					{
						new query[256];
						format(query, 256, "SELECT * FROM `users` WHERE `PhoneNr` = '%d' ORDER BY `id` ASC", numb);
						new Cache: res = mysql_query(SQL, query);
						if(cache_get_row_count() != 0)
						{
							SendClientMessage(playerid, COLOR_WHITE, "Acel numar de telefon este folosit de un alt player. Alege altul.");
							return 1;
						}
						else
						{
							PlayerInfo[playerid][pTreasurePoints] -= 10;
							PlayerInfo[playerid][pPhone] = 1;
							PlayerInfo[playerid][pPnumber] = numb;
							new str2[300],stringss[200];
							mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `TreasurePoints`='%d',`Phone`='1' WHERE `name`='%s'",PlayerInfo[playerid][pTreasurePoints],PlayerInfo[playerid][pNormalName]);
							mysql_tquery(SQL,str2,"","");
							if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Ai cumparat un iPhone pentru 10 treasure points. Numarul tau de telefon e %d.", numb);
							else format(string, sizeof(string), "You bought an iPhone with 10 treasure points points. Your phone number is %d.", numb);
							SendClientMessage(playerid, COLOR_GREEN, string);
							SS(playerid, COLOR_GREEN, "Pentru a dezactiva apelurile si a primi doar SMS-uri, foloseste /turn off calls.", "To deactivate calls and receive only SMS, use /turn off calls.");
							SS(playerid, COLOR_GREEN, "Pentru a raspunde la ultimul SMS primit, foloseste /reply [text].", "To respond to last SMS received, use /reply [text].");
							mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PhoneNr`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPnumber],PlayerInfo[playerid][pNormalName]);
							mysql_tquery(SQL,str2,"","");
							format(str2, sizeof(str2), "%s[user:%d] paid 10 treasure  points to buy an iPhone with number %d.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID], PlayerInfo[playerid][pPnumber]);
							ABroadCast(COLOR_YELLOW,str2,6);
							mysql_real_escape_string(str2, stringss);
							mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
							mysql_tquery(SQL,str2,"","");
						}
						cache_delete(res);
					}
					else return SendClientMessage(playerid, COLOR_WHITE, "Numar de telefon invalid. Poti alege un numar de telefon intre 1000 si 9999.");
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "Numar de telefon invalid. Poti alege un numar de telefon intre 1000 si 9999.");
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Numar de telefon invalid. Poti alege un numar de telefon intre 1000 si 9999.");
		}
	}
	if(dialogid == DIALOG_CHANGENAME)
	{
	    if(response)
		{
		    if(!isnull(inputtext))
				{
					new lungime = strlen(inputtext);
					if(lungime >= 3 && lungime <= 25)
					{
						new newname = MySQLCheckAccount(inputtext),escape[30],mesaj[128];
						if(newname != 0) return SCM(playerid,COLOR_GREY,"This name already exist.");
						mysql_real_escape_string(inputtext, escape);
						format(WantName[playerid], 30, escape);
						format(mesaj, sizeof(mesaj),"Namechange: %s [%d] wants to change his name to %s", PlayerInfo[playerid][pNormalName], playerid, escape);
						ABroadCast(COLOR_RED2, mesaj, 3);
						TypeName[playerid] = 2;
						SendClientMessage(playerid, COLOR_YELLOW, "Wait for an admin to accept your change name request.");
					}
					else
					{
						SendClientMessage(playerid, COLOR_LIGHTRED,"Invalid new nickname, minimum 3 characters, maximum 25.");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED,"Invalid new nickname.");
				}
			}
		}
	if(dialogid == DIALOG_CHANGENAME2)
	{
	    if(response)
		{
		    if(!isnull(inputtext))
				{
					new lungime = strlen(inputtext);
					if(lungime >= 3 && lungime <= 25)
					{
						new newname = MySQLCheckAccount(inputtext),escape[30],mesaj[128];
						if(newname != 0) return ShowPlayerDialog(playerid, DIALOG_CHANGENAME2, DIALOG_STYLE_INPUT, "Change name:", "This name already exist.\n\nPlease enter your desired name below:", "Ok", "Cancel");
						mysql_real_escape_string(inputtext, escape);
						format(WantName[playerid], 30, escape);
						format(mesaj, sizeof(mesaj),"Namechange: %s [%d] wants to change his name to %s", PlayerInfo[playerid][pNormalName], playerid, escape);
						ABroadCast(COLOR_RED2, mesaj, 3);
						SendClientMessage(playerid, COLOR_YELLOW, "Wait for an admin to accept your change name request.");
					}
					else
					{
						SendClientMessage(playerid, COLOR_LIGHTRED,"Invalid new nickname, minimum 3 characters, maximum 25.");
						ShowPlayerDialog(playerid, DIALOG_CHANGENAME2, DIALOG_STYLE_INPUT, "Change name:", "An admin forced you to change your nickname.\n\nPlease enter your desired name below:", "Ok", "Cancel");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED,"Invalid new nickname.");
					ShowPlayerDialog(playerid, DIALOG_CHANGENAME2, DIALOG_STYLE_INPUT, "Change name:", "An admin forced you to change your nickname.\n\nPlease enter your desired name below:", "Ok", "Cancel");
				}
			}
			else return ShowPlayerDialog(playerid, DIALOG_CHANGENAME2, DIALOG_STYLE_INPUT, "Change name:", "An admin forced you to change your nickname.\n\nPlease enter your desired name below:", "Ok", "Cancel");
		}
	if(dialogid == DIALOG_SEXSHOP)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-100);
				BizzInfo[InBussines[playerid]][bTill] += 100;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
				GivePlayerWeaponEx(playerid, 10, 1);
			}
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-100);
				BizzInfo[InBussines[playerid]][bTill] += 100;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
				GivePlayerWeaponEx(playerid, 11, 1);
			}
			if(listitem == 2)
			{
				if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-100);
				BizzInfo[InBussines[playerid]][bTill] += 100;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
				GivePlayerWeaponEx(playerid, 13, 1);
			}
			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-100);
				BizzInfo[InBussines[playerid]][bTill] += 100;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
				GivePlayerWeaponEx(playerid, 12, 1);
			}
			if(listitem == 4)
			{
				if(GetPlayerCash(playerid) <= 149) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-150);
				BizzInfo[InBussines[playerid]][bTill] += 150;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$150", 3000, 1);
				GivePlayerWeaponEx(playerid, 14, 1);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BAR)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) <= 49) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-50);
				BizzInfo[InBussines[playerid]][bTill] += 50;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$50", 3000, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
			}
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) <= 49) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-50);
				BizzInfo[InBussines[playerid]][bTill] += 50;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$50", 3000, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
			if(listitem == 2)
			{
				if(GetPlayerCash(playerid) <= 59) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				if(PlayerDrunk[playerid] > 9) return SendClientMessage(playerid, COLOR_WHITE, "You are drunk.");
				new str[184];
				GivePlayerCash(playerid,-60);
				BizzInfo[InBussines[playerid]][bTill] += 60;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$60", 3000, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
				PlayerDrunk[playerid] += 1;
			}
			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				if(PlayerDrunk[playerid] > 9) return SendClientMessage(playerid, COLOR_WHITE, "You are drunk.");
				new str[184];
				GivePlayerCash(playerid,-100);
				BizzInfo[InBussines[playerid]][bTill] += 100;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
				PlayerDrunk[playerid] += 1;
			}
		}
		return 1;
	}
    if(dialogid == Dialog_24)
	{
	    if(response)
	    {
	        new bid = InBussines[playerid];
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) <= 499) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				if(PlayerInfo[playerid][pPhone] == 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You have an iPhone.");
			    new str[184],randphone;
			    GivePlayerCash(playerid,-500);
				BizzInfo[bid][bTill] += 500;
    			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
			    GameTextForPlayer(playerid, "~r~-$500", 3000, 1);
				do
				{
					randphone = 10000 + random(89999);
					PlayerInfo[playerid][pPnumber] = randphone;
				}
				while(NumberUsed(playerid));
			    format(string, sizeof(string), "You have purchased a cell phone! Your number is %d.", randphone);
			    SendClientMessage(playerid, COLOR_WHITE, string);
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`PhoneNr`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pPnumber],PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			    return 1;
            }
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) <= 49) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
			    GivePlayerCash(playerid,-50);
				BizzInfo[bid][bTill] += 50;
			    GameTextForPlayer(playerid, "~r~-$50", 3000, 1);
                PlayerInfo[playerid][pPhoneBook] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "You have purchased a phonebook. Use /number to trace a number down!");
	 	 		new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Phonebook`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pPhoneBook],PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
			    return 1;
            }
			if(listitem == 2)
	    	{
				if(GetPlayerCash(playerid) <= 499) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
				if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
				if(PlayerInfo[playerid][pCredits] > 1000) return SCM(playerid,COLOR_WHITE,"You have too many credits.");
				if(GetPlayerCash(playerid) < 500) return SCM(playerid,COLOR_WHITE,"You don't have enough money.");
				GivePlayerCash(playerid, - 500);
    		    BizzInfo[bid][bTill] += 500;
			    PlayerInfo[playerid][pCredits] += 300;
			    GameTextForPlayer(playerid, "~r~-$500", 3000, 1);
				SCM(playerid,COLOR_WHITE,"You have purchased a phone credit voucher.");
				Update(playerid, pCashx);
				Update(playerid, pCreditsx);
				new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
				return 1;
			}
	    	if(listitem == 3)
			{
				if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
    		    GivePlayerCash(playerid, - 2000);
    		    BizzInfo[bid][bTill] += 2000;
		        PlayerInfo[playerid][pWTalkie] = 1;
			    GameTextForPlayer(playerid, "~r~-$2,000", 3000, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "You have purchased a walkie talkie - use /setfrequency to tune it, and /wt to speak.");
	 	 		new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`WTalkie`='1' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
			    return 1;
	    	}
			if(listitem == 4)
			{
				if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
    		    GivePlayerCash(playerid, - 2000);
    		    BizzInfo[bid][bTill] += 2000;
			    GameTextForPlayer(playerid, "~r~-$2,000", 3000, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "You have purchased a digital camera.");
				GivePlayerWeaponEx(playerid, 43, 60);
	 	 		new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
			    return 1;
	    	}
			if(listitem == 5)
			{
				if(GetPlayerCash(playerid) <= 4999) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
    		    GivePlayerCash(playerid, - 5000);
    		    BizzInfo[bid][bTill] += 5000;
			    GameTextForPlayer(playerid, "~r~-$5,000", 3000, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "You have purchased a gas can.");
				PlayerInfo[playerid][pGasCan] = 1;
				Update(playerid, pGasCanx);
	 	 		new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
			    return 1;
	    	}
			else
    		{
		    	SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
			}
		}
    	return 1;
	}
	if(dialogid == DIALOG_CANCELJOB)
	{
	    if(response)
	    {
	        Trucker[playerid] = 0;
	        Trucker2[playerid] = 0;
	        DestroyVehicle(viddd[playerid]);
	        viddd[playerid] = 0;
	        SetVehicleToRespawn(TruckID[playerid]);
	        TruckID[playerid] = 0;
	        DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, COLOR_WHITE, "You have disabled your current checkpoint.");
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUCKSELECTX)
	{
	    if(response)
	    {
			if(Trucker4[playerid] == 1)
			{
                SetTimerEx("Truckerr1", 200, 0, "i",playerid);
			}
			else if(Trucker4[playerid] == 2)
			{
			    SetTimerEx("Truckerr2", 200, 0, "i",playerid);
			}
			else if(Trucker4[playerid] == 3)
			{
			    SetTimerEx("Truckerr3", 200, 0, "i",playerid);
			}
			else if(Trucker4[playerid] == 4)
			{
			    SetTimerEx("Truckerr4", 200, 0, "i",playerid);
			}
			Trucker4[playerid] = 0;
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUCKSELECT)
	{
	    if(response)
	    {
	        new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx("AttachTrailerrr", 1000, 0, "i", playerid);
			Trucker2[playerid] = 0;
			SendClientMessage(playerid, COLOR_BLUE, "Mergi la checkpointul de pe minimap pentru a livra marfa.");
			DisablePlayerCheckpoint(playerid);
	        if(Trucker3[playerid] == 1)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[2][0],CHKTruck[2][1],CHKTruck[2][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 1;
			}
			else if(Trucker3[playerid] == 2)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[4][0],CHKTruck[4][1],CHKTruck[4][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 2;
			}
			else if(Trucker3[playerid] == 3)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[11][0],CHKTruck[11][1],CHKTruck[11][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 3;
			}
			else if(Trucker3[playerid] == 4)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[10][0],CHKTruck[10][1],CHKTruck[10][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 4;
			}
			else if(Trucker3[playerid] == 5)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[7][0],CHKTruck[7][1],CHKTruck[7][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 5;
			}
			else if(Trucker3[playerid] == 6)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[6][0],CHKTruck[6][1],CHKTruck[6][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 6;
			}
			else if(Trucker3[playerid] == 7)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[8][0],CHKTruck[8][1],CHKTruck[8][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 7;
			}
			else if(Trucker3[playerid] == 8)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[9][0],CHKTruck[9][1],CHKTruck[9][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 8;
			}
			else if(Trucker3[playerid] == 9)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[3][0],CHKTruck[3][1],CHKTruck[3][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 9;
			}
			else if(Trucker3[playerid] == 10)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[5][0],CHKTruck[5][1],CHKTruck[5][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 10;
			}
			else if(Trucker3[playerid] == 11)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[12][0],CHKTruck[12][1],CHKTruck[12][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 11;
			}
			else if(Trucker3[playerid] == 12)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[13][0],CHKTruck[13][1],CHKTruck[13][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 12;
			}
			else if(Trucker3[playerid] == 13)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[17][0],CHKTruck[17][1],CHKTruck[17][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 13;
			}
			else if(Trucker3[playerid] == 14)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[15][0],CHKTruck[15][1],CHKTruck[15][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 14;
			}
			else if(Trucker3[playerid] == 15)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[16][0],CHKTruck[16][1],CHKTruck[16][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 15;
			}
			else if(Trucker3[playerid] == 16)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[14][0],CHKTruck[14][1],CHKTruck[14][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 16;
			}
			Trucker3[playerid] = 0;
		}
		else
		{
			SetTimerEx("Truckerr1", 200, 0, "i",playerid);
		}
	}
	if(dialogid == DIALOG_TRUCKSELECT2)
	{
	    if(response)
	    {
     		new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx("AttachTrailerrr", 1000, 0, "i", playerid);
			Trucker2[playerid] = 0;
			SendClientMessage(playerid, COLOR_BLUE, "Mergi la checkpointul de pe minimap pentru a livra marfa.");
			DisablePlayerCheckpoint(playerid);
			if(Trucker3[playerid] == 1)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[11][0],CHKTruck[11][1],CHKTruck[11][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 3;
			}
			else if(Trucker3[playerid] == 2)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[10][0],CHKTruck[10][1],CHKTruck[10][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 4;
			}
			else if(Trucker3[playerid] == 3)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[7][0],CHKTruck[7][1],CHKTruck[7][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 5;
			}
			else if(Trucker3[playerid] == 4)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[6][0],CHKTruck[6][1],CHKTruck[6][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 6;
			}
			else if(Trucker3[playerid] == 5)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[8][0],CHKTruck[8][1],CHKTruck[8][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 7;
			}
			else if(Trucker3[playerid] == 6)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[9][0],CHKTruck[9][1],CHKTruck[9][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 8;
			}
			else if(Trucker3[playerid] == 7)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[0][0],CHKTruck[0][1],CHKTruck[0][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 17;
			}
			else if(Trucker3[playerid] == 8)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[12][0],CHKTruck[12][1],CHKTruck[12][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 11;
			}
			else if(Trucker3[playerid] == 9)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[13][0],CHKTruck[13][1],CHKTruck[13][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 12;
			}
			else if(Trucker3[playerid] == 10)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[17][0],CHKTruck[17][1],CHKTruck[17][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 13;
			}
			else if(Trucker3[playerid] == 11)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[15][0],CHKTruck[15][1],CHKTruck[15][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 14;
			}
			else if(Trucker3[playerid] == 12)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[16][0],CHKTruck[16][1],CHKTruck[16][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 15;
			}
			Trucker3[playerid] = 0;
		}
		else
		{
			SetTimerEx("Truckerr2", 200, 0, "i",playerid);
		}
	}
	if(dialogid == DIALOG_TRUCKSELECT3)
	{
	    if(response)
	    {
	        new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx("AttachTrailerrr", 1000, 0, "i", playerid);
			Trucker2[playerid] = 0;
			SendClientMessage(playerid, COLOR_BLUE, "Mergi la checkpointul de pe minimap pentru a livra marfa.");
			DisablePlayerCheckpoint(playerid);
	        if(Trucker3[playerid] == 1)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[2][0],CHKTruck[2][1],CHKTruck[2][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 1;
			}
			else if(Trucker3[playerid] == 2)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[4][0],CHKTruck[4][1],CHKTruck[4][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 2;
			}
			else if(Trucker3[playerid] == 3)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[3][0],CHKTruck[3][1],CHKTruck[3][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 9;
			}
			else if(Trucker3[playerid] == 4)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[5][0],CHKTruck[5][1],CHKTruck[5][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 10;
			}
			else if(Trucker3[playerid] == 5)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[1][0],CHKTruck[1][1],CHKTruck[1][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 18;
			}
			else if(Trucker3[playerid] == 6)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[0][0],CHKTruck[0][1],CHKTruck[0][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 17;
			}
			else if(Trucker3[playerid] == 7)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[12][0],CHKTruck[12][1],CHKTruck[12][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 11;
			}
			else if(Trucker3[playerid] == 8)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[13][0],CHKTruck[13][1],CHKTruck[13][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 12;
			}
			else if(Trucker3[playerid] == 9)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[17][0],CHKTruck[17][1],CHKTruck[17][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 13;
			}
			else if(Trucker3[playerid] == 10)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[15][0],CHKTruck[15][1],CHKTruck[15][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 14;
			}
			else if(Trucker3[playerid] == 11)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[16][0],CHKTruck[16][1],CHKTruck[16][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 15;
			}
			else if(Trucker3[playerid] == 12)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[14][0],CHKTruck[14][1],CHKTruck[14][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 16;
			}
			Trucker3[playerid] = 0;
		}
		else
		{
			SetTimerEx("Truckerr3", 200, 0, "i",playerid);
		}
	}
	if(dialogid == DIALOG_TRUCKSELECT4)
	{
	    if(response)
	    {
	        new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx("AttachTrailerrr", 1000, 0, "i", playerid);
			Trucker2[playerid] = 0;
			SendClientMessage(playerid, COLOR_BLUE, "Mergi la checkpointul de pe minimap pentru a livra marfa.");
			DisablePlayerCheckpoint(playerid);
	        if(Trucker3[playerid] == 1)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[2][0],CHKTruck[2][1],CHKTruck[2][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 1;
			}
			else if(Trucker3[playerid] == 2)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[4][0],CHKTruck[4][1],CHKTruck[4][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 2;
			}
			else if(Trucker3[playerid] == 3)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[11][0],CHKTruck[11][1],CHKTruck[11][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 3;
			}
			else if(Trucker3[playerid] == 4)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[10][0],CHKTruck[10][1],CHKTruck[10][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 4;
			}
			else if(Trucker3[playerid] == 5)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[7][0],CHKTruck[7][1],CHKTruck[7][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 5;
			}
			else if(Trucker3[playerid] == 6)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[6][0],CHKTruck[6][1],CHKTruck[6][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 6;
			}
			else if(Trucker3[playerid] == 7)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[8][0],CHKTruck[8][1],CHKTruck[8][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 7;
			}
			else if(Trucker3[playerid] == 8)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[9][0],CHKTruck[9][1],CHKTruck[9][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 8;
			}
			else if(Trucker3[playerid] == 9)
	        {
         		SetPlayerCheckpoint(playerid,CHKTruck[3][0],CHKTruck[3][1],CHKTruck[3][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 9;
			}
			else if(Trucker3[playerid] == 10)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[5][0],CHKTruck[5][1],CHKTruck[5][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 10;
			}
			else if(Trucker3[playerid] == 11)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[1][0],CHKTruck[1][1],CHKTruck[1][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 18;
			}
			else if(Trucker3[playerid] == 12)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[0][0],CHKTruck[0][1],CHKTruck[0][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 17;
			}
			Trucker3[playerid] = 0;
		}
		else
		{
			SetTimerEx("Truckerr4", 200, 0, "i",playerid);
		}
	}
	if(dialogid == DIALOG_TRUCKER1)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
	            Trucker3[playerid] = 1;
			}
			if(listitem == 1)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 2;
				}
			}
			if(listitem == 2)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 3;
				}
			}
			if(listitem == 3)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 4;
				}
			}
			if(listitem == 4)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 5;
			}
			if(listitem == 5)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 6;
				}
			}
			if(listitem == 6)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 7;
			}
			if(listitem == 7)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 8;
			}
			if(listitem == 8)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 9;
			}
			if(listitem == 9)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 10;
				}
			}
			if(listitem == 10)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 11;
			}
			if(listitem == 11)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 12;
				}
			}
			if(listitem == 12)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 13;
			}
			if(listitem == 13)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 14;
				}
			}
			if(listitem == 14)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 15;

				}
			}
			if(listitem == 15)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 16;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUCKER2)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 1;

				}
			}
			if(listitem == 1)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 2;

				}
			}
			if(listitem == 2)
	        {
	           	format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 3;
			}
			if(listitem == 3)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 4;
				}
			}
			if(listitem == 4)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 5;
			}
			if(listitem == 5)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 6;
			}
			if(listitem == 6)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 7;
				}
			}
			if(listitem == 7)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 8;
			}
			if(listitem == 8)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 9;
				}
			}
			if(listitem == 9)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 10;
			}
			if(listitem == 10)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 11;

				}
			}
			if(listitem == 11)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 12;

				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUCKER3)
	{
	    if(response)
	    {
			if(listitem == 0)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 1;
			}
			if(listitem == 1)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 2;

				}
			}
			if(listitem == 2)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 3;
			}
			if(listitem == 3)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 4;

				}
			}
			if(listitem == 4)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 5;
			}
			if(listitem == 5)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 6;
				}
			}
			if(listitem == 6)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 7;
			}
			if(listitem == 7)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 8;
				}
			}
			if(listitem == 8)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 9;
			}
			if(listitem == 9)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 10;

				}
			}
			if(listitem == 10)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 11;

				}
			}
			if(listitem == 11)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 12;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUCKER4)
	{
	    if(response)
	    {
			if(listitem == 0)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 1;
			}
			if(listitem == 1)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 2;

				}
			}
			if(listitem == 2)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 3;

				}
			}
			if(listitem == 3)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 4;

				}
			}
			if(listitem == 4)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 5;
			}
			if(listitem == 5)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 6;
				}
			}
			if(listitem == 6)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 7;
			}
			if(listitem == 7)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 8;
			}
			if(listitem == 8)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 9;
			}
			if(listitem == 9)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 10;

				}
			}
			if(listitem == 10)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 11;
			}
			if(listitem == 11)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 12;
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_SELLFISH)
	{
	    if(response)
	    {
			GivePlayerCash(playerid, PlayerInfo[playerid][pFishPrice]);
			Update(playerid, pCashx);
			format(string,sizeof(string),"Ai vandut pestele pentru $%d.", PlayerInfo[playerid][pFishPrice]);
			SendClientMessage(playerid, COLOR_GREEN, string);
			PlayerInfo[playerid][pFishPrice] = 0;
			PlayerInfo[playerid][pFishes] = 0;
			PlayerInfo[playerid][pFishTimes]++;
			PlayerInfo[playerid][pFishRem]--;
			Update(playerid,pFishTimesx);
			Update(playerid,pFishRemx);
			if(PlayerInfo[playerid][pQuest1] == 6)
			{
				if(PlayerInfo[playerid][pQuestNeed1] > PlayerInfo[playerid][pQuestProgress1])
				{
					PlayerInfo[playerid][pQuestProgress1]++;
					Update(playerid, pQuestProgress1x);
					if(PlayerInfo[playerid][pQuestProgress1] >= PlayerInfo[playerid][pQuestNeed1])
					{
						FinishQuest1(playerid, 6);
					}
					else
					{
						new str[128];
						if(PlayerInfo[playerid][pLanguage] == 1)
						{
							format(str, sizeof(str),"Quest [Catch and sell %d fish] progress: %d/%d",PlayerInfo[playerid][pQuestNeed1],PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
							SendClientMessage(playerid, COLOR_YELLOW, str);
						}
						else
						{
							format(str, sizeof(str),"Progres pentru misiunea [Vinde %d pesti]: %d/%d",PlayerInfo[playerid][pQuestNeed1],PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
							SendClientMessage(playerid, COLOR_YELLOW, str);
						}
					}
				}
			}
			if(PlayerInfo[playerid][pFishSkill] <= 5)
			{
				if(PlayerInfo[playerid][pFishRem] <= 0)
				{
					PlayerInfo[playerid][pFishSkill]++;
					if(PlayerInfo[playerid][pFishSkill] == 2)
					{
						PlayerInfo[playerid][pFishRem] = 34;
					}
					else if(PlayerInfo[playerid][pFishSkill] == 3)
					{
						PlayerInfo[playerid][pFishRem] = 49;
					}
					else if(PlayerInfo[playerid][pFishSkill] == 4)
					{
						PlayerInfo[playerid][pFishRem] = 89;
					}
					else if(PlayerInfo[playerid][pFishSkill] == 5)
					{
						PlayerInfo[playerid][pFishRem] = 99;
					}
					Update(playerid,pFishSkillx);
					Update(playerid,pFishRemx);
					new stringe[128];
					format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pFishSkill]);
					format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pFishSkill]);
					SS(playerid, COLOR_YELLOW, string, stringe);
					SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
		}
		return 1;
	}
    if(dialogid == Dialog_Gym)
	{
	    if(response)
	    {
	        new str[256];
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) <= 5999) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
                GivePlayerCash(playerid, -6000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
				SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$6,000", 3000, 1);
				Update(playerid, pCashx);
                PlayerInfo[playerid][pFightStyle] = 1;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 6000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
                GivePlayerCash(playerid, -10000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
				SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
				Update(playerid, pCashx);
                PlayerInfo[playerid][pFightStyle] = 2;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 10000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
			if(listitem == 2)
			{
				if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
                GivePlayerCash(playerid, -10000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
				SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
				Update(playerid, pCashx);
				PlayerInfo[playerid][pFightStyle] = 3;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 10000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
                GivePlayerCash(playerid, -10000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
				SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
				Update(playerid, pCashx);
				PlayerInfo[playerid][pFightStyle] = 4;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 10000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
			if(listitem == 4)
			{
				if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
                GivePlayerCash(playerid, -10000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
				SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
				Update(playerid, pCashx);
				PlayerInfo[playerid][pFightStyle] = 5;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 10000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
			if(listitem == 5)
			{
				if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
                GivePlayerCash(playerid, -2000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
				SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$2,000", 3000, 1);
				Update(playerid, pCashx);
				PlayerInfo[playerid][pFightStyle] = 0;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 2000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
		}
    	return 1;
	}
    if(dialogid == DIALOG_LOGIN2 || dialogid == DIALOG_LOGIN3)
	{
		if(response)
		{
			if(strlen(inputtext))
			{
				new tmppass[129];
				mysql_real_escape_string(inputtext, tmppass);
				OnPlayerLogin(playerid,tmppass);
			}
			else
			{
				new stringyy[320];
				gPlayerLogTries[playerid] -= 1;
				if(gPlayerLogTries[playerid] == 1 || gPlayerLogTries[playerid] == 0)
				{
					format(stringyy,sizeof(stringyy),"Incorrect password. You have %d remaining login attempts left.", gPlayerLogTries[playerid]);
					SendClientMessage(playerid, COLOR_RED2, stringyy);
				}
				ShowPlayerDialog(playerid,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"SERVER: Login","Welcome to the ForEver RPG Server.\n\nPlease enter your password below!","Login","Cancel");
				if(gPlayerLogTries[playerid] == -1)
				{
					new stringkick[256],loginname[30];
					GetPlayerName(playerid, loginname, sizeof(loginname));
					format(stringkick, sizeof(stringkick), "AdmWarn: {FFFFFF}%s has been kicked for entering the wrong password 2 times.",loginname);
					ABroadCast(COLOR_RED2,stringkick,1);
					SendClientMessage(playerid, COLOR_RED2, "You have used all available login attempts.");
					KickEx(playerid);
				}
			}
		}
		else return KickEx(playerid);
	}
    if(dialogid == DIALOG_LOGIN1)
	{
		if(response)
		{
			if(strlen(inputtext) > 3)
			{
				OnPlayerRegister(playerid,inputtext);
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_LOGIN1,DIALOG_STYLE_PASSWORD,"SERVER: Registration","Your password must exceed 4 characters!\n\nWelcome to the ForEver RPG Server.\n\nPlease enter your desired password below!","Register","Cancel");
			}
		}
		else return ShowPlayerDialog(playerid,DIALOG_LOGIN1,DIALOG_STYLE_PASSWORD,"SERVER: Registration","Welcome to the ForEver RPG Server.\n\nPlease enter your desired password below!","Register","Cancel");
 	}
 	if(dialogid == DIALOG_REPORT1)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new string1[256], string2[256], string3[256], string4[256], string5[256],  string6[256], string7[256], string8[256], string9[256], string10[256], string11[256], string12[1024];
			    format(string1, sizeof(string1), "Cont blocat");
			    format(string2, sizeof(string2), "Daca ai contul blocat automat va trebui sa astepti 72 de ore pana cand va fi deblocat.");
				format(string3, sizeof(string3), "Daca ai contul blocat de catre un admin, deschide un tichet pe panel.ForEver RPG.ro");
			    format(string4, sizeof(string4), "De acolo vei putea deschide un ticket pentru a discuta cu adminii despre ce a cauzat blocarea contului tau.");
			    format(string5, sizeof(string5), "Adminii NU iti vor debloca contul din joc. Nu are rost sa intrebi pe /report cum poti sa iti deblochezi contul. Nu vei primi raspuns.");
			    format(string6, sizeof(string6), "Cont spart");
			    format(string7, sizeof(string7), "Daca ai contul spart, tot ce poti face e sa deschizi un ticket si sa astepti un raspuns. De obicei se primesc raspunsuri in mai putin de 24 ore.");
			    format(string8, sizeof(string8), "Daca ti-a fost spart contul e DOAR vina ta. Nu sunt adminii vinovati si nimeni nu are vreo obligatie de a te ajuta.");
			    format(string9, sizeof(string9), "Totusi, incercam sa ajutam playerii ce pot fi ajutati. Deci, deschide un ticket si asteapta un raspuns.");
			    format(string10, sizeof(string10), "Pentru a deschide un ticket, intra pe panel.ForEver RPG.ro > Ticket > Deschide ticket nou.");
			    format(string11, sizeof(string11), "NU da /report pentru a zice adminilor sa raspunda mai repede la tickete. Vei primi suspend pe /report si atat.");
     			format(string12, sizeof(string12), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s",string1,string2,string3,string4,string5,string6,string7,string8,string9,string10,string11);
     			ShowPlayerDialog(playerid, DIALOG_REPORT2, DIALOG_STYLE_MSGBOX, "Cont blocat", string12, "Inchide","");
			}
			if(listitem == 1)
			{
   				ShowPlayerDialog(playerid, DIALOG_REPORTDM1, DIALOG_STYLE_LIST, "Raportare DM", "Nu stiu numele playerului care m-a atacat\nStiu ID-ul playerului care m-a atacat", "Selecteaza","Inapoi");
			}
			if(listitem == 2)
			{
   				ShowPlayerDialog(playerid, DIALOG_REPORTCH1, DIALOG_STYLE_LIST, "Raportare Cheater", "Nu stiu numele playerului ce foloseste cheat-uri\nStiu ID-ul playerului ce foloseste cheat-uri", "Selecteaza","Inapoi");
			}
			if(listitem == 3)
			{
			    new string1[256], string2[256], string3[512];
			    format(string1, sizeof(string1), "Singurele metode de plata sunt: Paysafecard si Paypal. Probabil in viitor vor fi adaugate mai multe metode de plata.\nNu se pot face plati prin SMS, coduri de reincarcare, conturi steam, webmoney sau alte metode, in afara de Paysafecard si Paypal.\nSingurele lucruri pe care le poti cumpara cu puncte premium pot fi gasite pe panel.ForEver RPG.ro/premium.");
			    format(string2, sizeof(string2), "Contul premium costa 60 de puncte premium (25 de lei paysafecard). Detalii poti gasi pe panel.ForEver RPG.ro/premium.\nDaca ai o problema cu platile, te rugam sa deschizi un tichet pe user panel (panel.ForEver RPG.ro/tickets).");
     			format(string3, sizeof(string3), "%s\n%s",string1,string2);
     			ShowPlayerDialog(playerid, DIALOG_REPORT2, DIALOG_STYLE_MSGBOX, "Donatii/Plati", string3, "Inchide","");
			}
			if(listitem == 4)
			{
				new string1[128],playername[30];
				if(ReportTime[playerid] == 1) return SCM(playerid, COLOR_WHITE,"{f03337}Dupa un minut poti folosi aceasta actiune.");
				GetPlayerName(playerid, playername, sizeof(playername));
				SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
   				format(string1,sizeof(string1),"%s [%d] is stuck.",playername,playerid);
				format(reporttext[playerid], sizeof(string1), string1);
				reportreason[playerid] = 1;
				ABroadCast(COLOR_REPORT,string1,1);
				HLChat(COLOR_REPORT,string1);
				ReportTime[playerid] = 1;
				timerreport[playerid] = SetTimerEx("Reportul", 60000, 0, "%d", playerid);
			}
			if(listitem == 5)
			{
				new string1[128],playername[30];
				if(ReportTime[playerid] == 1) return SCM(playerid, COLOR_WHITE,"{f03337}Dupa un minut poti folosi aceasta actiune.");
				GetPlayerName(playerid, playername, sizeof(playername));
				SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
   				format(string1,sizeof(string1),"Report from %s [%d, level %d]: Am nevoie de un admin pt o afacere!",playername,playerid,PlayerInfo[playerid][pLevel]);
				format(reporttext[playerid], sizeof(string1), string1);
				ABroadCast(COLOR_REPORT,string1,1);
				HLChat(COLOR_REPORT,string1);
				ReportTime[playerid] = 1;
				timerreport[playerid] = SetTimerEx("Reportul", 60000, 0, "%d", playerid);
			}
			if(listitem == 6)
			{
   				ShowPlayerDialog(playerid, DIALOG_REPORT_AP1, DIALOG_STYLE_INPUT, "Alta problema", "Scrie mai jos problema pe care o ai.\nNu scrie 'am nevoie de un admin', scrie exact ce problema ai.", "Trimite","Close");
			}
		}
	}
	if(dialogid == DIALOG_REPORTDM1)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, DIALOG_REPORTDM2, DIALOG_STYLE_INPUT, "Raportare player pentru DM", "Scrie mai jos in ce locatie sunt playerii care te-au atacat.", "Trimite","Inapoi");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_REPORTDM3, DIALOG_STYLE_INPUT, "Raportare player pentru DM", "Scrie mai jos ID-ul/numele playerului care te-a atacat.", "Trimite","Inapoi");
			}
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORT1, DIALOG_STYLE_LIST, "Report", "Contul meu este spart sau blocat\nRaporteaza DM\nRaporteaza un cheater\nIntrebari despre donatii\nSunt blocat/Cad prin mapa\nVreau sa fac o afacere si am nevoie de ajutor\nAlta problema", "OK", "Inchide");
		}
	}
	if(dialogid == DIALOG_REPORTCH1)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new string1[256], string2[256], string3[256], string4[1024];
			    format(string1, sizeof(string1), "Daca stii id-ul playerului ce foloseste cheat-uri, foloseste /cheat.");
			    format(string2, sizeof(string2), "Abuzul de aceasta optiune se sanctioneaza cu mute 2 ore pe /report.");
			    format(string3, sizeof(string3), "Scrie aici detalii despre playerul/playerii ce folosesc cheat-uri.");
			    format(string4, sizeof(string4), "%s\n%s\n%s",string1,string2,string3);
			    ShowPlayerDialog(playerid, DIALOG_REPORTCH2, DIALOG_STYLE_INPUT, "Raportare player pentru cheat-uri", string4, "Trimite","Inapoi");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_REPORTCH3, DIALOG_STYLE_MSGBOX, "Raportare player pentru cheat-uri", "Foloseste /cheat <id> <reason> pentru a raporta un player pentru chat-uri.", "Inchide","");
			}
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORT1, DIALOG_STYLE_LIST, "Report", "Contul meu este spart sau blocat\nRaporteaza DM\nRaporteaza un cheater\nIntrebari despre donatii\nSunt blocat/Cad prin mapa\nVreau sa fac o afacere si am nevoie de ajutor\nAlta problema", "OK", "Inchide");
		}
	}
	if(dialogid == DIALOG_REPORTDM2)
	{
	    if(response)
	    {
	    	if(ReportTime[playerid] == 1) return SCM(playerid, COLOR_WHITE,"{f03337}Dupa un minut poti folosi aceasta actiune.");
			//new sendername[MAX_PLAYER_NAME], string[300];
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
			format(string, sizeof(string), "Report from %s [%d, level %d]: %s", sendername,playerid,PlayerInfo[playerid][pLevel],inputtext);
			format(reporttext[playerid], sizeof(string), string);
			ABroadCast(COLOR_REPORT,string,1);
			HLChat(COLOR_REPORT,string);
			ReportTime[playerid] = 1;
  			timerreport[playerid] = SetTimerEx("Reportul", 60000, 0, "%d", playerid);
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORTDM1, DIALOG_STYLE_LIST, "Raportare DM", "Nu stiu numele playerului care m-a atacat\nStiu ID-ul playerului care m-a atacat", "Selecteaza","Inapoi");
		}
	}
	if(dialogid == DIALOG_REPORTDM3)
	{
		if(response)
		{
			if(ReportTime[playerid] == 1) return SCM(playerid, COLOR_WHITE,"{f03337}Dupa un minut poti folosi aceasta actiune.");
			//new sendername[MAX_PLAYER_NAME],string[300];
			if(!IsNumeric(inputtext)) return SCM(playerid, COLOR_WHITE,"Invalid ID.");
			new id = strval(inputtext),namee[30];
			if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_WHITE,"Player not connected.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(id, namee, sizeof(namee));
            SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
			format(string, sizeof(string), "%s [%d] was reported for DM by %s.", namee,id,sendername);
			format(reporttext[id], sizeof(string), string);
			reportreason[id] = 2;
			playerreported[playerid] = id;
			ABroadCast(COLOR_REPORT,string,1);
			HLChat(COLOR_REPORT,string);
			ReportTime[playerid] = 1;
	  		timerreport[playerid] = SetTimerEx("Reportul", 60000, 0, "%d", playerid);
		}
	  	else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORTDM1, DIALOG_STYLE_LIST, "Raportare DM", "Nu stiu numele playerului care m-a atacat\nStiu ID-ul playerului care m-a atacat", "Selecteaza","Inapoi");
		}
	}
	if(dialogid == DIALOG_REPORTCH2)
	{
	    if(response)
	    {
	    	if(ReportTime[playerid] == 1) return SCM(playerid, COLOR_WHITE,"{f03337}Dupa un minut poti folosi aceasta actiune.");
			//new sendername[MAX_PLAYER_NAME],string[300];
			GetPlayerName(playerid, sendername, sizeof(sendername));
            SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
			format(string, sizeof(string), "Report from %s [%d, level %d]: %s", sendername,playerid,PlayerInfo[playerid][pLevel],inputtext);
			format(reporttext[playerid], sizeof(string), string);
			ABroadCast(COLOR_REPORT,string,1);
			HLChat(COLOR_REPORT,string);
			ReportTime[playerid] = 1;
  			timerreport[playerid] = SetTimerEx("Reportul", 60000, 0, "%d", playerid);
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORTCH1, DIALOG_STYLE_LIST, "Raportare Cheater", "Nu stiu numele playerului ce foloseste cheat-uri\nStiu ID-ul playerului ce foloseste cheat-uri", "Selecteaza","Inapoi");
		}
	}
	if(dialogid == DIALOG_REPORT_AP1)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pAdmin] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are an admin/helper.");
			if(PlayerInfo[playerid][pHelper] == 0)
			{
				new question[128],count,var100[256],mesajx[200];
				mysql_real_escape_string(inputtext, question);
				if(PlayerInfo[playerid][pNewbieTimeout] == 0)
				{
					if(PlayerInfo[playerid][pNMuted] == 0)
					{
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Newbie %s: %s", sendername, question);
						SendClientMessage(playerid, COLOR_NEWBIE, string);
						mysql_real_escape_string(string, mesajx);
						foreach(new i : Player)
						{
							if(strcmp(PlayerInfo[i][pNewbieQuestion], "NULL", true)) count++;
						}
						if(count < 30)
						{
							format(PlayerInfo[playerid][pNewbieQuestion], 256, question);
							PlayerInfo[playerid][pNewbieTimeout] = 120;
							PlayerInfo[playerid][pFirstAnswer] = 1;
					 		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','n')", PlayerInfo[playerid][pSQLID], mesajx);
							mysql_tquery(SQL, var100, "", "");
						}
						else
						{
							SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Sunt prea multe intrebari ce asteapta raspuns de la helperii serverului. Nu poti pune o intrebare acum.");
							SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Incearca mai tarziu...");
							return 1;
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "You are muted from the newbie chat.");
				}
				else
				{
					format(string, sizeof(string), "Poti folosi /n peste %d secunde.", PlayerInfo[playerid][pNewbieTimeout]);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "You are an admin/helper.");
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORT1, DIALOG_STYLE_LIST, "Report", "Contul meu este spart sau blocat\nRaporteaza DM\nRaporteaza un cheater\nIntrebari despre donatii\nSunt blocat/Cad prin mapa\nVreau sa fac o afacere si am nevoie de ajutor\nAlta problema", "OK", "Inchide");
		}
	}
	// END REPORT SYSTEM
	return 1;
}

forward SetPlayerHealthEx(playerid, Float:health);
public SetPlayerHealthEx(playerid, Float:health)
{
	SetPlayerHealth(playerid, health);
	Health[playerid] = health;
	return 1;
}

forward GetPlayerHealthEx(playerid, &Float:health);
public GetPlayerHealthEx(playerid, &Float:health)
{
	health = Health[playerid];
	return 1;
}

forward SetPlayerArmourEx(playerid, Float:armour);
public SetPlayerArmourEx(playerid, Float:armour)
{
	SetPlayerArmour(playerid, armour);
	Armour[playerid] = armour;
	return 1;
}

forward GetPlayerArmourEx(playerid, &Float:armour);
public GetPlayerArmourEx(playerid, &Float:armour)
{
	armour = Armour[playerid];
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	new iswar = 0, attackers, defenders,no;
    if(GoChase[playerid] < 999) ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);

    for(new i = 1; i < sizeof(Turfs) && iswar == 0; i++)
    {
        attackers = WarInfo[i][wAttacker];
		defenders = WarInfo[i][wFaction];
        if(WarInfo[i][wTime] > 1 && attackers != 0 && defenders != 0)
        {
			if( (PlayerInfo[playerid][pMember] == attackers || PlayerInfo[playerid][pMember] == defenders) && (PlayerInfo[forplayerid][pMember] == attackers || PlayerInfo[forplayerid][pMember] == defenders) ) iswar = 1;
		}
    }

	if(PlayerInfo[playerid][pWantedLevel] >= 1 && IsACop(forplayerid) && OnDuty[forplayerid] == 1)
	{
		no = 1;
	}

	if(iswar == 1)
	{
		if( (PlayerInfo[playerid][pMember] == attackers || PlayerInfo[playerid][pMember] == defenders) && (PlayerInfo[forplayerid][pMember] == attackers || PlayerInfo[forplayerid][pMember] == defenders) )
		{
			SetPlayerMarkerForPlayer( playerid, forplayerid, GetPlayerColor( forplayerid ) );
			SetPlayerMarkerForPlayer( forplayerid, playerid, GetPlayerColor( playerid ) );
		}
		else
		{
			if(no == 0)
			{
				SetPlayerMarkerForPlayer( playerid, forplayerid, ( GetPlayerColor( forplayerid ) & 0xFFFFFF00 ) );
				SetPlayerMarkerForPlayer( forplayerid, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
			}
		}
	}
	else
	{
		if(no == 0)
		{
			SetPlayerMarkerForPlayer( playerid, forplayerid, ( GetPlayerColor( forplayerid ) & 0xFFFFFF00 ) );
			SetPlayerMarkerForPlayer( forplayerid, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
		}
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
    SetPlayerMarkerForPlayer( playerid, forplayerid, ( GetPlayerColor( forplayerid ) & 0xFFFFFF00 ) );
	SetPlayerMarkerForPlayer( forplayerid, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
		if(PlayerInfo[forplayerid][pCarID][v] == vehicleid)
		{
			SetVehicleParamsForPlayer(vehicleid,forplayerid,0,0);
		}
	}
	for(new vv; vv < MAX_VEHICLES; vv++)
	{
		if(vv == HireCar[forplayerid])
		{
			SetVehicleParamsForPlayer(vv,forplayerid,0,0);
		}
	}
	return 1;
}

// CAR SYSTEM
public IsAnOwnableCar(vehicleid)
{
	foreach(new i : Player)
	{
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
			if(PlayerInfo[i][pCarID][v] == vehicleid)
			{
				return 1;
			}
		}
	}
	return 0;
}

public InsertCar(playerid,stockid,premium)
{
    new string[256],sendername[25],total,idcar,premiump;
    new model = Stock[stockid][vModel];
	new value = Stock[stockid][vPrice];
    GetPlayerName(playerid,sendername,sizeof(sendername));
    BuyCar[playerid] = -1;
    if(GetPlayerCash(playerid) < value && premium == 0) return SCM(playerid,COLOR_GREY,"You don't have enough money to purchase this vehicle.");
	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
		if(PlayerInfo[playerid][pCar][v] != -1) total++;
	}
	if(total+1 > PlayerInfo[playerid][pCarSlots])
	{
		SendClientMessage(playerid, COLOR_GREY, "You can't buy any more cars. Sell one of your cars if you want to buy a new one. Normal players can own 2 cars. Premium players can own 4 cars.");
		return 1;
	}
	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
		if(PlayerInfo[playerid][pCar][v] == -1)
		{
			idcar = v;
			break;
		}
	}

	mysql_format(SQL, string, sizeof(string),"INSERT INTO cars (Model) VALUES (%d)", model);
    new Cache:ids = mysql_query(SQL,string);
	new idd = cache_insert_id();
	cache_delete(ids);

	PlayerInfo[playerid][pCar][idcar] = idd;

	if(model == 469 || model == 487 || model == 522 || model == 521 || model == 461 || model == 581 || model == 468 || model == 463 || model == 586 || model == 471 || model == 510 || model == 481 || model == 462 || model == 509)
	{
		PlayerInfo[playerid][pCarLocX][idcar] = 388.5440;
		PlayerInfo[playerid][pCarLocY][idcar] = -1522.2147;
		PlayerInfo[playerid][pCarLocZ][idcar] = 32.1853;
		PlayerInfo[playerid][pCarAngle][idcar] = 45.0;
		PlayerInfo[playerid][pCarLLocX][idcar] = 388.5440;
		PlayerInfo[playerid][pCarLLocY][idcar] = -1522.2147;
		PlayerInfo[playerid][pCarLLocZ][idcar] = 32.1853;
		PlayerInfo[playerid][pCarAngle2][idcar] = 45.0;
	}
	else
	{
		PlayerInfo[playerid][pCarLocX][idcar] = 284.5032;
		PlayerInfo[playerid][pCarLocY][idcar] = -1526.4036;
		PlayerInfo[playerid][pCarLocZ][idcar] = 24.3208;
		PlayerInfo[playerid][pCarAngle][idcar] = 45.0;
		PlayerInfo[playerid][pCarLLocX][idcar] = 284.5032;
		PlayerInfo[playerid][pCarLLocY][idcar] = -1526.4036;
		PlayerInfo[playerid][pCarLLocZ][idcar] = 24.3208;
		PlayerInfo[playerid][pCarAngle2][idcar] = 45.0;
	}
	if(premium == 0)
	{
		GivePlayerCash(playerid,-value);
		Update(playerid,pCashx);
		Stock[stockid][vStock]--;
		mysql_format(SQL, string, sizeof(string), "UPDATE stock SET Stock='%d' WHERE ID='%d'", Stock[stockid][vStock],stockid);
		mysql_tquery(SQL,string,"","");
	}
    PlayerInfo[playerid][pCarModel][idcar] = model;
	PlayerInfo[playerid][pCarColor1][idcar] = 1;
	PlayerInfo[playerid][pCarColor2][idcar] = 1;
	format(string,sizeof(string),"{FA5778}%d",(100000000 + random(9999999999)));
	CarVipName[playerid][idcar] = "";
    strmid(CarPlate[playerid][idcar], string, 0, 20, 255);
	strmid(CarOwner[playerid][idcar], PlayerInfo[playerid][pNormalName], 0, 50, 255);
	PlayerInfo[playerid][pCarLock][idcar] = 0;
	PlayerInfo[playerid][pCarInsPrice][idcar] = 5000;
	PlayerInfo[playerid][pCarIns][idcar] = 10;
	PlayerInfo[playerid][pCarKM][idcar] = 0.0;
	PlayerInfo[playerid][pCarKMLast][idcar] = 0;
	PlayerInfo[playerid][pCarVIP][idcar] = 0;
	PlayerInfo[playerid][pCarVipColors][idcar] = 0;
	PlayerInfo[playerid][pCarHP][idcar] = 1000.0;
	PlayerInfo[playerid][pCarDamage1][idcar] = 0;
	PlayerInfo[playerid][pCarDamage2][idcar] = 0;
	PlayerInfo[playerid][pCarDamage3][idcar] = 0;
	PlayerInfo[playerid][pCarDamage4][idcar] = 0;
	PlayerInfo[playerid][pCarGas][idcar] = 200;
	PlayerInfo[playerid][pCarPaintJ][idcar] = 6;
	PlayerInfo[playerid][pCarBlock][idcar] = 0;
	for(new s; s < 17; s++)
	{
		CarMod[playerid][idcar][s] = 0;
	}
	PlayerInfo[playerid][pCarBuyTime][idcar] = gettime();

	cUpdate(playerid, idcar, cModsx);
	cUpdate(playerid, idcar, cPaintJx);
	cUpdate(playerid, idcar, cLocationxx);
	cUpdate(playerid, idcar, cLocationyx);
	cUpdate(playerid, idcar, cLocationzx);
	cUpdate(playerid, idcar, cAnglex);
	cUpdate(playerid, idcar, cLocationx2x);
	cUpdate(playerid, idcar, cLocationy2x);
	cUpdate(playerid, idcar, cLocationz2x);
	cUpdate(playerid, idcar, cAngle2x);
	cUpdate(playerid, idcar, cColorOnex);
	cUpdate(playerid, idcar, cColorTwox);
	cUpdate(playerid, idcar, cValuex);
	cUpdate(playerid, idcar, cLicensex);
	cUpdate(playerid, idcar, cLockx);
	cUpdate(playerid, idcar, cInscarpricex);
	cUpdate(playerid, idcar, cInsurancecarx);
	cUpdate(playerid, idcar, cKMx);
	cUpdate(playerid, idcar, cDaysx);
	cUpdate(playerid, idcar, cHPx);
	cUpdate(playerid, idcar, cKMLastx);
	cUpdate(playerid, idcar, cDamage1x);
	cUpdate(playerid, idcar, cDamage2x);
	cUpdate(playerid, idcar, cDamage3x);
	cUpdate(playerid, idcar, cDamage4x);
	cUpdate(playerid, idcar, cGasx);
	cUpdate(playerid, idcar, cOwnerx);

    PlayerInfo[playerid][pCarID][idcar] = CreateVehicle(PlayerInfo[playerid][pCarModel][idcar],PlayerInfo[playerid][pCarLocX][idcar],PlayerInfo[playerid][pCarLocY][idcar],PlayerInfo[playerid][pCarLocZ][idcar],PlayerInfo[playerid][pCarAngle][idcar],1,1,-1);
    SetVehicleNumberPlate(PlayerInfo[playerid][pCarID][idcar],CarPlate[playerid][idcar]);
    Gas[PlayerInfo[playerid][pCarID][idcar]] = 200;

    LocateCar(PlayerInfo[playerid][pCarID][idcar], playerid);

    new disp[184],stringsss[256],numele[30];
	if(premium == 1)
	{
		if(model == 469) premiump = 220;
		if(model == 487) premiump = 300;
		if(model == 494 || model == 502 || model == 503 || model == 539) premiump = 250;
		format(disp,sizeof(disp),"You purchased a %s for %d premium points.",aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400],premiump);
		SCM(playerid,COLOR_RED,disp);
		PlayerInfo[playerid][pPremiumPoints] -= premiump;
		Update(playerid, pPremiumPointsx);
		SendClientMessage(playerid, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.");
		SendClientMessage(playerid, COLOR_GREY, "Your car has been respawned.");
	}
	else if(premium == 0)
	{
		format(disp,sizeof(disp),"(-) Congratulations! You purchased a %s for $%s.",aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400],FormatNumber(value));
		SCM(playerid,COLOR_GREEN,disp);
		SendClientMessage(playerid, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.");
		SendClientMessage(playerid, COLOR_GREY, "Your car has been respawned.");
	}
	GetPlayerName(playerid, numele, sizeof(numele));
	if(premium == 1)
	{
		format(stringsss,sizeof(stringsss),"%s [user:%d] bought a %s [car:%d] for %d premium points.",numele,PlayerInfo[playerid][pSQLID],aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400],PlayerInfo[playerid][pCar][idcar],premiump);
    }
	else if(premium == 0)
	{
		format(stringsss,sizeof(stringsss),"%s [user:%d] bought a %s [car:%d] for $%s.",numele,PlayerInfo[playerid][pSQLID],aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400],PlayerInfo[playerid][pCar][idcar],FormatNumber(value));
	}
	ABroadCast(COLOR_YELLOW,stringsss,1);
    new var100[256],string2[256];
	mysql_real_escape_string(stringsss, string2);
	mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string2);
	mysql_tquery(SQL,var100,"","");
	if(premium == 3)
	{
		PlayerInfo[playerid][pCarBlock][idcar] = 720;
		mysql_format(SQL, var100, sizeof(var100), "UPDATE `cars` SET `Event`='1', `Block`='720' WHERE `ID`='%d'", PlayerInfo[playerid][pCar][idcar]);
		mysql_tquery(SQL, var100, "", "");
	}
	masini++;
    return 1;
}

public cUpdate(playerid, id, type)
{
	new gQuery[1024];
	switch(type)
	{
		case cLocationxx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Locationx`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLocX][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLocationyx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Locationy`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLocY][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLocationzx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Locationz`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLocZ][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cAnglex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Angle`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarAngle][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cLocationx2x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Locationx2`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLLocX][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLocationy2x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Locationy2`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLLocY][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLocationz2x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Locationz2`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLLocZ][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cAngle2x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Angle2`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarAngle2][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cLockx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Lockk`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLock][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cInsurancecarx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Insurancecar`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarIns][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cInscarpricex:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Inscarprice`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarInsPrice][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cBlockx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Block`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarBlock][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cKMx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `KM`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarKM][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cKMLastx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `LastKM`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarKMLast][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cCarVIPx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `VIP`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarVIP][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cCarVipColorsx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `VipColors`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarVipColors][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cDaysx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `BuyTime`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarBuyTime][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cHPx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `HP`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarHP][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cGasx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Gas`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarGas][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cDamage1x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Damage1`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarDamage1][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cDamage2x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Damage2`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarDamage2][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cDamage3x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Damage3`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarDamage3][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cDamage4x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Damage4`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarDamage4][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cModsx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `mod1`='%d',`mod2`='%d',`mod3`='%d',`mod4`='%d',`mod5`='%d',`mod6`='%d',`mod7`='%d',`mod8`='%d',`mod9`='%d',`mod10`='%d',`mod11`='%d',`mod12`='%d',`mod13`='%d',`mod14`='%d',`mod15`='%d',`mod16`='%d',`mod17`='%d' WHERE `ID`='%d'",
			CarMod[playerid][id][0],
			CarMod[playerid][id][1],
			CarMod[playerid][id][2],
			CarMod[playerid][id][3],
			CarMod[playerid][id][4],
			CarMod[playerid][id][5],
			CarMod[playerid][id][6],
			CarMod[playerid][id][7],
			CarMod[playerid][id][8],
			CarMod[playerid][id][9],
			CarMod[playerid][id][10],
			CarMod[playerid][id][11],
			CarMod[playerid][id][12],
			CarMod[playerid][id][13],
			CarMod[playerid][id][14],
			CarMod[playerid][id][15],
			CarMod[playerid][id][16],
			PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLicensex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `License`='%s' WHERE `ID`='%d'",CarPlate[playerid][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cPaintJx:
        {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `PaintJ`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarPaintJ][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cColorOnex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `ColorOne`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarColor1][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cColorTwox:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `ColorTwo`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarColor2][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cOwnerx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Owner`='%s' WHERE `ID`='%d'",CarOwner[playerid][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	}
	return 1;
}

public SetVipText(playerid, idcar)
{
	new string[128];
	if(strlen(CarVipName[playerid][idcar]) > 0)
	{
		if(PlayerInfo[playerid][pCarVipColors][idcar] == 0) format(string, sizeof(string), "{FFFFFF}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 1) format(string, sizeof(string), "{FF0000}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 2) format(string, sizeof(string), "{640000}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 3) format(string, sizeof(string), "{00FF00}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 4) format(string, sizeof(string), "{004B01}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 5) format(string, sizeof(string), "{008DFF}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 6) format(string, sizeof(string), "{001AFF}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 7) format(string, sizeof(string), "{FFFF00}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 8) format(string, sizeof(string), "{FF6B00}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 9) format(string, sizeof(string), "{EB00FF}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 10) format(string, sizeof(string), "{590056}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 11) format(string, sizeof(string), "{8A8A8A}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 12) format(string, sizeof(string), "{000000}%s", CarVipName[playerid][idcar]); //=
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 13) format(string, sizeof(string), "{28B2E0}%s", CarVipName[playerid][idcar]); //--- Adaugate de DrooM!
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 14) format(string, sizeof(string), "{F20C9A}%s", CarVipName[playerid][idcar]); //=
		DestroyObject(vObject[PlayerInfo[playerid][pCarID][idcar]]);
		vObject[PlayerInfo[playerid][pCarID][idcar]] = CreateObject(19327,0,0,-1000,0,0,0,100);
		SetObjectMaterialText(vObject[PlayerInfo[playerid][pCarID][idcar]], string, 0, OBJECT_MATERIAL_SIZE_256x128, "Comic Sans MS", 18, 1, 0xFFFFFFFF, 0, 1);
		if(PlayerInfo[playerid][pCarModel][idcar] == 411) AttachObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], -0.029999, -1.974998, 0.233999, -84.824964, 0.000000, 0.000000);
		else if(PlayerInfo[playerid][pCarModel][idcar] == 541) AttachObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], 0.000000, -1.649998, 0.390999, -76.379989, 0.000000, 0.000000);
		else if(PlayerInfo[playerid][pCarModel][idcar] == 560) AttachObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], 0.000000, -0.614999, 0.799999, -88.439956, 0.000000, 0.000000);
		else if(PlayerInfo[playerid][pCarModel][idcar] == 451) AttachObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], 0.000000, -0.6, 0.56, 270.0, 0.0, 0.0);
		else if(PlayerInfo[playerid][pCarModel][idcar] == 480) AttachObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], 0.000000, -1.58, 0.27, 270.0, 0.0, 0.0);
	}
	return 1;
}

stock IsACBUGWeapon(playerid)
{
	if (IsPlayerConnected(playerid) && (gPlayerLogged[playerid] == 1))
	{
	    new wID = GetPlayerWeapon ( playerid ) ;
	    if (wID == 24 || wID == 25 || wID == 27 || wID == 34 ) return 1 ;
	}
	return 0 ;
}

stock GetPlayerID(playername[])
{
  	for(new i = 0; i <= MAX_PLAYERS; i++)
  	{
    	if(IsPlayerConnected(i))
    	{
      		new playername2[MAX_PLAYER_NAME];
      		GetPlayerName(i, playername2, sizeof(playername2));
      		if(strcmp(playername2, playername, true, strlen(playername)) == 0)
      		{
        		return i;
      		}
    	}
  	}
  	return INVALID_PLAYER_ID;
}

forward ClearWanted(playerid);
public ClearWanted(playerid)
{
	new string[80];
	format(string,sizeof(string),"None");
	strmid(WantedName[playerid], string, 0, strlen(string), 255);
	WantedReason[playerid] = 999;
	return 1;
}
/*		if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) ) // a valid offset, it's impossible that a offset bigger than 1000 is legit (also less than -1000.0 is impossible, not used by this hack, but still, let's check for it, just for the future, who knows what hacks will appear). The object with biggest offset is having ~700-800 radius.
		{
			return 1; // let's desynchronize that bullet, so players won't crash
}
	}
    return 1;
}*/
stock PutPlayerInVehicleEx(playerid,vehicleid,seatid)
{
	PlayerEnterTime[playerid]+=221;
	PutPlayerInVehicle(playerid,vehicleid,seatid);
	return 1;
}

stock RemovePlayerFromVehicleEx(playerid)
{
	PlayerEnterTime[playerid]+=221;
	RemovePlayerFromVehicle(playerid);
	return 1;
}

public OnQueryError( errorid, error[ ], callback[ ], query[ ], connectionHandle )
{
	print( "====================================================================" );
	printf( "Error ID: %d, Error: %s", errorid, error );
	printf( "Callback: %s", callback );
	printf( "gQuery: %s", query );
	print( "====================================================================" );
	return 1;
}
stock strmatch(const String1[], const String2[])
{
 	if ((strcmp(String1, String2, true, strlen(String2)) == 0) && (strlen(String2) == strlen(String1)))
 	{
  		return true;
 	}
 	else
 	{
  		return false;
 	}
}
stock SetPlayerPosEx(playerid, Float:X, Float:Y, Float:Z)
{
    SetPlayerPos(playerid, X, Y, Z);
    SetCameraBehindPlayer(playerid);
}
function NumIp(ip[], playerid)
{
 	new ips = 0;
  	foreach(new i : Player)
 	{
  		if(i == playerid) continue;
  		new playerip[16];
  		GetPlayerIp(i,playerip,sizeof(playerip));
		if(strmatch(ip, playerip)) ips++;
 	}
 	return ips;
}
function IsBotOnIP(ip[])
{
 	foreach(new i : Player)
	{
		new playerip[16];
		GetPlayerIp(i,playerip,sizeof(playerip));
		if(strmatch(ip, playerip) && IsBot[i] > 0) return 1;
	}
	return 0;
}

stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius) {

	new
		Float:Floats[3];

	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

AntiDeAMX()
{
	new a[][] =
 	{
 		"Unarmed (Fist)",
 		"Brass K"
 	};
	#pragma unused a
}

